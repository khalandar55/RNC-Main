{"version":3,"file":"index.js","sources":["../src/npc/faceUserSystem.ts","../src/utils/default-ui-components.ts","../src/utils/types.ts","../src/ui/resources.ts","../src/ui/index.ts","../src/utils/timerComponents.ts","../src/trigger/triggerSystem.ts","../src/npc/move.ts","../src/ui/bubble.ts","../src/npc/npc.ts"],"sourcesContent":["@Component('trackUserFlag')\nexport class TrackUserFlag {\n  lockXZRotation: boolean = false\n  active: boolean = false\n  rotSpeed: number\n  constructor(lockXZRotation?: boolean, rotSpeed?: number, active?: boolean) {\n    if (!faceUserAdded) {\n      addFaceUserSystem()\n    }\n\n    this.lockXZRotation = lockXZRotation ? lockXZRotation : false\n\n    this.rotSpeed = rotSpeed ? rotSpeed : 2\n\n    if (active) {\n      this.active = true\n    }\n  }\n}\n\nlet faceUserAdded: boolean = false\nconst player = Camera.instance\n\n// Rotates NPC to face the user during interaction\nexport function addFaceUserSystem() {\n  faceUserAdded = true\n\n  engine.addSystem(new FaceUserSystem())\n}\n\nclass FaceUserSystem implements ISystem {\n  private followingNPCs = engine.getComponentGroup(TrackUserFlag)\n  update(dt: number) {\n    for (let npc of this.followingNPCs.entities) {\n      let transform = npc.getComponent(Transform)\n      let trackUser = npc.getComponent(TrackUserFlag)\n      if (trackUser.active) {\n        // Rotate to face the player\n        let lookAtTarget = new Vector3(player.position.x, player.position.y, player.position.z)\n        let direction = lookAtTarget.subtract(transform.position)\n        transform.rotation = Quaternion.Slerp(\n          transform.rotation,\n          Quaternion.LookRotation(direction),\n          dt * trackUser.rotSpeed\n        )\n\n        if (trackUser.lockXZRotation) {\n          transform.rotation.x = 0\n          transform.rotation.z = 0\n        }\n      }\n    }\n  }\n}\n","import { ImageSection } from \"./types\"\n\nexport const canvas = new UICanvas()\ncanvas.visible = true\n\nexport let SFFont = new Font(Fonts.SanFrancisco)\n\nexport let SFHeavyFont = new Font(Fonts.SanFrancisco_Heavy)\n\nexport let lightTheme = new Texture('https://decentraland.org/images/ui/light-atlas-v3.png')\nexport let darkTheme = new Texture('https://decentraland.org/images/ui/dark-atlas-v3.png')\n\nexport let bubblesTexture = new Texture('https://decentraland.org/images/ui/dialog-bubbles.png')\n\n\nexport function setUVs(\n\tplane: PlaneShape,\n\t_uv00: Vector2,\n\t_uv10: Vector2,\n\t_uv11: Vector2,\n\t_uv01: Vector2\n  ) {\n\t//log(_uv00, _uv10, _uv11, _uv01)\n\tplane.uvs = [\n\t  _uv00.x,\n\t  _uv00.y,\n  \n\t  _uv10.x,\n\t  _uv10.y,\n  \n\t  _uv11.x,\n\t  _uv11.y,\n  \n\t  _uv01.x,\n\t  _uv01.y,\n\t  //----\n\t  _uv00.x,\n\t  _uv00.y,\n  \n\t  _uv10.x,\n\t  _uv10.y,\n  \n\t  _uv11.x,\n\t  _uv11.y,\n  \n\t  _uv01.x,\n\t  _uv01.y,\n\t]\n  }\n  \n  export function setUVSection(\n\tplane: PlaneShape,\n\tsection: ImageSection,\n\tsizeX: number = 512,\n\tsizeY: number = 512\n  ) {\n\tsetUVs(\n\t  plane,\n\t  new Vector2(\n\t\tsection.sourceLeft / sizeX,\n\t\t(sizeY - section.sourceTop - section.sourceHeight) / sizeY\n\t  ),\n\t  new Vector2(\n\t\t(section.sourceLeft + section.sourceWidth) / sizeX,\n\t\t(sizeY - section.sourceTop - section.sourceHeight) / sizeY\n\t  ),\n  \n\t  new Vector2(\n\t\t(section.sourceLeft + section.sourceWidth) / sizeX,\n\t\t(sizeY - section.sourceTop) / sizeY\n\t  ),\n\t  new Vector2(section.sourceLeft / sizeX, (sizeY - section.sourceTop) / sizeY)\n\t)\n  }\n  ","/**\n * Fragment of a conversation with an NPC\n *\n * @typedef {Object} Dialog - An entry in an NPC conversation\n * @property {string} text The dialog text\n * @property {string} name Optional name of the dialog entry, to link other entries to this one and not worry about changes in the array length\n * @property {number} fontSize Size of the text\n * @property {number} offsetX Offset of the text on the X axis, relative to its normal position.\n * @property {number} offsetY Offset of the text on the Y axis, relative to its normal position.\n * @property {ImageData} portrait Sets the portrait image to use on the left. This field expects a `Portrait` object.\n * @property {ImageData} image Sets a second image to use on the right of the dialog, and slightly up. This field expects an `ImageData` object.\n * @property {number} typeSpeed The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to _-1_ to skip the animation.\n * @property {boolean} isQuestion If true, allows to use buttons to trigger different actions\n * @property {boolean} isFixedScreen If true, has no buttons or \"next page\" functionality\n * @property {ButtonData[]} buttons An array of buttons `ButtonData` objects to use in a question entry\n * @property {string} audio Path to sound file to play when the dialog is shown in the UI\n * @property {boolean} skipable If true, a \"Skip\" button on the UI lets players skip to the next non-skipable entry.\n * @property {number} timeOn How long to keep the text visible before moving on to the next entry. Only for bubble dialogs!\n *\n */\nexport type Dialog = {\n  text: string\n  name?: string\n  fontSize?: number\n  offsetX?: number\n  offsetY?: number\n  typeSpeed?: number\n  isEndOfDialog?: boolean\n  triggeredByNext?: () => void\n  portrait?: ImageData\n  image?: ImageData\n  isQuestion?: boolean\n  isFixedScreen?: boolean\n  buttons?: ButtonData[]\n  audio?: string\n  skipable?: boolean\n  timeOn?: number\n}\n\n/**\n *\n * @typedef {Object} TriggerData - Object with data for a NPCTriggerComponent\n * @property {number} layer  layer of the Trigger, useful to discriminate between trigger events. You can set multiple layers by using a | symbol.\n * @property {number} triggeredByLayer against which layers to check collisions\n * @property {(entity: Entity) => void } onTriggerEnter callback when an entity of a valid layer enters the trigger area\n * @property {(entity: Entity) => void} onTriggerExit callback when an entity of a valid layer leaves the trigger area\n * @property {() => void} onCameraEnter callback when the player enters the trigger area\n * @property {() => void} onCameraExit callback when the player leaves the trigger area\n * @property {boolean} enableDebug when true makes the trigger area visible for debug purposes.\n */\nexport type TriggerData = {\n  layer?: number\n  triggeredByLayer?: number\n  onTriggerEnter?: (entity: Entity) => void\n  onTriggerExit?: (entity: Entity) => void\n  onCameraEnter?: () => void\n  onCameraExit?: () => void\n  enableDebug?: boolean\n}\n\n/**\n * Data for Button to show on a question in a Dialog entry\n *\n * @typedef {Object} ButtonData - Object with data for a Dialog UI button\n * @property {string|number} goToDialog The index or name of the next dialog entry to display when activated.\n * @property {string} label The label to show on the button.\n * @property {() => void} triggeredActions An additional function to run whenever the button is activated\n * @property {number} fontSize Font size of the text\n * @property {number}offsetX Offset of the text on the X axis, relative to its normal position.\n * @property {number} offsetY Offset of the text on the Y axis, relative to its normal position.\n *\n */\nexport type ButtonData = {\n  goToDialog: number | string\n  label: string\n  triggeredActions?: () => void\n  fontSize?: number\n  offsetX?: number\n  offsetY?: number\n}\n\nexport enum ButtonStyles {\n  E = `e`,\n  F = `f`,\n  DARK = `dark`,\n  RED = `red`,\n  ROUNDBLACK = `roundblack`,\n  ROUNDWHITE = `roundwhite`,\n  ROUNDSILVER = `roundsilver`,\n  ROUNDGOLD = `roundgold`,\n  SQUAREBLACK = `squareblack`,\n  SQUAREWHITE = `squarewhite`,\n  SQUARESILVER = `squaresilver`,\n  SQUAREGOLD = `squaregold`,\n  WHITE = `white`\n}\n\n/**\n * An NPC capable of having conversations with the player, and play different animations.\n *\n * @typedef {Object} NPCData Object with data to instance a new NPC\n * @property {string|ImageData} portrait 2D image to show on the left-hand side of the dialog window. The structure of an `ImageData` object is described in detail below.\n * @property {number} reactDistance Radius in meters for the player to activate the NPC or trigger the `onWalkAway()` function when leaving the radius.\n * @property {string} idleAnim Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.\n * @property {boolean} faceUser Set if the NPC rotates to face the user while active.\n * @property {boolean} onlyExternalTrigger If true, the NPC can't be activated by clicking or walking near. Just by calling its `activate()` function.\n * @property {boolean} onlyClickTrigger If true, the NPC can't be activated by walking near. Just by clicking on it or calling its `activate()` function.\n * @property {boolean} onlyETrigger If true, the NPC can't be activated by walking near. Just by pressing E on it or calling its `activate()` function.\n * @property {() => void} onWalkAway Function to call every time the player walks out of the `reactDistance` radius.\n * @property {boolean} continueOnWalkAway f true,when the player walks out of the `reactDistance` radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the `onWalkAway()` function.\n * @property {boolean} darkUI If true, the dialog UI uses the dark theme.\n * @property {number} coolDownDuration Change the cooldown period for activating the NPC again. The number is in seconds.\n * @property {string} hoverText Set the UI hover feedback when pointing the cursor at the NPC. _TALK_ by default.\n * @property {string} dialogSound Path to sound file to play once for every line of dialog read on the UI.\n * @property {string} walkingAnim Animation to play when walking with followPath\n * @property {number} walkingSpeed Default speed to use when walking with followPath\n * @property {Vector3[]} path Array of Vector3 points representing the default path to walk over. The NPC will walk looping over these points\n* @property {boolean} textBubble If true, the NPC can display text bubbles with dialogs\n * @property {number} bubbleHeight The default height to display text bubbles over the NPC's position\n * @property {boolean} noUI If true, no UI dialog elements are constructed. The NPC can use speech bubbles.\n*\n */\nexport type NPCData = {\n  portrait?: string | ImageData\n  reactDistance?: number\n  idleAnim?: string\n  faceUser?: boolean\n  turningSpeed?: number\n  onlyExternalTrigger?: boolean\n  onlyClickTrigger?: boolean\n  onlyETrigger?: boolean\n  onWalkAway?: () => void\n  continueOnWalkAway?: boolean\n  darkUI?: boolean\n  coolDownDuration?: number\n  hoverText?: string\n  dialogSound?: string\n  dialogCustomTheme?: Texture\n  walkingAnim?: string\n  walkingSpeed?: number\n  path?: Vector3[]\n  pathLerpType?: NPCLerpType\n  textBubble?: boolean\n  bubbleHeight?: number\n  noUI?: boolean\n  \n}\n\n/**\n * Make an NPC walk following a path\n *\n * @typedef {Object} FollowPathData - Object with data to describe a path that an NPC can walk\n * @property {Vector3[]} path Array of `Vector3` positions to walk over.\n * @property {number} speed Speed to move at while walking this path. If no `speed` or `totalDuration` is provided, it uses the NPC's `walkingSpeed`, which is _2_ by default.\n * @property {number} totalDuration The duration in _seconds_ that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the _speed_.\n * @property {boolean} loop _boolean_ If true, the NPC walks in circles over the provided set of points in the path. _false_ by default, unless the NPC is initiated with a `path`, in which case it starts as _true_.\n * @property {boolean} curve _boolean_ If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined. _false_ by default.\n * @property {number} startingPoint Index position for what point to start from on the path. _0_ by default.\n * @property {() => void} onFinishCallback Function to call when the NPC finished walking over all the points on the path. This is only called when `loop` is _false_.\n * @property {() => void} onReachedPointCallback Function to call once every time the NPC reaches a point in the path.\n *\n */\nexport type FollowPathData = {\n  startingPoint?: number\n  loop?: boolean\n  curve?: boolean\n  totalDuration?: number\n  speed?: number\n  path?: Vector3[]\n  pathLerpType?: NPCLerpType\n  onFinishCallback?: () => void\n  onReachedPointCallback?: () => void\n}\n\n/**\n * Cut out a section of an image file\n *\n * @typedef {Object} ImageSection - Object with data to only display a section of an image\n * @property {number} sourceWidth Width in pixels to select from image, starting from the sourceLeft, going right\n * @property {number} sourceHeight Height in pixels to select from image, starting from the sourceTop, going down\n * @property {number} sourceLeft Leftmost pixel to select from image\n * @property {number} sourceTop Topmost pixel to select from image\n *\n */\nexport type ImageSection = {\n  sourceWidth: number\n  sourceHeight: number\n  sourceLeft?: number\n  sourceTop?: number\n}\n\n/**\n *\n *\n * @typedef {Object} ImageData - Object with data for displaying an image\n * @property {string} path Path to the image file.\n * @property {number} offsetX Offset on X, relative to the normal position of the image.\n * @property {number} offsetY Offset on Y, relative to the normal position of the image.\n * @property {number} height The height to show the image onscreen.\n * @property {number} width The width to show the image onscreen.\n * @property {ImageSection} section Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an `ImageSection` object, specifying `sourceWidth` and `sourceHeight`, and optionally also `sourceLeft` and `sourceTop`.\n *\n */\nexport type ImageData = {\n  path: string\n  offsetX?: number\n  offsetY?: number\n  height?: number\n  width?: number\n  section?: ImageSection\n}\n\nexport enum NPCState {\n  STANDING = 'standing',\n  TALKING = 'talking',\n  FOLLOWPATH = 'followPath'\n  //FOLLOWPLAYER = 'followPlayer'\n}\n\n\nexport enum NPCLerpType {\n  SMOOTH_PATH = 'smooth', //will follow the path but can cut sharp corners\n  RIGID_PATH = 'rigid', //will ensure each corner is hit\n}\n","import { ImageSection } from '../utils/types'\n\nexport function setSection(image: UIImage, section: ImageSection) {\n  image.sourceWidth = section.sourceWidth\n  image.sourceHeight = section.sourceHeight\n  image.sourceLeft = section.sourceLeft ? section.sourceLeft : 0\n  image.sourceTop = section.sourceTop ? section.sourceTop : 0\n}\n\nexport function buttonIconPos(textLen: number) {\n  let pos = -10 - textLen * 4\n  return pos > -65 ? pos : -65\n}\n\nexport default {\n  buttons: {\n    buttonE: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 662\n    },\n    buttonF: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 612\n    },\n    white: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 698,\n      sourceTop: 662\n    },\n    buttonRed: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 662\n    },\n    buttonDark: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 612\n    },\n    roundBlack: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 458\n    },\n    squareBlack: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 457\n    },\n    roundWhite: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 494\n    },\n    squareWhite: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 493\n    },\n    roundSilver: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 531\n    },\n    squareSilver: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 531\n    },\n    roundGold: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 567\n    },\n    squareGold: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 567\n    }\n  },\n  buttonLabels: {\n    E: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 697,\n      sourceTop: 611\n    },\n    F: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 733,\n      sourceTop: 611\n    },\n    EBlack: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 766,\n      sourceTop: 611\n    },\n    FBlack: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 802,\n      sourceTop: 611\n    }\n  },\n  backgrounds: {\n    promptBackground: {\n      sourceWidth: 416,\n      sourceHeight: 352,\n      sourceLeft: 501,\n      sourceTop: 12\n    },\n    promptLargeBackground: {\n      sourceWidth: 480,\n      sourceHeight: 384,\n      sourceLeft: 7,\n      sourceTop: 12\n    },\n    promptSlantedBackground: {\n      sourceWidth: 486,\n      sourceHeight: 326,\n      sourceLeft: 7,\n      sourceTop: 413\n    },\n    NPCDialog: {\n      sourceWidth: 766,\n      sourceHeight: 248,\n      sourceLeft: 22,\n      sourceTop: 756\n    }\n  },\n  icons: {\n    closeW: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 942,\n      sourceTop: 306\n    },\n    closeD: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 986,\n      sourceTop: 306\n    },\n    closeWLarge: {\n      sourceWidth: 64,\n      sourceHeight: 64,\n      sourceLeft: 512,\n      sourceTop: 381\n    },\n    closeDLarge: {\n      sourceWidth: 64,\n      sourceHeight: 64,\n      sourceLeft: 583,\n      sourceTop: 381\n    },\n    closeWNoBack: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 946,\n      sourceTop: 252\n    },\n    closeDNoBack: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 946,\n      sourceTop: 214\n    },\n    closeWNoBackLarge: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 214\n    },\n    closeDNoBackLarge: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 260\n    },\n    FDark: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 4\n    },\n    FWhite: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 4\n    },\n    EDark: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 40\n    },\n    EWhite: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 40\n    },\n    Timer: {\n      sourceWidth: 24,\n      sourceHeight: 32.2,\n      sourceLeft: 718,\n      sourceTop: 388\n    },\n    TimerLarge: {\n      sourceWidth: 48,\n      sourceHeight: 68,\n      sourceLeft: 662,\n      sourceTop: 386\n    },\n    ClickWhite: {\n      sourceWidth: 32,\n      sourceHeight: 48,\n      sourceLeft: 799,\n      sourceTop: 389\n    },\n    ClickDark: {\n      sourceWidth: 32,\n      sourceHeight: 48,\n      sourceLeft: 757,\n      sourceTop: 389\n    }\n  },\n  checkboxes: {\n    wOff: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 987,\n      sourceTop: 76\n    },\n    wOn: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 987,\n      sourceTop: 104\n    },\n    dOff: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 958,\n      sourceTop: 76\n    },\n    dOn: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 958,\n      sourceTop: 104\n    },\n    wLargeOff: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 132\n    },\n    wLargeOn: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 168\n    },\n    dLargeOff: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 132\n    },\n    dLargeOn: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 168\n    }\n  },\n  switches: {\n    roundOff: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 783,\n      sourceTop: 454\n    },\n    roundRed: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 853,\n      sourceTop: 454\n    },\n    roundGreen: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 923,\n      sourceTop: 454\n    },\n    squareOff: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 783,\n      sourceTop: 501\n    },\n    squareRed: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 852,\n      sourceTop: 501\n    },\n    squareGreen: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 921,\n      sourceTop: 501\n    }\n  },\n  bubbles: {\n    short: {\n      sourceWidth: 116 * 2,\n      sourceHeight: 84 * 2,\n      sourceLeft: 305 * 2,\n      sourceTop: 417 * 2,\n    },\n    normal: {\n      sourceWidth: 286 * 2,\n      sourceHeight: 84 * 2,\n      sourceLeft: 8 * 2,\n      sourceTop: 417 * 2,\n    },\n    long: {\n      sourceWidth: 497 * 2,\n      sourceHeight: 153 * 2,\n      sourceLeft: 6 * 2,\n      sourceTop: 254 * 2,\n    },\n    huge: {\n      sourceWidth: 497 * 2,\n      sourceHeight: 239 * 2,\n      sourceLeft: 6 * 2,\n      sourceTop: 7 * 2,\n    },\n  },\n}\n","import {\n  canvas,\n  SFFont,\n  lightTheme,\n  darkTheme,\n  SFHeavyFont\n} from './../utils/default-ui-components'\nimport { ImageData, Dialog, ButtonStyles } from '../utils/types'\nimport resources, { setSection, buttonIconPos } from './resources'\nimport { NPCDelay } from '../utils/timerComponents'\n\nexport enum ConfirmMode {\n  Confirm = 0,\n  Cancel = 1,\n  Next = 2,\n  Button3 = 3,\n  Button4 = 4\n}\n\nexport let UIscaleMultiplier = 0.75\n\nlet portraitXPos = -350 * UIscaleMultiplier \nlet portraitYPos = 0 * UIscaleMultiplier\n\nlet imageXPos = 350 * UIscaleMultiplier\nlet imageYPos = 50 * UIscaleMultiplier\n\nlet portraitScale = 256 * UIscaleMultiplier \nlet imageScale = 256 * UIscaleMultiplier \n\nlet textSize = 24 * UIscaleMultiplier\nlet textYPos = 10 * UIscaleMultiplier\n\nlet buttonWidth = 174* UIscaleMultiplier\nlet buttonHeight = 46* UIscaleMultiplier\n\n\nlet buttonTextSize = 20 * UIscaleMultiplier\n\nlet button1XPos = 150 * UIscaleMultiplier\nlet button2XPos = -80 * UIscaleMultiplier\nlet button3XPos = -80 * UIscaleMultiplier\nlet button4XPos = 150 * UIscaleMultiplier\n\nlet button1YPos = -65 * UIscaleMultiplier\nlet button2YPos = -65 * UIscaleMultiplier\nlet button1YPos4 = -20 * UIscaleMultiplier\nlet button2YPos4 = -20 * UIscaleMultiplier\nlet button3YPos = -80 * UIscaleMultiplier\nlet button4YPos = -80 * UIscaleMultiplier\n\nlet skipButtonXPos = -300 * UIscaleMultiplier\nlet skipButtonYPos = -100 * UIscaleMultiplier\n\nlet buttonIconWidth = 26 * UIscaleMultiplier\nlet buttonIconHeight = 26 * UIscaleMultiplier\n\n/**\n * Displays a UI screen with text from an array of Dialog objects. Each entry can also include a portrait image, questions with triggered actions by each, etc.\n *\n * @param defaultPortrait ImageData object with soruce and dimension of default portrait image to use on the Dialog UI\n * @param useDarkTheme If true, use the dark theme for all the UI. Can also be an alternative `Texture` object to use a different themed atlas, with identical coordinates for each element.\n * @param sound Path to a sound file to play once for every dialog window shown.\n *\n */\nexport class DialogWindow {\n  public NPCScript: Dialog[] = []\n  private defaultPortrait: ImageData | null\n  public container: UIContainerRect\n  public panel: UIImage\n  public portrait: UIImage\n  public defaultPortraitTexture: Texture\n  public image: UIImage\n  public text: UIText\n  public button1: CustomDialogButton\n  public button2: CustomDialogButton\n  public button3: CustomDialogButton\n  public button4: CustomDialogButton\n  public skipButton: CustomDialogButton\n\n  public leftClickIcon: UIImage\n  public isDialogOpen: boolean = false\n  public isQuestionPanel: boolean = false\n  public isFixedScreen: boolean = false\n  public activeTextId: number = 0\n  public uiTheme: Texture\n  private UIOpenTime: number = 0\n  public soundEnt: Entity\n  public defaultSound: string | null = null\n\n  canvas: UICanvas = canvas\n  ClickAction: null | (() => false | Subscription[]| void) = null\n  EButtonAction: null | (() => false | Subscription[]|void) = null\n  FButtonAction: null | (() => false | Subscription[]|void) = null\n\n  constructor(\n    defaultPortrait?: ImageData,\n    useDarkTheme?: boolean,\n    sound?: string,\n    customTheme?: Texture\n  ) {\n    this.defaultPortrait = defaultPortrait ? defaultPortrait : null\n\n    if (customTheme) {\n      this.uiTheme = customTheme\n    } else {\n      this.uiTheme = useDarkTheme ? darkTheme : lightTheme\n    }\n\n    // Container\n    this.container = new UIContainerRect(canvas)\n    //this.container.adaptWidth = true\n    this.container.width = '100%'\n    this.container.vAlign = 'bottom'\n    this.container.positionY = 140* UIscaleMultiplier\n    this.container.visible = false\n\n    // Text Panel\n    this.panel = new UIImage(this.container, this.uiTheme)\n    setSection(this.panel, resources.backgrounds.NPCDialog)\n    this.panel.width = 766  * UIscaleMultiplier\n    this.panel.height = 248 * UIscaleMultiplier\n    this.panel.onClick = new OnClick((): void => {\n      this.confirmText(ConfirmMode.Next)\n    })\n\n    this.defaultPortraitTexture = new Texture(\n      defaultPortrait ? defaultPortrait.path : this.uiTheme.src\n    )\n\n    // Portrait\n    this.portrait = new UIImage(this.container, this.defaultPortraitTexture)\n\n    this.portrait.sourceWidth =\n      defaultPortrait && defaultPortrait.section ? defaultPortrait.section.sourceWidth : 256 \n    this.portrait.sourceHeight =\n      defaultPortrait && defaultPortrait.section ? defaultPortrait.section.sourceHeight : 256\n    this.portrait.width = defaultPortrait && defaultPortrait.width ? defaultPortrait.width * UIscaleMultiplier : portraitScale\n    this.portrait.height = defaultPortrait && defaultPortrait.height ? defaultPortrait.height * UIscaleMultiplier : portraitScale\n    this.portrait.positionX =\n      defaultPortrait && defaultPortrait.offsetX\n        ? defaultPortrait.offsetX * UIscaleMultiplier + portraitXPos\n        : portraitXPos\n    this.portrait.positionY =\n      defaultPortrait && defaultPortrait.offsetY\n        ? defaultPortrait.offsetY * UIscaleMultiplier + portraitYPos\n        : portraitYPos\n    this.portrait.onClick = new OnClick((): void => {\n      this.confirmText(ConfirmMode.Next)\n    })\n\n    // Image\n    this.image = new UIImage(this.container, new Texture(this.uiTheme.src))\n\n    this.image.sourceWidth = 256\n    this.image.sourceHeight = 256\n    this.image.sourceTop = 0\n    this.image.sourceLeft = 0\n    this.image.width = imageScale\n    this.image.height = imageScale\n    this.image.positionX = imageXPos\n    this.image.positionY = imageYPos\n    this.image.onClick = new OnClick((): void => {\n      this.confirmText(ConfirmMode.Next)\n    })\n\n    // Dialog Text\n    this.text = new UIText(this.container)\n    this.text.adaptWidth = false\n    this.text.textWrapping = true\n    this.text.width = 460 * UIscaleMultiplier\n    this.text.positionX = 40 * UIscaleMultiplier\n    this.text.hAlign = 'center'\n    this.text.vAlign = 'center'\n    this.text.font = SFHeavyFont\n    this.text.fontSize = textSize\n    //this.text.hTextAlign = 'center'\n\tthis.text.hTextAlign = 'left'\n    this.text.vTextAlign = 'center'\n    this.text.positionY = textYPos\n\n    //this.text.fontWeight = 'normal'\n    this.text.color = useDarkTheme ? Color4.White() : Color4.Black()\n    this.text.isPointerBlocker = false\n\n    this.soundEnt = new Entity()\n    this.soundEnt.addComponent(new Transform())\n    engine.addEntity(this.soundEnt)\n    this.soundEnt.setParent(Attachable.AVATAR)\n\n    if (sound) {\n      this.soundEnt.addComponent(new AudioSource(new AudioClip(sound)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n\n      this.defaultSound = sound\n    }\n\n    this.button1 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'yes',\n      button1XPos,\n      button1YPos,\n      () => {\n        this.confirmText(ConfirmMode.Confirm)\n      },\n      useDarkTheme? true: false,\n      ButtonStyles.E\n    )\n    this.button1.hide()\n\n    this.button2 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'no',\n      button2XPos,\n      button2YPos,\n      () => {\n        this.confirmText(ConfirmMode.Cancel)\n      },\n      useDarkTheme? true: false,\n      ButtonStyles.F\n    )\n    this.button2.hide()\n\n    this.button3 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'maybe',\n      button3XPos,\n      button3YPos,\n      () => {\n        this.confirmText(ConfirmMode.Button3)\n      },\n      useDarkTheme? true: false,\n      ButtonStyles.DARK\n    )\n    this.button3.hide()\n\n    this.button4 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'maybe',\n      button4XPos,\n      button4YPos,\n      () => {\n        this.confirmText(ConfirmMode.Button4)\n      },\n      useDarkTheme? true: false,\n      ButtonStyles.DARK\n    )\n    this.button4.hide()\n\n    this.skipButton = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'Skip',\n      skipButtonXPos,\n      skipButtonYPos,\n      () => {\n        this.skipDialogs()\n      },\n      false,\n      darkTheme ? ButtonStyles.WHITE : ButtonStyles.F\n    )\n    this.skipButton.image.width = 80 * UIscaleMultiplier\n    this.skipButton.image.height = 30 * UIscaleMultiplier\n\tthis.skipButton.label.hTextAlign = 'left'\n    this.skipButton.label.fontSize = 12 * UIscaleMultiplier\n    this.skipButton.label.positionX = 40 * UIscaleMultiplier\n    this.skipButton.label.font = SFHeavyFont\n    this.skipButton.icon.height = 20 * UIscaleMultiplier\n    this.skipButton.icon.width = 20 * UIscaleMultiplier\n    this.skipButton.icon.positionX = -20 * UIscaleMultiplier\n    this.skipButton.hide()\n\n    // Left Click Icon\n    this.leftClickIcon = new UIImage(this.container, this.uiTheme)\n    this.leftClickIcon.width = 32 * UIscaleMultiplier\n    this.leftClickIcon.height = 48 * UIscaleMultiplier\n    this.leftClickIcon.positionX = 340 * UIscaleMultiplier\n    this.leftClickIcon.positionY = -80 * UIscaleMultiplier\n    this.leftClickIcon.visible = false\n    setSection(\n      this.leftClickIcon,\n      useDarkTheme ? resources.icons.ClickDark : resources.icons.ClickWhite\n    )\n\n    DialogTypeInSystem.createAndAddToEngine()\n  }\n\n  /**\n   * Opens a dialog UI to start a conversation.\n   * @param {Dialog[]} NPCScript  Instructions to follow during the conversation\n   * @param {number|string} textId Where to start in the script. Can refer to an index in the array or the `name` field of a Dialog entry.\n   */\n  public openDialogWindow(NPCScript: Dialog[], textId?: number | string): void {\n    this.UIOpenTime = +Date.now()\n\n    this.NPCScript = NPCScript\n\n    if (!textId) {\n      this.activeTextId = 0\n    } else if (typeof textId === 'number') {\n      this.activeTextId = textId\n    } else {\n      this.activeTextId = findDialogByName(NPCScript, textId)\n    }\n\n    let currentText: Dialog = NPCScript[this.activeTextId]\n      ? NPCScript[this.activeTextId]\n      : { text: '' }\n\n    if (currentText.audio) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(currentText.audio)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    } else if (this.defaultSound) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound)))\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    }\n\n    // Set portrait\n\n    if (currentText.portrait) {\n      this.portrait.source = new Texture(currentText.portrait.path)\n\n      this.portrait.positionX = currentText.portrait.offsetX\n        ? currentText.portrait.offsetX * UIscaleMultiplier + portraitXPos\n        : portraitXPos\n\n      this.portrait.positionY = currentText.portrait.offsetY\n        ? currentText.portrait.offsetY * UIscaleMultiplier + portraitYPos\n        : portraitYPos\n\n      this.portrait.width = currentText.portrait.width ? currentText.portrait.width * UIscaleMultiplier : portraitScale\n\n      this.portrait.height = currentText.portrait.height ? currentText.portrait.height * UIscaleMultiplier : portraitScale\n\n      if (currentText.portrait.section) {\n        setSection(this.portrait, currentText.portrait.section)\n      }\n      this.portrait.visible = true\n    } else if (this.defaultPortrait) {\n      this.portrait.source = this.defaultPortraitTexture\n\n      this.portrait.positionX =\n        this.defaultPortrait && this.defaultPortrait.offsetX\n          ? this.defaultPortrait.offsetX * UIscaleMultiplier + portraitXPos\n          : portraitXPos\n      this.portrait.positionY =\n        this.defaultPortrait && this.defaultPortrait.offsetY\n          ? this.defaultPortrait.offsetY * UIscaleMultiplier + portraitYPos\n          : portraitYPos\n      this.portrait.width =\n        this.defaultPortrait && this.defaultPortrait.width ? this.defaultPortrait.width * UIscaleMultiplier : portraitScale\n      this.portrait.height =\n        this.defaultPortrait && this.defaultPortrait.height ? this.defaultPortrait.height * UIscaleMultiplier : portraitScale\n\n      if (this.defaultPortrait.section) {\n        setSection(this.portrait, this.defaultPortrait.section)\n      }\n      this.portrait.visible = true\n    } else {\n      log('No portrait')\n      this.portrait.visible = false\n    }\n\n    // Set image on the right\n    if (currentText.image) {\n      let image: ImageData = currentText.image\n      log('setting image to ', image.path)\n      this.image.source = new Texture(image.path)\n\n      this.image.positionX = image.offsetX ? image.offsetX * UIscaleMultiplier + imageXPos : imageXPos\n      this.image.positionY = image.offsetY ? image.offsetY * UIscaleMultiplier + imageYPos : imageYPos\n\n      this.image.width = image.width ? image.width * UIscaleMultiplier : imageScale\n      this.portrait.height = image.height ? image.height * UIscaleMultiplier : imageScale\n\n      if (image.section) {\n        setSection(this.image, image.section)\n      }\n      this.image.visible = true\n    } else {\n      this.image.visible = false\n    }\n\n    // Set text\n    //this.text.value = currentText.text\n    this.text.fontSize = currentText.fontSize ? currentText.fontSize * UIscaleMultiplier : textSize\n    this.text.positionY = currentText.offsetY ? currentText.offsetY * UIscaleMultiplier + textYPos : textYPos\n    this.text.positionX = currentText.offsetX ? currentText.offsetX * UIscaleMultiplier : 0\n    this.text.visible = true\n    this.container.visible = true\n\n    DialogTypeInSystem._instance!.newText(\n      this,\n      currentText.text,\n      this.activeTextId,\n      currentText.typeSpeed ? currentText.typeSpeed : undefined\n    )\n\n    // Global button events\n    if (!this.ClickAction) {\n      this.ClickAction = Input.instance.subscribe('BUTTON_DOWN', ActionButton.POINTER, false, e => {\n        if (!this.isDialogOpen || +Date.now() - this.UIOpenTime < 100) return\n        if (!DialogTypeInSystem._instance!.done) {\n          DialogTypeInSystem._instance!.rush()\n          return\n        } else if (!this.isQuestionPanel && !this.isFixedScreen) {\n          this.confirmText(ConfirmMode.Next)\n        }\n      })\n      this.EButtonAction = Input.instance.subscribe(\n        'BUTTON_DOWN',\n        ActionButton.PRIMARY,\n        false,\n        e => {\n\t\t  if (!this.isDialogOpen || +Date.now() - this.UIOpenTime < 100) return\n\n          if (\n            this.isQuestionPanel\n          ) {\n            this.confirmText(ConfirmMode.Confirm)\n          } else if (!this.isQuestionPanel && !this.isFixedScreen) {\n\t\t\tthis.confirmText(ConfirmMode.Next)\n\t\t  }\n        }\n      )\n      this.FButtonAction = Input.instance.subscribe(\n        'BUTTON_DOWN',\n        ActionButton.SECONDARY,\n        false,\n        e => {\n\t\t  if (!this.isDialogOpen || +Date.now() - this.UIOpenTime < 100) return\n\n          if (\n            this.isQuestionPanel\n          ) {\n            this.confirmText(ConfirmMode.Cancel)\n          } else if (\n            currentText.skipable && !this.isFixedScreen\n          ) {\n            this.skipDialogs()\n          }\n        }\n      )\n    }\n\n    this.layoutDialogWindow(this.activeTextId)\n    this.isDialogOpen = true\n  }\n\n  // Progresses text\n  public confirmText(mode: ConfirmMode): void {\n    let currentText = this.NPCScript[this.activeTextId]\n\tthis.UIOpenTime = +Date.now()\n\n    // Update active text\n    if (mode == ConfirmMode.Next) {\n      if (!currentText.isQuestion) {\n        if (currentText.triggeredByNext) {\n          currentText.triggeredByNext()\n        }\n        if (currentText.isEndOfDialog) {\n          this.closeDialogWindow()\n          return\n        }\n        this.activeTextId++\n      }\n    }\n\n    if (mode == ConfirmMode.Confirm) {\n      if (currentText.buttons && currentText.buttons.length >= 1) {\n        if (typeof currentText.buttons[0].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[0].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[0].goToDialog)\n        }\n        if (currentText.buttons[0].triggeredActions) {\n          currentText.buttons[0].triggeredActions()\n        }\n      }\n    }\n\n    if (mode == ConfirmMode.Cancel) {\n      if (currentText.buttons && currentText.buttons.length >= 2) {\n        if (typeof currentText.buttons[1].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[1].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[1].goToDialog)\n        }\n        if (currentText.buttons[1].triggeredActions) {\n          currentText.buttons[1].triggeredActions()\n        }\n      }\n    }\n\n    if (mode == ConfirmMode.Button3) {\n      if (currentText.buttons && currentText.buttons.length >= 3) {\n        if (typeof currentText.buttons[2].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[2].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[2].goToDialog)\n        }\n        if (currentText.buttons[2].triggeredActions) {\n          currentText.buttons[2].triggeredActions()\n        }\n      }\n    }\n\n    if (mode == ConfirmMode.Button4) {\n      if (currentText.buttons && currentText.buttons.length >= 4) {\n        if (typeof currentText.buttons[3].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[3].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[3].goToDialog)\n        }\n        if (currentText.buttons[3].triggeredActions) {\n          currentText.buttons[3].triggeredActions()\n        }\n      }\n    }\n    // Update active text with new active text\n    currentText = this.NPCScript[this.activeTextId]\n\n    DialogTypeInSystem._instance!.newText(\n      this,\n      currentText.text,\n      this.activeTextId,\n      currentText.typeSpeed ? currentText.typeSpeed : undefined\n    )\n  }\n\n  // Adds the buttons or mouse icon depending on the type of window\n  public layoutDialogWindow(textId: number): void {\n    let currentText: Dialog = this.NPCScript[textId] ? this.NPCScript[textId] : { text: '' }\n\n    // Update text\n    let textY = currentText.offsetY ? currentText.offsetY * UIscaleMultiplier + textYPos : textYPos\n\n    if (currentText.buttons && currentText.buttons.length >= 3) {\n      textY += 50 *  UIscaleMultiplier\n    } else if (currentText.buttons && currentText.buttons.length >= 1) {\n      textY += 24 * UIscaleMultiplier\n    }\n\n    this.text.fontSize = currentText.fontSize ? currentText.fontSize * UIscaleMultiplier : textSize\n    this.text.positionY = textY\n\n    if (currentText.audio) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(currentText.audio)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    } else if (this.defaultSound) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound)))\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    }\n\n    if (currentText.portrait) {\n      this.portrait.source = new Texture(currentText.portrait.path)\n\n      this.portrait.positionX = currentText.portrait.offsetX\n        ? currentText.portrait.offsetX * UIscaleMultiplier+ portraitXPos\n        : portraitXPos\n\n      this.portrait.positionY = currentText.portrait.offsetY\n        ? currentText.portrait.offsetY* UIscaleMultiplier + portraitYPos\n        : portraitYPos\n\n      this.portrait.width = currentText.portrait.width ? currentText.portrait.width * UIscaleMultiplier: portraitScale\n\n      this.portrait.height = currentText.portrait.height ? currentText.portrait.height * UIscaleMultiplier: portraitScale\n\n      if (currentText.portrait.section) {\n        setSection(this.portrait, currentText.portrait.section)\n      }\n      this.portrait.visible = true\n    } else if (this.defaultPortrait) {\n      this.portrait.source = new Texture(this.defaultPortrait.path)\n\n      this.portrait.positionX =\n        this.defaultPortrait && this.defaultPortrait.offsetX\n          ? this.defaultPortrait.offsetX* UIscaleMultiplier + portraitXPos\n          : portraitXPos\n      this.portrait.positionY =\n        this.defaultPortrait && this.defaultPortrait.offsetY\n          ? this.defaultPortrait.offsetY* UIscaleMultiplier + portraitYPos\n          : portraitYPos\n\n      this.portrait.width =\n        this.defaultPortrait && this.defaultPortrait.width ? this.defaultPortrait.width * UIscaleMultiplier: portraitScale\n      this.portrait.height =\n        this.defaultPortrait && this.defaultPortrait.height ? this.defaultPortrait.height * UIscaleMultiplier: portraitScale\n\n      if (this.defaultPortrait.section) {\n        setSection(this.portrait, this.defaultPortrait.section)\n      }\n      this.portrait.visible = true\n    } else {\n      log('No portrait')\n      this.portrait.visible = false\n    }\n\n    this.image.visible = false\n\n    // Set image on the right\n    if (currentText.image) {\n      let image: ImageData = currentText.image\n      log('setting image to ', image.path)\n      this.image.source = new Texture(image.path)\n\n      this.image.positionX = image.offsetX ? image.offsetX* UIscaleMultiplier + imageXPos : imageXPos\n      this.image.positionY = image.offsetY ? image.offsetY* UIscaleMultiplier + imageYPos : imageYPos\n\n      this.image.width = currentText.image.width ? currentText.image.width* UIscaleMultiplier : imageScale\n      this.image.height = currentText.image.height ? currentText.image.height* UIscaleMultiplier : imageScale\n\n      if (image.section) {\n        setSection(this.image, image.section)\n      }\n      this.image.visible = true\n    } else {\n      this.image.visible = false\n    }\n\n    this.isQuestionPanel = currentText.isQuestion ? currentText.isQuestion : false\n\n    this.isFixedScreen = currentText.isFixedScreen ? currentText.isFixedScreen : false\n    this.button1.hide()\n    this.button2.hide()\n    this.button3.hide()\n    this.button4.hide()\n\n    // Mouse icon\n    this.leftClickIcon.visible = false\n\n    if (currentText.isQuestion) {\n      this.skipButton.hide()\n      // Button E\n      if (currentText.buttons && currentText.buttons.length >= 1) {\n        this.button1.update(\n          currentText.buttons[0].label,\n          currentText.buttons[0].offsetX\n            ? currentText.buttons[0].offsetX * UIscaleMultiplier+ button1XPos\n            : button1XPos,\n          currentText.buttons.length >= 3\n            ? currentText.buttons[0].offsetY\n              ? currentText.buttons[0].offsetY* UIscaleMultiplier + button1YPos4\n              : button1YPos4\n            : currentText.buttons[0].offsetY\n            ? currentText.buttons[0].offsetY* UIscaleMultiplier + button1YPos\n            : button1YPos\n        )\n      }\n\n      // Button F\n      if (currentText.buttons && currentText.buttons.length >= 2) {\n        this.button2.update(\n          currentText.buttons[1].label,\n          currentText.buttons[1].offsetX* UIscaleMultiplier\n            ? currentText.buttons[1].offsetX* UIscaleMultiplier + button2XPos\n            : button2XPos,\n          currentText.buttons.length >= 3\n            ? currentText.buttons[1].offsetY* UIscaleMultiplier\n              ? currentText.buttons[1].offsetY* UIscaleMultiplier + button2YPos4\n              : button2YPos4\n            : currentText.buttons[1].offsetY* UIscaleMultiplier\n            ? currentText.buttons[1].offsetY* UIscaleMultiplier + button2YPos\n            : button2YPos\n        )\n      }\n\n      // Button 3\n      if (currentText.buttons && currentText.buttons.length >= 3) {\n        this.button3.update(\n          currentText.buttons[2].label,\n          currentText.buttons[2].offsetX* UIscaleMultiplier\n            ? currentText.buttons[2].offsetX* UIscaleMultiplier + button3XPos\n            : button3XPos,\n          currentText.buttons[2].offsetY* UIscaleMultiplier\n            ? currentText.buttons[2].offsetY * UIscaleMultiplier+ button3YPos\n            : button3YPos\n        )\n      }\n\n      // Button 4\n      if (currentText.buttons && currentText.buttons.length >= 4) {\n        this.button4.update(\n          currentText.buttons[3].label,\n          currentText.buttons[3].offsetX* UIscaleMultiplier\n            ? currentText.buttons[3].offsetX* UIscaleMultiplier + button4XPos\n            : button4XPos,\n          currentText.buttons[3].offsetY* UIscaleMultiplier\n            ? currentText.buttons[3].offsetY* UIscaleMultiplier + button4YPos\n            : button4YPos\n        )\n      }\n\n      dummyQuestionDelays.addComponentOrReplace(\n        new NPCDelay(0.7, () => {\n          // Button E\n          if (currentText.buttons && currentText.buttons.length >= 1) {\n            this.button1.show()\n          }\n          // Button F\n          if (currentText.buttons && currentText.buttons.length >= 2) {\n            this.button2.show()\n          }\n\n          // Button 3\n          if (currentText.buttons && currentText.buttons.length >= 3) {\n            this.button3.show()\n          }\n\n          // Button 4\n          if (currentText.buttons && currentText.buttons.length >= 4) {\n            this.button4.show()\n          }\n        })\n      )\n    } else if (!this.isFixedScreen) {\n      this.leftClickIcon.visible = true\n\n      if (currentText.skipable) {\n        this.skipButton.show()\n      } else {\n        this.skipButton.hide()\n      }\n    }\n  }\n\n  /**\n   * Closes a dialog UI.\n   */\n  public closeDialogWindow(): void {\n    if (this.isDialogOpen) {\n      this.isDialogOpen = false\n\n      this.portrait.visible = false\n      this.text.value = ''\n      this.text.visible = false\n      this.button1.hide()\n      this.button2.hide()\n      this.button3.hide()\n      this.button4.hide()\n      this.skipButton.hide()\n      this.leftClickIcon.visible = false\n      this.container.visible = false\n    }\n  }\n\n  public skipDialogs() {\n    if (!this.isDialogOpen || +Date.now() - this.UIOpenTime < 100) return\n\n    while (\n\t\tthis.NPCScript[this.activeTextId] &&\n      this.NPCScript[this.activeTextId].skipable &&\n      !this.NPCScript[this.activeTextId].isQuestion\n    ) {\n\t  if (this.NPCScript[this.activeTextId].triggeredByNext) {\n\t\t\tthis.NPCScript[this.activeTextId].triggeredByNext()\n\t  }\n     \n      if (\n        this.NPCScript[this.activeTextId].skipable &&\n        this.NPCScript[this.activeTextId].isEndOfDialog\n      ) {\n        this.closeDialogWindow()\n        return\n      }\n\t  this.activeTextId += 1\n    }\n    //this.activeTextId -= 1\n\n    this.confirmText(ConfirmMode.Next)\n  }\n}\n\nconst DEFAULT_SPEED = 45\n\nexport class DialogTypeInSystem implements ISystem {\n  static _instance: DialogTypeInSystem | null = null\n\n  timer: number = 0\n  speed: number = DEFAULT_SPEED\n  visibleChars: number = 0\n  fullText: string = ''\n  UIText: UIText | null = null\n  done: boolean = true\n\n  static createAndAddToEngine(): DialogTypeInSystem {\n    if (this._instance == null) {\n      this._instance = new DialogTypeInSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    DialogTypeInSystem._instance = this\n  }\n\n  update(dt: number) {\n    if (this.done) return\n\n    this.timer += dt\n    if (this.timer >= 2 / this.speed) {\n      let charsToAdd = Math.floor(this.timer / (1 / this.speed))\n      this.timer = 0\n      this.visibleChars += charsToAdd\n      \n\t  // support <> tags\n\t  this.closeTag(charsToAdd)\n\n\t  if (this.visibleChars >= this.fullText.length) {\n        this.done = true\n        this.visibleChars = this.fullText.length\n\t  }\n\n      if (this.UIText) {\n        this.UIText.value = this.fullText.substr(0, this.visibleChars)\n      }\n    }\n  }\n\n  newText(dialog: DialogWindow, text: string, textId: number, speed?: number) {\n    this.timer = 0\n    this.done = false\n    this.UIText = dialog.text\n    this.fullText = text\n    this.visibleChars = 0\n\n    if (speed && speed <= 0) {\n      this.rush()\n    } else if (speed) {\n      this.speed = speed\n    } else {\n      this.speed = DEFAULT_SPEED\n    }\n\n    // Buttons & action icons\n    dialog.layoutDialogWindow(textId)\n  }\n  rush() {\n    this.done = true\n    this.timer = 0\n    this.visibleChars = this.fullText.length\n\n    if (this.UIText) {\n      this.UIText.value = this.fullText\n    }\n  }\n  closeTag(newChars: number){\n\t  if(this.visibleChars == 0 || newChars ==0 ) return\n\n\tlet openTag: boolean = false\n\tlet closeTag : boolean = false\n\tfor(let i = this.visibleChars-newChars; i < this.visibleChars ; i++){\n\t\t\n\t\tif(!openTag){\n\t\t\tif(this.fullText.substr(i, 1) == '<'){\n\t\t\t\topenTag= true\n\t\t\t\t\n\t\t\t}\n\t\t} else {\n\t\t\tif(this.fullText.substr(i, 1) == '>'){\n\t\t\t\tcloseTag= true\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!openTag || closeTag){\t\n\t\treturn\n\t}\n\n\twhile(this.visibleChars < this.fullText.length && this.fullText.substr(this.visibleChars-1, 1) != '>'){\n\t\tthis.visibleChars+=1\n\t}\n\treturn\n  }\n}\n\nexport class CustomDialogButton extends Entity {\n  label: UIText\n  image: UIImage\n  icon: UIImage | null = null\n  style: ButtonStyles | null\n  onClick: () => void\n  constructor(\n    parent: UIContainerRect,\n    texture: Texture,\n    //UIOpenTime: number,\n    label: string,\n    posX: number,\n    posY: number,\n    onClick: () => void,\n    useDarkTheme?: boolean,\n    style?: ButtonStyles\n  ) {\n    super()\n    this.image = new UIImage(parent, texture)\n    this.image.positionX = posX\n    this.image.positionY = posY\n    this.image.width = buttonWidth\n    this.image.height = buttonHeight\n\n    this.label = new UIText(this.image)\n    this.style = style ? style : null\n\n    this.onClick = onClick\n\n    if (this.style) {\n      switch (this.style) {\n        case ButtonStyles.E:\n          setSection(this.image, resources.buttons.buttonE)\n          this.label.positionX = 25 * UIscaleMultiplier\n\n          this.icon = new UIImage(this.image, useDarkTheme == true ? darkTheme : lightTheme)\n          this.icon.width = buttonIconWidth\n          this.icon.height = buttonIconHeight\n          // this.button1Icon.positionY = 15\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.E)\n          this.icon.positionX = buttonIconPos(label.length)\n\n          break\n        case ButtonStyles.F:\n          setSection(this.image, resources.buttons.buttonF)\n          this.label.positionX = 25 * UIscaleMultiplier\n\n          this.icon = new UIImage(this.image, useDarkTheme == true ? darkTheme : lightTheme)\n          this.icon.width = buttonIconWidth\n          this.icon.height = buttonIconHeight\n          // this.button1Icon.positionY = 15\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.F)\n          this.icon.positionX = buttonIconPos(label.length)\n          break\n\n        case ButtonStyles.WHITE:\n          setSection(this.image, resources.buttons.white)\n          this.label.positionX = 25 * UIscaleMultiplier\n\n          this.icon = new UIImage(this.image, useDarkTheme == true ? darkTheme : lightTheme)\n          this.icon.width = buttonIconWidth\n          this.icon.height = buttonIconHeight\n          // this.button1Icon.positionY = 15\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.FBlack)\n          this.icon.positionX = buttonIconPos(label.length)\n          break\n\n        case ButtonStyles.RED:\n          setSection(this.image, resources.buttons.buttonRed)\n          break\n        case ButtonStyles.DARK:\n          setSection(this.image, resources.buttons.buttonDark)\n          break\n        case ButtonStyles.ROUNDBLACK:\n          setSection(this.image, resources.buttons.roundBlack)\n          break\n        case ButtonStyles.ROUNDWHITE:\n          setSection(this.image, resources.buttons.roundWhite)\n          break\n        case ButtonStyles.ROUNDSILVER:\n          setSection(this.image, resources.buttons.roundSilver)\n          break\n        case ButtonStyles.ROUNDGOLD:\n          setSection(this.image, resources.buttons.roundGold)\n          break\n        case ButtonStyles.SQUAREBLACK:\n          setSection(this.image, resources.buttons.squareBlack)\n          break\n        case ButtonStyles.SQUAREWHITE:\n          setSection(this.image, resources.buttons.squareWhite)\n          break\n        case ButtonStyles.SQUARESILVER:\n          setSection(this.image, resources.buttons.squareSilver)\n          break\n        case ButtonStyles.SQUAREGOLD:\n          setSection(this.image, resources.buttons.squareGold)\n          break\n      }\n    } else {\n      setSection(this.image, resources.buttons.roundSilver)\n    }\n\n    this.label.value = label\n    this.label.hTextAlign = 'center'\n    this.label.vTextAlign = 'center'\n    this.label.fontSize = buttonTextSize\n    this.label.font = SFFont\n    this.label.color =\n      style == ButtonStyles.ROUNDWHITE ||\n      style == ButtonStyles.SQUAREWHITE ||\n      style == ButtonStyles.WHITE\n        ? Color4.Black()\n        : Color4.White()\n    this.label.isPointerBlocker = false\n\n    this.image.onClick = new OnClick(() => {\n      this.onClick()\n    })\n\n    if (style == ButtonStyles.E) {\n      Input.instance.subscribe('BUTTON_DOWN', ActionButton.PRIMARY, false, e => {\n        if (this.image.visible) {\n          // && +Date.now() - UIOpenTime > 100) {\n          this.onClick()\n        }\n      })\n    } else if (style == ButtonStyles.F) {\n      Input.instance.subscribe('BUTTON_DOWN', ActionButton.SECONDARY, false, e => {\n        if (this.image.visible) {\n          // && +Date.now() - UIOpenTime > 100) {\n          this.onClick()\n        }\n      })\n    }\n  }\n\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  public show(): void {\n    this.image.visible = true\n  }\n\n  public grayOut(): void {\n    this.label.color = Color4.Gray()\n    this.image.isPointerBlocker = false\n  }\n\n  public enable(): void {\n    this.label.color = Color4.White()\n    this.image.isPointerBlocker = true\n  }\n  public update(label: string, posX: number, posY: number) {\n    this.label.value = label\n    this.image.positionX = posX\n    this.image.positionY = posY\n\n    if (this.icon && (this.style == ButtonStyles.E || this.style == ButtonStyles.F)) {\n      this.icon.positionX = buttonIconPos(label.length)\n    }\n  }\n}\n\nlet dummyQuestionDelays = new Entity()\nengine.addEntity(dummyQuestionDelays)\n\nfunction findDialogByName(dialogs: Dialog[], name: string) {\n  for (let i = 0; i < dialogs.length; i++) {\n    if (dialogs[i].name && dialogs[i].name == name) {\n      return i\n    }\n  }\n  return 0\n}\n","export interface ITimerComponent {\n  elapsedTime: number\n  targetTime: number\n  onTargetTimeReached: (ownerEntity: IEntity) => void\n}\n\n/**\n * Execute once after X milliseconds\n */\n@Component('npcTimerDelay')\nexport class NPCDelay implements ITimerComponent {\n  elapsedTime: number\n  targetTime: number\n  onTargetTimeReached: (ownerEntity: IEntity) => void\n\n  private onTimeReachedCallback: () => void\n\n  /**\n   * @param seconds amount of time in seconds\n   * @param onTimeReachedCallback callback for when time is reached\n   */\n  constructor(seconds: number, onTimeReachedCallback: () => void) {\n    NPCTimerSystem.createAndAddToEngine()\n\n    this.elapsedTime = 0\n    this.targetTime = seconds\n    this.onTimeReachedCallback = onTimeReachedCallback\n    this.onTargetTimeReached = entity => {\n      this.onTimeReachedCallback()\n      entity.removeComponent(NPCDelay)\n    }\n  }\n\n  setCallback(onTimeReachedCallback: () => void) {\n    this.onTimeReachedCallback = onTimeReachedCallback\n  }\n}\n\nconst entitiesWithDelay = engine.getComponentGroup(NPCDelay)\n\nexport class NPCTimerSystem implements ISystem {\n  private static _instance: NPCTimerSystem | null = null\n\n  static createAndAddToEngine(): NPCTimerSystem {\n    if (this._instance == null) {\n      this._instance = new NPCTimerSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    NPCTimerSystem._instance = this\n  }\n\n  update(dt: number) {\n    for (let ent of entitiesWithDelay.entities) {\n      let timerComponent = ent.getComponent(NPCDelay)\n\n      timerComponent.elapsedTime += dt\n\n      if (timerComponent.elapsedTime >= timerComponent.targetTime) {\n        timerComponent.onTargetTimeReached(ent)\n      }\n    }\n  }\n}\n","import { TriggerData } from '../utils/types'\n\nexport class NPCTriggerSystem implements ISystem {\n  private static _instance: NPCTriggerSystem | null = null\n  static get instance(): NPCTriggerSystem {\n    return this.createAndAddToEngine()\n  }\n\n  private _triggers: Record<string, TriggerWrapper> = {}\n  private _cameraTriggerWrapper: CameraTrigger\n  private _componentGroup: ComponentGroup\n\n  private constructor() {\n    NPCTriggerSystem._instance = this\n    this._cameraTriggerWrapper = new CameraTrigger(\n      new TriggerBoxShape(new Vector3(0.5, 1.8, 0.5), new Vector3(0, 0.91, 0))\n    )\n\n    this._componentGroup = engine.getComponentGroup(NPCTriggerComponent)\n  }\n\n  static createAndAddToEngine(): NPCTriggerSystem {\n    if (this._instance == null) {\n      this._instance = new NPCTriggerSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  /**\n   * set a custom trigger's shape for the camera\n   * @param shape custom trigger's shape\n   */\n  setCameraTriggerShape(shape: TriggerBoxShape | TriggerSphereShape) {\n    this._cameraTriggerWrapper.setShape(shape)\n  }\n\n  update() {\n    let entitiesWithTriggers = this._componentGroup.entities\n\n    //iterate through all entities with triggers and wrap entities that weren't wrapped yet\n    entitiesWithTriggers.forEach(entity => {\n      if (this.shouldWrapTriggerEntity(entity)) {\n        this.wrapTriggerEntity(entity)\n      }\n    })\n\n    //iterate through wrapped entities\n    for (const key in this._triggers) {\n      if (this._triggers.hasOwnProperty(key)) {\n        let wrapper = this._triggers[key]\n\n        //update debug entity\n        if (wrapper.isDebugging()) {\n          wrapper.updateDebugEntity()\n        }\n\n        if (!wrapper.isInEngine()) {\n          //remove debugging\n          if (wrapper.isDebugging()) {\n            wrapper.removeDebugEntity()\n          }\n          //remove old collisions\n          NPCTriggerSystem.removeTriggerFromSystem(wrapper)\n          //remove from record\n          delete this._triggers[key]\n        } else if (wrapper.trigger != null && wrapper.trigger.enabled) {\n          //if was set as enabled in last frame\n          if (!wrapper.wasEnabled) {\n            if (wrapper.isDebugging()) {\n              wrapper.addDebugEntity()\n            }\n          }\n          //set as enabled\n          wrapper.wasEnabled = true\n\n          //check collision camera\n          if (wrapper.trigger.onCameraEnter || wrapper.trigger.onCameraExit) {\n            this.checkCollisionAgainstCamera(wrapper)\n          }\n\n          //check collision with others\n          if (wrapper.trigger.onTriggerEnter || wrapper.trigger.onTriggerExit) {\n            this.checkCollisionAgainstOtherTriggers(wrapper)\n          }\n        } else if (wrapper.wasEnabled) {\n          wrapper.wasEnabled = false\n          //remove debugging\n          if (wrapper.isDebugging()) {\n            wrapper.removeDebugEntity()\n          }\n          NPCTriggerSystem.removeTriggerFromSystem(wrapper)\n        }\n      }\n    }\n  }\n\n  private shouldWrapTriggerEntity(entity: IEntity): boolean {\n    return this._triggers[entity.uuid] == undefined || this._triggers[entity.uuid] == null\n  }\n\n  private wrapTriggerEntity(entity: IEntity) {\n    this._triggers[entity.uuid] = new TriggerWrapper(entity as Entity)\n  }\n\n  private static removeTriggerFromSystem(wrapper: TriggerWrapper) {\n    let activeCollisions = wrapper.getActiveCollisions()\n    for (let i = 0; i < activeCollisions.length; i++) {\n      let activeCollisionHasTrigger = !(\n        activeCollisions[i] === NPCTriggerSystem._instance?._cameraTriggerWrapper ||\n        activeCollisions[i].trigger == null\n      )\n\n      if (activeCollisionHasTrigger && activeCollisions[i].trigger.onTriggerExit && wrapper.entity)\n        (activeCollisions[i].trigger.onTriggerExit as (entity: IEntity) => void)(wrapper.entity)\n      activeCollisions[i].disengageActiveCollision(wrapper)\n      wrapper.disengageActiveCollision(activeCollisions[i])\n    }\n  }\n\n  private static disengageCollision(t1: TriggerWrapper, t2: TriggerWrapper) {\n    t1.disengageActiveCollision(t2)\n    t2.disengageActiveCollision(t1)\n\n    if (t1.trigger.onTriggerExit && t2.entity) t1.trigger.onTriggerExit(t2.entity)\n    if (t2.trigger.onTriggerExit && t1.entity) t2.trigger.onTriggerExit(t1.entity)\n  }\n\n  private static engageCollision(t1: TriggerWrapper, t2: TriggerWrapper) {\n    t1.engageCollision(t2)\n    t2.engageCollision(t1)\n\n    if (t1.trigger.onTriggerEnter && t2.entity) t1.trigger.onTriggerEnter(t2.entity)\n    if (t2.trigger.onTriggerEnter && t1.entity) t2.trigger.onTriggerEnter(t1.entity)\n  }\n\n  private checkCollisionAgainstCamera(wrapper: TriggerWrapper) {\n    let wereColliding = wrapper.hasActiveCollision(this._cameraTriggerWrapper)\n    let areColliding = NPCTriggerSystem.areColliding(wrapper, this._cameraTriggerWrapper)\n\n    if (wereColliding && !areColliding) {\n      wrapper.disengageActiveCollision(this._cameraTriggerWrapper)\n      if (wrapper.trigger.onCameraExit) wrapper.trigger.onCameraExit()\n    } else if (!wereColliding && areColliding) {\n      wrapper.engageCollision(this._cameraTriggerWrapper)\n      if (wrapper.trigger.onCameraEnter) wrapper.trigger.onCameraEnter()\n    }\n  }\n\n  private checkCollisionAgainstOtherTriggers(wrapper: TriggerWrapper) {\n    for (const key in this._triggers) {\n      if (this._triggers.hasOwnProperty(key)) {\n        if (key != wrapper.uuid && this._triggers[key].trigger.enabled) {\n          if (NPCTriggerSystem.canTriggersCollide(wrapper, this._triggers[key])) {\n            let wereColliding = wrapper.hasActiveCollision(this._triggers[key])\n            let areColliding = NPCTriggerSystem.areColliding(wrapper, this._triggers[key])\n\n            if (wereColliding && !areColliding)\n              NPCTriggerSystem.disengageCollision(wrapper, this._triggers[key])\n            else if (!wereColliding && areColliding)\n              NPCTriggerSystem.engageCollision(wrapper, this._triggers[key])\n          }\n        }\n      }\n    }\n  }\n\n  private static canTriggersCollide(t1: TriggerWrapper, t2: TriggerWrapper): boolean {\n    if (t1.trigger.triggeredByLayer == 0) return true\n    return (t2.trigger.layer & t1.trigger.triggeredByLayer) != 0\n  }\n\n  private static areColliding(t1: TriggerWrapper, t2: TriggerWrapper): boolean {\n    if (t1.getShape() instanceof TriggerBoxShape && t2.getShape() instanceof TriggerBoxShape) {\n      return NPCTriggerSystem.areCollidingAABB(\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerBoxShape,\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerBoxShape\n      )\n    } else if (\n      t1.getShape() instanceof TriggerSphereShape &&\n      t2.getShape() instanceof TriggerSphereShape\n    ) {\n      return NPCTriggerSystem.areCollidingSphere(\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerSphereShape,\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerSphereShape\n      )\n    } else if (\n      t1.getShape() instanceof TriggerBoxShape &&\n      t2.getShape() instanceof TriggerSphereShape\n    ) {\n      return NPCTriggerSystem.areCollidingAABBSphere(\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerBoxShape,\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerSphereShape\n      )\n    } else if (\n      t1.getShape() instanceof TriggerSphereShape &&\n      t2.getShape() instanceof TriggerBoxShape\n    ) {\n      return NPCTriggerSystem.areCollidingAABBSphere(\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerBoxShape,\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerSphereShape\n      )\n    }\n    return false\n  }\n\n  private static areCollidingAABB(\n    t1GlobalPosition: Vector3,\n    t1Shape: TriggerBoxShape,\n    t2GlobalPosition: Vector3,\n    t2Shape: TriggerBoxShape\n  ): boolean {\n    let t1 = NPCTriggerSystem.getBoxShapeValues(t1GlobalPosition, t1Shape)\n    let t2 = NPCTriggerSystem.getBoxShapeValues(t2GlobalPosition, t2Shape)\n    return (\n      t1.min.x <= t2.max.x &&\n      t1.max.x >= t2.min.x &&\n      t1.min.y <= t2.max.y &&\n      t1.max.y >= t2.min.y &&\n      t1.min.z <= t2.max.z &&\n      t1.max.z >= t2.min.z\n    )\n  }\n\n  private static areCollidingSphere(\n    t1GlobalPosition: Vector3,\n    t1Shape: TriggerSphereShape,\n    t2GlobalPosition: Vector3,\n    t2Shape: TriggerSphereShape\n  ): boolean {\n    let sqDist = Vector3.DistanceSquared(\n      t1GlobalPosition.add(t1Shape.position),\n      t2GlobalPosition.add(t2Shape.position)\n    )\n    return sqDist < t1Shape.radius * t1Shape.radius + t2Shape.radius * t2Shape.radius\n  }\n\n  private static areCollidingAABBSphere(\n    t1GlobalPosition: Vector3,\n    t1Shape: TriggerBoxShape,\n    t2GlobalPosition: Vector3,\n    t2Shape: TriggerSphereShape\n  ): boolean {\n    let box = NPCTriggerSystem.getBoxShapeValues(t1GlobalPosition, t1Shape)\n    let sphere = {\n      center: t2GlobalPosition.add(t2Shape.position),\n      radius: t2Shape.radius\n    }\n\n    let dmin = 0\n    if (sphere.center.x < box.min.x)\n      dmin += (box.min.x - sphere.center.x) * (box.min.x - sphere.center.x)\n    if (sphere.center.x > box.max.x)\n      dmin += (sphere.center.x - box.max.x) * (sphere.center.x - box.max.x)\n    if (sphere.center.y < box.min.y)\n      dmin += (box.min.y - sphere.center.y) * (box.min.y - sphere.center.y)\n    if (sphere.center.y > box.max.y)\n      dmin += (sphere.center.y - box.max.y) * (sphere.center.y - box.max.y)\n    if (sphere.center.z < box.min.z)\n      dmin += (box.min.z - sphere.center.z) * (box.min.z - sphere.center.z)\n    if (sphere.center.z > box.max.z)\n      dmin += (sphere.center.z - box.max.z) * (sphere.center.z - box.max.z)\n\n    return dmin < sphere.radius * sphere.radius\n  }\n\n  private static getBoxShapeValues(\n    entityGlobalPosition: Vector3,\n    shape: TriggerBoxShape\n  ): { center: Vector3; min: Vector3; max: Vector3 } {\n    let center = entityGlobalPosition.add(shape.position)\n    return {\n      center: center,\n      min: center.subtract(shape.size.scale(0.5)),\n      max: center.add(shape.size.scale(0.5))\n    }\n  }\n}\n\nclass TriggerWrapper {\n  wasEnabled: boolean = true\n\n  get entity(): Entity | undefined {\n    return this._entity\n  }\n  get trigger(): NPCTriggerComponent {\n    return this._trigger\n  }\n  get uuid(): string {\n    return this._uuid\n  }\n\n  protected _entity?: Entity\n  protected _trigger!: NPCTriggerComponent\n  protected _uuid: string = ''\n  protected _collidingWith: Record<string, TriggerWrapper> = {}\n\n  private _isDebug: boolean = false\n  private _debugEntity: Entity | null = null\n  private static _debugMaterial: Material | null = null\n\n  constructor(entity?: Entity) {\n    this._entity = entity\n    if (entity) {\n      this._trigger = entity.getComponent(NPCTriggerComponent)\n      this._uuid = entity.uuid\n      this._isDebug = this._trigger.debugEnabled\n      if (this._isDebug) {\n        this.addDebugEntity()\n      }\n    }\n  }\n\n  getGlobalPosition(): Vector3 {\n    if (this._entity) return TriggerWrapper.getEntityWorldPosition(this._entity)\n    return Vector3.Zero()\n  }\n\n  getShape(): TriggerBoxShape | TriggerSphereShape {\n    return this._trigger.shape\n  }\n\n  isInEngine(): boolean {\n    return this._entity != null && this._entity.isAddedToEngine()\n  }\n\n  getActiveCollisions(): TriggerWrapper[] {\n    let ret: TriggerWrapper[] = []\n\n    for (const key in this._collidingWith) {\n      if (this._collidingWith.hasOwnProperty(key)) {\n        ret.push(this._collidingWith[key])\n      }\n    }\n    return ret\n  }\n\n  hasActiveCollision(other: TriggerWrapper): boolean {\n    return this._collidingWith[other.uuid] != undefined && this._collidingWith[other.uuid] != null\n  }\n\n  disengageActiveCollision(other: TriggerWrapper) {\n    delete this._collidingWith[other.uuid]\n  }\n\n  engageCollision(other: TriggerWrapper) {\n    this._collidingWith[other.uuid] = other\n  }\n\n  isDebugging(): boolean {\n    return this._isDebug\n  }\n\n  addDebugEntity() {\n    if (!TriggerWrapper._debugMaterial) {\n      TriggerWrapper._debugMaterial = new Material()\n      TriggerWrapper._debugMaterial.alphaTest = 0.5\n    }\n\n    if (this._debugEntity == null) {\n      this._debugEntity = new Entity()\n\n      const transform = new Transform()\n      this._debugEntity.addComponent(transform)\n      this._debugEntity.addComponent(TriggerWrapper._debugMaterial)\n\n      if (this.getShape() instanceof TriggerBoxShape) {\n        const shape = new BoxShape()\n        shape.withCollisions = false\n        this._debugEntity.addComponent(shape)\n        transform.scale = (this.getShape() as TriggerBoxShape).size\n      }\n      if (this.getShape() instanceof TriggerSphereShape) {\n        const shape = new SphereShape()\n        shape.withCollisions = false\n        this._debugEntity.addComponent(shape)\n        let rad = (this.getShape() as TriggerSphereShape).radius\n        transform.scale = new Vector3(rad, rad, rad)\n      }\n    }\n    engine.addEntity(this._debugEntity)\n  }\n\n  removeDebugEntity() {\n    if (this._debugEntity != null) engine.removeEntity(this._debugEntity)\n  }\n\n  updateDebugEntity() {\n    if (this._debugEntity) {\n      this._debugEntity.getComponent(Transform).position = this.getGlobalPosition().add(\n        this.getShape().position\n      )\n    }\n  }\n\n  private static getEntityWorldPosition(entity: IEntity): Vector3 {\n    let entityPosition = entity.hasComponent(Transform)\n      ? entity.getComponent(Transform).position.clone()\n      : Vector3.Zero()\n    let parentEntity = entity.getParent()\n\n    if (parentEntity != null) {\n      let parentRotation = parentEntity.hasComponent(Transform)\n        ? parentEntity.getComponent(Transform).rotation\n        : Quaternion.Identity\n      return this.getEntityWorldPosition(parentEntity).add(entityPosition.rotate(parentRotation))\n    }\n    return entityPosition\n  }\n}\n\nclass CameraTrigger extends TriggerWrapper {\n  private _shape: TriggerBoxShape | TriggerSphereShape\n\n  constructor(shape: TriggerBoxShape | TriggerSphereShape) {\n    super()\n    this._shape = shape\n    this._uuid = 'cameraTrigger'\n  }\n\n  getGlobalPosition() {\n    return Camera.instance.position\n  }\n\n  getShape() {\n    return this._shape\n  }\n\n  setShape(shape: TriggerBoxShape | TriggerSphereShape) {\n    this._shape = shape\n  }\n\n  isInEngine(): boolean {\n    return false\n  }\n\n  hasActiveCollision(other: TriggerWrapper): boolean {\n    return false\n  }\n\n  disengageActiveCollision(other: TriggerWrapper) {}\n\n  engageCollision(other: TriggerWrapper) {}\n  isDebugging(): boolean {\n    return false\n  }\n}\n\n@Component('npcTriggerComponent')\nexport class NPCTriggerComponent {\n  /**\n   * is trigger enable?\n   */\n  enabled: boolean = true\n  /**\n   * shape of the collider\n   */\n  shape: TriggerBoxShape | TriggerSphereShape\n  /**\n   * bit layer of the Tigger (usefull to discriminate between trigger events)\n   */\n  layer: number = 0\n  /**\n   * against which layer are we going to check trigger's collisions\n   */\n  triggeredByLayer: number = 0\n  /**\n   * callback when trigger is entered\n   */\n  onTriggerEnter?: (entity: Entity) => void\n  /**\n   * callback when trigger is exit\n   */\n  onTriggerExit?: (entity: Entity) => void\n  /**\n   * callback when trigger is entered\n   */\n  onCameraEnter?: () => void\n  /**\n   * callback when trigger is exit\n   */\n  onCameraExit?: () => void\n  /**\n   * get if debug is enabled\n   */\n  get debugEnabled(): boolean {\n    return this._debugEnabled\n  }\n\n  private _debugEnabled: boolean\n\n  /**\n   *\n   * @param {TriggerBoxShape | TriggerSphereShape} shape shape of the triggering collider area\n   * @param {TriggerData} data Object of type TriggerData, including the following optional fields: onCameraEnter, onCameraExit, onTriggerEnter, onTriggerExit, layer, triggeredByLayer, enableDebug\n   */\n  constructor(shape: TriggerBoxShape | TriggerSphereShape, data?: TriggerData) {\n    NPCTriggerSystem.createAndAddToEngine()\n    this.shape = shape\n    this.layer = data && data.layer ? data.layer : 0\n    this.triggeredByLayer = data && data.triggeredByLayer ? data.triggeredByLayer : 0\n    this.onTriggerEnter = data && data.onTriggerEnter ? data.onTriggerEnter : undefined\n    this.onTriggerExit = data && data.onTriggerExit ? data.onTriggerExit : undefined\n    this.onCameraEnter = data && data.onCameraEnter ? data.onCameraEnter : undefined\n    this.onCameraExit = data && data.onCameraExit ? data.onCameraExit : undefined\n    this._debugEnabled = data && data.enableDebug ? data.enableDebug : false\n  }\n}\n\nexport class TriggerBoxShape {\n  size: Vector3\n  position: Vector3\n\n  constructor(size: Vector3, position: Vector3) {\n    this.size = size\n    this.position = position\n  }\n}\n\nexport class TriggerSphereShape {\n  radius: number\n  position: Vector3\n\n  constructor(radius: number, position: Vector3) {\n    this.radius = radius\n    this.position = position\n  }\n}\n","import { NPCLerpType, NPCState } from '../utils/types'\nimport { NPC } from './npc'\n\n@Component('npclerpData')\nexport class NPCLerpData {\n  path: Vector3[]\n  origin: number = 0\n  target: number = 1\n  fraction: number = 0\n  totalDuration: number = 0\n  speed: number[] = []\n  loop: boolean = false\n  type: NPCLerpType = NPCLerpType.SMOOTH_PATH //default\n  onFinishCallback?: () => void\n  onReachedPointCallback?: () => void\n  constructor(path: Vector3[],type:NPCLerpType=NPCLerpType.SMOOTH_PATH) {\n    this.path = path\n    if(type !== undefined) this.type = type\n    NPCWalkSystem.createAndAddToEngine()\n  }\n\n  setIndex(index: number) {\n    this.fraction = 0\n    this.origin = index\n    this.target = index + 1 < this.path.length ? index + 1 : 0\n  }\n}\n\nconst walkingNPCGroup = engine.getComponentGroup(NPCLerpData)\n\nexport class NPCWalkSystem implements ISystem {\n  static _instance: NPCWalkSystem | null = null\n  update(dt: number) {\n    for (let npcE of walkingNPCGroup.entities) {\n      const npc = (npcE as NPC)\n      //try{\n      if (npc.state == NPCState.FOLLOWPATH) {\n        let transform = npc.getComponent(Transform)\n        let path = npc.getComponent(NPCLerpData)\n\n        if(path.type !== undefined && path.type == NPCLerpType.RIGID_PATH){\n          //stop exactly at each point\n          if (path.fraction < 1) {\n            path.fraction += dt * path.speed[path.origin]\n\n            //if fraction goes over 1 push it back to 1?\n\n            transform.position = Vector3.Lerp(\n              path.path[path.origin],\n              path.path[path.target],\n              path.fraction\n            )\n          } else {\n            path.origin = path.target\n            path.target += 1\n            if (path.target >= path.path.length) {\n              if (path.loop) {\n                path.target = 0\n              } else {\n                npc.stopWalking()\n                if (path.onFinishCallback) {\n                  path.onFinishCallback()\n                }\n                path.fraction = 1\n                return\n              }\n            } else if (path.onReachedPointCallback) {\n              path.onReachedPointCallback()\n            }\n            path.fraction = 0 //starts on this point\n            transform.lookAt(path.path[path.target])\n          }\n        }else{\n          //default follow, smooth but with low FPS could cut corners\n          //always increment fraction\n          path.fraction += dt * path.speed[path.origin]\n\n          if(path.fraction >= 1){\n            path.origin = path.target\n            const tartInc = Math.max(1,Math.floor( path.fraction ))\n            path.target += tartInc\n            if (path.target >= path.path.length) {\n              if (path.loop) {\n                path.target = 0\n              } else {\n                //path.target = path.path.length - 1\n                npc.stopWalking()\n                if (path.onFinishCallback) {\n                  path.onFinishCallback()\n                }\n                path.fraction = 1\n                return\n              }\n            } else if (path.onReachedPointCallback) {\n              path.onReachedPointCallback()\n            }\n            path.fraction -= tartInc\n            //TODO consider lerping look at\n            if (path.target < path.path.length) {\n              transform.lookAt(path.path[path.target])\n            }\n          }\n        }\n        //if reached target\n        if (path.target < path.path.length) {\n          transform.position = Vector3.Lerp(\n            path.path[path.origin],\n            path.path[path.target],\n            path.fraction\n          )\n        }\n      }\n      /*}catch(e){\n        debugger\n        log(\"npc.utils.NPCWalkSystem throw error\",e)\n      }*/\n    }\n  }\n\n  static createAndAddToEngine(): NPCWalkSystem {\n    if (this._instance == null) {\n      this._instance = new NPCWalkSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    NPCWalkSystem._instance = this\n  }\n}\n","import { bubblesTexture, setUVSection, SFHeavyFont } from \"../utils/default-ui-components\"\nimport { Dialog } from \"../utils/types\"\nimport resources from \"./resources\"\n\nlet textSize = 1\nlet textYPos = 0\n\nlet maxLengthShortBubble = 8\nlet maxLengthNormalBubble = 25\nlet maxLengthLongBubble = 50\nlet maxLengthHugeBubble = 100\n\nlet shortBubbleXOffset = -0.1\nlet normalBubbleXOffset = -0.5\nlet longBubbleXOffset = -0.8\nlet hugeBubbleXOffset = -0.8\n\nlet shortBubbleYOffset = -0.2\nlet normalBubbleYOffset = -0.2\nlet longBubbleYOffset = 0\nlet hugeBubbleYOffset = 0.2\n\nlet shortBubbleTextWidth = 0.7\nlet normalBubbleTextWidth = 1.5\nlet longBubbleTextWidth = 2\nlet hugeBubbleTextWidth = 2\n\nlet shortBubbleX = 116 * 0.005\nlet shortBubbleY = 84 * 0.005\n\nlet normalBubbleX = 286 * 0.005\nlet normalBubbleY = 84 * 0.005\n\nlet longBubbleX = 497 * 0.005\nlet longBubbleY = 153 * 0.005\n\nlet hugeBubbleX = 497 * 0.005\nlet hugeBubbleY = 239 * 0.005\n\nlet defaultYOffset = 2.5\n\n/**\n * Displays an in-world panel as a speech bubble, with text from an array of Dialog objects.\n *\n * @param parent Entity to set as parent. The Bubble will inherit the position, rotation and scale of the parent.\n * @param height Height in meters to float the bubble above the parent's position.\n * @param sound Path to a sound file to play once for every dialog window shown.\n *\n */\nexport class DialogBubble {\n  public NPCScript: Dialog[] = []\n  public container: Entity\n  public panel: Entity\n  public rootEntity: Entity\n  public text: Entity\n  public material: BasicMaterial\n  public isBubleOpen: boolean = false\n  public activeTextId: number = 0\n  public uiTheme: Texture\n  public soundEnt: Entity\n  public defaultSound: string | null = null\n  public baseYOffset: number = defaultYOffset\n  // ClickAction: null | (() => false | Subscription[]) = null\n\n  constructor(parent: Entity, height?: number, sound?: string) {\n    this.baseYOffset = height ? height : defaultYOffset\n\n   // Root\n   this.rootEntity = new Entity()\n   this.rootEntity.addComponent(new Billboard(false, true, false))\n   this.rootEntity.addComponent(new Transform())\n   this.rootEntity.setParent(parent)\n\n   // Container\n   this.container = new Entity()\n   //this.container.addComponent(new Billboard(false, true, false))\n   this.container.addComponent(\n\t new Transform({\n\t   position: new Vector3(shortBubbleXOffset, this.baseYOffset, 0),\n\t })\n   )\n   this.container.setParent(this.rootEntity)\n\n    // Material\n\tthis.material = new BasicMaterial()\n\tthis.material.texture = bubblesTexture\n\n    // Background Panel\n    this.panel = new Entity()\n    this.panel.addComponent(\n      new Transform({\n        scale: new Vector3(2, 1, 1),\n      })\n    )\n    this.panel.setParent(this.container)\n    this.panel.addComponent(new PlaneShape())\n    this.panel.addComponent(this.material)\n\tthis.panel.getComponent(PlaneShape).visible = false\n\n    setUVSection(\n      this.panel.getComponent(PlaneShape),\n      resources.bubbles.normal,\n      1024,\n      1024\n    )\n\n    // Dialog Text\n    this.text = new Entity()\n    this.text.addComponent(\n      new Transform({\n        position: new Vector3(0, textYPos, 0.05),\n        rotation: Quaternion.Euler(0, 180, 0),\n      })\n    )\n    this.text.addComponent(new TextShape(''))\n    this.text.setParent(this.container)\n\n    this.text.getComponent(TextShape).textWrapping = true\n    this.text.getComponent(TextShape).font = SFHeavyFont\n    this.text.getComponent(TextShape).hTextAlign = 'center'\n    this.text.getComponent(TextShape).vTextAlign = 'center'\n    this.text.getComponent(TextShape).fontSize = textSize\n    //this.text.getComponent(TextShape).fontWeight = 'normal'\n    this.text.getComponent(TextShape).color = Color3.Black()\n\tthis.text.getComponent(TextShape).visible = false\n\n    this.soundEnt = new Entity()\n\n    if (sound) {\n      this.soundEnt.addComponent(new Transform())\n      engine.addEntity(this.soundEnt)\n      this.soundEnt.setParent(this.container)\n\n      this.soundEnt.addComponent(new AudioSource(new AudioClip(sound)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n\n      this.defaultSound = sound\n    }\n\n    WorldDialogTypeInSystem.createAndAddToEngine()\n  }\n\n  /**\n   * Opens a dialog bubble to start a conversation.\n   * @param {Dialog[]} NPCScript  Instructions to follow during the conversation\n   * @param {number|string} textId Where to start in the script. Can refer to an index in the array or the `name` field of a Dialog entry.\n   */\n  public openDialogWindow(NPCScript: Dialog[], textId?: number | string): void {\n    this.NPCScript = NPCScript\n\n    if (!textId) {\n      this.activeTextId = 0\n    } else if (typeof textId === 'number') {\n      this.activeTextId = textId\n    } else {\n      this.activeTextId = findDialogByName(NPCScript, textId)\n    }\n\n    let currentText: Dialog = NPCScript[this.activeTextId]\n      ? NPCScript[this.activeTextId]\n      : { text: '' }\n\n    if (currentText.audio) {\n      this.soundEnt.addComponentOrReplace(\n        new AudioSource(new AudioClip(currentText.audio))\n      )\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    } else if (this.defaultSound) {\n      this.soundEnt.addComponentOrReplace(\n        new AudioSource(new AudioClip(this.defaultSound))\n      )\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    }\n\n    // Set text\n    this.text.getComponent(TextShape).fontSize = currentText.fontSize\n      ? currentText.fontSize\n      : textSize\n    this.text.getComponent(Transform).position.y = currentText.offsetY\n      ? currentText.offsetY + textYPos\n      : textYPos\n    this.text.getComponent(Transform).position.x = currentText.offsetX\n      ? currentText.offsetX\n      : 0\n    this.text.getComponent(TextShape).visible = true\n    this.panel.getComponent(PlaneShape).visible = true\n    this.text.getComponent(TextShape).value = ''\n\n    if (currentText.text.length < maxLengthHugeBubble) {\n      currentText.text.slice(0, maxLengthHugeBubble)\n    }\n\n    WorldDialogTypeInSystem._instance!.newText(\n      this,\n      currentText.text,\n      this.activeTextId,\n      currentText.timeOn ? currentText.timeOn : undefined,\n      currentText.typeSpeed ? currentText.typeSpeed : undefined\n    )\n\n    this.adjustBubble(currentText.text.length)\n\n    // Global button events\n    //   if (!this.ClickAction) {\n    // \tthis.ClickAction = Input.instance.subscribe(\n    // \t  'BUTTON_DOWN',\n    // \t  ActionButton.POINTER,\n    // \t  false,\n    // \t  (e) => {\n    // \t\tif (!this.isDialogOpen || +Date.now() - this.UIOpenTime < 100) return\n\n    // \t\tif (!DialogTypeInSystem._instance!.done) {\n    // \t\t  DialogTypeInSystem._instance!.rush()\n    // \t\t  return\n    // \t\t} else if (!this.isQuestionPanel && !this.isFixedScreen) {\n    // \t\t  this.confirmText(ConfirmMode.Next)\n    // \t\t}\n    // \t  }\n    // \t)\n\n    // }\n\n    this.layoutDialogWindow(this.activeTextId)\n    this.isBubleOpen = true\n  }\n\n  private adjustBubble(textLength: number): void {\n    if (textLength < maxLengthShortBubble) {\n      setUVSection(\n        this.panel.getComponent(PlaneShape),\n        resources.bubbles.short,\n        1024,\n        1024\n      )\n      this.panel.getComponent(Transform).scale.x = shortBubbleX\n      this.panel.getComponent(Transform).scale.y = shortBubbleY\n      this.container.getComponent(Transform).position.x = shortBubbleXOffset\n      this.container.getComponent(Transform).position.y =\n        this.baseYOffset + shortBubbleYOffset\n      this.text.getComponent(TextShape).width = shortBubbleTextWidth\n    } else if (textLength < maxLengthNormalBubble) {\n      setUVSection(\n        this.panel.getComponent(PlaneShape),\n        resources.bubbles.normal,\n        1024,\n        1024\n      )\n      this.panel.getComponent(Transform).scale.x = normalBubbleX\n      this.panel.getComponent(Transform).scale.y = normalBubbleY\n      this.container.getComponent(Transform).position.x = normalBubbleXOffset\n      this.container.getComponent(Transform).position.y =\n        this.baseYOffset + normalBubbleYOffset\n      this.text.getComponent(TextShape).width = normalBubbleTextWidth\n    } else if (textLength < maxLengthLongBubble) {\n      setUVSection(\n        this.panel.getComponent(PlaneShape),\n        resources.bubbles.long,\n        1024,\n        1024\n      )\n      this.panel.getComponent(Transform).scale.x = longBubbleX\n      this.panel.getComponent(Transform).scale.y = longBubbleY\n      this.container.getComponent(Transform).position.y =\n        this.baseYOffset + longBubbleYOffset\n      this.container.getComponent(Transform).position.x = longBubbleXOffset\n      this.text.getComponent(TextShape).width = longBubbleTextWidth\n    } else {\n      setUVSection(\n        this.panel.getComponent(PlaneShape),\n        resources.bubbles.huge,\n        1024,\n        1024\n      )\n      this.panel.getComponent(Transform).scale.x = hugeBubbleX\n      this.panel.getComponent(Transform).scale.y = hugeBubbleY\n      this.container.getComponent(Transform).position.y =\n        this.baseYOffset + hugeBubbleYOffset\n      this.container.getComponent(Transform).position.x = hugeBubbleXOffset\n      this.text.getComponent(TextShape).width = hugeBubbleTextWidth\n    }\n  }\n\n  // Progresses text\n  public next(): void {\n    let currentText = this.NPCScript[this.activeTextId]\n\n\tif(!currentText){\n\t\tcurrentText = this.NPCScript[this.activeTextId-1]\n\t}\n\n    if (currentText.triggeredByNext) {\n      currentText.triggeredByNext()\n    }\n\n\tif (currentText.isEndOfDialog) {\n\t\tthis.closeDialogWindow()\n\t\treturn\n\t  }\n   \n\t // Update active text\n    this.activeTextId++\n\n    // Update active text with new active text\n    currentText = this.NPCScript[this.activeTextId]\n\n    if (currentText.text.length < maxLengthHugeBubble) {\n      currentText.text.slice(0, maxLengthHugeBubble)\n    }\n    this.text.getComponent(TextShape).value = ''\n\n    this.adjustBubble(currentText.text.length)\n\n    WorldDialogTypeInSystem._instance!.newText(\n      this,\n      currentText.text,\n      this.activeTextId,\n      currentText.timeOn ? currentText.timeOn : undefined,\n      currentText.typeSpeed ? currentText.typeSpeed : undefined\n    )\n\tthis.layoutDialogWindow(this.activeTextId)\n\n  }\n\n  // Adds the buttons or mouse icon depending on the type of window\n  public layoutDialogWindow(textId: number): void {\n    let currentText: Dialog = this.NPCScript[textId]\n      ? this.NPCScript[textId]\n      : { text: '' }\n\n    // Update text\n    let textY = currentText.offsetY ? currentText.offsetY + textYPos : textYPos\n\n    if (currentText.buttons && currentText.buttons.length >= 3) {\n      textY += 50\n    } else if (currentText.buttons && currentText.buttons.length >= 1) {\n      textY += 24\n    }\n\n    this.text.getComponent(TextShape).fontSize = currentText.fontSize\n      ? currentText.fontSize\n      : textSize\n    \n\tthis.text.getComponent(TextShape).visible = true\n\tthis.text.getComponent(Transform).position.y = textY\n\n    if (currentText.audio) {\n      this.soundEnt.addComponentOrReplace(\n        new AudioSource(new AudioClip(currentText.audio))\n      )\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    } else if (this.defaultSound) {\n      this.soundEnt.addComponentOrReplace(\n        new AudioSource(new AudioClip(this.defaultSound))\n      )\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    }\n  }\n\n  /**\n   * Closes the dialog bubble, executing associated triggeredByNext functions.\n   */\n  public closeDialogWindow(): void {\n    if (this.isBubleOpen) {\n      this.isBubleOpen = false\n\n      this.text.getComponent(TextShape).value = ''\n      this.text.getComponent(TextShape).visible = false\n\n      this.panel.getComponent(PlaneShape).visible = false\n    }\n  }\n\n   /**\n   * Closes the dialog bubble, and stops executed any associated triggeredByNext actions.\n   */\n  public closeDialogEndAll(): void {\n    if (this.isBubleOpen) {\n    \n\t  if(WorldDialogTypeInSystem._instance.Dialog == this){\n\t\tWorldDialogTypeInSystem._instance.done = true\n\t\tWorldDialogTypeInSystem._instance.Dialog = null\n\t  }\n\t  this.isBubleOpen = false\n\n      this.text.getComponent(TextShape).value = ''\n      this.text.getComponent(TextShape).visible = false\n      this.panel.getComponent(PlaneShape).visible = false\n\t  \n    }\n  }\n\n  public skipDialogs() {\n    if (!this.isBubleOpen) return\n\n\n    while (\n      this.NPCScript[this.activeTextId]\n    ) {\n\n\t\tif (this.NPCScript[this.activeTextId].triggeredByNext) {\n\t\t\tthis.NPCScript[this.activeTextId].triggeredByNext()\n\t\t  }\n      \n      if (\n        this.NPCScript[this.activeTextId].isEndOfDialog\n      ) {\n        this.closeDialogWindow()\n        return\n      }\n\t  this.activeTextId += 1\n    }\n\n  }\n}\n\nconst DEFAULT_SPEED = 45\n\nconst DEFAULT_TIME_ON = 3\n\nexport class WorldDialogTypeInSystem implements ISystem {\n  static _instance: WorldDialogTypeInSystem | null = null\n\n  timer: number = 0\n  speed: number = DEFAULT_SPEED\n  visibleChars: number = 0\n  fullText: string = ''\n  Dialog: DialogBubble | null\n  Text: TextShape | null = null\n  textId: number = 0\n  done: boolean = true\n  showing: boolean = false\n  timeOn: number = DEFAULT_TIME_ON\n  window: DialogBubble\n\n  static createAndAddToEngine(): WorldDialogTypeInSystem {\n    if (this._instance == null) {\n      this._instance = new WorldDialogTypeInSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    WorldDialogTypeInSystem._instance = this\n  }\n\n  update(dt: number) {\n    if (this.done) return\n\n    this.timer += dt\n    if (this.showing) {\n      if (this.timer > this.timeOn) {\n        this.showing = false\n        this.done = true\n\t\tthis.timer = 0\n        this.window.next()\n      }\n    } else if (this.timer >= 2 / this.speed) {\n      let charsToAdd = Math.floor(this.timer / (1 / this.speed))\n      this.timer = 0\n      this.visibleChars += charsToAdd\n\n\t   // support <> tags\n\t   this.closeTag(charsToAdd)\n\n      if (this.visibleChars >= this.fullText.length) {\n        this.showing = true\n        this.timer = 0\n        this.visibleChars = this.fullText.length\n      }\n      if (this.Text) {\n        this.Text.value = this.fullText.substr(0, this.visibleChars)\n      }\n    }\n  }\n\n  newText(\n    dialog: DialogBubble,\n    text: string,\n    textId: number,\n    timeOn?: number,\n    speed?: number\n  ) {\n\n\t// prevent circular loops\n\tif(dialog == this.Dialog && textId == this.textId){\n\t\treturn\n\t}\n\n\tlet oldDialog = this.Dialog\n\n\tthis.Dialog = dialog\n\tthis.Text = this.Dialog.text.getComponent(TextShape)\n\tthis.textId = textId\n\n\tif(oldDialog && dialog != oldDialog){\n\t\toldDialog.skipDialogs()\n\t} \n\t\n\n    this.timer = 0\n    this.done = false\n    this.showing = false\n    \n    this.fullText = text\n    this.visibleChars = 0\n    this.window = dialog\n\n    if (speed && speed <= 0) {\n      this.rush()\n    } else if (speed) {\n      this.speed = speed\n    } else {\n      this.speed = DEFAULT_SPEED\n    }\n\n    if (timeOn) {\n      this.timeOn = timeOn\n    } else {\n      this.timeOn = DEFAULT_TIME_ON\n    }\n\n    // Buttons & action icons\n    //dialog.layoutDialogWindow(textId)\n  }\n  rush() {\n    this.showing = true\n    this.timer = 0\n    this.visibleChars = this.fullText.length\n\n    if (this.Text) {\n      this.Text.value = this.fullText\n    }\n  }\n  closeTag(newChars: number){\n\tif(this.visibleChars == 0 || newChars ==0 ) return\n\n\tlet openTag: boolean = false\n\tlet closeTag : boolean = false\n\tfor(let i = this.visibleChars-newChars; i < this.visibleChars ; i++){\n\t  \n\t  if(!openTag){\n\t\t  if(this.fullText.substr(i, 1) == '<'){\n\t\t\t  openTag= true\n\t\t\t  \n\t\t  }\n\t  } else {\n\t\t  if(this.fullText.substr(i, 1) == '>'){\n\t\t\t  closeTag= true\n\t\t\t  \n\t\t  }\n\t  }\n\t}\n\n\tif(!openTag || closeTag){\t\n\t\treturn\n\t}\n\n\twhile(this.visibleChars < this.fullText.length && this.fullText.substr(this.visibleChars-1, 1) != '>'){\n\t\tthis.visibleChars+=1\n\t}\n\treturn\n}\n}\n\nfunction findDialogByName(dialogs: Dialog[], name: string) {\n  for (let i = 0; i < dialogs.length; i++) {\n    if (dialogs[i].name && dialogs[i].name == name) {\n      return i\n    }\n  }\n  return 0\n}\n","import { DialogWindow } from '../ui/index'\nimport { Dialog, FollowPathData, NPCData, NPCState, TriggerData } from '../utils/types'\nimport { TrackUserFlag } from './faceUserSystem'\n\nimport { TriggerSphereShape, NPCTriggerComponent } from '../trigger/triggerSystem'\nimport { NPCDelay } from '../utils/timerComponents'\nimport { NPCLerpData } from './move'\nimport { DialogBubble } from '../ui/bubble'\n\n/**\n * Creates a talking, walking and animated NPC\n *\n * @param {TranformConstructorArgs} position Transform argument object that can contain position, rotation and scale for NPC\n * @param {string} model String with path to 3D model to use for NPC\n * @param {() => void} onActivate Function to execute each time the NPC is activated. By default when clicking it or walking near, or calling the `activate()` function\n * @param {NPCData} data Object of type NPCData, containing multiple configurable parameters\n *\n */\nexport class NPC extends Entity {\n  public introduced: boolean = false\n  public dialog: DialogWindow\n  public bubble: DialogBubble | undefined\n  public onActivate: () => void\n  public onWalkAway: null | (() => void) = null\n  public inCooldown: boolean = false\n  public coolDownDuration: number = 5\n  public faceUser: boolean = false\n  public idleAnim: AnimationState\n  public walkingAnim: null | AnimationState = null\n  public walkingSpeed: number = 2\n  public lastPlayedAnim: AnimationState\n  public endAnimTimer: Entity\n  public closeDialogTimer: Entity\n  public pauseWalkingTimer: Entity\n  public state: NPCState\n  public bubbleHeight: number = 2\n  /**\n   * Creates a talking, walking and animated NPC\n   *\n   * @param {TranformConstructorArgs} position Transform argument object that can contain position, rotation and scale for NPC\n   * @param {string} model String with path to 3D model to use for NPC\n   * @param {() => void} onActivate Function to execute each time the NPC is activated. By default when clicking it or walking near, or calling the `activate()` function\n   * @param {NPCData} data Object of type NPCData, containing multiple configurable parameters\n   *\n   */\n  constructor(\n    position: TranformConstructorArgs,\n    model: string,\n    onActivate: () => void,\n    data?: NPCData\n  ) {\n    super()\n    this.addComponent(new GLTFShape(model))\n    this.addComponent(new Transform(position))\n    engine.addEntity(this)\n\n    this.state = NPCState.STANDING\n\n    // dialogs\n    if (data && data.noUI) {\n    } else if (data && data.portrait) {\n      this.dialog = new DialogWindow(\n        typeof data.portrait === `string` ? { path: data.portrait } : data.portrait,\n        data && data.darkUI ? data.darkUI : false,\n        data.dialogSound ? data.dialogSound : undefined,\n        data && data.dialogCustomTheme ? data.dialogCustomTheme : undefined\n      )\n    } else {\n      this.dialog = new DialogWindow(\n        undefined,\n        data && data.darkUI ? data.darkUI : false,\n        data && data.dialogSound ? data.dialogSound : undefined,\n        data && data.dialogCustomTheme ? data.dialogCustomTheme : undefined\n      )\n    }\n\n    if (data && data.textBubble) {\n      if (data && data.bubbleHeight) {\n        this.bubbleHeight = data.bubbleHeight\n      }\n      this.bubble = new DialogBubble(\n        this,\n        this.bubbleHeight,\n        data.dialogSound ? data.dialogSound : undefined\n      )\n    }\n\n    // animations\n    this.addComponent(new Animator())\n\n    this.idleAnim = new AnimationState(data && data.idleAnim ? data.idleAnim : 'Idle', {\n      looping: true,\n    })\n    this.getComponent(Animator).addClip(this.idleAnim)\n    this.lastPlayedAnim = this.idleAnim\n    this.idleAnim.play()\n\n    if (data && data.walkingAnim) {\n      this.walkingAnim = new AnimationState(data.walkingAnim, {\n        looping: true,\n      })\n      this.getComponent(Animator).addClip(this.walkingAnim)\n    }\n\n    this.onActivate = onActivate\n\n    if (data && data.onWalkAway) {\n      this.onWalkAway = data.onWalkAway\n    }\n\n    this.endAnimTimer = new Entity()\n    engine.addEntity(this.endAnimTimer)\n\n    this.closeDialogTimer = new Entity()\n    engine.addEntity(this.closeDialogTimer)\n\n    this.pauseWalkingTimer = new Entity()\n    engine.addEntity(this.pauseWalkingTimer)\n\n    let activateButton = data && data.onlyClickTrigger ? ActionButton.POINTER : ActionButton.PRIMARY\n\n    // Reaction when clicked\n    this.addComponent(\n      new OnPointerDown(\n        (e) => {\n          if (this.inCooldown || (this.dialog && this.dialog.isDialogOpen)) return\n\n          this.activate()\n        },\n        {\n          button: activateButton,\n          hoverText: data && data.hoverText ? data.hoverText : 'Talk',\n          showFeedback: data && data.onlyExternalTrigger ? false : true,\n        }\n      )\n    )\n\n    if (data && data.onlyExternalTrigger) {\n      this.removeComponent(OnPointerDown)\n    }\n\n    // Trigger\n    let triggerData: TriggerData = {}\n\n    // when exiting trigger\n    if (!data || (data && !data.continueOnWalkAway)) {\n      triggerData.onCameraExit = () => {\n        this.handleWalkAway()\n      }\n    }\n\n    // when entering trigger\n    if (\n      !data ||\n      (data && !data.onlyExternalTrigger && !data.onlyClickTrigger && !data.onlyETrigger)\n    ) {\n      triggerData.onCameraEnter = () => {\n        if (this.inCooldown) {\n          log(this.name, ' in cooldown')\n          return\n        } else if (\n          (this.dialog && this.dialog.isDialogOpen) ||\n          (data && data.onlyExternalTrigger) ||\n          (data && data.onlyClickTrigger)\n        ) {\n          return\n        }\n        this.activate()\n      }\n    }\n\n    // add trigger\n    if (triggerData.onCameraEnter || triggerData.onCameraExit) {\n      this.addComponent(\n        new NPCTriggerComponent(\n          new TriggerSphereShape(\n            data && data.reactDistance ? data.reactDistance : 6,\n            Vector3.Zero()\n          ),\n          triggerData\n        )\n      )\n    }\n\n    if (data && data.faceUser) {\n      this.addComponent(new TrackUserFlag(true, data.turningSpeed ? data.turningSpeed : undefined))\n      this.faceUser = true\n    }\n\n    if (data && data.walkingSpeed) {\n      this.walkingSpeed = data.walkingSpeed\n    }\n\n    if (data && data.coolDownDuration) {\n      this.coolDownDuration = data.coolDownDuration\n    }\n\n    if (data && data.path) {\n      this.addComponent(new NPCLerpData(data.path ? data.path : [],data.pathLerpType))\n      this.getComponent(NPCLerpData).loop = true\n      \n      this.followPath()\n    }\n  }\n\n  /**\n   * Calls the NPC's activation function (set on NPC definition). If NPC has `faceUser` = true, it will rotate to face the player. It starts a cooldown counter to avoid reactivating.\n   */\n  activate() {\n    if (this.faceUser) {\n      this.getComponent(TrackUserFlag).active = true\n    }\n    this.inCooldown = true\n    this.addComponentOrReplace(\n      new NPCDelay(this.coolDownDuration, () => {\n        this.inCooldown = false\n      })\n    )\n    this.onActivate()\n  }\n  /**\n   * Closes dialog UI and makes NPC stop turning to face player\n   */\n  endInteraction() {\n    if (this.faceUser) {\n      this.getComponent(TrackUserFlag).active = false\n    }\n    if (this.dialog && this.dialog.isDialogOpen) {\n      this.dialog.closeDialogWindow()\n    }\n    if (this.bubble && this.bubble.isBubleOpen) {\n      this.bubble.closeDialogWindow()\n    }\n    this.state = NPCState.STANDING\n  }\n  /**\n   * Ends interaction and calls the onWalkAway function\n   */\n  handleWalkAway() {\n    if (this.state == NPCState.FOLLOWPATH) {\n      //|| this.state == NPCState.FOLLOWPLAYER\n      return\n    }\n\n    this.endInteraction()\n\n    if (this.onWalkAway) {\n      this.onWalkAway()\n    }\n  }\n  /**\n   * Starts a conversation, using the Dialog UI\n   * @param {Dialog[]} script Instructions to follow during the conversation\n   * @param {number|string} startIndex Where to start in the script. Can refer to an index in the array or the `name` field of a Dialog entry.\n   * @param {number} duration In seconds. If set, the UI will close after the set time\n   *\n   */\n  talk(script: Dialog[], startIndex?: number | string, duration?: number) {\n    this.introduced = true\n    this.state = NPCState.TALKING\n    if (this.closeDialogTimer.hasComponent(NPCDelay)) {\n      this.closeDialogTimer.removeComponent(NPCDelay)\n    }\n\n    if (this.bubble && this.bubble.isBubleOpen) {\n      this.bubble.closeDialogWindow()\n    }\n\n    this.dialog.openDialogWindow(script, startIndex ? startIndex : 0)\n\n    if (duration) {\n      this.closeDialogTimer.addComponentOrReplace(\n        new NPCDelay(duration, () => {\n          this.dialog.closeDialogWindow()\n        })\n      )\n    }\n  }\n\n  /**\n   * Starts a conversation, using the Dialog UI\n   * @param {Dialog[]} script Instructions to follow during the conversation\n   * @param {number|string} startIndex Where to start in the script. Can refer to an index in the array or the `name` field of a Dialog entry.\n   *\n   */\n  talkBubble(script: Dialog[], startIndex?: number | string) {\n    // this.introduced = true\n    // this.state = NPCState.TALKING\n    // if (this.closeDialogTimer.hasComponent(NPCDelay)) {\n    //   this.closeDialogTimer.removeComponent(NPCDelay)\n    // }\n\n    if (!this.bubble) {\n      this.bubble = new DialogBubble(this, this.bubbleHeight)\n    }\n\n    this.bubble.openDialogWindow(script, startIndex ? startIndex : 0)\n  }\n\n  /**\n   * The NPC model plays an animation\n   * @param {string} animationName Name of the animation to play, as stored in the model\n   * @param {boolean} noLoop If true, animation plays only once. You must also provide a duration\n   * @param {number} duration In seconds. After the duration is over, the NPC will return to the default animation.\n   *\n   */\n  playAnimation(animationName: string, noLoop?: boolean, duration?: number) {\n    // this.lastPlayedAnim.stop()\n    if (this.endAnimTimer.hasComponent(NPCDelay)) {\n      this.endAnimTimer.removeComponent(NPCDelay)\n    }\n    let newAnim = this.getComponent(Animator).getClip(animationName)\n\n    //log('playing anim : ', animationName)\n\n    if (noLoop) {\n      newAnim.looping = false\n      if (duration) {\n        this.endAnimTimer.addComponentOrReplace(\n          new NPCDelay(duration, () => {\n            newAnim.stop()\n            if (this.idleAnim) {\n              this.idleAnim.play()\n              this.lastPlayedAnim = this.idleAnim\n            }\n          })\n        )\n      }\n    }\n\n    newAnim.play(true)\n    this.lastPlayedAnim = newAnim\n  }\n\n  /**\n   * Change the idle animation on the NPC.\n   * @param {animation} string Name of the new animation to set as idle.\n   * @param {play} boolean If true, start playing this new idle animation.\n   */\n  changeIdleAnim(animation: string, play?: boolean) {\n    // this.idleAnim.stop()\n    this.idleAnim = new AnimationState(animation, { looping: true })\n    this.getComponent(Animator).addClip(this.idleAnim)\n    if (play) {\n      // this.lastPlayedAnim.stop()\n      this.idleAnim.play()\n      this.lastPlayedAnim = this.idleAnim\n    }\n  }\n\n  /**\n   * Instruct the NPC to walk following a path. If no data is provided, the NPC uses data from the last time `followPath` was called, or its definition.\n   * @param {FollowPathData} data Object with data to describe a path that an NPC can walk.\n   */\n  followPath(data?: FollowPathData) {\n    if (!this.hasComponent(NPCLerpData)) {\n      if (!data) {\n        return\n      }\n      this.addComponent(new NPCLerpData(data.path ? data.path : [],data.pathLerpType))\n    }\n\n    if (this.faceUser) {\n      this.getComponent(TrackUserFlag).active = false\n    }\n\n    let lerp = this.getComponent(NPCLerpData)\n\n    if (data) {\n      if (data.path) {\n        if (data.curve) {\n          let curvedPath = Curve3.CreateCatmullRomSpline(\n            data.path,\n            data.path.length * 4,\n            data.loop ? true : false\n          ).getPoints()\n          if (data.loop) {\n            curvedPath.pop()\n          }\n          lerp.path = curvedPath\n        } else {\n          lerp.path = data.path\n        }\n      }\n\n      if (data.loop != null) {\n        lerp.loop = data.loop\n      }\n\n      if (data.startingPoint != null) {\n        lerp.setIndex(data.startingPoint)\n      }\n\n      if (data.onFinishCallback) {\n        lerp.onFinishCallback = data.onFinishCallback\n      }\n\n      if (data.onReachedPointCallback) {\n        lerp.onReachedPointCallback = data.onReachedPointCallback\n      }\n    }\n\n    // add current location to start of path\n    const currentTransform = this.getComponent(Transform)\n    const currentPos = currentTransform.position\n\n    const lerpOriginPath = lerp.path[lerp.origin]\n    if(lerpOriginPath === undefined){\n      log(\"WARNING npc.utils lerpOriginPath is null\",lerpOriginPath,lerp.origin,lerp.target,lerp.path)\n    }\n    \n    if (\n      (lerp.fraction == 0 && lerpOriginPath.subtract(currentPos).lengthSquared() > 0.1) ||\n      (lerp.fraction > 0 &&\n        currentPos.subtract(lerpOriginPath).normalize() ==\n          lerp.path[lerp.target].subtract(lerpOriginPath).normalize())\n    ) {\n      lerp.path.splice(lerp.origin, 0, currentPos)\n      lerp.fraction = 0\n    }\n\n    if(lerp.path[lerp.target] === undefined){\n      log(\"npc.utils lerp.path[lerp.target] is null\",lerpOriginPath,lerp.origin,lerp.target,lerp.path)\n    }\n    currentTransform.lookAt(lerp.path[lerp.target])\n    \n    // speed of sections\n\n    let totalDist = 0\n    let pointsDist = []\n    for (let i = 0; i < lerp.path.length - 1; i++) {\n      let sqDist = Vector3.Distance(lerp.path[i], lerp.path[i + 1])\n      totalDist += sqDist\n      pointsDist.push(sqDist)\n    }\n    // measure return to start\n    if (lerp.loop) {\n      let sqDist = Vector3.Distance(lerp.path[lerp.path.length - 1], lerp.path[0])\n      totalDist += sqDist\n      pointsDist.push(sqDist)\n    }\n\n    if (data && data.totalDuration) {\n      lerp.totalDuration = data.totalDuration\n    } else if (data && data.speed) {\n      lerp.totalDuration = totalDist / data.speed\n    } else if (!lerp.totalDuration) {\n      lerp.totalDuration = totalDist / this.walkingSpeed\n    }\n\n    lerp.speed = []\n    for (let i = 0; i < pointsDist.length; i++) {\n      lerp.speed.push(1 / ((pointsDist[i] / totalDist) * lerp.totalDuration))\n    }\n\n    if (this.walkingAnim) {\n      if (this.endAnimTimer.hasComponent(NPCDelay)) {\n        this.endAnimTimer.removeComponent(NPCDelay)\n      }\n      //   this.idleAnim.stop()\n      //   this.lastPlayedAnim.stop()\n      this.walkingAnim.play()\n      this.lastPlayedAnim = this.walkingAnim\n    }\n\n    this.state = NPCState.FOLLOWPATH\n  }\n\n  /**\n   * Stops the NPC's walking. If a default animation exists, it will play it.\n   * @param {number} duration In seconds. If a duration is provided, the NPC will return to walking after the duration is over.\n   */\n  stopWalking(duration?: number) {\n    this.state = NPCState.STANDING\n\n    if (this.walkingAnim) {\n      //   this.walkingAnim.stop()\n      this.idleAnim.play()\n      this.lastPlayedAnim = this.idleAnim\n    }\n\n    if (duration) {\n      this.pauseWalkingTimer.addComponentOrReplace(\n        new NPCDelay(duration, () => {\n          if (this.dialog && this.dialog.isDialogOpen) return\n          this.lastPlayedAnim.stop()\n          if (this.walkingAnim) {\n            this.walkingAnim.play()\n            this.lastPlayedAnim = this.walkingAnim\n          }\n          if (this.endAnimTimer.hasComponent(NPCDelay)) {\n            this.endAnimTimer.removeComponent(NPCDelay)\n          }\n          this.state = NPCState.FOLLOWPATH\n        })\n      )\n    }\n  }\n}\n"],"names":["lockXZRotation","rotSpeed","active","this","faceUserAdded","engine","addSystem","FaceUserSystem","TrackUserFlag","Component","player","Camera","instance","getComponentGroup","dt","_b","__values","followingNPCs","entities","npc","transform","getComponent","Transform","trackUser","direction","Vector3","position","x","y","z","subtract","rotation","Quaternion","Slerp","LookRotation","canvas","UICanvas","visible","ButtonStyles","NPCState","NPCLerpType","SFFont","Font","Fonts","SanFrancisco","SFHeavyFont","SanFrancisco_Heavy","lightTheme","Texture","darkTheme","bubblesTexture","setUVSection","plane","section","sizeX","sizeY","_uv00","_uv10","_uv11","_uv01","uvs","setUVs","Vector2","sourceLeft","sourceTop","sourceHeight","sourceWidth","setSection","image","buttonIconPos","textLen","pos","ConfirmMode","buttons","buttonE","buttonF","white","buttonRed","buttonDark","roundBlack","squareBlack","roundWhite","squareWhite","roundSilver","squareSilver","roundGold","squareGold","buttonLabels","E","F","EBlack","FBlack","backgrounds","promptBackground","promptLargeBackground","promptSlantedBackground","NPCDialog","icons","closeW","closeD","closeWLarge","closeDLarge","closeWNoBack","closeDNoBack","closeWNoBackLarge","closeDNoBackLarge","FDark","FWhite","EDark","EWhite","Timer","TimerLarge","ClickWhite","ClickDark","checkboxes","wOff","wOn","dOff","dOn","wLargeOff","wLargeOn","dLargeOff","dLargeOn","switches","roundOff","roundRed","roundGreen","squareOff","squareRed","squareGreen","bubbles","short","normal","long","huge","seconds","onTimeReachedCallback","NPCTimerSystem","createAndAddToEngine","elapsedTime","targetTime","onTargetTimeReached","entity","_this","removeComponent","NPCDelay_1","NPCDelay","entitiesWithDelay","_instance","ent","timerComponent","UIscaleMultiplier","portraitXPos","imageXPos","imageYPos","portraitScale","imageScale","textYPos","button1XPos","button4XPos","button1YPos","button2YPos","buttonIconWidth","buttonIconHeight","defaultPortrait","useDarkTheme","sound","customTheme","uiTheme","container","UIContainerRect","width","vAlign","positionY","panel","UIImage","resources","height","onClick","OnClick","confirmText","Next","defaultPortraitTexture","path","src","portrait","positionX","offsetX","offsetY","text","UIText","adaptWidth","textWrapping","hAlign","font","fontSize","hTextAlign","vTextAlign","color","Color4","White","Black","isPointerBlocker","soundEnt","Entity","addComponent","addEntity","setParent","Attachable","AVATAR","AudioSource","AudioClip","volume","defaultSound","button1","CustomDialogButton","Confirm","hide","button2","Cancel","button3","Button3","DARK","button4","Button4","skipButton","skipDialogs","WHITE","label","icon","leftClickIcon","DialogTypeInSystem","DialogWindow","NPCScript","textId","UIOpenTime","Date","now","activeTextId","findDialogByName","currentText","audio","addComponentOrReplace","playOnce","source","log","newText","typeSpeed","undefined","ClickAction","Input","subscribe","ActionButton","POINTER","e","isDialogOpen","done","isQuestionPanel","isFixedScreen","rush","EButtonAction","PRIMARY","FButtonAction","SECONDARY","skipable","layoutDialogWindow","mode","isQuestion","triggeredByNext","isEndOfDialog","closeDialogWindow","length","goToDialog","triggeredActions","textY","update","dummyQuestionDelays","show","value","timer","speed","charsToAdd","Math","floor","visibleChars","closeTag","fullText","substr","dialog","newChars","openTag","i","parent","texture","posX","posY","style","_super","RED","ROUNDBLACK","ROUNDWHITE","ROUNDSILVER","ROUNDGOLD","SQUAREBLACK","SQUAREWHITE","SQUARESILVER","SQUAREGOLD","__extends","Gray","dialogs","name","NPCTriggerSystem","_cameraTriggerWrapper","CameraTrigger","TriggerBoxShape","_componentGroup","NPCTriggerComponent","Object","shape","setShape","entitiesWithTriggers","key","forEach","shouldWrapTriggerEntity","wrapTriggerEntity","_triggers","hasOwnProperty","wrapper","isDebugging","updateDebugEntity","isInEngine","trigger","enabled","wasEnabled","addDebugEntity","onCameraEnter","onCameraExit","checkCollisionAgainstCamera","onTriggerEnter","onTriggerExit","checkCollisionAgainstOtherTriggers","removeDebugEntity","removeTriggerFromSystem","uuid","TriggerWrapper","activeCollisions","getActiveCollisions","disengageActiveCollision","t1","t2","engageCollision","wereColliding","hasActiveCollision","areColliding","canTriggersCollide","disengageCollision","triggeredByLayer","layer","getShape","areCollidingAABB","getGlobalPosition","TriggerSphereShape","areCollidingSphere","areCollidingAABBSphere","t1GlobalPosition","t1Shape","t2GlobalPosition","t2Shape","getBoxShapeValues","min","max","DistanceSquared","add","radius","box","sphere","dmin","entityGlobalPosition","center","size","scale","_entity","_trigger","_uuid","_isDebug","debugEnabled","getEntityWorldPosition","Zero","isAddedToEngine","ret","_collidingWith","push","other","_debugMaterial","Material","alphaTest","_debugEntity","BoxShape","withCollisions","SphereShape","rad","removeEntity","entityPosition","hasComponent","clone","parentEntity","getParent","parentRotation","Identity","rotate","_shape","data","_debugEnabled","enableDebug","type","SMOOTH_PATH","NPCWalkSystem","NPCLerpData","index","fraction","origin","target","walkingNPCGroup","state","FOLLOWPATH","RIGID_PATH","Lerp","loop","stopWalking","onFinishCallback","onReachedPointCallback","lookAt","tartInc","maxLengthHugeBubble","baseYOffset","rootEntity","Billboard","material","BasicMaterial","PlaneShape","Euler","TextShape","Color3","WorldDialogTypeInSystem","DialogBubble","slice","timeOn","adjustBubble","isBubleOpen","textLength","Dialog","showing","window","next","Text","oldDialog","model","onActivate","GLTFShape","STANDING","noUI","darkUI","dialogSound","dialogCustomTheme","textBubble","bubbleHeight","bubble","Animator","idleAnim","AnimationState","looping","addClip","lastPlayedAnim","play","walkingAnim","onWalkAway","endAnimTimer","closeDialogTimer","pauseWalkingTimer","activateButton","onlyClickTrigger","OnPointerDown","inCooldown","activate","button","hoverText","showFeedback","onlyExternalTrigger","triggerData","continueOnWalkAway","handleWalkAway","onlyETrigger","reactDistance","faceUser","turningSpeed","walkingSpeed","coolDownDuration","pathLerpType","followPath","NPC","endInteraction","script","startIndex","duration","introduced","TALKING","openDialogWindow","animationName","noLoop","newAnim","getClip","stop","animation","lerp","curve","curvedPath","Curve3","CreateCatmullRomSpline","getPoints","pop","startingPoint","setIndex","currentTransform","currentPos","lerpOriginPath","lengthSquared","normalize","splice","totalDist","pointsDist","sqDist","Distance","totalDuration"],"mappings":"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"}