[
  {
    "path": "node_modules/@dcl/amd/dist/amd.js",
    "content": "\"use strict\";\n// A naive attempt at getting the global `this`. Don’t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    const anonymousQueue = [];\n    const cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (const x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports =\n                typeof factory === 'function'\n                    ? factory.apply(globalObject, deps) || exports\n                    : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror === 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        const handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule === toModule || depth === 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            const path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        const from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        const inQueue = {};\n        for (const i in registeredModules) {\n            inQueue[i] = false;\n        }\n        const queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            const element = queue.shift();\n            const dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    const dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    const dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        const dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies +\n                ' has not been defined. Please include it as a dependency in ' +\n                parentModule +\n                \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    const _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, \n            // eslint-disable-next-line prefer-rest-params\n            anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0) {\n            const exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (const i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (const i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ === 'require' || $ === 'exports' || $ === 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles\n                    .map(($) => '\\n  - ' + $.join(' -> '))\n                    .join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules\n                    .map(($) => '\\n  - ' + $.name)\n                    .join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern =\n            /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "1fcc2d76805964317daad52b00a258748d14ac85cfd45892dfdb47e8951b1ef1"
  },
  {
    "path": "node_modules/decentraland-ecs/dist/src/index.js",
    "content": "(function (exports) {\n  'use strict';\n\n  /**\r\n   * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities\r\n   * to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.\r\n   * @public\r\n   */\r\n  var Attachable = /** @class */ (function () {\r\n      function Attachable() {\r\n      }\r\n      /** Used to attach entities to the avatar. Entities will follow the avatar when it moves */\r\n      Attachable.AVATAR = {\r\n          getEntityRepresentation: function (engine) { return engine.avatarEntity; }\r\n      };\r\n      /** Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera */\r\n      Attachable.FIRST_PERSON_CAMERA = {\r\n          getEntityRepresentation: function (engine) { return engine.firstPersonCameraEntity; }\r\n      };\r\n      return Attachable;\r\n  }());\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n\r\n  Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\r\n  /* global Reflect, Promise */\r\n\r\n  var extendStatics = function(d, b) {\r\n      extendStatics = Object.setPrototypeOf ||\r\n          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n      return extendStatics(d, b);\r\n  };\r\n\r\n  function __extends(d, b) {\r\n      if (typeof b !== \"function\" && b !== null)\r\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n      extendStatics(d, b);\r\n      function __() { this.constructor = d; }\r\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n  }\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\r\n\r\n  function __decorate(decorators, target, key, desc) {\r\n      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n      return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n  }\r\n\r\n  function __metadata(metadataKey, metadataValue) {\r\n      if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n  }\r\n\r\n  function __awaiter(thisArg, _arguments, P, generator) {\r\n      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n      return new (P || (P = Promise))(function (resolve, reject) {\r\n          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n          function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n      });\r\n  }\r\n\r\n  function __generator(thisArg, body) {\r\n      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n      function verb(n) { return function (v) { return step([n, v]); }; }\r\n      function step(op) {\r\n          if (f) throw new TypeError(\"Generator is already executing.\");\r\n          while (_) try {\r\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n              if (y = 0, t) op = [op[0] & 2, t.value];\r\n              switch (op[0]) {\r\n                  case 0: case 1: t = op; break;\r\n                  case 4: _.label++; return { value: op[1], done: false };\r\n                  case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                  case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                  default:\r\n                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                      if (t[2]) _.ops.pop();\r\n                      _.trys.pop(); continue;\r\n              }\r\n              op = body.call(thisArg, _);\r\n          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n      }\r\n  }\r\n\r\n  function __values(o) {\r\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n      if (m) return m.call(o);\r\n      if (o && typeof o.length === \"number\") return {\r\n          next: function () {\r\n              if (o && i >= o.length) o = void 0;\r\n              return { value: o && o[i++], done: !o };\r\n          }\r\n      };\r\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n  }\r\n\r\n  function __read(o, n) {\r\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n      if (!m) return o;\r\n      var i = m.call(o), r, ar = [], e;\r\n      try {\r\n          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n      }\r\n      catch (error) { e = { error: error }; }\r\n      finally {\r\n          try {\r\n              if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n          }\r\n          finally { if (e) throw e.error; }\r\n      }\r\n      return ar;\r\n  }\r\n\r\n  function __spreadArray(to, from) {\r\n      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n          to[j] = from[i];\r\n      return to;\r\n  }\n\n  var lastGeneratedId = 0;\r\n  /**\r\n   * Log function. Only works in debug mode, otherwise it does nothing.\r\n   * @param args - any loggable parameter\r\n   * @public\r\n   */\r\n  function log() {\r\n      var args = [];\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n          args[_i] = arguments[_i];\r\n      }\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.log.apply(dcl, __spreadArray([], __read(args)));\r\n      }\r\n      else {\r\n          console.log.apply(console, __spreadArray(['DEBUG:'], __read(args)));\r\n      }\r\n  }\r\n  /**\r\n   * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\r\n   * @param error - string or Error object.\r\n   * @param data - any debug information.\r\n   * @public\r\n   */\r\n  function error(error, data) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.error(error, data);\r\n      }\r\n      else {\r\n          console.error('ERROR:', error, data);\r\n      }\r\n  }\r\n  /**\r\n   * Generates a new prefixed id\r\n   * @public\r\n   */\r\n  function newId(type) {\r\n      lastGeneratedId++;\r\n      if (type.length === 0)\r\n          throw new Error('newId(type: string): type cannot be empty');\r\n      return type + lastGeneratedId.toString(36);\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  function uuid() {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n          var r = (Math.random() * 16) | 0;\r\n          var v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n          return v.toString(16);\r\n      });\r\n  }\r\n  /**\r\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\r\n   * @param size - the number of element to construct and put in the array\r\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\r\n   * @returns a new array filled with new objects\r\n   * @internal\r\n   */\r\n  function buildArray$1(size, itemBuilder) {\r\n      var a = [];\r\n      for (var i = 0; i < size; ++i) {\r\n          a.push(itemBuilder());\r\n      }\r\n      return a;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function openExternalURL(url) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.openExternalUrl(url);\r\n      }\r\n      else {\r\n          error('ERROR: openExternalURL dcl is undefined');\r\n      }\r\n  }\r\n  /**\r\n   * Popup NFT info dialog\r\n   * @param scr - 'ethereum://contractAddress/tokenID'\r\n   * @param comment - optional. add a comment.\r\n   * @public\r\n   */\r\n  function openNFTDialog(scr, comment) {\r\n      if (comment === void 0) { comment = null; }\r\n      if (typeof dcl !== 'undefined') {\r\n          var regex = /ethereum:\\/\\/(.+)\\/(.+)/;\r\n          var matches = scr.match(regex);\r\n          if (!matches || matches.length < 3) {\r\n              return;\r\n          }\r\n          dcl.openNFTDialog(matches[1], matches[2], comment);\r\n      }\r\n      else {\r\n          error('ERROR: openNFTDialog dcl is undefined');\r\n      }\r\n  }\n\n  var eventNameSymbol = '__event_name__';\r\n  var takenEventNames = [];\r\n  function getEventNameFromConstructor(ctor) {\r\n      if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\r\n          throw new Error('The EventConstructor is not registered');\r\n      }\r\n      return ctor[eventNameSymbol];\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var EventManager = /** @class */ (function () {\r\n      function EventManager() {\r\n          this.listeners = {};\r\n      }\r\n      EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              listeners = this.listeners[eventName] = [];\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  throw new Error('The provided listener is already registered');\r\n              }\r\n          }\r\n          listeners.push({\r\n              listener: listener,\r\n              fn: listenerFunction\r\n          });\r\n          return this;\r\n      };\r\n      EventManager.prototype.removeListener = function (listener, eventClass) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              return false;\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  listeners.splice(i, 1);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      EventManager.prototype.fireEvent = function (event) {\r\n          var eventName = getEventNameFromConstructor(event.constructor);\r\n          var listeners = this.listeners[eventName];\r\n          if (listeners) {\r\n              for (var i = 0; i < listeners.length; i++) {\r\n                  try {\r\n                      var l = listeners[i];\r\n                      l.fn.call(l.listener, event);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an instance of Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      return EventManager;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function EventConstructor() {\r\n      var eventName = newId('EV');\r\n      if (takenEventNames.indexOf(eventName) !== -1) {\r\n          throw new Error(\"The event name \".concat(eventName, \" is already taken\"));\r\n      }\r\n      takenEventNames.push(eventName);\r\n      // eslint-disable-next-line @typescript-eslint/ban-types\r\n      return function (target) {\r\n          target[eventNameSymbol] = eventName;\r\n          return target;\r\n      };\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentRemoved = /** @class */ (function () {\r\n      function ComponentRemoved(entity, componentName, component) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      ComponentRemoved = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, String, Object])\r\n      ], ComponentRemoved);\r\n      return ComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ComponentAdded = /** @class */ (function () {\r\n      function ComponentAdded(entity, componentName, classId) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      ComponentAdded = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, String, Object])\r\n      ], ComponentAdded);\r\n      return ComponentAdded;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ParentChanged = /** @class */ (function () {\r\n      function ParentChanged(entity, parent) {\r\n          this.entity = entity;\r\n          this.parent = parent;\r\n          // stub\r\n      }\r\n      ParentChanged = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, Object])\r\n      ], ParentChanged);\r\n      return ParentChanged;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.UIValueType = void 0;\r\n  (function (UIValueType) {\r\n      UIValueType[UIValueType[\"PERCENT\"] = 0] = \"PERCENT\";\r\n      UIValueType[UIValueType[\"PIXELS\"] = 1] = \"PIXELS\";\r\n  })(exports.UIValueType || (exports.UIValueType = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIValue = /** @class */ (function () {\r\n      function UIValue(value) {\r\n          this.type = exports.UIValueType.PIXELS;\r\n          if (typeof value === 'string') {\r\n              var valueAsString = value;\r\n              if (valueAsString.indexOf('px') > -1) {\r\n                  this.type = exports.UIValueType.PIXELS;\r\n              }\r\n              else if (valueAsString.indexOf('%') > -1) {\r\n                  this.type = exports.UIValueType.PERCENT;\r\n              }\r\n              this.value = parseFloat(valueAsString);\r\n          }\r\n          else {\r\n              this.value = value;\r\n          }\r\n      }\r\n      UIValue.prototype.toString = function () {\r\n          var result = this.value.toString();\r\n          if (this.type === exports.UIValueType.PERCENT) {\r\n              result += '%';\r\n          }\r\n          else {\r\n              result += 'px';\r\n          }\r\n          return result;\r\n      };\r\n      return UIValue;\r\n  }());\n\n  var componentSymbol = '__name__symbol_';\r\n  var componentClassIdSymbol = '__classId__symbol_';\r\n  var componentIdSymbol = '__component__id_';\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentCreated = /** @class */ (function () {\r\n      function DisposableComponentCreated(componentId, componentName, classId) {\r\n          this.componentId = componentId;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      DisposableComponentCreated = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, String, Number])\r\n      ], DisposableComponentCreated);\r\n      return DisposableComponentCreated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentRemoved = /** @class */ (function () {\r\n      function DisposableComponentRemoved(componentId) {\r\n          this.componentId = componentId;\r\n          // stub\r\n      }\r\n      DisposableComponentRemoved = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], DisposableComponentRemoved);\r\n      return DisposableComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentUpdated = /** @class */ (function () {\r\n      function DisposableComponentUpdated(componentId, component) {\r\n          this.componentId = componentId;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      DisposableComponentUpdated = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], DisposableComponentUpdated);\r\n      return DisposableComponentUpdated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function Component(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \".concat(target.originalClassName, \" with: \").concat(componentName));\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              // eslint-disable-next-line prefer-rest-params\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function DisposableComponent(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \".concat(target.originalClassName, \" with: \").concat(componentName));\r\n          }\r\n          if (typeof classId !== 'number' || isNaN(classId)) {\r\n              throw new Error(\"classId: \".concat(classId, \" is an invalid integer\"));\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              if (!DisposableComponent.engine) {\r\n                  throw new Error('You need to set a DisposableComponent.engine before creating disposable components');\r\n              }\r\n              // eslint-disable-next-line prefer-rest-params\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              var id = newId('C');\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              Object.defineProperty(ret, componentIdSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: id\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              if (DisposableComponent.engine) {\r\n                  DisposableComponent.engine.registerComponent(ret);\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.isDisposableComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /** @internal */\r\n  (function (DisposableComponent) {\r\n      /** @internal */\r\n      // eslint-disable-next-line prefer-const\r\n      DisposableComponent.engine = null;\r\n  })(DisposableComponent || (DisposableComponent = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentName(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentSymbol]) {\r\n          return component[componentSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentClassId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentClassIdSymbol]) {\r\n          return component[componentClassIdSymbol];\r\n      }\r\n      if (!component[componentSymbol]) {\r\n          throw new TypeError(component + ' is not a registered component.');\r\n      }\r\n      return null;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentIdSymbol]) {\r\n          return component[componentIdSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered disposable component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var ObservableComponent = /** @class */ (function () {\r\n      function ObservableComponent() {\r\n          // @internal\r\n          this.dirty = false;\r\n          // @internal\r\n          this.data = {};\r\n          this.subscriptions = [];\r\n      }\r\n      ObservableComponent.component = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          this.data[propertyKey] = getComponentId(value);\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.field = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      this.data[propertyKey] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.uiValue = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey].toString();\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      var finalValue = new UIValue(value);\r\n                      this.data[propertyKey] = finalValue;\r\n                      if (finalValue !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, finalValue, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.readonly = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      if (propertyKey in this.data === false) {\r\n                          throw new Error(\"The field \".concat(propertyKey, \" is uninitialized\"));\r\n                      }\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      if (propertyKey in this.data) {\r\n                          throw new Error(\"The field \".concat(propertyKey, \" is readonly\"));\r\n                      }\r\n                      this.data[propertyKey] = value;\r\n                      this.dirty = true;\r\n                  },\r\n                  enumerable: true,\r\n                  configurable: false\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.prototype.onChange = function (fn) {\r\n          this.subscriptions.push(fn);\r\n          return this;\r\n      };\r\n      ObservableComponent.prototype.toJSON = function () {\r\n          return this.data;\r\n      };\r\n      return ObservableComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function isDisposableComponent(component) {\r\n      return componentIdSymbol in component;\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentGroup = /** @class */ (function () {\r\n      function ComponentGroup() {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          this.entities = [];\r\n          this.active = false;\r\n          this._requiresNames = [];\r\n          // validate requires list\r\n          if (!requires) {\r\n              throw new Error('ComponentGroup: Could not load the requires list');\r\n          }\r\n          if (!(requires instanceof Array)) {\r\n              throw new Error('ComponentGroup: requires list is not an Array');\r\n          }\r\n          Object.defineProperty(this, 'requires', {\r\n              get: function () {\r\n                  return requires.slice();\r\n              }\r\n          });\r\n          Object.defineProperty(this, 'requiresNames', {\r\n              get: function () {\r\n                  return this._requiresNames.slice();\r\n              }\r\n          });\r\n          var _loop_1 = function (ix) {\r\n              var component = requires[ix];\r\n              var name = null;\r\n              if (!component) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \".concat(ix, \" is invalid\"));\r\n              }\r\n              try {\r\n                  name = getComponentName(component);\r\n              }\r\n              catch (e) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \".concat(ix, \" is not registered as a @Component. Remember to provide the class of the component, not the name\"));\r\n              }\r\n              if (this_1._requiresNames.some(function ($) { return $ === name; })) {\r\n                  throw new Error(\"ComponentGroup: the required component list has a repeated name \".concat(name));\r\n              }\r\n              this_1._requiresNames.push(name);\r\n          };\r\n          var this_1 = this;\r\n          for (var ix = 0; ix < requires.length; ix++) {\r\n              _loop_1(ix);\r\n          }\r\n      }\r\n      ComponentGroup.prototype.hasEntity = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return false;\r\n          return this.entities.indexOf(entity) !== -1;\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.addEntity = function (entity) {\r\n          if (!entity.isAddedToEngine()) {\r\n              throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine');\r\n          }\r\n          if (this.entities.indexOf(entity) === -1) {\r\n              this.entities.push(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.removeEntity = function (entity) {\r\n          var id = this.entities.indexOf(entity);\r\n          if (id !== -1) {\r\n              this.entities.splice(id, 1);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.componentRemoved = function (entity, component) {\r\n          if (this._requiresNames.indexOf(component) !== -1) {\r\n              this.removeEntity(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.meetsRequirements = function (entity) {\r\n          for (var i = 0; i < this._requiresNames.length; i++) {\r\n              var componentName = this._requiresNames[i];\r\n              if (!(componentName in entity.components)) {\r\n                  return false;\r\n              }\r\n          }\r\n          return true;\r\n      };\r\n      return ComponentGroup;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Entity = /** @class */ (function () {\r\n      function Entity(name) {\r\n          this.name = name;\r\n          this.children = {};\r\n          this.eventManager = null;\r\n          this.alive = false;\r\n          this.uuid = newId('E');\r\n          this.components = {};\r\n          // @internal\r\n          this.engine = null;\r\n          // @internal\r\n          this._parent = null;\r\n          // stub\r\n      }\r\n      /**\r\n       * Adds or replaces a component in the entity.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponentOrReplace = function (component) {\r\n          if (typeof component === 'function') {\r\n              throw new Error('You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          if (typeof component !== 'object') {\r\n              throw new Error(\"You passed a \".concat(typeof component, \", an instance of component is expected\"));\r\n          }\r\n          var componentName = getComponentName(component);\r\n          if (this.components[componentName]) {\r\n              if (this.components[componentName] === component) {\r\n                  return component;\r\n              }\r\n              this.removeComponent(this.components[componentName], false);\r\n          }\r\n          return this.addComponent(component);\r\n      };\r\n      Entity.prototype.hasComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' &&\r\n              typeOfComponent !== 'object' &&\r\n              typeOfComponent !== 'function') {\r\n              throw new Error('Entity#has(component): component is not a class, name or instance');\r\n          }\r\n          if (component === null)\r\n              return false;\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return false;\r\n          }\r\n          if (typeOfComponent === 'object') {\r\n              return storedComponent === component;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              return storedComponent instanceof component;\r\n          }\r\n          return true;\r\n      };\r\n      Entity.prototype.getComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#get(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              throw new Error(\"Can not get component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  throw new Error(\"Can not get component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\" (by instance)\"));\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      Entity.prototype.getComponentOrNull = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#getOrNull(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return null;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  return null;\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      /**\r\n       * Gets a component, if it doesn't exist, it creates the component and returns it.\r\n       * @param component - component class\r\n       */\r\n      Entity.prototype.getComponentOrCreate = function (component) {\r\n          if (typeof component !== 'function') {\r\n              throw new Error('Entity#getOrCreate(component): component is not a class');\r\n          }\r\n          var ret = this.getComponentOrNull(component);\r\n          if (!ret) {\r\n              ret = new component();\r\n              // Safe-guard to only add registered components to entities\r\n              getComponentName(ret);\r\n              this.addComponentOrReplace(ret);\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Adds a component. If the component already exist, it throws an Error.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponent = function (component) {\r\n          if (typeof component !== 'object') {\r\n              throw new Error('Entity#add(component): You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          var componentName = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          if (this.components[componentName]) {\r\n              throw new Error(\"A component of type \\\"\".concat(componentName, \"\\\" is already present in entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n          }\r\n          this.components[componentName] = component;\r\n          if (this.eventManager) {\r\n              this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId));\r\n          }\r\n          var storedComponent = component;\r\n          if (typeof storedComponent.addedToEntity === 'function') {\r\n              storedComponent.addedToEntity(this);\r\n          }\r\n          return component;\r\n      };\r\n      Entity.prototype.removeComponent = function (\r\n      // eslint-disable-next-line @typescript-eslint/ban-types\r\n      component, triggerRemovedEvent) {\r\n          if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' &&\r\n              typeOfComponent !== 'function' &&\r\n              typeOfComponent !== 'object') {\r\n              throw new Error('Entity#remove(component): component is not a class, class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              log(\"Entity Warning: Trying to remove inexisting component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n              return;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  delete this.components[componentName];\r\n                  if (storedComponent) {\r\n                      if (triggerRemovedEvent && this.eventManager) {\r\n                          this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n                      }\r\n                      if (typeof storedComponent.removedFromEntity === 'function') {\r\n                          storedComponent.removedFromEntity(this);\r\n                      }\r\n                  }\r\n                  return;\r\n              }\r\n              else {\r\n                  log(\"Entity Warning: Trying to remove wrong (by constructor) component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n                  return;\r\n              }\r\n          }\r\n          delete this.components[componentName];\r\n          if (storedComponent) {\r\n              if (triggerRemovedEvent && this.eventManager) {\r\n                  this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n              }\r\n              if (typeof storedComponent.removedFromEntity === 'function') {\r\n                  storedComponent.removedFromEntity(this);\r\n              }\r\n          }\r\n          return;\r\n      };\r\n      /**\r\n       * Returns true if the entity is already added to the engine.\r\n       * Returns false if no engine was defined.\r\n       */\r\n      Entity.prototype.isAddedToEngine = function () {\r\n          if (this.engine &&\r\n              (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Sets the parent entity\r\n       */\r\n      Entity.prototype.setParent = function (_parent) {\r\n          var newParent;\r\n          // Check if parent is of type Attachable\r\n          if (_parent && 'getEntityRepresentation' in _parent) {\r\n              if (!this.engine) {\r\n                  throw new Error(\"In order to set an attachable as parent, you first need to add the entity to the engine.\");\r\n              }\r\n              newParent = _parent.getEntityRepresentation(this.engine);\r\n          }\r\n          else {\r\n              newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;\r\n          }\r\n          var currentParent = this.getParent();\r\n          if (newParent === this) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\".concat(this.identifier, \"\\\": An entity can't set itself as a its own parent\"));\r\n          }\r\n          if (newParent === currentParent) {\r\n              return this;\r\n          }\r\n          var circularAncestor = this.getCircularAncestor(newParent);\r\n          if (circularAncestor) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\".concat(this.identifier, \"\\\": Circular parent references are not allowed (See entity \\\"\").concat(circularAncestor, \"\\\")\"));\r\n          }\r\n          if (currentParent) {\r\n              delete currentParent.children[this.uuid];\r\n          }\r\n          // Make sure that the parent and child are both on the engine, or off the engine, together\r\n          if (newParent !== null && newParent.uuid !== '0') {\r\n              if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\r\n                  this.engine.removeEntity(this);\r\n              }\r\n              if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\r\n                  newParent.engine.addEntity(this);\r\n              }\r\n          }\r\n          this._parent = newParent || null;\r\n          this.registerAsChild();\r\n          if (this.eventManager && this.engine) {\r\n              this.eventManager.fireEvent(new ParentChanged(this, newParent));\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the parent entity\r\n       */\r\n      Entity.prototype.getParent = function () {\r\n          return this._parent;\r\n      };\r\n      Object.defineProperty(Entity.prototype, \"identifier\", {\r\n          get: function () {\r\n              return this.name || this.uuid;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Entity.prototype.getCircularAncestor = function (ent) {\r\n          var root = this.engine ? this.engine.rootEntity : null;\r\n          var e = ent;\r\n          while (e && e !== root) {\r\n              var parent = e.getParent();\r\n              if (parent === this) {\r\n                  return e.uuid;\r\n              }\r\n              e = parent;\r\n          }\r\n          return null;\r\n      };\r\n      Entity.prototype.registerAsChild = function () {\r\n          var parent = this.getParent();\r\n          if (this.uuid && parent) {\r\n              parent.children[this.uuid] = this;\r\n          }\r\n      };\r\n      return Entity;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Engine = /** @class */ (function () {\r\n      function Engine(rootEntity) {\r\n          this.eventManager = new EventManager();\r\n          // @internal\r\n          this.systems = [];\r\n          // @internal\r\n          this.entityLists = {};\r\n          // @internal\r\n          this.addedSystems = [];\r\n          this._entities = {};\r\n          this._disposableComponents = {};\r\n          this._componentGroups = {};\r\n          // systems that doesn't require any component or handle their own logic\r\n          this.simpleSystems = [];\r\n          this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler);\r\n          this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler);\r\n          this.rootEntity = rootEntity;\r\n          this.firstPersonCameraEntity = new Entity();\r\n          this.firstPersonCameraEntity.uuid =\r\n              'FirstPersonCameraEntityReference';\r\n          this.addEntity(this.firstPersonCameraEntity);\r\n          this.avatarEntity = new Entity();\r\n          this.avatarEntity.uuid = 'AvatarEntityReference';\r\n          this.addEntity(this.avatarEntity);\r\n      }\r\n      Object.defineProperty(Engine.prototype, \"entities\", {\r\n          get: function () {\r\n              return this._entities;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Engine.prototype, \"disposableComponents\", {\r\n          get: function () {\r\n              return this._disposableComponents;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Engine.prototype.addEntity = function (entity) {\r\n          var parent = entity.getParent();\r\n          if (entity.isAddedToEngine()) {\r\n              return entity;\r\n          }\r\n          entity.eventManager = this.eventManager;\r\n          entity.engine = this;\r\n          this._entities[entity.uuid] = entity;\r\n          this.checkRequirementsAndAdd(entity);\r\n          if (!parent) {\r\n              entity.setParent(this.rootEntity);\r\n          }\r\n          else {\r\n              if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\r\n                  log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' +\r\n                      parent.uuid);\r\n              }\r\n          }\r\n          entity.alive = true;\r\n          for (var i in entity.children) {\r\n              var child = entity.children[i];\r\n              if (child) {\r\n                  if (!child.isAddedToEngine()) {\r\n                      this.addEntity(child);\r\n                  }\r\n              }\r\n          }\r\n          return entity;\r\n      };\r\n      Engine.prototype.removeEntity = function (entity) {\r\n          var id = entity.uuid;\r\n          if (entity.isAddedToEngine()) {\r\n              for (var componentName in entity.components) {\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      for (var groupIndex in componentGroups) {\r\n                          componentGroups[groupIndex].removeEntity(entity);\r\n                      }\r\n                  }\r\n                  delete this.entityLists[componentName][id];\r\n              }\r\n              for (var i = 0; i < this.simpleSystems.length; i++) {\r\n                  var system = this.simpleSystems[i];\r\n                  if (system.onRemoveEntity) {\r\n                      system.onRemoveEntity(entity);\r\n                  }\r\n              }\r\n              for (var i in entity.children) {\r\n                  var child = entity.children[i];\r\n                  if (child) {\r\n                      this.removeEntity(child);\r\n                  }\r\n              }\r\n              entity.alive = false;\r\n              entity.eventManager = null;\r\n              delete this._entities[id];\r\n              return true;\r\n          }\r\n          else {\r\n              log('Engine: Trying to remove non existent entity from engine.');\r\n              if (!entity.isAddedToEngine()) {\r\n                  log(\"Engine: Entity \\\"\".concat(entity.uuid, \"\\\" has not been added to any engine yet.\"));\r\n              }\r\n              else {\r\n                  log('Engine: Entity id: ' + id);\r\n              }\r\n              log(\"Engine: Entity's components:\");\r\n              for (var componentName in entity.components) {\r\n                  log(componentName);\r\n              }\r\n              return false;\r\n          }\r\n      };\r\n      Engine.prototype.addSystem = function (system, priority) {\r\n          if (priority === void 0) { priority = 0; }\r\n          if (this.addedSystems.indexOf(system) !== -1) {\r\n              log('Engine: Trying to add a system that is already added. Aborting');\r\n              return system;\r\n          }\r\n          if (this.systems.length > 0) {\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var entry = this.systems[i];\r\n                  var isLast = i === this.systems.length - 1;\r\n                  if (entry.priority > priority) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n                  else if (isLast) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i + 1, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.addedSystems.push(system);\r\n              this.systems.splice(1, 0, { system: system, priority: priority });\r\n          }\r\n          this.registerSystem(system);\r\n          return system;\r\n      };\r\n      Engine.prototype.removeSystem = function (system) {\r\n          var idx = this.addedSystems.indexOf(system);\r\n          if (idx !== -1) {\r\n              system.active = false;\r\n              if (system.deactivate) {\r\n                  system.deactivate();\r\n              }\r\n              this.addedSystems.splice(idx, 1);\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var sys = this.systems[i].system;\r\n                  if (sys === system) {\r\n                      this.systems.splice(i, 1);\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.update = function (dt) {\r\n          for (var i in this.systems) {\r\n              var system = this.systems[i].system;\r\n              if (system.active && system.update) {\r\n                  try {\r\n                      system.update(dt);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      Engine.prototype.getEntitiesWithComponent = function (component) {\r\n          var componentName = typeof component === 'string' ? component : getComponentName(component);\r\n          if (componentName in this.entityLists) {\r\n              return this.entityLists[componentName];\r\n          }\r\n          else {\r\n              return (this.entityLists[componentName] = {});\r\n          }\r\n      };\r\n      Engine.prototype.registerComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          var name = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          this._disposableComponents[id] = component;\r\n          if (classId !== null) {\r\n              this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId));\r\n              this.eventManager.fireEvent(new DisposableComponentUpdated(id, component));\r\n          }\r\n      };\r\n      Engine.prototype.disposeComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          if (delete this._disposableComponents[id]) {\r\n              this.eventManager.fireEvent(new DisposableComponentRemoved(id));\r\n              if (component.onDispose) {\r\n                  component.onDispose();\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.updateComponent = function (component) {\r\n          this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component));\r\n      };\r\n      Engine.prototype.getComponentGroup = function () {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          var componentGroup = undefined;\r\n          // Return an already created component-group if it already exists\r\n          if (requires.length > 0) {\r\n              // 1. get component groups for first require\r\n              var componentGroups = this._componentGroups[getComponentName(requires[0])];\r\n              if (componentGroups) {\r\n                  var components = requires.slice();\r\n                  // 2. search for a component group that has all the same requirements\r\n                  for (var i = 0; i < componentGroups.length; i++) {\r\n                      var traversedComponentGroup = componentGroups[i];\r\n                      if (components.length === traversedComponentGroup.requires.length) {\r\n                          for (var j = 0; j < components.length; j++) {\r\n                              if (traversedComponentGroup.requires.indexOf(components[j]) === -1)\r\n                                  break;\r\n                              if (j === components.length - 1) {\r\n                                  componentGroup = traversedComponentGroup;\r\n                              }\r\n                          }\r\n                          if (componentGroup)\r\n                              break;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          if (componentGroup) {\r\n              // 3. Found an existent component group with the exact same requirements\r\n              return componentGroup;\r\n          }\r\n          // Otherwise create and store it\r\n          componentGroup = new (ComponentGroup.bind.apply(ComponentGroup, __spreadArray([void 0], __read(requires))))();\r\n          componentGroup.active = true;\r\n          var requiresNames = componentGroup.requiresNames;\r\n          for (var i = 0; i < requiresNames.length; i++) {\r\n              var componentName = requiresNames[i];\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (!componentGroups) {\r\n                  this._componentGroups[componentName] = componentGroups = [];\r\n              }\r\n              if (componentGroups.indexOf(componentGroup) === -1) {\r\n                  componentGroups.push(componentGroup);\r\n              }\r\n          }\r\n          for (var entityId in this._entities) {\r\n              this.checkRequirements(this._entities[entityId], componentGroup);\r\n          }\r\n          return componentGroup;\r\n      };\r\n      Engine.prototype.removeComponentGroup = function (componentGroup) {\r\n          if (componentGroup.active) {\r\n              componentGroup.active = false;\r\n              var requiresNames = componentGroup.requiresNames;\r\n              for (var i = 0; i < requiresNames.length; i++) {\r\n                  var componentName = requiresNames[i];\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      var idx = componentGroups.indexOf(componentGroup);\r\n                      if (idx !== -1) {\r\n                          componentGroups.splice(idx, 1);\r\n                      }\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.registerSystem = function (system) {\r\n          system.active = true;\r\n          if (system.activate) {\r\n              system.activate(this);\r\n          }\r\n          this.simpleSystems.push(system);\r\n      };\r\n      Engine.prototype.checkRequirementsAndAdd = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          for (var componentName in entity.components) {\r\n              if (!(componentName in this.entityLists)) {\r\n                  this.entityLists[componentName] = {};\r\n              }\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (componentGroups) {\r\n                  for (var systemIndex in componentGroups) {\r\n                      this.checkRequirements(entity, componentGroups[systemIndex]);\r\n                  }\r\n              }\r\n          }\r\n          for (var i = 0; i < this.simpleSystems.length; i++) {\r\n              var system = this.simpleSystems[i];\r\n              if (system.onAddEntity) {\r\n                  system.onAddEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.checkRequirements = function (entity, system) {\r\n          if (system.meetsRequirements(entity)) {\r\n              if (!system.hasEntity(entity)) {\r\n                  system.addEntity(entity);\r\n              }\r\n          }\r\n          else {\r\n              if (system.hasEntity(entity)) {\r\n                  system.removeEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentAddedHandler = function (event) {\r\n          var _a;\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          if (!this.entityLists[componentName]) {\r\n              this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);\r\n          }\r\n          else {\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n          }\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentRemovedHandler = function (event) {\r\n          // In case a single component gets removed from an entity, we inform\r\n          // all systems that this entity lost this specific component.\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          delete this.entityLists[componentName][entity.uuid];\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      return Engine;\r\n  }());\n\n  var _defer = Promise.resolve().then.bind(Promise.resolve());\r\n  /**\r\n   * Executes an asynchronous task\r\n   * @param task - the task to execute\r\n   * @public\r\n   */\r\n  function executeTask(task) {\r\n      var result = _defer(task);\r\n      result.isComplete = false;\r\n      result\r\n          .then(function ($) {\r\n          result.isComplete = true;\r\n          result.result = $;\r\n          result.didFail = false;\r\n      })\r\n          .catch(function ($) {\r\n          result.isComplete = true;\r\n          result.error = $;\r\n          result.didFail = true;\r\n          error('executeTask: FAILED ' + $.toString(), $);\r\n      });\r\n      return result;\r\n  }\n\n  /**\r\n   * A class serves as a medium between the observable and its observers\r\n   * @public\r\n   */\r\n  var ObserverEventState = /** @class */ (function () {\r\n      /**\r\n       * Create a new EventState\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       */\r\n      function ObserverEventState(mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.initalize(mask, skipNextObservers, target, currentTarget);\r\n      }\r\n      /**\r\n       * Initialize the current event state\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns the current event state\r\n       */\r\n      ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.mask = mask;\r\n          this.skipNextObservers = skipNextObservers;\r\n          this.target = target;\r\n          this.currentTarget = currentTarget;\r\n          return this;\r\n      };\r\n      return ObserverEventState;\r\n  }());\r\n  /**\r\n   * Represent an Observer registered to a given Observable object.\r\n   * @public\r\n   */\r\n  var Observer = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observer\r\n       * @param callback - defines the callback to call when the observer is notified\r\n       * @param mask - defines the mask of the observer (used to filter notifications)\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       */\r\n      function Observer(\r\n      /**\r\n       * Defines the callback to call when the observer is notified\r\n       */\r\n      callback, \r\n      /**\r\n       * Defines the mask of the observer (used to filter notifications)\r\n       */\r\n      mask, \r\n      /**\r\n       * Defines the current scope used to restore the JS context\r\n       */\r\n      scope) {\r\n          if (scope === void 0) { scope = null; }\r\n          this.callback = callback;\r\n          this.mask = mask;\r\n          this.scope = scope;\r\n          /**\r\n           * Gets or sets a property defining that the observer as to be unregistered after the next notification\r\n           */\r\n          this.unregisterOnNextCall = false;\r\n          /** For internal usage */\r\n          this._willBeUnregistered = false;\r\n      }\r\n      return Observer;\r\n  }());\r\n  /**\r\n   * Represent a list of observers registered to multiple Observables object.\r\n   * @public\r\n   */\r\n  var MultiObserver = /** @class */ (function () {\r\n      function MultiObserver() {\r\n          this._observers = null;\r\n          this._observables = null;\r\n      }\r\n      /**\r\n       * Raise a callback when one of the observable will notify\r\n       * @param observables - defines a list of observables to watch\r\n       * @param callback - defines the callback to call on notification\r\n       * @param mask - defines the mask used to filter notifications\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       * @returns the new MultiObserver\r\n       */\r\n      MultiObserver.Watch = function (observables, callback, mask, scope) {\r\n          var e_1, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (scope === void 0) { scope = null; }\r\n          var result = new MultiObserver();\r\n          result._observers = new Array();\r\n          result._observables = observables;\r\n          try {\r\n              for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {\r\n                  var observable = observables_1_1.value;\r\n                  var observer = observable.add(callback, mask, false, scope);\r\n                  if (observer) {\r\n                      result._observers.push(observer);\r\n                  }\r\n              }\r\n          }\r\n          catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n          finally {\r\n              try {\r\n                  if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);\r\n              }\r\n              finally { if (e_1) throw e_1.error; }\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Release associated resources\r\n       */\r\n      MultiObserver.prototype.dispose = function () {\r\n          if (this._observers && this._observables) {\r\n              for (var index = 0; index < this._observers.length; index++) {\r\n                  this._observables[index].remove(this._observers[index]);\r\n              }\r\n          }\r\n          this._observers = null;\r\n          this._observables = null;\r\n      };\r\n      return MultiObserver;\r\n  }());\r\n  /**\r\n   * The Observable class is a simple implementation of the Observable pattern.\r\n   *\r\n   * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\r\n   * This enable a more fine grained execution without having to rely on multiple different Observable objects.\r\n   * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\r\n   * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\r\n   *\r\n   * @public\r\n   */\r\n  var Observable = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observable\r\n       * @param onObserverAdded - defines a callback to call when a new observer is added\r\n       */\r\n      function Observable(onObserverAdded) {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n          this._eventState = new ObserverEventState(0);\r\n          if (onObserverAdded) {\r\n              this._onObserverAdded = onObserverAdded;\r\n          }\r\n      }\r\n      /**\r\n       * Create a new Observer with the specified callback\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @param mask - the mask used to filter observers\r\n       * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\r\n       * @param scope - optional scope for the callback to be called from\r\n       * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {\r\n          if (mask === void 0) { mask = -1; }\r\n          if (insertFirst === void 0) { insertFirst = false; }\r\n          if (scope === void 0) { scope = null; }\r\n          if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }\r\n          if (!callback) {\r\n              return null;\r\n          }\r\n          var observer = new Observer(callback, mask, scope);\r\n          observer.unregisterOnNextCall = unregisterOnFirstCall;\r\n          if (insertFirst) {\r\n              this._observers.unshift(observer);\r\n          }\r\n          else {\r\n              this._observers.push(observer);\r\n          }\r\n          if (this._onObserverAdded) {\r\n              this._onObserverAdded(observer);\r\n          }\r\n          return observer;\r\n      };\r\n      /**\r\n       * Create a new Observer with the specified callback and unregisters after the next notification\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.addOnce = function (callback) {\r\n          return this.add(callback, undefined, undefined, undefined, true);\r\n      };\r\n      /**\r\n       * Remove an Observer from the Observable object\r\n       * @param observer - the instance of the Observer to remove\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._deferUnregister(observer);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Remove a callback from the Observable object\r\n       * @param callback - the callback to remove\r\n       * @param scope - optional scope. If used only the callbacks with this scope will be removed\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.removeCallback = function (callback, scope) {\r\n          for (var index = 0; index < this._observers.length; index++) {\r\n              if (this._observers[index].callback === callback &&\r\n                  (!scope || scope === this._observers[index].scope)) {\r\n                  this._deferUnregister(this._observers[index]);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Notify all Observers by calling their respective callback with the given data\r\n       * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\r\n       * @param eventData - defines the data to send to all observers\r\n       * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\r\n       */\r\n      Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {\r\n          var e_2, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (!this._observers.length) {\r\n              return true;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          state.lastReturnValue = eventData;\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs._willBeUnregistered) {\r\n                      continue;\r\n                  }\r\n                  if (obs.mask & mask) {\r\n                      if (obs.scope) {\r\n                          state.lastReturnValue = obs.callback.apply(obs.scope, [\r\n                              eventData,\r\n                              state\r\n                          ]);\r\n                      }\r\n                      else {\r\n                          state.lastReturnValue = obs.callback(eventData, state);\r\n                      }\r\n                      if (obs.unregisterOnNextCall) {\r\n                          this._deferUnregister(obs);\r\n                      }\r\n                  }\r\n                  if (state.skipNextObservers) {\r\n                      return false;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_2) throw e_2.error; }\r\n          }\r\n          return true;\r\n      };\r\n      /**\r\n       * Calling this will execute each callback, expecting it to be a promise or return a value.\r\n       * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\r\n       * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\r\n       * and it is crucial that all callbacks will be executed.\r\n       * The order of the callbacks is kept, callbacks are not executed parallel.\r\n       *\r\n       * @param eventData - The data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       * @param target - defines the callback target (see EventState)\r\n       * @param currentTarget - defines he current object in the bubbling phase\r\n       * @returns will return a Promise than resolves when all callbacks executed successfully.\r\n       */\r\n      Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {\r\n          var _this = this;\r\n          if (mask === void 0) { mask = -1; }\r\n          // create an empty promise\r\n          var p = Promise.resolve(eventData);\r\n          // no observers? return this promise.\r\n          if (!this._observers.length) {\r\n              return p;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          // execute one callback after another (not using Promise.all, the order is important)\r\n          this._observers.forEach(function (obs) {\r\n              if (state.skipNextObservers) {\r\n                  return;\r\n              }\r\n              if (obs._willBeUnregistered) {\r\n                  return;\r\n              }\r\n              if (obs.mask & mask) {\r\n                  if (obs.scope) {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback.apply(obs.scope, [eventData, state]);\r\n                      });\r\n                  }\r\n                  else {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback(eventData, state);\r\n                      });\r\n                  }\r\n                  if (obs.unregisterOnNextCall) {\r\n                      _this._deferUnregister(obs);\r\n                  }\r\n              }\r\n          });\r\n          // return the eventData\r\n          return p.then(function () {\r\n              return eventData;\r\n          });\r\n      };\r\n      /**\r\n       * Notify a specific observer\r\n       * @param observer - defines the observer to notify\r\n       * @param eventData - defines the data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       */\r\n      Observable.prototype.notifyObserver = function (observer, eventData, mask) {\r\n          if (mask === void 0) { mask = -1; }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.skipNextObservers = false;\r\n          observer.callback(eventData, state);\r\n      };\r\n      /**\r\n       * Gets a boolean indicating if the observable has at least one observer\r\n       * @returns true is the Observable has at least one Observer registered\r\n       */\r\n      Observable.prototype.hasObservers = function () {\r\n          return this._observers.length > 0;\r\n      };\r\n      /**\r\n       * Clear the list of observers\r\n       */\r\n      Observable.prototype.clear = function () {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n      };\r\n      /**\r\n       * Clone the current observable\r\n       * @returns a new observable\r\n       */\r\n      Observable.prototype.clone = function () {\r\n          var result = new Observable();\r\n          result._observers = this._observers.slice(0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Does this observable handles observer registered with a given mask\r\n       * @param mask - defines the mask to be tested\r\n       * @returns whether or not one observer registered with the given mask is handeled\r\n       */\r\n      Observable.prototype.hasSpecificMask = function (mask) {\r\n          var e_3, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs.mask & mask || obs.mask === mask) {\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_3) throw e_3.error; }\r\n          }\r\n          return false;\r\n      };\r\n      Observable.prototype._deferUnregister = function (observer) {\r\n          var _this = this;\r\n          observer.unregisterOnNextCall = false;\r\n          observer._willBeUnregistered = true;\r\n          void executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n              return [2 /*return*/, this._remove(observer)];\r\n          }); }); });\r\n      };\r\n      // This should only be called when not iterating over _observers to avoid callback skipping.\r\n      // Removes an observer from the _observer Array.\r\n      Observable.prototype._remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._observers.splice(index, 1);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      return Observable;\r\n  }());\n\n  var modulePromise;\r\n  /**\r\n   * teleport player to a destination\r\n   * @param destination - \"coordX,coordY\", \"magic\", \"crowd\"\r\n   * @public\r\n   */\r\n  function teleportTo(destination) {\r\n      // error(`teleportTo(destination) was deprecated. Please use:\r\n      // import {requestTeleport} from '@decentraland/UserActionModule'\r\n      // executeTask(async () => {\r\n      //   await requestTeleport(destination)\r\n      // })`)\r\n      callModuleRpc('requestTeleport', [destination]);\r\n  }\r\n  function ensureModule() {\r\n      if (typeof modulePromise === 'undefined' && typeof dcl !== 'undefined') {\r\n          modulePromise = dcl.loadModule('@decentraland/UserActionModule', {});\r\n      }\r\n      return typeof modulePromise !== 'undefined' && typeof dcl !== 'undefined';\r\n  }\r\n  function callModuleRpc(methodName, args) {\r\n      if (ensureModule()) {\r\n          modulePromise.then(function ($) {\r\n              void dcl.callRpc($.rpcHandle, methodName, args);\r\n          });\r\n      }\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEvent = /** @class */ (function () {\r\n      function UUIDEvent(uuid, payload) {\r\n          this.uuid = uuid;\r\n          this.payload = payload;\r\n      }\r\n      UUIDEvent = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], UUIDEvent);\r\n      return UUIDEvent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var RaycastResponse = /** @class */ (function () {\r\n      function RaycastResponse(payload) {\r\n          this.payload = payload;\r\n      }\r\n      RaycastResponse = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], RaycastResponse);\r\n      return RaycastResponse;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEvent = /** @class */ (function () {\r\n      function PointerEvent(payload) {\r\n          this.payload = payload;\r\n      }\r\n      PointerEvent = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], PointerEvent);\r\n      return PointerEvent;\r\n  }());\r\n  var internalDcl;\r\n  /**\r\n   * @internal\r\n   * This function generates a callback that is passed to the Observable\r\n   * constructor to subscribe to the events of the DecentralandInterface\r\n   */\r\n  function createSubscriber(eventName) {\r\n      return function () {\r\n          if (internalDcl) {\r\n              internalDcl.subscribe(eventName);\r\n          }\r\n      };\r\n  }\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onCameraModeChangedObservable = new Observable(createSubscriber('cameraModeChanged'));\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onIdleStateChangedObservable = new Observable(createSubscriber('idleStateChanged'));\r\n  /**\r\n   * These events are triggered after your character enters the scene.\r\n   * @public\r\n   */\r\n  var onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));\r\n  /** @public @deprecated Use onEnterSceneObservable instead. */\r\n  var onEnterScene = onEnterSceneObservable;\r\n  /**\r\n   * These events are triggered after your character leaves the scene.\r\n   * @public\r\n   */\r\n  var onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));\r\n  /** @public @deprecated Use onLeaveSceneObservable instead. */\r\n  var onLeaveScene = onLeaveSceneObservable;\r\n  /**\r\n   * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)\r\n   * @public\r\n   */\r\n  var onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPointerLockedStateChange = new Observable(createSubscriber('onPointerLock'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onVideoEvent = new Observable(createSubscriber('videoEvent'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onProfileChanged = new Observable(createSubscriber('profileChanged'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));\r\n  /**\r\n   * @internal\r\n   * This function adds _one_ listener to the onEvent event of dcl interface.\r\n   * Leveraging a switch to route events to the Observable handlers.\r\n   */\r\n  function _initEventObservables(dcl) {\r\n      // store internal reference to dcl, it is going to be used to subscribe to the events\r\n      internalDcl = dcl;\r\n      if (internalDcl) {\r\n          internalDcl.onEvent(function (event) {\r\n              switch (event.type) {\r\n                  case 'onEnterScene': {\r\n                      onEnterSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onLeaveScene': {\r\n                      onLeaveSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'cameraModeChanged': {\r\n                      onCameraModeChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'idleStateChanged': {\r\n                      onIdleStateChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'sceneStart': {\r\n                      onSceneReadyObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerExpression': {\r\n                      onPlayerExpressionObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'videoEvent': {\r\n                      var videoData = event.data;\r\n                      var component = DisposableComponent.engine.disposableComponents[videoData.componentId];\r\n                      if (component) {\r\n                          component.update(videoData);\r\n                      }\r\n                      onVideoEvent.notifyObservers(videoData);\r\n                      return;\r\n                  }\r\n                  case 'profileChanged': {\r\n                      onProfileChanged.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onPointerLock': {\r\n                      onPointerLockedStateChange.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerConnected': {\r\n                      onPlayerConnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerDisconnected': {\r\n                      onPlayerDisconnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onRealmChanged': {\r\n                      onRealmChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerClicked': {\r\n                      onPlayerClickedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n              }\r\n          });\r\n      }\r\n  }\n\n  // This number is defined in the protocol ECS.SetEntityParent.3\r\n  var ROOT_ENTITY_ID = '0';\r\n  var DecentralandSynchronizationSystem = /** @class */ (function () {\r\n      function DecentralandSynchronizationSystem(dcl) {\r\n          this.dcl = dcl;\r\n          this.cachedComponents = {};\r\n      }\r\n      DecentralandSynchronizationSystem.prototype.activate = function (engine) {\r\n          var _this = this;\r\n          this.engine = engine;\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentCreated, this, this.disposableComponentCreated);\r\n          engine.eventManager.addListener(DisposableComponentRemoved, this, this.disposableComponentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentUpdated, this, this.disposableComponentUpdated);\r\n          engine.eventManager.addListener(ParentChanged, this, this.parentChanged);\r\n          var rootId = engine.rootEntity.uuid;\r\n          this.dcl.addEntity(rootId);\r\n          // TODO(agus): send disposableComponents if exist\r\n          this.dcl.onUpdate(function (dt) {\r\n              engine.update(dt);\r\n              _this.presentEntities();\r\n          });\r\n          this.dcl.onEvent(function (event) {\r\n              var data = event.data;\r\n              switch (event.type) {\r\n                  case 'uuidEvent':\r\n                      engine.eventManager.fireEvent(new UUIDEvent(data.uuid, data.payload));\r\n                      break;\r\n                  case 'raycastResponse':\r\n                      if (data.queryType === 'HitFirst') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      else if (data.queryType === 'HitAll') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      break;\r\n                  case 'actionButtonEvent':\r\n                      engine.eventManager.fireEvent(new PointerEvent(data.payload));\r\n                      break;\r\n              }\r\n          });\r\n      };\r\n      /**\r\n       * system.onAddEntity is called by the engine when a entity is added to the\r\n       * engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {\r\n          if (entity && entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              var parent = entity.getParent();\r\n              this.dcl.addEntity(entityId);\r\n              if (parent) {\r\n                  // If the entity has a parent, we send the the enparenting signal\r\n                  // otherwise the engine will know the entity is set as a child of\r\n                  // engine.rootEntity by default\r\n                  this.dcl.setParent(entityId, parent.uuid);\r\n              }\r\n              // This creates a cache dictionary to avoid send redundant information to\r\n              // the engine in order to avoid unnecessary work in the main thread.\r\n              this.cachedComponents[entityId] = {};\r\n              // this iterator sends the current components of te engine at the moment\r\n              // of addition\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null) {\r\n                      if (isDisposableComponent(component)) {\r\n                          // Send the attach component signal\r\n                          this.dcl.attachEntityComponent(entity.uuid, componentName, getComponentId(component));\r\n                      }\r\n                      else {\r\n                          var componentJson = JSON.stringify(component);\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);\r\n                          // Update the cached copy of the sent component\r\n                          this.cachedComponents[entityId][componentName] = componentJson;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * system.onRemoveEntity is called by the engine when a entity gets removed\r\n       * from the engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {\r\n          if (entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              // Send the removeEntity signal\r\n              this.dcl.removeEntity(entityId);\r\n              // Remove the caches from local memory\r\n              delete this.cachedComponents[entityId];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called at the end of every update cycle.\r\n       * It finds and sends updates in components of the engine entities.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.presentEntities = function () {\r\n          for (var i in this.engine.entities) {\r\n              var entity = this.engine.entities[i];\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null && !isDisposableComponent(component)) {\r\n                      var jsonRepresentation = this.getJsonIfDirty(entity.uuid, componentName, component);\r\n                      if (jsonRepresentation) {\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entity.uuid, componentName, classId, jsonRepresentation);\r\n                          this.clearDirty(entity.uuid, componentName, component, jsonRepresentation);\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          for (var id in this.engine.disposableComponents) {\r\n              var component = this.engine.disposableComponents[id];\r\n              if (component instanceof ObservableComponent && component.dirty) {\r\n                  this.dcl.componentUpdated(id, JSON.stringify(component));\r\n                  component.dirty = false;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a component is added to an entity. The event\r\n       * (param 1) contains the necessary information to notify the engine about the\r\n       * component that was added and the entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (isDisposableComponent(component)) {\r\n                  this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, getComponentId(component));\r\n              }\r\n              else if (event.classId !== null) {\r\n                  var componentJson = JSON.stringify(component);\r\n                  // Send the updated component\r\n                  this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);\r\n                  // Update the cached copy of the sent component\r\n                  this.cachedComponents[event.entity.uuid][event.componentName] =\r\n                      componentJson;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called when a component is removed from an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);\r\n              // Remove the cached component so we can send it again when re-adding\r\n              delete this.cachedComponents[event.entity.uuid][event.componentName];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is created.\r\n       * It instantiates the component in the engine, the event that updates the\r\n       * created component is fired immediatly after.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {\r\n          this.dcl.componentCreated(event.componentId, event.componentName, event.classId);\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is updated, once per\r\n       * update cycle and once after creation.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {\r\n          this.dcl.componentDisposed(event.componentId);\r\n      };\r\n      /**\r\n       * This method is called right after a diposableComponent gets disposed. That\r\n       * process is manual.\r\n       *\r\n       * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\r\n       * it remains attached to some entities?\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {\r\n          this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));\r\n      };\r\n      /**\r\n       * This method is called when a parent changes in an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {\r\n          this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.getJsonIfDirty = function (entityId, componentName, component) {\r\n          var jsonRepresentation = JSON.stringify(component);\r\n          return (jsonRepresentation !== this.cachedComponents[entityId][componentName] &&\r\n              jsonRepresentation);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.clearDirty = function (entityId, componentName, component, jsonRepresentation) {\r\n          this.cachedComponents[entityId][componentName] = jsonRepresentation;\r\n      };\r\n      return DecentralandSynchronizationSystem;\r\n  }());\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  var dist = {};\n\n  var types = {};\n\n  (function (exports) {\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  exports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;\n  (function (Orientation) {\n      /**\n       * Clockwise\n       */\n      Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n      /** Counter clockwise */\n      Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n  })(exports.Orientation || (exports.Orientation = {}));\n  (function (Space) {\n      /** Local (object) space */\n      Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\n      /** World space */\n      Space[Space[\"WORLD\"] = 1] = \"WORLD\";\n      /** Bone space */\n      Space[Space[\"BONE\"] = 2] = \"BONE\";\n  })(exports.Space || (exports.Space = {}));\n  /**\n   * Constant used to convert a value to gamma space\n   * @public\n   */\n  exports.ToGammaSpace = 1 / 2.2;\n  /**\n   * Constant used to convert a value to linear space\n   * @public\n   */\n  exports.ToLinearSpace = 2.2;\n  /**\n   * Constant used to define the minimal number value in Babylon.js\n   * @public\n   */\n  exports.Epsilon = 0.000001;\n  /**\n   * Constant used to convert from Euler degrees to radians\n   * @public\n   */\n  exports.DEG2RAD = Math.PI / 180;\n  /**\n   * Constant used to convert from radians to Euler degrees\n   * @public\n   */\n  exports.RAD2DEG = 360 / (Math.PI * 2);\n\n  }(types));\n\n  var preallocatedVariables = {};\n\n  var utils = {};\n\n  Object.defineProperty(utils, \"__esModule\", { value: true });\n  utils.buildArray = void 0;\n  /**\n   * @internal\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\n   * @param size - the number of element to construct and put in the array\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\n   * @returns a new array filled with new objects\n   * @internal\n   */\n  function buildArray(size, itemBuilder) {\n      const a = [];\n      for (let i = 0; i < size; ++i) {\n          a.push(itemBuilder());\n      }\n      return a;\n  }\n  utils.buildArray = buildArray;\n\n  var Vector3$1 = {};\n\n  var Quaternion$1 = {};\n\n  var Matrix$1 = {};\n\n  var Vector4$1 = {};\n\n  var Scalar$1 = {};\n\n  Object.defineProperty(Scalar$1, \"__esModule\", { value: true });\n  Scalar$1.Scalar = void 0;\n  /**\n   * Scalar computation library\n   * @public\n   */\n  class Scalar {\n      /**\n       * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n       * @param a - number\n       * @param b - number\n       * @param epsilon - (default = 1.401298E-45)\n       * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n       */\n      static WithinEpsilon(a, b, epsilon = 1.401298e-45) {\n          const num = a - b;\n          return -epsilon <= num && num <= epsilon;\n      }\n      /**\n       * Returns a string : the upper case translation of the number i to hexadecimal.\n       * @param i - number\n       * @returns the upper case translation of the number i to hexadecimal.\n       */\n      static ToHex(i) {\n          const str = i.toString(16);\n          if (i <= 15) {\n              return ('0' + str).toUpperCase();\n          }\n          return str.toUpperCase();\n      }\n      /**\n       * Returns -1 if value is negative and +1 is value is positive.\n       * @param _value - the value\n       * @returns the value itself if it's equal to zero.\n       */\n      static Sign(value) {\n          const _value = +value; // convert to a number\n          if (_value === 0 || isNaN(_value)) {\n              return _value;\n          }\n          return _value > 0 ? 1 : -1;\n      }\n      /**\n       * Returns the value itself if it's between min and max.\n       * Returns min if the value is lower than min.\n       * Returns max if the value is greater than max.\n       * @param value - the value to clmap\n       * @param min - the min value to clamp to (default: 0)\n       * @param max - the max value to clamp to (default: 1)\n       * @returns the clamped value\n       */\n      static Clamp(value, min = 0, max = 1) {\n          return Math.min(max, Math.max(min, value));\n      }\n      /**\n       * the log2 of value.\n       * @param value - the value to compute log2 of\n       * @returns the log2 of value.\n       */\n      static Log2(value) {\n          return Math.log(value) * Math.LOG2E;\n      }\n      /**\n       * Loops the value, so that it is never larger than length and never smaller than 0.\n       *\n       * This is similar to the modulo operator but it works with floating point numbers.\n       * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n       * With t = 5 and length = 2.5, the result would be 0.0.\n       * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n       * @param value - the value\n       * @param length - the length\n       * @returns the looped value\n       */\n      static Repeat(value, length) {\n          return value - Math.floor(value / length) * length;\n      }\n      /**\n       * Normalize the value between 0.0 and 1.0 using min and max values\n       * @param value - value to normalize\n       * @param min - max to normalize between\n       * @param max - min to normalize between\n       * @returns the normalized value\n       */\n      static Normalize(value, min, max) {\n          return (value - min) / (max - min);\n      }\n      /**\n       * Denormalize the value from 0.0 and 1.0 using min and max values\n       * @param normalized - value to denormalize\n       * @param min - max to denormalize between\n       * @param max - min to denormalize between\n       * @returns the denormalized value\n       */\n      static Denormalize(normalized, min, max) {\n          return normalized * (max - min) + min;\n      }\n      /**\n       * Calculates the shortest difference between two given angles given in degrees.\n       * @param current - current angle in degrees\n       * @param target - target angle in degrees\n       * @returns the delta\n       */\n      static DeltaAngle(current, target) {\n          let num = Scalar.Repeat(target - current, 360.0);\n          if (num > 180.0) {\n              num -= 360.0;\n          }\n          return num;\n      }\n      /**\n       * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n       * @param tx - value\n       * @param length - length\n       * @returns The returned value will move back and forth between 0 and length\n       */\n      static PingPong(tx, length) {\n          const t = Scalar.Repeat(tx, length * 2.0);\n          return length - Math.abs(t - length);\n      }\n      /**\n       * Interpolates between min and max with smoothing at the limits.\n       *\n       * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n       * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n       * @param from - from\n       * @param to - to\n       * @param tx - value\n       * @returns the smooth stepped value\n       */\n      static SmoothStep(from, to, tx) {\n          let t = Scalar.Clamp(tx);\n          t = -2.0 * t * t * t + 3.0 * t * t;\n          return to * t + from * (1.0 - t);\n      }\n      /**\n       * Moves a value current towards target.\n       *\n       * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n       * Negative values of maxDelta pushes the value away from target.\n       * @param current - current value\n       * @param target - target value\n       * @param maxDelta - max distance to move\n       * @returns resulting value\n       */\n      static MoveTowards(current, target, maxDelta) {\n          let result = 0;\n          if (Math.abs(target - current) <= maxDelta) {\n              result = target;\n          }\n          else {\n              result = current + Scalar.Sign(target - current) * maxDelta;\n          }\n          return result;\n      }\n      /**\n       * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n       *\n       * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n       *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n       * @param current - current value\n       * @param target - target value\n       * @param maxDelta - max distance to move\n       * @returns resulting angle\n       */\n      static MoveTowardsAngle(current, target, maxDelta) {\n          const num = Scalar.DeltaAngle(current, target);\n          let result = 0;\n          if (-maxDelta < num && num < maxDelta) {\n              result = target;\n          }\n          else {\n              result = Scalar.MoveTowards(current, current + num, maxDelta);\n          }\n          return result;\n      }\n      /**\n       * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\n       * @param start - start value\n       * @param end - target value\n       * @param amount - amount to lerp between\n       * @returns the lerped value\n       */\n      static Lerp(start, end, amount) {\n          return start + (end - start) * amount;\n      }\n      /**\n       * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n       * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n       * @param start - start value\n       * @param end - target value\n       * @param amount - amount to lerp between\n       * @returns the lerped value\n       */\n      static LerpAngle(start, end, amount) {\n          let num = Scalar.Repeat(end - start, 360.0);\n          if (num > 180.0) {\n              num -= 360.0;\n          }\n          return start + num * Scalar.Clamp(amount);\n      }\n      /**\n       * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n       * @param a - start value\n       * @param b - target value\n       * @param value - value between a and b\n       * @returns the inverseLerp value\n       */\n      static InverseLerp(a, b, value) {\n          let result = 0;\n          if (a !== b) {\n              result = Scalar.Clamp((value - a) / (b - a));\n          }\n          else {\n              result = 0.0;\n          }\n          return result;\n      }\n      /**\n       * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n       * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n       * @param value1 - spline value\n       * @param tangent1 - spline value\n       * @param value2 - spline value\n       * @param tangent2 - spline value\n       * @param amount - input value\n       * @returns hermite result\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n      }\n      /**\n       * Returns a random float number between and min and max values\n       * @param min - min value of random\n       * @param max - max value of random\n       * @returns random value\n       */\n      static RandomRange(min, max) {\n          if (min === max) {\n              return min;\n          }\n          return Math.random() * (max - min) + min;\n      }\n      /**\n       * This function returns percentage of a number in a given range.\n       *\n       * RangeToPercent(40,20,60) will return 0.5 (50%)\n       * RangeToPercent(34,0,100) will return 0.34 (34%)\n       * @param num - to convert to percentage\n       * @param min - min range\n       * @param max - max range\n       * @returns the percentage\n       */\n      static RangeToPercent(num, min, max) {\n          return (num - min) / (max - min);\n      }\n      /**\n       * This function returns number that corresponds to the percentage in a given range.\n       *\n       * PercentToRange(0.34,0,100) will return 34.\n       * @param percent - to convert to number\n       * @param min - min range\n       * @param max - max range\n       * @returns the number\n       */\n      static PercentToRange(percent, min, max) {\n          return (max - min) * percent + min;\n      }\n      /**\n       * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n       * @param angle - The angle to normalize in radian.\n       * @returns The converted angle.\n       */\n      static NormalizeRadians(angle) {\n          // More precise but slower version kept for reference.\n          // tslint:disable:no-commented-out-code\n          /*\n            // angle = angle % Tools.TwoPi;\n            // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n      \n            //if (angle > Math.PI) {\n            //\tangle -= Tools.TwoPi;\n            //}\n             */\n          return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\n      }\n  }\n  Scalar$1.Scalar = Scalar;\n  /**\n   * Two pi constants convenient for computation.\n   */\n  Scalar.TwoPi = Math.PI * 2;\n\n  Object.defineProperty(Vector4$1, \"__esModule\", { value: true });\n  Vector4$1.Vector4 = void 0;\n  const types_1$8 = types;\n  const Scalar_1$6 = Scalar$1;\n  const Vector3_1$7 = Vector3$1;\n  /**\n   * Vector4 class created for EulerAngle class conversion to Quaternion\n   * @public\n   */\n  class Vector4 {\n      /**\n       * Creates a Vector4 object from the given floats.\n       * @param x - x value of the vector\n       * @param y - y value of the vector\n       * @param z - z value of the vector\n       * @param w - w value of the vector\n       */\n      constructor(\n      /** x value of the vector */\n      x, \n      /** y value of the vector */\n      y, \n      /** z value of the vector */\n      z, \n      /** w value of the vector */\n      w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n      }\n      // Statics\n      /**\n       * Returns a new Vector4 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);\n      }\n      /**\n       * Returns a new Vector4 set from the starting index of the given array.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @returns the new vector\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Updates the given vector \"result\" from the starting index of the given array.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @param result - the vector to store the result in\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n          result.z = array[offset + 2];\n          result.w = array[offset + 3];\n      }\n      /**\n       * Updates the given vector \"result\" from the starting index of the given FloatArray.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @param result - the vector to store the result in\n       */\n      static FromFloatArrayToRef(array, offset, result) {\n          Vector4.FromArrayToRef(array, offset, result);\n      }\n      /**\n       * Updates the given vector \"result\" coordinates from the given floats.\n       * @param x - float to set from\n       * @param y - float to set from\n       * @param z - float to set from\n       * @param w - float to set from\n       * @param result - the vector to the floats in\n       */\n      static FromFloatsToRef(x, y, z, w, result) {\n          result.x = x;\n          result.y = y;\n          result.z = z;\n          result.w = w;\n      }\n      /**\n       * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n       * @returns the new vector\n       */\n      static Zero() {\n          return new Vector4(0.0, 0.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n       * @returns the new vector\n       */\n      static One() {\n          return new Vector4(1.0, 1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a new normalized Vector4 from the given one.\n       * @param vector - the vector to normalize\n       * @returns the vector\n       */\n      static Normalize(vector) {\n          const result = Vector4.Zero();\n          Vector4.NormalizeToRef(vector, result);\n          return result;\n      }\n      /**\n       * Updates the given vector \"result\" from the normalization of the given one.\n       * @param vector - the vector to normalize\n       * @param result - the vector to store the result in\n       */\n      static NormalizeToRef(vector, result) {\n          result.copyFrom(vector);\n          result.normalize();\n      }\n      /**\n       * Returns a vector with the minimum values from the left and right vectors\n       * @param left - left vector to minimize\n       * @param right - right vector to minimize\n       * @returns a new vector with the minimum of the left and right vector values\n       */\n      static Minimize(left, right) {\n          const min = new Vector4(left.x, left.y, left.z, left.w);\n          min.minimizeInPlace(right);\n          return min;\n      }\n      /**\n       * Returns a vector with the maximum values from the left and right vectors\n       * @param left - left vector to maximize\n       * @param right - right vector to maximize\n       * @returns a new vector with the maximum of the left and right vector values\n       */\n      static Maximize(left, right) {\n          const max = new Vector4(left.x, left.y, left.z, left.w);\n          max.maximizeInPlace(right);\n          return max;\n      }\n      /**\n       * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the distance between\n       * @param value2 - value to calulate the distance between\n       * @returns the distance between the two vectors\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the distance between\n       * @param value2 - value to calulate the distance between\n       * @returns the distance between the two vectors squared\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          const z = value1.z - value2.z;\n          const w = value1.w - value2.w;\n          return x * x + y * y + z * z + w * w;\n      }\n      /**\n       * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the center between\n       * @param value2 - value to calulate the center between\n       * @returns the center between the two vectors\n       */\n      static Center(value1, value2) {\n          const center = Vector4.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n       * This methods computes transformed normalized direction vectors only.\n       * @param vector - the vector to transform\n       * @param transformation - the transformation matrix to apply\n       * @returns the new vector\n       */\n      static TransformNormal(vector, transformation) {\n          const result = Vector4.Zero();\n          Vector4.TransformNormalToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\n       * This methods computes transformed normalized direction vectors only.\n       * @param vector - the vector to transform\n       * @param transformation - the transformation matrix to apply\n       * @param result - the vector to store the result in\n       */\n      static TransformNormalToRef(vector, transformation, result) {\n          const m = transformation.m;\n          const x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n          const y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n          const z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n          result.x = x;\n          result.y = y;\n          result.z = z;\n          result.w = vector.w;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n       * This methods computes transformed normalized direction vectors only.\n       * @param x - value to transform\n       * @param y - value to transform\n       * @param z - value to transform\n       * @param w - value to transform\n       * @param transformation - the transformation matrix to apply\n       * @param result - the vector to store the results in\n       */\n      static TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {\n          const m = transformation.m;\n          result.x = x * m[0] + y * m[4] + z * m[8];\n          result.y = x * m[1] + y * m[5] + z * m[9];\n          result.z = x * m[2] + y * m[6] + z * m[10];\n          result.w = w;\n      }\n      /**\n       * Returns the string with the Vector4 coordinates.\n       * @returns a string containing all the vector values\n       */\n      toString() {\n          return ('{X: ' + this.x + ' Y:' + this.y + ' Z:' + this.z + ' W:' + this.w + '}');\n      }\n      /**\n       * Returns the string \"Vector4\".\n       * @returns \"Vector4\"\n       */\n      getClassName() {\n          return 'Vector4';\n      }\n      /**\n       * Returns the Vector4 hash code.\n       * @returns a unique hash code\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          hash = (hash * 397) ^ (this.w || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Returns a new array populated with 4 elements : the Vector4 coordinates.\n       * @returns the resulting array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Populates the given array from the given index with the Vector4 coordinates.\n       * @param array - array to populate\n       * @param index - index of the array to start at (default: 0)\n       * @returns the Vector4.\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          array[index + 2] = this.z;\n          array[index + 3] = this.w;\n          return this;\n      }\n      /**\n       * Adds the given vector to the current Vector4.\n       * @param otherVector - the vector to add\n       * @returns the updated Vector4.\n       */\n      addInPlace(otherVector) {\n          this.x += otherVector.x;\n          this.y += otherVector.y;\n          this.z += otherVector.z;\n          this.w += otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n       * @param otherVector - the vector to add\n       * @returns the resulting vector\n       */\n      add(otherVector) {\n          return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n       * @param otherVector - the vector to add\n       * @param result - the vector to store the result\n       * @returns the current Vector4.\n       */\n      addToRef(otherVector, result) {\n          result.x = this.x + otherVector.x;\n          result.y = this.y + otherVector.y;\n          result.z = this.z + otherVector.z;\n          result.w = this.w + otherVector.w;\n          return this;\n      }\n      /**\n       * Subtract in place the given vector from the current Vector4.\n       * @param otherVector - the vector to subtract\n       * @returns the updated Vector4.\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          this.z -= otherVector.z;\n          this.w -= otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n       * @param otherVector - the vector to add\n       * @returns the new vector with the result\n       */\n      subtract(otherVector) {\n          return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n       * @param otherVector - the vector to subtract\n       * @param result - the vector to store the result\n       * @returns the current Vector4.\n       */\n      subtractToRef(otherVector, result) {\n          result.x = this.x - otherVector.x;\n          result.y = this.y - otherVector.y;\n          result.z = this.z - otherVector.z;\n          result.w = this.w - otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       */\n      /**\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       * @param x - value to subtract\n       * @param y - value to subtract\n       * @param z - value to subtract\n       * @param w - value to subtract\n       * @returns new vector containing the result\n       */\n      subtractFromFloats(x, y, z, w) {\n          return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n      }\n      /**\n       * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       * @param x - value to subtract\n       * @param y - value to subtract\n       * @param z - value to subtract\n       * @param w - value to subtract\n       * @param result - the vector to store the result in\n       * @returns the current Vector4.\n       */\n      subtractFromFloatsToRef(x, y, z, w, result) {\n          result.x = this.x - x;\n          result.y = this.y - y;\n          result.z = this.z - z;\n          result.w = this.w - w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the current Vector4 negated coordinates.\n       * @returns a new vector with the negated values\n       */\n      negate() {\n          return new Vector4(-this.x, -this.y, -this.z, -this.w);\n      }\n      /**\n       * Multiplies the current Vector4 coordinates by scale (float).\n       * @param scale - the number to scale with\n       * @returns the updated Vector4.\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          this.z *= scale;\n          this.w *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n       * @param scale - the number to scale with\n       * @returns a new vector with the result\n       */\n      scale(scale) {\n          return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n      }\n      /**\n       * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n       * @param scale - the number to scale with\n       * @param result - a vector to store the result in\n       * @returns the current Vector4.\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          result.z = this.z * scale;\n          result.w = this.w * scale;\n          return this;\n      }\n      /**\n       * Scale the current Vector4 values by a factor and add the result to a given Vector4\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector4 object where to store the result\n       * @returns the unmodified current Vector4\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          result.z += this.z * scale;\n          result.w += this.w * scale;\n          return this;\n      }\n      /**\n       * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n       * @param otherVector - the vector to compare against\n       * @returns true if they are equal\n       */\n      equals(otherVector) {\n          return (otherVector &&\n              this.x === otherVector.x &&\n              this.y === otherVector.y &&\n              this.z === otherVector.z &&\n              this.w === otherVector.w);\n      }\n      /**\n       * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n       * @param otherVector - vector to compare against\n       * @param epsilon - (Default: very small number)\n       * @returns true if they are equal\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$8.Epsilon) {\n          return (otherVector &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));\n      }\n      /**\n       * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n       * @param x - x value to compare against\n       * @param y - y value to compare against\n       * @param z - z value to compare against\n       * @param w - w value to compare against\n       * @returns true if equal\n       */\n      equalsToFloats(x, y, z, w) {\n          return this.x === x && this.y === y && this.z === z && this.w === w;\n      }\n      /**\n       * Multiplies in place the current Vector4 by the given one.\n       * @param otherVector - vector to multiple with\n       * @returns the updated Vector4.\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          this.z *= otherVector.z;\n          this.w *= otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n       * @param otherVector - vector to multiple with\n       * @returns resulting new vector\n       */\n      multiply(otherVector) {\n          return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n       * @param otherVector - vector to multiple with\n       * @param result - vector to store the result\n       * @returns the current Vector4.\n       */\n      multiplyToRef(otherVector, result) {\n          result.x = this.x * otherVector.x;\n          result.y = this.y * otherVector.y;\n          result.z = this.z * otherVector.z;\n          result.w = this.w * otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n       * @param x - x value multiply with\n       * @param y - y value multiply with\n       * @param z - z value multiply with\n       * @param w - w value multiply with\n       * @returns resulting new vector\n       */\n      multiplyByFloats(x, y, z, w) {\n          return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n      }\n      /**\n       * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n       * @param otherVector - vector to devide with\n       * @returns resulting new vector\n       */\n      divide(otherVector) {\n          return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n       * @param otherVector - vector to devide with\n       * @param result - vector to store the result\n       * @returns the current Vector4.\n       */\n      divideToRef(otherVector, result) {\n          result.x = this.x / otherVector.x;\n          result.y = this.y / otherVector.y;\n          result.z = this.z / otherVector.z;\n          result.w = this.w / otherVector.w;\n          return this;\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones.\n       * @param otherVector - vector to devide with\n       * @returns the updated Vector3.\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector4\n       */\n      minimizeInPlace(other) {\n          if (other.x < this.x) {\n              this.x = other.x;\n          }\n          if (other.y < this.y) {\n              this.y = other.y;\n          }\n          if (other.z < this.z) {\n              this.z = other.z;\n          }\n          if (other.w < this.w) {\n              this.w = other.w;\n          }\n          return this;\n      }\n      /**\n       * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector4\n       */\n      maximizeInPlace(other) {\n          if (other.x > this.x) {\n              this.x = other.x;\n          }\n          if (other.y > this.y) {\n              this.y = other.y;\n          }\n          if (other.z > this.z) {\n              this.z = other.z;\n          }\n          if (other.w > this.w) {\n              this.w = other.w;\n          }\n          return this;\n      }\n      /**\n       * Gets a new Vector4 from current Vector4 floored values\n       * @returns a new Vector4\n       */\n      floor() {\n          return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n      }\n      /**\n       * Gets a new Vector4 from current Vector3 floored values\n       * @returns a new Vector4\n       */\n      fract() {\n          return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n      }\n      // Properties\n      /**\n       * Returns the Vector4 length (float).\n       * @returns the length\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n      }\n      /**\n       * Returns the Vector4 squared length (float).\n       * @returns the length squared\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n      // Methods\n      /**\n       * Normalizes in place the Vector4.\n       * @returns the updated Vector4.\n       */\n      normalize() {\n          const len = this.length();\n          if (len === 0) {\n              return this;\n          }\n          return this.scaleInPlace(1.0 / len);\n      }\n      /**\n       * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n       * @returns this converted to a new vector3\n       */\n      toVector3() {\n          return new Vector3_1$7.Vector3(this.x, this.y, this.z);\n      }\n      /**\n       * Returns a new Vector4 copied from the current one.\n       * @returns the new cloned vector\n       */\n      clone() {\n          return new Vector4(this.x, this.y, this.z, this.w);\n      }\n      /**\n       * Updates the current Vector4 with the given one coordinates.\n       * @param source - the source vector to copy from\n       * @returns the updated Vector4.\n       */\n      copyFrom(source) {\n          this.x = source.x;\n          this.y = source.y;\n          this.z = source.z;\n          this.w = source.w;\n          return this;\n      }\n      /**\n       * Updates the current Vector4 coordinates with the given floats.\n       * @param x - float to copy from\n       * @param y - float to copy from\n       * @param z - float to copy from\n       * @param w - float to copy from\n       * @returns the updated Vector4.\n       */\n      copyFromFloats(x, y, z, w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n          return this;\n      }\n      /**\n       * Updates the current Vector4 coordinates with the given floats.\n       * @param x - float to set from\n       * @param y - float to set from\n       * @param z - float to set from\n       * @param w - float to set from\n       * @returns the updated Vector4.\n       */\n      set(x, y, z, w) {\n          return this.copyFromFloats(x, y, z, w);\n      }\n      /**\n       * Copies the given float to the current Vector3 coordinates\n       * @param v - defines the x, y, z and w coordinates of the operand\n       * @returns the current updated Vector3\n       */\n      setAll(v) {\n          this.x = this.y = this.z = this.w = v;\n          return this;\n      }\n  }\n  Vector4$1.Vector4 = Vector4;\n\n  Object.defineProperty(Matrix$1, \"__esModule\", { value: true });\n  Matrix$1.Matrix = void 0;\n  const Vector3_1$6 = Vector3$1;\n  const Quaternion_1$2 = Quaternion$1;\n  const preallocatedVariables_1$3 = preallocatedVariables;\n  const Vector4_1 = Vector4$1;\n  /**\n   * Class used to store matrix data (4x4)\n   * @public\n   */\n  class Matrix {\n      /**\n       * Creates an empty matrix (filled with zeros)\n       */\n      constructor() {\n          this._isIdentity = false;\n          this._isIdentityDirty = true;\n          this._isIdentity3x2 = true;\n          this._isIdentity3x2Dirty = true;\n          this._m = [\n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n          ];\n          this._updateIdentityStatus(false);\n      }\n      /**\n       * Gets the internal data of the matrix\n       */\n      get m() {\n          return this._m;\n      }\n      /**\n       * Gets an identity matrix that must not be updated\n       */\n      static get IdentityReadOnly() {\n          return Matrix._identityReadOnly;\n      }\n      // Statics\n      /**\n       * Creates a matrix from an array\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @returns a new Matrix set from the starting index of the given array\n       */\n      static FromArray(array, offset = 0) {\n          const result = new Matrix();\n          Matrix.FromArrayToRef(array, offset, result);\n          return result;\n      }\n      /**\n       * Copy the content of an array into a given matrix\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @param result - defines the target matrix\n       */\n      static FromArrayToRef(array, offset, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = array[index + offset];\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Stores an array into a matrix after having multiplied each component by a given factor\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param scale - defines the scaling factor\n       * @param result - defines the target matrix\n       */\n      static FromFloatArrayToRefScaled(array, offset, scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = array[index + offset] * scale;\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Stores a list of values (16) inside a given matrix\n       * @param initialM11 - defines 1st value of 1st row\n       * @param initialM12 - defines 2nd value of 1st row\n       * @param initialM13 - defines 3rd value of 1st row\n       * @param initialM14 - defines 4th value of 1st row\n       * @param initialM21 - defines 1st value of 2nd row\n       * @param initialM22 - defines 2nd value of 2nd row\n       * @param initialM23 - defines 3rd value of 2nd row\n       * @param initialM24 - defines 4th value of 2nd row\n       * @param initialM31 - defines 1st value of 3rd row\n       * @param initialM32 - defines 2nd value of 3rd row\n       * @param initialM33 - defines 3rd value of 3rd row\n       * @param initialM34 - defines 4th value of 3rd row\n       * @param initialM41 - defines 1st value of 4th row\n       * @param initialM42 - defines 2nd value of 4th row\n       * @param initialM43 - defines 3rd value of 4th row\n       * @param initialM44 - defines 4th value of 4th row\n       * @param result - defines the target matrix\n       */\n      static FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n          const m = result._m;\n          m[0] = initialM11;\n          m[1] = initialM12;\n          m[2] = initialM13;\n          m[3] = initialM14;\n          m[4] = initialM21;\n          m[5] = initialM22;\n          m[6] = initialM23;\n          m[7] = initialM24;\n          m[8] = initialM31;\n          m[9] = initialM32;\n          m[10] = initialM33;\n          m[11] = initialM34;\n          m[12] = initialM41;\n          m[13] = initialM42;\n          m[14] = initialM43;\n          m[15] = initialM44;\n          result._markAsUpdated();\n      }\n      /**\n       * Creates new matrix from a list of values (16)\n       * @param initialM11 - defines 1st value of 1st row\n       * @param initialM12 - defines 2nd value of 1st row\n       * @param initialM13 - defines 3rd value of 1st row\n       * @param initialM14 - defines 4th value of 1st row\n       * @param initialM21 - defines 1st value of 2nd row\n       * @param initialM22 - defines 2nd value of 2nd row\n       * @param initialM23 - defines 3rd value of 2nd row\n       * @param initialM24 - defines 4th value of 2nd row\n       * @param initialM31 - defines 1st value of 3rd row\n       * @param initialM32 - defines 2nd value of 3rd row\n       * @param initialM33 - defines 3rd value of 3rd row\n       * @param initialM34 - defines 4th value of 3rd row\n       * @param initialM41 - defines 1st value of 4th row\n       * @param initialM42 - defines 2nd value of 4th row\n       * @param initialM43 - defines 3rd value of 4th row\n       * @param initialM44 - defines 4th value of 4th row\n       * @returns the new matrix\n       */\n      static FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n          const result = new Matrix();\n          const m = result._m;\n          m[0] = initialM11;\n          m[1] = initialM12;\n          m[2] = initialM13;\n          m[3] = initialM14;\n          m[4] = initialM21;\n          m[5] = initialM22;\n          m[6] = initialM23;\n          m[7] = initialM24;\n          m[8] = initialM31;\n          m[9] = initialM32;\n          m[10] = initialM33;\n          m[11] = initialM34;\n          m[12] = initialM41;\n          m[13] = initialM42;\n          m[14] = initialM43;\n          m[15] = initialM44;\n          result._markAsUpdated();\n          return result;\n      }\n      /**\n       * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n       * @param scale - defines the scale vector3\n       * @param rotation - defines the rotation quaternion\n       * @param translation - defines the translation vector3\n       * @returns a new matrix\n       */\n      static Compose(scale, rotation, translation) {\n          const result = new Matrix();\n          Matrix.ComposeToRef(scale, rotation, translation, result);\n          return result;\n      }\n      /**\n       * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n       * @param scale - defines the scale vector3\n       * @param rotation - defines the rotation quaternion\n       * @param translation - defines the translation vector3\n       * @param result - defines the target matrix\n       */\n      static ComposeToRef(scale, rotation, translation, result) {\n          Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1$3.MathTmp.Matrix[1]);\n          rotation.toRotationMatrix(preallocatedVariables_1$3.MathTmp.Matrix[0]);\n          preallocatedVariables_1$3.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], result);\n          result.setTranslation(translation);\n      }\n      /**\n       * Creates a new identity matrix\n       * @returns a new identity matrix\n       */\n      static Identity() {\n          const identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n          identity._updateIdentityStatus(true);\n          return identity;\n      }\n      /**\n       * Creates a new identity matrix and stores the result in a given matrix\n       * @param result - defines the target matrix\n       */\n      static IdentityToRef(result) {\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(true);\n      }\n      /**\n       * Creates a new zero matrix\n       * @returns a new zero matrix\n       */\n      static Zero() {\n          const zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n          zero._updateIdentityStatus(false);\n          return zero;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the X axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationX(angle) {\n          const result = new Matrix();\n          Matrix.RotationXToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new matrix as the invert of a given matrix\n       * @param source - defines the source matrix\n       * @returns the new matrix\n       */\n      static Invert(source) {\n          const result = new Matrix();\n          source.invertToRef(result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationXToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationY(angle) {\n          const result = new Matrix();\n          Matrix.RotationYToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationYToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationZ(angle) {\n          const result = new Matrix();\n          Matrix.RotationZToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationZToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the given axis\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationAxis(axis, angle) {\n          const result = new Matrix();\n          Matrix.RotationAxisToRef(axis, angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationAxisToRef(axis, angle, result) {\n          const s = Math.sin(-angle);\n          const c = Math.cos(-angle);\n          const c1 = 1 - c;\n          axis.normalize();\n          const m = result._m;\n          m[0] = axis.x * axis.x * c1 + c;\n          m[1] = axis.x * axis.y * c1 - axis.z * s;\n          m[2] = axis.x * axis.z * c1 + axis.y * s;\n          m[3] = 0.0;\n          m[4] = axis.y * axis.x * c1 + axis.z * s;\n          m[5] = axis.y * axis.y * c1 + c;\n          m[6] = axis.y * axis.z * c1 - axis.x * s;\n          m[7] = 0.0;\n          m[8] = axis.z * axis.x * c1 - axis.y * s;\n          m[9] = axis.z * axis.y * c1 + axis.x * s;\n          m[10] = axis.z * axis.z * c1 + c;\n          m[11] = 0.0;\n          m[12] = 0.0;\n          m[13] = 0.0;\n          m[14] = 0.0;\n          m[15] = 1.0;\n          result._markAsUpdated();\n      }\n      /**\n       * Creates a rotation matrix\n       * @param yaw - defines the yaw angle in radians (Y axis)\n       * @param pitch - defines the pitch angle in radians (X axis)\n       * @param roll - defines the roll angle in radians (X axis)\n       * @returns the new rotation matrix\n       */\n      static RotationYawPitchRoll(yaw, pitch, roll) {\n          const result = new Matrix();\n          Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n          return result;\n      }\n      /**\n       * Creates a rotation matrix and stores it in a given matrix\n       * @param yaw - defines the yaw angle in radians (Y axis)\n       * @param pitch - defines the pitch angle in radians (X axis)\n       * @param roll - defines the roll angle in radians (X axis)\n       * @param result - defines the target matrix\n       */\n      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n          Quaternion_1$2.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1$3.MathTmp.Quaternion[0]);\n          preallocatedVariables_1$3.MathTmp.Quaternion[0].toRotationMatrix(result);\n      }\n      /**\n       * Creates a scaling matrix\n       * @param x - defines the scale factor on X axis\n       * @param y - defines the scale factor on Y axis\n       * @param z - defines the scale factor on Z axis\n       * @returns the new matrix\n       */\n      static Scaling(x, y, z) {\n          const result = new Matrix();\n          Matrix.ScalingToRef(x, y, z, result);\n          return result;\n      }\n      /**\n       * Creates a scaling matrix and stores it in a given matrix\n       * @param x - defines the scale factor on X axis\n       * @param y - defines the scale factor on Y axis\n       * @param z - defines the scale factor on Z axis\n       * @param result - defines the target matrix\n       */\n      static ScalingToRef(x, y, z, result) {\n          Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n      }\n      /**\n       * Creates a translation matrix\n       * @param x - defines the translation on X axis\n       * @param y - defines the translation on Y axis\n       * @param z - defines the translationon Z axis\n       * @returns the new matrix\n       */\n      static Translation(x, y, z) {\n          const result = new Matrix();\n          Matrix.TranslationToRef(x, y, z, result);\n          return result;\n      }\n      /**\n       * Creates a translation matrix and stores it in a given matrix\n       * @param x - defines the translation on X axis\n       * @param y - defines the translation on Y axis\n       * @param z - defines the translationon Z axis\n       * @param result - defines the target matrix\n       */\n      static TranslationToRef(x, y, z, result) {\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n          result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n      }\n      /**\n       * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n       * @param startValue - defines the start value\n       * @param endValue - defines the end value\n       * @param gradient - defines the gradient factor\n       * @returns the new matrix\n       */\n      static Lerp(startValue, endValue, gradient) {\n          const result = new Matrix();\n          Matrix.LerpToRef(startValue, endValue, gradient, result);\n          return result;\n      }\n      /**\n       * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n       * @param startValue - defines the start value\n       * @param endValue - defines the end value\n       * @param gradient - defines the gradient factor\n       * @param result - defines the Matrix object where to store data\n       */\n      static LerpToRef(startValue, endValue, gradient, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] =\n                  startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Builds a new matrix whose values are computed by:\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n       * @param startValue - defines the first matrix\n       * @param endValue - defines the second matrix\n       * @param gradient - defines the gradient between the two matrices\n       * @returns the new matrix\n       */\n      static DecomposeLerp(startValue, endValue, gradient) {\n          const result = new Matrix();\n          Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n          return result;\n      }\n      /**\n       * Update a matrix to values which are computed by:\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n       * @param startValue - defines the first matrix\n       * @param endValue - defines the second matrix\n       * @param gradient - defines the gradient between the two matrices\n       * @param result - defines the target matrix\n       */\n      static DecomposeLerpToRef(startValue, endValue, gradient, result) {\n          const startScale = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const startRotation = preallocatedVariables_1$3.MathTmp.Quaternion[0];\n          const startTranslation = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          startValue.decompose(startScale, startRotation, startTranslation);\n          const endScale = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          const endRotation = preallocatedVariables_1$3.MathTmp.Quaternion[1];\n          const endTranslation = preallocatedVariables_1$3.MathTmp.Vector3[3];\n          endValue.decompose(endScale, endRotation, endTranslation);\n          const resultScale = preallocatedVariables_1$3.MathTmp.Vector3[4];\n          Vector3_1$6.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n          const resultRotation = preallocatedVariables_1$3.MathTmp.Quaternion[2];\n          Quaternion_1$2.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n          const resultTranslation = preallocatedVariables_1$3.MathTmp.Vector3[5];\n          Vector3_1$6.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n          Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n      }\n      /**\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n       * This function works in left handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @returns the new matrix\n       */\n      static LookAtLH(eye, target, up) {\n          const result = new Matrix();\n          Matrix.LookAtLHToRef(eye, target, up, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n       * This function works in left handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @param result - defines the target matrix\n       */\n      static LookAtLHToRef(eye, target, up, result) {\n          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          // Z axis\n          target.subtractToRef(eye, zAxis);\n          zAxis.normalize();\n          // X axis\n          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);\n          const xSquareLength = xAxis.lengthSquared();\n          if (xSquareLength === 0) {\n              xAxis.x = 1.0;\n          }\n          else {\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n          }\n          // Y axis\n          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n          yAxis.normalize();\n          // Eye angles\n          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);\n          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);\n          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n      }\n      /**\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n       * This function works in right handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @returns the new matrix\n       */\n      static LookAtRH(eye, target, up) {\n          const result = new Matrix();\n          Matrix.LookAtRHToRef(eye, target, up, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n       * This function works in right handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @param result - defines the target matrix\n       */\n      static LookAtRHToRef(eye, target, up, result) {\n          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          // Z axis\n          eye.subtractToRef(target, zAxis);\n          zAxis.normalize();\n          // X axis\n          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);\n          const xSquareLength = xAxis.lengthSquared();\n          if (xSquareLength === 0) {\n              xAxis.x = 1.0;\n          }\n          else {\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n          }\n          // Y axis\n          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n          yAxis.normalize();\n          // Eye angles\n          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);\n          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);\n          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n      }\n      /**\n       * Create a left-handed orthographic projection matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed orthographic projection matrix\n       */\n      static OrthoLH(width, height, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Store a left-handed orthographic projection to a given matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoLHToRef(width, height, znear, zfar, result) {\n          const n = znear;\n          const f = zfar;\n          const a = 2.0 / width;\n          const b = 2.0 / height;\n          const c = 2.0 / (f - n);\n          const d = -(f + n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n          result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n      }\n      /**\n       * Create a left-handed orthographic projection matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed orthographic projection matrix\n       */\n      static OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a left-handed orthographic projection into a given matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {\n          const n = znear;\n          const f = zfar;\n          const a = 2.0 / (right - left);\n          const b = 2.0 / (top - bottom);\n          const c = 2.0 / (f - n);\n          const d = -(f + n) / (f - n);\n          const i0 = (left + right) / (left - right);\n          const i1 = (top + bottom) / (bottom - top);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n          result._markAsUpdated();\n      }\n      /**\n       * Creates a right-handed orthographic projection matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a right-handed orthographic projection matrix\n       */\n      static OrthoOffCenterRH(left, right, bottom, top, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a right-handed orthographic projection into a given matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n          result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n      }\n      /**\n       * Creates a left-handed perspective projection matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed perspective projection matrix\n       */\n      static PerspectiveLH(width, height, znear, zfar) {\n          const matrix = new Matrix();\n          const n = znear;\n          const f = zfar;\n          const a = (2.0 * n) / width;\n          const b = (2.0 * n) / height;\n          const c = (f + n) / (f - n);\n          const d = (-2.0 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n          matrix._updateIdentityStatus(false);\n          return matrix;\n      }\n      /**\n       * Creates a left-handed perspective projection matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed perspective projection matrix\n       */\n      static PerspectiveFovLH(fov, aspect, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a left-handed perspective projection into a given matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n       */\n      static PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n          const n = znear;\n          const f = zfar;\n          const t = 1.0 / Math.tan(fov * 0.5);\n          const a = isVerticalFovFixed ? t / aspect : t;\n          const b = isVerticalFovFixed ? t : t * aspect;\n          const c = (f + n) / (f - n);\n          const d = (-2.0 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n          result._updateIdentityStatus(false);\n      }\n      /**\n       * Creates a right-handed perspective projection matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a right-handed perspective projection matrix\n       */\n      static PerspectiveFovRH(fov, aspect, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a right-handed perspective projection into a given matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n       */\n      static PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n          /* alternatively this could be expressed as:\n          //    m = PerspectiveFovLHToRef\n          //    m[10] *= -1.0;\n          //    m[11] *= -1.0;\n          */\n          const n = znear;\n          const f = zfar;\n          const t = 1.0 / Math.tan(fov * 0.5);\n          const a = isVerticalFovFixed ? t / aspect : t;\n          const b = isVerticalFovFixed ? t : t * aspect;\n          const c = -(f + n) / (f - n);\n          const d = (-2 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n          result._updateIdentityStatus(false);\n      }\n      /**\n       * Stores a perspective projection for WebVR info a given matrix\n       * @param fov - defines the field of view\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n       */\n      static PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {\n          const rightHandedFactor = rightHanded ? -1 : 1;\n          const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n          const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n          const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n          const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n          const xScale = 2.0 / (leftTan + rightTan);\n          const yScale = 2.0 / (upTan + downTan);\n          const m = result._m;\n          m[0] = xScale;\n          m[1] = m[2] = m[3] = m[4] = 0.0;\n          m[5] = yScale;\n          m[6] = m[7] = 0.0;\n          m[8] = (leftTan - rightTan) * xScale * 0.5;\n          m[9] = -((upTan - downTan) * yScale * 0.5);\n          m[10] = -zfar / (znear - zfar);\n          m[11] = 1.0 * rightHandedFactor;\n          m[12] = m[13] = m[15] = 0.0;\n          m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n          result._markAsUpdated();\n      }\n      /**\n       * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n       * @param matrix - defines the matrix to use\n       * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n       */\n      static GetAsMatrix2x2(matrix) {\n          return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\n      }\n      /**\n       * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n       * @param matrix - defines the matrix to use\n       * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n       */\n      static GetAsMatrix3x3(matrix) {\n          return [\n              matrix._m[0],\n              matrix._m[1],\n              matrix._m[2],\n              matrix._m[4],\n              matrix._m[5],\n              matrix._m[6],\n              matrix._m[8],\n              matrix._m[9],\n              matrix._m[10]\n          ];\n      }\n      /**\n       * Compute the transpose of a given matrix\n       * @param matrix - defines the matrix to transpose\n       * @returns the new matrix\n       */\n      static Transpose(matrix) {\n          const result = new Matrix();\n          Matrix.TransposeToRef(matrix, result);\n          return result;\n      }\n      /**\n       * Compute the transpose of a matrix and store it in a target matrix\n       * @param matrix - defines the matrix to transpose\n       * @param result - defines the target matrix\n       */\n      static TransposeToRef(matrix, result) {\n          const rm = result._m;\n          const mm = matrix._m;\n          rm[0] = mm[0];\n          rm[1] = mm[4];\n          rm[2] = mm[8];\n          rm[3] = mm[12];\n          rm[4] = mm[1];\n          rm[5] = mm[5];\n          rm[6] = mm[9];\n          rm[7] = mm[13];\n          rm[8] = mm[2];\n          rm[9] = mm[6];\n          rm[10] = mm[10];\n          rm[11] = mm[14];\n          rm[12] = mm[3];\n          rm[13] = mm[7];\n          rm[14] = mm[11];\n          rm[15] = mm[15];\n          // identity-ness does not change when transposing\n          result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n      }\n      /**\n       * Computes a reflection matrix from a plane\n       * @param plane - defines the reflection plane\n       * @returns a new matrix\n       */\n      static Reflection(plane) {\n          const matrix = new Matrix();\n          Matrix.ReflectionToRef(plane, matrix);\n          return matrix;\n      }\n      /**\n       * Computes a reflection matrix from a plane\n       * @param plane - defines the reflection plane\n       * @param result - defines the target matrix\n       */\n      static ReflectionToRef(plane, result) {\n          plane.normalize();\n          const x = plane.normal.x;\n          const y = plane.normal.y;\n          const z = plane.normal.z;\n          const temp = -2 * x;\n          const temp2 = -2 * y;\n          const temp3 = -2 * z;\n          Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n      }\n      /**\n       * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n       * @param xaxis - defines the value of the 1st axis\n       * @param yaxis - defines the value of the 2nd axis\n       * @param zaxis - defines the value of the 3rd axis\n       * @param result - defines the target matrix\n       */\n      static FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {\n          Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      }\n      /**\n       * Creates a rotation matrix from a quaternion and stores it in a target matrix\n       * @param quat - defines the quaternion to use\n       * @param result - defines the target matrix\n       */\n      static FromQuaternionToRef(quat, result) {\n          const xx = quat.x * quat.x;\n          const yy = quat.y * quat.y;\n          const zz = quat.z * quat.z;\n          const xy = quat.x * quat.y;\n          const zw = quat.z * quat.w;\n          const zx = quat.z * quat.x;\n          const yw = quat.y * quat.w;\n          const yz = quat.y * quat.z;\n          const xw = quat.x * quat.w;\n          result._m[0] = 1.0 - 2.0 * (yy + zz);\n          result._m[1] = 2.0 * (xy + zw);\n          result._m[2] = 2.0 * (zx - yw);\n          result._m[3] = 0.0;\n          result._m[4] = 2.0 * (xy - zw);\n          result._m[5] = 1.0 - 2.0 * (zz + xx);\n          result._m[6] = 2.0 * (yz + xw);\n          result._m[7] = 0.0;\n          result._m[8] = 2.0 * (zx + yw);\n          result._m[9] = 2.0 * (yz - xw);\n          result._m[10] = 1.0 - 2.0 * (yy + xx);\n          result._m[11] = 0.0;\n          result._m[12] = 0.0;\n          result._m[13] = 0.0;\n          result._m[14] = 0.0;\n          result._m[15] = 1.0;\n          result._markAsUpdated();\n      }\n      /** @internal */\n      _markAsUpdated() {\n          this.updateFlag = Matrix._updateFlagSeed++;\n          this._isIdentity = false;\n          this._isIdentity3x2 = false;\n          this._isIdentityDirty = true;\n          this._isIdentity3x2Dirty = true;\n      }\n      // Properties\n      /**\n       * Check if the current matrix is identity\n       * @returns true is the matrix is the identity matrix\n       */\n      isIdentity() {\n          if (this._isIdentityDirty) {\n              this._isIdentityDirty = false;\n              const m = this._m;\n              this._isIdentity =\n                  m[0] === 1.0 &&\n                      m[1] === 0.0 &&\n                      m[2] === 0.0 &&\n                      m[3] === 0.0 &&\n                      m[4] === 0.0 &&\n                      m[5] === 1.0 &&\n                      m[6] === 0.0 &&\n                      m[7] === 0.0 &&\n                      m[8] === 0.0 &&\n                      m[9] === 0.0 &&\n                      m[10] === 1.0 &&\n                      m[11] === 0.0 &&\n                      m[12] === 0.0 &&\n                      m[13] === 0.0 &&\n                      m[14] === 0.0 &&\n                      m[15] === 1.0;\n          }\n          return this._isIdentity;\n      }\n      /**\n       * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n       * @returns true is the matrix is the identity matrix\n       */\n      isIdentityAs3x2() {\n          if (this._isIdentity3x2Dirty) {\n              this._isIdentity3x2Dirty = false;\n              if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n                  this._isIdentity3x2 = false;\n              }\n              else if (this._m[1] !== 0.0 ||\n                  this._m[2] !== 0.0 ||\n                  this._m[3] !== 0.0 ||\n                  this._m[4] !== 0.0 ||\n                  this._m[6] !== 0.0 ||\n                  this._m[7] !== 0.0 ||\n                  this._m[8] !== 0.0 ||\n                  this._m[9] !== 0.0 ||\n                  this._m[10] !== 0.0 ||\n                  this._m[11] !== 0.0 ||\n                  this._m[12] !== 0.0 ||\n                  this._m[13] !== 0.0 ||\n                  this._m[14] !== 0.0) {\n                  this._isIdentity3x2 = false;\n              }\n              else {\n                  this._isIdentity3x2 = true;\n              }\n          }\n          return this._isIdentity3x2;\n      }\n      /**\n       * Gets the determinant of the matrix\n       * @returns the matrix determinant\n       */\n      determinant() {\n          if (this._isIdentity === true) {\n              return 1;\n          }\n          const m = this._m;\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n          /*\n          // https://en.wikipedia.org/wiki/Laplace_expansion\n          // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n          // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n          // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n          // where\n          //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n          //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n          //\n          // Here we do that for the 1st row.\n          */\n          // tslint:disable:variable-name\n          const det_22_33 = m22 * m33 - m32 * m23;\n          const det_21_33 = m21 * m33 - m31 * m23;\n          const det_21_32 = m21 * m32 - m31 * m22;\n          const det_20_33 = m20 * m33 - m30 * m23;\n          const det_20_32 = m20 * m32 - m22 * m30;\n          const det_20_31 = m20 * m31 - m30 * m21;\n          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n          // tslint:enable:variable-name\n          return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n      }\n      // Methods\n      /**\n       * Returns the matrix as a FloatArray\n       * @returns the matrix underlying array\n       */\n      toArray() {\n          return this._m;\n      }\n      /**\n       * Returns the matrix as a FloatArray\n       * @returns the matrix underlying array.\n       */\n      asArray() {\n          return this._m;\n      }\n      /**\n       * Inverts the current matrix in place\n       * @returns the current inverted matrix\n       */\n      invert() {\n          this.invertToRef(this);\n          return this;\n      }\n      /**\n       * Sets all the matrix elements to zero\n       * @returns the current matrix\n       */\n      reset() {\n          Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n          this._updateIdentityStatus(false);\n          return this;\n      }\n      /**\n       * Adds the current matrix with a second one\n       * @param other - defines the matrix to add\n       * @returns a new matrix as the addition of the current matrix and the given one\n       */\n      add(other) {\n          const result = new Matrix();\n          this.addToRef(other, result);\n          return result;\n      }\n      /**\n       * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n       * @param other - defines the matrix to add\n       * @param result - defines the target matrix\n       * @returns the current matrix\n       */\n      addToRef(other, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = this._m[index] + other._m[index];\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Adds in place the given matrix to the current matrix\n       * @param other - defines the second operand\n       * @returns the current updated matrix\n       */\n      addToSelf(other) {\n          for (let index = 0; index < 16; index++) {\n              this._m[index] += other._m[index];\n          }\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Sets the given matrix to the current inverted Matrix\n       * @param other - defines the target matrix\n       * @returns the unmodified current matrix\n       */\n      invertToRef(other) {\n          if (this._isIdentity === true) {\n              Matrix.IdentityToRef(other);\n              return this;\n          }\n          // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n          const m = this._m;\n          // tslint:disable:one-variable-per-declaration\n          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n          // tslint:enable:one-variable-per-declaration\n          // tslint:disable:variable-name\n          const det_22_33 = m22 * m33 - m32 * m23;\n          const det_21_33 = m21 * m33 - m31 * m23;\n          const det_21_32 = m21 * m32 - m31 * m22;\n          const det_20_33 = m20 * m33 - m30 * m23;\n          const det_20_32 = m20 * m32 - m22 * m30;\n          const det_20_31 = m20 * m31 - m30 * m21;\n          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n          const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n          if (det === 0) {\n              // not invertible\n              other.copyFrom(this);\n              return this;\n          }\n          const detInv = 1 / det;\n          const det_12_33 = m12 * m33 - m32 * m13;\n          const det_11_33 = m11 * m33 - m31 * m13;\n          const det_11_32 = m11 * m32 - m31 * m12;\n          const det_10_33 = m10 * m33 - m30 * m13;\n          const det_10_32 = m10 * m32 - m30 * m12;\n          const det_10_31 = m10 * m31 - m30 * m11;\n          const det_12_23 = m12 * m23 - m22 * m13;\n          const det_11_23 = m11 * m23 - m21 * m13;\n          const det_11_22 = m11 * m22 - m21 * m12;\n          const det_10_23 = m10 * m23 - m20 * m13;\n          const det_10_22 = m10 * m22 - m20 * m12;\n          const det_10_21 = m10 * m21 - m20 * m11;\n          const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n          const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n          const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n          const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n          const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n          const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n          const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n          const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n          const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n          const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n          const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n          const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n          Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n          // tslint:enable:variable-name\n          return this;\n      }\n      /**\n       * add a value at the specified position in the current Matrix\n       * @param index - the index of the value within the matrix. between 0 and 15.\n       * @param value - the value to be added\n       * @returns the current updated matrix\n       */\n      addAtIndex(index, value) {\n          this._m[index] += value;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * mutiply the specified position in the current Matrix by a value\n       * @param index - the index of the value within the matrix. between 0 and 15.\n       * @param value - the value to be added\n       * @returns the current updated matrix\n       */\n      multiplyAtIndex(index, value) {\n          this._m[index] *= value;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Inserts the translation vector (using 3 floats) in the current matrix\n       * @param x - defines the 1st component of the translation\n       * @param y - defines the 2nd component of the translation\n       * @param z - defines the 3rd component of the translation\n       * @returns the current updated matrix\n       */\n      setTranslationFromFloats(x, y, z) {\n          this._m[12] = x;\n          this._m[13] = y;\n          this._m[14] = z;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Inserts the translation vector in the current matrix\n       * @param vector3 - defines the translation to insert\n       * @returns the current updated matrix\n       */\n      setTranslation(vector3) {\n          return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\n      }\n      /**\n       * Gets the translation value of the current matrix\n       * @returns a new Vector3 as the extracted translation from the matrix\n       */\n      getTranslation() {\n          return new Vector3_1$6.Vector3(this._m[12], this._m[13], this._m[14]);\n      }\n      /**\n       * Fill a Vector3 with the extracted translation from the matrix\n       * @param result - defines the Vector3 where to store the translation\n       * @returns the current matrix\n       */\n      getTranslationToRef(result) {\n          result.x = this._m[12];\n          result.y = this._m[13];\n          result.z = this._m[14];\n          return this;\n      }\n      /**\n       * Remove rotation and scaling part from the matrix\n       * @returns the updated matrix\n       */\n      removeRotationAndScaling() {\n          const m = this.m;\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n          this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n          return this;\n      }\n      /**\n       * Multiply two matrices\n       * @param other - defines the second operand\n       * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n       */\n      multiply(other) {\n          const result = new Matrix();\n          this.multiplyToRef(other, result);\n          return result;\n      }\n      /**\n       * Copy the current matrix from the given one\n       * @param other - defines the source matrix\n       * @returns the current updated matrix\n       */\n      copyFrom(other) {\n          other.copyToArray(this._m);\n          const o = other;\n          this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n          return this;\n      }\n      /**\n       * Populates the given array from the starting index with the current matrix values\n       * @param array - defines the target array\n       * @param offset - defines the offset in the target array where to start storing values\n       * @returns the current matrix\n       */\n      copyToArray(array, offset = 0) {\n          for (let index = 0; index < 16; index++) {\n              array[offset + index] = this._m[index];\n          }\n          return this;\n      }\n      /**\n       * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n       * @param other - defines the second operand\n       * @param result - defines the matrix where to store the multiplication\n       * @returns the current matrix\n       */\n      multiplyToRef(other, result) {\n          if (this._isIdentity) {\n              result.copyFrom(other);\n              return this;\n          }\n          if (other._isIdentity) {\n              result.copyFrom(this);\n              return this;\n          }\n          this.multiplyToArray(other, result._m, 0);\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n       * @param other - defines the second operand\n       * @param result - defines the array where to store the multiplication\n       * @param offset - defines the offset in the target array where to start storing values\n       * @returns the current matrix\n       */\n      multiplyToArray(other, result, offset) {\n          const m = this._m;\n          const otherM = other.m;\n          // tslint:disable:one-variable-per-declaration\n          const tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\n          const tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\n          const tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\n          const tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\n          const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\n          const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\n          const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\n          const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\n          // tslint:enable:one-variable-per-declaration\n          result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n          result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n          result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n          result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n          result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n          result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n          result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n          result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n          result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n          result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n          result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n          result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n          result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n          result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n          result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n          result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n          return this;\n      }\n      /**\n       * Check equality between this matrix and a second one\n       * @param value - defines the second matrix to compare\n       * @returns true is the current matrix and the given one values are strictly equal\n       */\n      equals(value) {\n          const other = value;\n          if (!other) {\n              return false;\n          }\n          if (this._isIdentity || other._isIdentity) {\n              if (!this._isIdentityDirty && !other._isIdentityDirty) {\n                  return this._isIdentity && other._isIdentity;\n              }\n          }\n          const m = this.m;\n          const om = other.m;\n          return (m[0] === om[0] &&\n              m[1] === om[1] &&\n              m[2] === om[2] &&\n              m[3] === om[3] &&\n              m[4] === om[4] &&\n              m[5] === om[5] &&\n              m[6] === om[6] &&\n              m[7] === om[7] &&\n              m[8] === om[8] &&\n              m[9] === om[9] &&\n              m[10] === om[10] &&\n              m[11] === om[11] &&\n              m[12] === om[12] &&\n              m[13] === om[13] &&\n              m[14] === om[14] &&\n              m[15] === om[15]);\n      }\n      /**\n       * Clone the current matrix\n       * @returns a new matrix from the current matrix\n       */\n      clone() {\n          const matrix = new Matrix();\n          matrix.copyFrom(this);\n          return matrix;\n      }\n      /**\n       * Returns the name of the current matrix class\n       * @returns the string \"Matrix\"\n       */\n      getClassName() {\n          return 'Matrix';\n      }\n      /**\n       * Gets the hash code of the current matrix\n       * @returns the hash code\n       */\n      getHashCode() {\n          let hash = this._m[0] || 0;\n          for (let i = 1; i < 16; i++) {\n              hash = (hash * 397) ^ (this._m[i] || 0);\n          }\n          return hash;\n      }\n      /**\n       * Decomposes the current Matrix into a translation, rotation and scaling components\n       * @param scale - defines the scale vector3 given as a reference to update\n       * @param rotation - defines the rotation quaternion given as a reference to update\n       * @param translation - defines the translation vector3 given as a reference to update\n       * @returns true if operation was successful\n       */\n      decompose(scale, rotation, translation) {\n          if (this._isIdentity) {\n              if (translation) {\n                  translation.setAll(0);\n              }\n              if (scale) {\n                  scale.setAll(1);\n              }\n              if (rotation) {\n                  rotation.copyFromFloats(0, 0, 0, 1);\n              }\n              return true;\n          }\n          const m = this._m;\n          if (translation) {\n              translation.copyFromFloats(m[12], m[13], m[14]);\n          }\n          const usedScale = scale || preallocatedVariables_1$3.MathTmp.Vector3[0];\n          usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n          usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n          usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n          if (this.determinant() <= 0) {\n              usedScale.y *= -1;\n          }\n          if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n              if (rotation) {\n                  rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n              }\n              return false;\n          }\n          if (rotation) {\n              // tslint:disable-next-line:one-variable-per-declaration\n              const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\n              Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, preallocatedVariables_1$3.MathTmp.Matrix[0]);\n              Quaternion_1$2.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], rotation);\n          }\n          return true;\n      }\n      /**\n       * Gets specific row of the matrix\n       * @param index - defines the number of the row to get\n       * @returns the index-th row of the current matrix as a new Vector4\n       */\n      getRow(index) {\n          if (index < 0 || index > 3) {\n              return null;\n          }\n          const i = index * 4;\n          return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n      }\n      /**\n       * Sets the index-th row of the current matrix to the vector4 values\n       * @param index - defines the number of the row to set\n       * @param row - defines the target vector4\n       * @returns the updated current matrix\n       */\n      setRow(index, row) {\n          return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n      }\n      /**\n       * Compute the transpose of the matrix\n       * @returns the new transposed matrix\n       */\n      transpose() {\n          return Matrix.Transpose(this);\n      }\n      /**\n       * Compute the transpose of the matrix and store it in a given matrix\n       * @param result - defines the target matrix\n       * @returns the current matrix\n       */\n      transposeToRef(result) {\n          Matrix.TransposeToRef(this, result);\n          return this;\n      }\n      /**\n       * Sets the index-th row of the current matrix with the given 4 x float values\n       * @param index - defines the row index\n       * @param x - defines the x component to set\n       * @param y - defines the y component to set\n       * @param z - defines the z component to set\n       * @param w - defines the w component to set\n       * @returns the updated current matrix\n       */\n      setRowFromFloats(index, x, y, z, w) {\n          if (index < 0 || index > 3) {\n              return this;\n          }\n          const i = index * 4;\n          this._m[i + 0] = x;\n          this._m[i + 1] = y;\n          this._m[i + 2] = z;\n          this._m[i + 3] = w;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Compute a new matrix set with the current matrix values multiplied by scale (float)\n       * @param scale - defines the scale factor\n       * @returns a new matrix\n       */\n      scale(scale) {\n          const result = new Matrix();\n          this.scaleToRef(scale, result);\n          return result;\n      }\n      /**\n       * Scale the current matrix values by a factor to a given result matrix\n       * @param scale - defines the scale factor\n       * @param result - defines the matrix to store the result\n       * @returns the current matrix\n       */\n      scaleToRef(scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = this._m[index] * scale;\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Scale the current matrix values by a factor and add the result to a given matrix\n       * @param scale - defines the scale factor\n       * @param result - defines the Matrix to store the result\n       * @returns the current matrix\n       */\n      scaleAndAddToRef(scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] += this._m[index] * scale;\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n       * @param ref - matrix to store the result\n       */\n      toNormalMatrix(ref) {\n          const tmp = preallocatedVariables_1$3.MathTmp.Matrix[0];\n          this.invertToRef(tmp);\n          tmp.transposeToRef(ref);\n          const m = ref._m;\n          Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n      }\n      /**\n       * Gets only rotation part of the current matrix\n       * @returns a new matrix sets to the extracted rotation matrix from the current one\n       */\n      getRotationMatrix() {\n          const result = new Matrix();\n          this.getRotationMatrixToRef(result);\n          return result;\n      }\n      /**\n       * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n       * @param result - defines the target matrix to store data to\n       * @returns the current matrix\n       */\n      getRotationMatrixToRef(result) {\n          const scale = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          if (!this.decompose(scale)) {\n              Matrix.IdentityToRef(result);\n              return this;\n          }\n          const m = this._m;\n          // tslint:disable-next-line:one-variable-per-declaration\n          const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\n          Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          return this;\n      }\n      /**\n       * Toggles model matrix from being right handed to left handed in place and vice versa\n       */\n      toggleModelMatrixHandInPlace() {\n          const m = this._m;\n          m[2] *= -1;\n          m[6] *= -1;\n          m[8] *= -1;\n          m[9] *= -1;\n          m[14] *= -1;\n          this._markAsUpdated();\n      }\n      /**\n       * Toggles projection matrix from being right handed to left handed in place and vice versa\n       */\n      toggleProjectionMatrixHandInPlace() {\n          const m = this._m;\n          m[8] *= -1;\n          m[9] *= -1;\n          m[10] *= -1;\n          m[11] *= -1;\n          this._markAsUpdated();\n      }\n      /** @internal */\n      _updateIdentityStatus(isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {\n          this.updateFlag = Matrix._updateFlagSeed++;\n          this._isIdentity = isIdentity;\n          this._isIdentity3x2 = isIdentity || isIdentity3x2;\n          this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n          this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n      }\n  }\n  Matrix$1.Matrix = Matrix;\n  Matrix._updateFlagSeed = 0;\n  Matrix._identityReadOnly = Matrix.Identity();\n\n  Object.defineProperty(Quaternion$1, \"__esModule\", { value: true });\n  Quaternion$1.Quaternion = void 0;\n  const Matrix_1$2 = Matrix$1;\n  const Vector3_1$5 = Vector3$1;\n  const preallocatedVariables_1$2 = preallocatedVariables;\n  const types_1$7 = types;\n  const Scalar_1$5 = Scalar$1;\n  /**\n   * Class used to store quaternion data\n   * {@link https://en.wikipedia.org/wiki/Quaternion }\n   * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\n   * @public\n   */\n  class Quaternion {\n      /**\n       * Creates a new Quaternion from the given floats\n       * @param x - defines the first component (0 by default)\n       * @param y - defines the second component (0 by default)\n       * @param z - defines the third component (0 by default)\n       * @param w - defines the fourth component (1.0 by default)\n       */\n      constructor(\n      /** defines the first component (0 by default) */\n      x = 0.0, \n      /** defines the second component (0 by default) */\n      y = 0.0, \n      /** defines the third component (0 by default) */\n      z = 0.0, \n      /** defines the fourth component (1.0 by default) */\n      w = 1.0) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n      }\n      // Statics\n      /**\n       * Creates a new quaternion from a rotation matrix\n       * @param matrix - defines the source matrix\n       * @returns a new quaternion created from the given rotation matrix values\n       */\n      static FromRotationMatrix(matrix) {\n          const result = new Quaternion();\n          Quaternion.FromRotationMatrixToRef(matrix, result);\n          return result;\n      }\n      /**\n       * Updates the given quaternion with the given rotation matrix values\n       * @param matrix - defines the source matrix\n       * @param result - defines the target quaternion\n       */\n      static FromRotationMatrixToRef(matrix, result) {\n          const data = matrix.m;\n          // tslint:disable:one-variable-per-declaration\n          const m11 = data[0], m12 = data[4], m13 = data[8];\n          const m21 = data[1], m22 = data[5], m23 = data[9];\n          const m31 = data[2], m32 = data[6], m33 = data[10];\n          // tslint:enable:one-variable-per-declaration\n          const trace = m11 + m22 + m33;\n          let s;\n          if (trace > 0) {\n              s = 0.5 / Math.sqrt(trace + 1.0);\n              result.w = 0.25 / s;\n              result.x = (m32 - m23) * s;\n              result.y = (m13 - m31) * s;\n              result.z = (m21 - m12) * s;\n          }\n          else if (m11 > m22 && m11 > m33) {\n              s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n              result.w = (m32 - m23) / s;\n              result.x = 0.25 * s;\n              result.y = (m12 + m21) / s;\n              result.z = (m13 + m31) / s;\n          }\n          else if (m22 > m33) {\n              s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n              result.w = (m13 - m31) / s;\n              result.x = (m12 + m21) / s;\n              result.y = 0.25 * s;\n              result.z = (m23 + m32) / s;\n          }\n          else {\n              s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n              result.w = (m21 - m12) / s;\n              result.x = (m13 + m31) / s;\n              result.y = (m23 + m32) / s;\n              result.z = 0.25 * s;\n          }\n      }\n      /**\n       * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the dot product\n       */\n      static Dot(left, right) {\n          return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\n      }\n      /**\n       * Checks if the two quaternions are close to each other\n       * @param quat0 - defines the first quaternion to check\n       * @param quat1 - defines the second quaternion to check\n       * @returns true if the two quaternions are close to each other\n       */\n      static AreClose(quat0, quat1) {\n          const dot = Quaternion.Dot(quat0, quat1);\n          return dot >= 0;\n      }\n      /**\n       * Creates an empty quaternion\n       * @returns a new quaternion set to (0.0, 0.0, 0.0)\n       */\n      static Zero() {\n          return new Quaternion(0.0, 0.0, 0.0, 0.0);\n      }\n      /**\n       * Inverse a given quaternion\n       * @param q - defines the source quaternion\n       * @returns a new quaternion as the inverted current quaternion\n       */\n      static Inverse(q) {\n          return new Quaternion(-q.x, -q.y, -q.z, q.w);\n      }\n      /**\n       * Gets a boolean indicating if the given quaternion is identity\n       * @param quaternion - defines the quaternion to check\n       * @returns true if the quaternion is identity\n       */\n      static IsIdentity(quaternion) {\n          return (quaternion &&\n              quaternion.x === 0 &&\n              quaternion.y === 0 &&\n              quaternion.z === 0 &&\n              quaternion.w === 1);\n      }\n      /**\n       * Creates a quaternion from a rotation around an axis\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle to use (in Euler degrees)\n       * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n       */\n      static RotationAxis(axis, angle) {\n          const angleRad = angle * types_1$7.DEG2RAD;\n          return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());\n      }\n      /**\n       * Creates a rotation around an axis and stores it into the given quaternion\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle to use (in Euler degrees)\n       * @param result - defines the target quaternion\n       * @returns the target quaternion\n       */\n      static RotationAxisToRef(axis, angle, result) {\n          const angleRad = angle * types_1$7.DEG2RAD;\n          const sin = Math.sin(angleRad / 2);\n          axis.normalize();\n          result.w = Math.cos(angleRad / 2);\n          result.x = axis.x * sin;\n          result.y = axis.y * sin;\n          result.z = axis.z * sin;\n          return result;\n      }\n      /**\n       * Creates a new quaternion from data stored into an array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the source array where the data starts\n       * @returns a new quaternion\n       */\n      static FromArray(array, offset = 0) {\n          return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n       */\n      static FromEulerAnglesRef(x, y, z, result) {\n          return Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, result);\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles (y, x, z)\n       * @param yaw - defines the rotation around Y axis\n       * @param pitch - defines the rotation around X axis\n       * @param roll - defines the rotation around Z axis\n       * @returns the new quaternion\n       */\n      static RotationYawPitchRoll(yaw, pitch, roll) {\n          const q = new Quaternion();\n          Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n          return q;\n      }\n      /**\n       * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n       * @param yaw - defines the rotation around Y axis\n       * @param pitch - defines the rotation around X axis\n       * @param roll - defines the rotation around Z axis\n       * @param result - defines the target quaternion\n       */\n      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n          // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n          const halfPitch = pitch * 0.5;\n          const halfYaw = yaw * 0.5;\n          const halfRoll = roll * 0.5;\n          const c1 = Math.cos(halfPitch);\n          const c2 = Math.cos(halfYaw);\n          const c3 = Math.cos(halfRoll);\n          const s1 = Math.sin(halfPitch);\n          const s2 = Math.sin(halfYaw);\n          const s3 = Math.sin(halfRoll);\n          result.x = c2 * s1 * c3 + s2 * c1 * s3;\n          result.y = s2 * c1 * c3 - c2 * s1 * s3;\n          result.z = c2 * c1 * s3 - s2 * s1 * c3;\n          result.w = c2 * c1 * c3 + s2 * s1 * s3;\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n       * @param alpha - defines the rotation around first axis\n       * @param beta - defines the rotation around second axis\n       * @param gamma - defines the rotation around third axis\n       * @returns the new quaternion\n       */\n      static RotationAlphaBetaGamma(alpha, beta, gamma) {\n          const result = new Quaternion();\n          Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n          return result;\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n       * @param alpha - defines the rotation around first axis\n       * @param beta - defines the rotation around second axis\n       * @param gamma - defines the rotation around third axis\n       * @param result - defines the target quaternion\n       */\n      static RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {\n          // Produces a quaternion from Euler angles in the z-x-z orientation\n          const halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n          const halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n          const halfBeta = beta * 0.5;\n          result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n          result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n          result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n          result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n      }\n      /**\n       * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @returns the new quaternion\n       */\n      static RotationQuaternionFromAxis(axis1, axis2, axis3) {\n          const quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n          Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n          return quat;\n      }\n      /**\n       * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @param ref - defines the target quaternion\n       */\n      static RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {\n          const rotMat = preallocatedVariables_1$2.MathTmp.Matrix[0];\n          Matrix_1$2.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n          Quaternion.FromRotationMatrixToRef(rotMat, ref);\n      }\n      /**\n       * Interpolates between two quaternions\n       * @param left - defines first quaternion\n       * @param right - defines second quaternion\n       * @param amount - defines the gradient to use\n       * @returns the new interpolated quaternion\n       */\n      static Slerp(left, right, amount) {\n          const result = Quaternion.Identity;\n          Quaternion.SlerpToRef(left, right, amount, result);\n          return result;\n      }\n      /**\n       * Interpolates between two quaternions and stores it into a target quaternion\n       * @param left - defines first quaternion\n       * @param right - defines second quaternion\n       * @param amount - defines the gradient to use\n       * @param result - defines the target quaternion\n       */\n      static SlerpToRef(left, right, amount, result) {\n          let num2;\n          let num3;\n          let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n          let flag = false;\n          if (num4 < 0) {\n              flag = true;\n              num4 = -num4;\n          }\n          if (num4 > 0.999999) {\n              num3 = 1 - amount;\n              num2 = flag ? -amount : amount;\n          }\n          else {\n              const num5 = Math.acos(num4);\n              const num6 = 1.0 / Math.sin(num5);\n              num3 = Math.sin((1.0 - amount) * num5) * num6;\n              num2 = flag\n                  ? -Math.sin(amount * num5) * num6\n                  : Math.sin(amount * num5) * num6;\n          }\n          result.x = num3 * left.x + num2 * right.x;\n          result.y = num3 * left.y + num2 * right.y;\n          result.z = num3 * left.z + num2 * right.z;\n          result.w = num3 * left.w + num2 * right.w;\n      }\n      /**\n       * Interpolate between two quaternions using Hermite interpolation\n       * @param value1 - defines first quaternion\n       * @param tangent1 - defines the incoming tangent\n       * @param value2 - defines second quaternion\n       * @param tangent2 - defines the outgoing tangent\n       * @param amount - defines the target quaternion\n       * @returns the new interpolated quaternion\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          const z = value1.z * part1 +\n              value2.z * part2 +\n              tangent1.z * part3 +\n              tangent2.z * part4;\n          const w = value1.w * part1 +\n              value2.w * part2 +\n              tangent1.w * part3 +\n              tangent2.w * part4;\n          return new Quaternion(x, y, z, w);\n      }\n      /**\n       * Creates an identity quaternion\n       * @returns - the identity quaternion\n       */\n      static get Identity() {\n          return new Quaternion(0.0, 0.0, 0.0, 1.0);\n      }\n      /**\n       * Returns the angle in degrees between two rotations a and b.\n       * @param quat1 - defines the first quaternion\n       * @param quat2 - defines the second quaternion\n       */\n      static Angle(quat1, quat2) {\n          const dot = Quaternion.Dot(quat1, quat2);\n          return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1$7.RAD2DEG;\n      }\n      /**\n       * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n       * @param x - the rotation on the x axis in euler degrees\n       * @param y - the rotation on the y axis in euler degrees\n       * @param z - the rotation on the z axis in euler degrees\n       */\n      static Euler(x, y, z) {\n          return Quaternion.RotationYawPitchRoll(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD);\n      }\n      /**\n       * Creates a rotation with the specified forward and upwards directions.\n       * @param forward - the direction to look in\n       * @param up - the vector that defines in which direction up is\n       */\n      static LookRotation(forward, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          const forwardNew = Vector3_1$5.Vector3.Normalize(forward);\n          const right = Vector3_1$5.Vector3.Normalize(Vector3_1$5.Vector3.Cross(up, forwardNew));\n          const upNew = Vector3_1$5.Vector3.Cross(forwardNew, right);\n          const m00 = right.x;\n          const m01 = right.y;\n          const m02 = right.z;\n          const m10 = upNew.x;\n          const m11 = upNew.y;\n          const m12 = upNew.z;\n          const m20 = forwardNew.x;\n          const m21 = forwardNew.y;\n          const m22 = forwardNew.z;\n          const num8 = m00 + m11 + m22;\n          const quaternion = new Quaternion();\n          if (num8 > 0) {\n              let num = Math.sqrt(num8 + 1);\n              quaternion.w = num * 0.5;\n              num = 0.5 / num;\n              quaternion.x = (m12 - m21) * num;\n              quaternion.y = (m20 - m02) * num;\n              quaternion.z = (m01 - m10) * num;\n              return quaternion;\n          }\n          if (m00 >= m11 && m00 >= m22) {\n              const num7 = Math.sqrt(1 + m00 - m11 - m22);\n              const num4 = 0.5 / num7;\n              quaternion.x = 0.5 * num7;\n              quaternion.y = (m01 + m10) * num4;\n              quaternion.z = (m02 + m20) * num4;\n              quaternion.w = (m12 - m21) * num4;\n              return quaternion;\n          }\n          if (m11 > m22) {\n              const num6 = Math.sqrt(1 + m11 - m00 - m22);\n              const num3 = 0.5 / num6;\n              quaternion.x = (m10 + m01) * num3;\n              quaternion.y = 0.5 * num6;\n              quaternion.z = (m21 + m12) * num3;\n              quaternion.w = (m20 - m02) * num3;\n              return quaternion;\n          }\n          const num5 = Math.sqrt(1 + m22 - m00 - m11);\n          const num2 = 0.5 / num5;\n          quaternion.x = (m20 + m02) * num2;\n          quaternion.y = (m21 + m12) * num2;\n          quaternion.z = 0.5 * num5;\n          quaternion.w = (m01 - m10) * num2;\n          return quaternion;\n      }\n      /**\n       * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n       * @param from - defines the first quaternion\n       * @param to - defines the second quaternion\n       * @param maxDegreesDelta - the interval step\n       */\n      static RotateTowards(from, to, maxDegreesDelta) {\n          const num = Quaternion.Angle(from, to);\n          if (num === 0) {\n              return to;\n          }\n          const t = Math.min(1, maxDegreesDelta / num);\n          return Quaternion.Slerp(from, to, t);\n      }\n      /**\n       * Creates a rotation which rotates from fromDirection to toDirection.\n       * @param from - defines the first direction Vector\n       * @param to - defines the target direction Vector\n       */\n      static FromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n          const v0 = from.normalize();\n          const v1 = to.normalize();\n          const a = Vector3_1$5.Vector3.Cross(v0, v1);\n          const w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3_1$5.Vector3.Dot(v0, v1);\n          if (a.lengthSquared() < 0.0001) {\n              // the vectors are parallel, check w to find direction\n              // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n              // otherwise the vectors in the same direction and no rotation should occur\n              return Math.abs(w) < 0.0001\n                  ? new Quaternion(up.x, up.y, up.z, 0).normalized\n                  : Quaternion.Identity;\n          }\n          else {\n              return new Quaternion(a.x, a.y, a.z, w).normalized;\n          }\n      }\n      /**\n       * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n       */\n      get normalized() {\n          return this.normalize();\n      }\n      /**\n       * Creates a rotation which rotates from fromDirection to toDirection.\n       * @param from - defines the first Vector\n       * @param to - defines the second Vector\n       * @param up - defines the direction\n       */\n      setFromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          const result = Quaternion.FromToRotation(from, to, up);\n          this.x = result.x;\n          this.y = result.y;\n          this.z = result.z;\n          this.w = result.w;\n      }\n      set eulerAngles(euler) {\n          this.setEuler(euler.x, euler.y, euler.z);\n      }\n      /**\n       * Gets or sets the euler angle representation of the rotation.\n       * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n       */\n      get eulerAngles() {\n          const out = new Vector3_1$5.Vector3();\n          // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n          const unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n          // this will have a magnitude of 0.5 or greater if and only if this is a singularity case\n          const test = this.x * this.w - this.y * this.z;\n          if (test > 0.4995 * unit) {\n              // singularity at north pole\n              out.x = Math.PI / 2;\n              out.y = 2 * Math.atan2(this.y, this.x);\n              out.z = 0;\n          }\n          else if (test < -0.4995 * unit) {\n              // singularity at south pole\n              out.x = -Math.PI / 2;\n              out.y = -2 * Math.atan2(this.y, this.x);\n              out.z = 0;\n          }\n          else {\n              // no singularity - this is the majority of cases\n              out.x = Math.asin(2 * (this.w * this.x - this.y * this.z));\n              out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y));\n              out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x));\n          }\n          out.x *= types_1$7.RAD2DEG;\n          out.y *= types_1$7.RAD2DEG;\n          out.z *= types_1$7.RAD2DEG;\n          // ensure the degree values are between 0 and 360\n          out.x = Scalar_1$5.Scalar.Repeat(out.x, 360);\n          out.y = Scalar_1$5.Scalar.Repeat(out.y, 360);\n          out.z = Scalar_1$5.Scalar.Repeat(out.z, 360);\n          return out;\n      }\n      /**\n       * Gets a string representation for the current quaternion\n       * @returns a string with the Quaternion coordinates\n       */\n      toString() {\n          return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;\n      }\n      /**\n       * Gets length of current quaternion\n       * @returns the quaternion length (float)\n       */\n      get length() {\n          return Math.sqrt(this.lengthSquared);\n      }\n      /**\n       * Gets length of current quaternion\n       * @returns the quaternion length (float)\n       */\n      get lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n      /**\n       * Gets the class name of the quaternion\n       * @returns the string \"Quaternion\"\n       */\n      getClassName() {\n          return 'Quaternion';\n      }\n      /**\n       * Gets a hash code for this quaternion\n       * @returns the quaternion hash code\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          hash = (hash * 397) ^ (this.w || 0);\n          return hash;\n      }\n      /**\n       * Copy the quaternion to an array\n       * @returns a new array populated with 4 elements from the quaternion coordinates\n       */\n      asArray() {\n          return [this.x, this.y, this.z, this.w];\n      }\n      /**\n       * Check if two quaternions are equals\n       * @param otherQuaternion - defines the second operand\n       * @returns true if the current quaternion and the given one coordinates are strictly equals\n       */\n      equals(otherQuaternion) {\n          return (otherQuaternion &&\n              this.x === otherQuaternion.x &&\n              this.y === otherQuaternion.y &&\n              this.z === otherQuaternion.z &&\n              this.w === otherQuaternion.w);\n      }\n      /**\n       * Clone the current quaternion\n       * @returns a new quaternion copied from the current one\n       */\n      clone() {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n      }\n      /**\n       * Copy a quaternion to the current one\n       * @param other - defines the other quaternion\n       * @returns the updated current quaternion\n       */\n      copyFrom(other) {\n          this.x = other.x;\n          this.y = other.y;\n          this.z = other.z;\n          this.w = other.w;\n          return this;\n      }\n      /**\n       * Updates the current quaternion with the given float coordinates\n       * @param x - defines the x coordinate\n       * @param y - defines the y coordinate\n       * @param z - defines the z coordinate\n       * @param w - defines the w coordinate\n       * @returns the updated current quaternion\n       */\n      copyFromFloats(x, y, z, w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n          return this;\n      }\n      /**\n       * Updates the current quaternion from the given float coordinates\n       * @param x - defines the x coordinate\n       * @param y - defines the y coordinate\n       * @param z - defines the z coordinate\n       * @param w - defines the w coordinate\n       * @returns the updated current quaternion\n       */\n      set(x, y, z, w) {\n          return this.copyFromFloats(x, y, z, w);\n      }\n      /**\n       * Updates the current quaternion from the given euler angles\n       * @returns the updated current quaternion\n       */\n      setEuler(x, y, z) {\n          Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, this);\n          return this;\n      }\n      /**\n       * @internal\n       * Adds two quaternions\n       * @param other - defines the second operand\n       * @returns a new quaternion as the addition result of the given one and the current quaternion\n       */\n      add(other) {\n          return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n      }\n      /**\n       * @internal\n       * Add a quaternion to the current one\n       * @param other - defines the quaternion to add\n       * @returns the current quaternion\n       */\n      addInPlace(other) {\n          this.x += other.x;\n          this.y += other.y;\n          this.z += other.z;\n          this.w += other.w;\n          return this;\n      }\n      /**\n       * Subtract two quaternions\n       * @param other - defines the second operand\n       * @returns a new quaternion as the subtraction result of the given one from the current one\n       */\n      subtract(other) {\n          return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n      }\n      /**\n       * Multiplies the current quaternion by a scale factor\n       * @param value - defines the scale factor\n       * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n       */\n      scale(value) {\n          return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\n      }\n      /**\n       * Scale the current quaternion values by a factor and stores the result to a given quaternion\n       * @param scale - defines the scale factor\n       * @param result - defines the Quaternion object where to store the result\n       * @returns the unmodified current quaternion\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          result.z = this.z * scale;\n          result.w = this.w * scale;\n          return this;\n      }\n      /**\n       * Multiplies in place the current quaternion by a scale factor\n       * @param value - defines the scale factor\n       * @returns the current modified quaternion\n       */\n      scaleInPlace(value) {\n          this.x *= value;\n          this.y *= value;\n          this.z *= value;\n          this.w *= value;\n          return this;\n      }\n      /**\n       * Scale the current quaternion values by a factor and add the result to a given quaternion\n       * @param scale - defines the scale factor\n       * @param result - defines the Quaternion object where to store the result\n       * @returns the unmodified current quaternion\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          result.z += this.z * scale;\n          result.w += this.w * scale;\n          return this;\n      }\n      /**\n       * Multiplies two quaternions\n       * @param q1 - defines the second operand\n       * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n       */\n      multiply(q1) {\n          const result = new Quaternion(0, 0, 0, 1.0);\n          this.multiplyToRef(q1, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n       * @param q1 - defines the second operand\n       * @param result - defines the target quaternion\n       * @returns the current quaternion\n       */\n      multiplyToRef(q1, result) {\n          const x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\n          const y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\n          const z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\n          const w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\n          result.copyFromFloats(x, y, z, w);\n          return this;\n      }\n      /**\n       * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n       * @param q1 - defines the second operand\n       * @returns the currentupdated quaternion\n       */\n      multiplyInPlace(q1) {\n          this.multiplyToRef(q1, this);\n          return this;\n      }\n      /**\n       * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n       * @param ref - defines the target quaternion\n       * @returns the current quaternion\n       */\n      conjugateToRef(ref) {\n          ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\n          return this;\n      }\n      /**\n       * Conjugates in place (1-q) the current quaternion\n       * @returns the current updated quaternion\n       */\n      conjugateInPlace() {\n          this.x *= -1;\n          this.y *= -1;\n          this.z *= -1;\n          return this;\n      }\n      /**\n       * Conjugates in place (1-q) the current quaternion\n       * @returns a new quaternion\n       */\n      conjugate() {\n          const result = new Quaternion(-this.x, -this.y, -this.z, this.w);\n          return result;\n      }\n      /**\n       * Normalize in place the current quaternion\n       * @returns the current updated quaternion\n       */\n      normalize() {\n          const length = 1.0 / this.length;\n          this.x *= length;\n          this.y *= length;\n          this.z *= length;\n          this.w *= length;\n          return this;\n      }\n      angleAxis(degress, axis) {\n          if (axis.lengthSquared() === 0) {\n              return Quaternion.Identity;\n          }\n          const result = Quaternion.Identity;\n          let radians = degress * types_1$7.DEG2RAD;\n          radians *= 0.5;\n          let a2 = axis.normalize();\n          a2 = axis.scaleInPlace(Math.sin(radians));\n          result.x = a2.x;\n          result.y = a2.y;\n          result.z = a2.z;\n          result.w = Math.cos(radians);\n          return result.normalize();\n      }\n      /**\n       * Updates the given rotation matrix with the current quaternion values\n       * @param result - defines the target matrix\n       * @returns the current unchanged quaternion\n       */\n      toRotationMatrix(result) {\n          Matrix_1$2.Matrix.FromQuaternionToRef(this, result);\n          return this;\n      }\n      /**\n       * Updates the current quaternion from the given rotation matrix values\n       * @param matrix - defines the source matrix\n       * @returns the current updated quaternion\n       */\n      fromRotationMatrix(matrix) {\n          Quaternion.FromRotationMatrixToRef(matrix, this);\n          return this;\n      }\n  }\n  Quaternion$1.Quaternion = Quaternion;\n\n  Object.defineProperty(Vector3$1, \"__esModule\", { value: true });\n  Vector3$1.Vector3 = void 0;\n  const preallocatedVariables_1$1 = preallocatedVariables;\n  const types_1$6 = types;\n  const Quaternion_1$1 = Quaternion$1;\n  const Scalar_1$4 = Scalar$1;\n  /**\n   * Classed used to store (x,y,z) vector representation\n   * A Vector3 is the main object used in 3D geometry\n   * It can represent etiher the coordinates of a point the space, either a direction\n   * Reminder: Babylon.js uses a left handed forward facing system\n   * @public\n   */\n  class Vector3 {\n      /**\n       * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n       * @param x - defines the first coordinates (on X axis)\n       * @param y - defines the second coordinates (on Y axis)\n       * @param z - defines the third coordinates (on Z axis)\n       */\n      constructor(\n      /**\n       * Defines the first coordinates (on X axis)\n       */\n      x = 0, \n      /**\n       * Defines the second coordinates (on Y axis)\n       */\n      y = 0, \n      /**\n       * Defines the third coordinates (on Z axis)\n       */\n      z = 0) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n      }\n      /**\n       * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n       */\n      get isNonUniform() {\n          const absX = Math.abs(this.x);\n          const absY = Math.abs(this.y);\n          if (absX !== absY) {\n              return true;\n          }\n          const absZ = Math.abs(this.z);\n          if (absX !== absZ) {\n              return true;\n          }\n          if (absY !== absZ) {\n              return true;\n          }\n          return false;\n      }\n      // Statics\n      /**\n       * Returns a new Vector3 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);\n      }\n      /**\n       * Get the clip factor between two vectors\n       * @param vector0 - defines the first operand\n       * @param vector1 - defines the second operand\n       * @param axis - defines the axis to use\n       * @param size - defines the size along the axis\n       * @returns the clip factor\n       */\n      static GetClipFactor(vector0, vector1, axis, size) {\n          const d0 = Vector3.Dot(vector0, axis) - size;\n          const d1 = Vector3.Dot(vector1, axis) - size;\n          const s = d0 / (d0 - d1);\n          return s;\n      }\n      /**\n       * Get angle between two vectors\n       * @param vector0 - angle between vector0 and vector1\n       * @param vector1 - angle between vector0 and vector1\n       * @param normal - direction of the normal\n       * @returns the angle between vector0 and vector1\n       */\n      static GetAngleBetweenVectors(vector0, vector1, normal) {\n          const v0 = vector0.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[1]);\n          const v1 = vector1.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[2]);\n          const dot = Vector3.Dot(v0, v1);\n          const n = preallocatedVariables_1$1.MathTmp.Vector3[3];\n          Vector3.CrossToRef(v0, v1, n);\n          if (Vector3.Dot(n, normal) > 0) {\n              return Math.acos(dot);\n          }\n          return -Math.acos(dot);\n      }\n      /**\n       * Returns a new Vector3 set from the index \"offset\" of the given array\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @returns the new Vector3\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n      }\n      /**\n       * Returns a new Vector3 set from the index \"offset\" of the given FloatArray\n       * This function is deprecated.  Use FromArray instead\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @returns the new Vector3\n       */\n      static FromFloatArray(array, offset) {\n          return Vector3.FromArray(array, offset);\n      }\n      /**\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n          result.z = array[offset + 2];\n      }\n      /**\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray\n       * This function is deprecated.  Use FromArrayToRef instead.\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromFloatArrayToRef(array, offset, result) {\n          return Vector3.FromArrayToRef(array, offset, result);\n      }\n      /**\n       * Sets the given vector \"result\" with the given floats.\n       * @param x - defines the x coordinate of the source\n       * @param y - defines the y coordinate of the source\n       * @param z - defines the z coordinate of the source\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromFloatsToRef(x, y, z, result) {\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n       * @returns a new empty Vector3\n       */\n      static Zero() {\n          return new Vector3(0.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n       * @returns a new unit Vector3\n       */\n      static One() {\n          return new Vector3(1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n       * @returns a new up Vector3\n       */\n      static Up() {\n          return new Vector3(0.0, 1.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n       * @returns a new down Vector3\n       */\n      static Down() {\n          return new Vector3(0.0, -1.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n       * @returns a new forward Vector3\n       */\n      static Forward() {\n          return new Vector3(0.0, 0.0, 1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n       * @returns a new forward Vector3\n       */\n      static Backward() {\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n       * @returns a new right Vector3\n       */\n      static Right() {\n          return new Vector3(1.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n       * @returns a new left Vector3\n       */\n      static Left() {\n          return new Vector3(-1.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @returns the transformed Vector3\n       */\n      static TransformCoordinates(vector, transformation) {\n          const result = Vector3.Zero();\n          Vector3.TransformCoordinatesToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformCoordinatesToRef(vector, transformation, result) {\n          return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n      }\n      /**\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n       * This method computes tranformed coordinates only, not transformed direction vectors\n       * @param x - define the x coordinate of the source vector\n       * @param y - define the y coordinate of the source vector\n       * @param z - define the z coordinate of the source vector\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n          const m = transformation.m;\n          const rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n          const ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n          const rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n          const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n          result.x = rx * rw;\n          result.y = ry * rw;\n          result.z = rz * rw;\n      }\n      /**\n       * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @returns the new Vector3\n       */\n      static TransformNormal(vector, transformation) {\n          const result = Vector3.Zero();\n          Vector3.TransformNormalToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformNormalToRef(vector, transformation, result) {\n          this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param x - define the x coordinate of the source vector\n       * @param y - define the y coordinate of the source vector\n       * @param z - define the z coordinate of the source vector\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformNormalFromFloatsToRef(x, y, z, transformation, result) {\n          const m = transformation.m;\n          result.x = x * m[0] + y * m[4] + z * m[8];\n          result.y = x * m[1] + y * m[5] + z * m[9];\n          result.z = x * m[2] + y * m[6] + z * m[10];\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n       * @param value1 - defines the first control point\n       * @param value2 - defines the second control point\n       * @param value3 - defines the third control point\n       * @param value4 - defines the fourth control point\n       * @param amount - defines the amount on the spline to use\n       * @returns the new Vector3\n       */\n      static CatmullRom(value1, value2, value3, value4, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const x = 0.5 *\n              (2.0 * value2.x +\n                  (-value1.x + value3.x) * amount +\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n                      squared +\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n          const y = 0.5 *\n              (2.0 * value2.y +\n                  (-value1.y + value3.y) * amount +\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n                      squared +\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n          const z = 0.5 *\n              (2.0 * value2.z +\n                  (-value1.z + value3.z) * amount +\n                  (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) *\n                      squared +\n                  (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n          return new Vector3(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n       * @param value - defines the current value\n       * @param min - defines the lower range value\n       * @param max - defines the upper range value\n       * @returns the new Vector3\n       */\n      static Clamp(value, min, max) {\n          const v = new Vector3();\n          Vector3.ClampToRef(value, min, max, v);\n          return v;\n      }\n      /**\n       * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n       * @param value - defines the current value\n       * @param min - defines the lower range value\n       * @param max - defines the upper range value\n       * @param result - defines the Vector3 where to store the result\n       */\n      static ClampToRef(value, min, max, result) {\n          let x = value.x;\n          x = x > max.x ? max.x : x;\n          x = x < min.x ? min.x : x;\n          let y = value.y;\n          y = y > max.y ? max.y : y;\n          y = y < min.y ? min.y : y;\n          let z = value.z;\n          z = z > max.z ? max.z : z;\n          z = z < min.z ? min.z : z;\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n       * @param value1 - defines the first control point\n       * @param tangent1 - defines the first tangent vector\n       * @param value2 - defines the second control point\n       * @param tangent2 - defines the second tangent vector\n       * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n       * @returns the new Vector3\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          const z = value1.z * part1 +\n              value2.z * part2 +\n              tangent1.z * part3 +\n              tangent2.z * part4;\n          return new Vector3(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n       * @param start - defines the start value\n       * @param end - defines the end value\n       * @param amount - max defines amount between both (between 0 and 1)\n       * @returns the new Vector3\n       */\n      static Lerp(start, end, amount) {\n          const result = new Vector3(0, 0, 0);\n          Vector3.LerpToRef(start, end, amount, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n       * @param start - defines the start value\n       * @param end - defines the end value\n       * @param amount - max defines amount between both (between 0 and 1)\n       * @param result - defines the Vector3 where to store the result\n       */\n      static LerpToRef(start, end, amount, result) {\n          result.x = start.x + (end.x - start.x) * amount;\n          result.y = start.y + (end.y - start.y) * amount;\n          result.z = start.z + (end.z - start.z) * amount;\n      }\n      /**\n       * Returns the dot product (float) between the vectors \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the dot product\n       */\n      static Dot(left, right) {\n          return left.x * right.x + left.y * right.y + left.z * right.z;\n      }\n      /**\n       * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n       * The cross product is then orthogonal to both \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the cross product\n       */\n      static Cross(left, right) {\n          const result = Vector3.Zero();\n          Vector3.CrossToRef(left, right, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n       * The cross product is then orthogonal to both \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @param result - defines the Vector3 where to store the result\n       */\n      static CrossToRef(left, right, result) {\n          const x = left.y * right.z - left.z * right.y;\n          const y = left.z * right.x - left.x * right.z;\n          const z = left.x * right.y - left.y * right.x;\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 as the normalization of the given vector\n       * @param vector - defines the Vector3 to normalize\n       * @returns the new Vector3\n       */\n      static Normalize(vector) {\n          const result = Vector3.Zero();\n          Vector3.NormalizeToRef(vector, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the normalization of the given first vector\n       * @param vector - defines the Vector3 to normalize\n       * @param result - defines the Vector3 where to store the result\n       */\n      static NormalizeToRef(vector, result) {\n          vector.normalizeToRef(result);\n      }\n      /**\n       * Gets the minimal coordinate values between two Vector3\n       * @param left - defines the first operand\n       * @param right - defines the second operand\n       * @returns the new Vector3\n       */\n      static Minimize(left, right) {\n          const min = new Vector3(left.x, left.y, left.z);\n          min.minimizeInPlace(right);\n          return min;\n      }\n      /**\n       * Gets the maximal coordinate values between two Vector3\n       * @param left - defines the first operand\n       * @param right - defines the second operand\n       * @returns the new Vector3\n       */\n      static Maximize(left, right) {\n          const max = new Vector3(left.x, left.y, left.z);\n          max.maximizeInPlace(right);\n          return max;\n      }\n      /**\n       * Returns the distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the distance\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the squared distance\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          const z = value1.z - value2.z;\n          return x * x + y * y + z * z;\n      }\n      /**\n       * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the new Vector3\n       */\n      static Center(value1, value2) {\n          const center = Vector3.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n       * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n       * to something in order to rotate it from its local system to the given target system\n       * Note: axis1, axis2 and axis3 are normalized during this operation\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @returns a new Vector3\n       */\n      static RotationFromAxis(axis1, axis2, axis3) {\n          const rotation = Vector3.Zero();\n          Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n          return rotation;\n      }\n      /**\n       * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @param ref - defines the Vector3 where to store the result\n       */\n      static RotationFromAxisToRef(axis1, axis2, axis3, ref) {\n          const quat = preallocatedVariables_1$1.MathTmp.Quaternion[0];\n          Quaternion_1$1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n          ref.copyFrom(quat.eulerAngles);\n      }\n      /**\n       * Creates a string representation of the Vector3\n       * @returns a string with the Vector3 coordinates.\n       */\n      toString() {\n          return `(${this.x}, ${this.y}, ${this.z})`;\n      }\n      /**\n       * Gets the class name\n       * @returns the string \"Vector3\"\n       */\n      getClassName() {\n          return 'Vector3';\n      }\n      /**\n       * Creates the Vector3 hash code\n       * @returns a number which tends to be unique between Vector3 instances\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Creates an array containing three elements : the coordinates of the Vector3\n       * @returns a new array of numbers\n       */\n      asArray() {\n          const result = [];\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n       * @param array - defines the destination array\n       * @param index - defines the offset in the destination array\n       * @returns the current Vector3\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          array[index + 2] = this.z;\n          return this;\n      }\n      /**\n       * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n       * @returns a new Quaternion object, computed from the Vector3 coordinates\n       */\n      toQuaternion() {\n          return Quaternion_1$1.Quaternion.Identity.setEuler(this.y, this.x, this.z);\n      }\n      /**\n       * Adds the given vector to the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      addInPlace(otherVector) {\n          return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\n      }\n      /**\n       * Adds the given coordinates to the current Vector3\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      addInPlaceFromFloats(x, y, z) {\n          this.x += x;\n          this.y += y;\n          this.z += z;\n          return this;\n      }\n      /**\n       * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n       * @param otherVector - defines the second operand\n       * @returns the resulting Vector3\n       */\n      add(otherVector) {\n          return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n      }\n      /**\n       * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      addToRef(otherVector, result) {\n          return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n      }\n      /**\n       * Subtract the given vector from the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          this.z -= otherVector.z;\n          return this;\n      }\n      /**\n       * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the resulting Vector3\n       */\n      subtract(otherVector) {\n          return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\n      }\n      /**\n       * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      subtractToRef(otherVector, result) {\n          return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\n      }\n      /**\n       * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the resulting Vector3\n       */\n      subtractFromFloats(x, y, z) {\n          return new Vector3(this.x - x, this.y - y, this.z - z);\n      }\n      /**\n       * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      subtractFromFloatsToRef(x, y, z, result) {\n          return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\n      }\n      /**\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n       * @param matrix - The transformation matrix\n       */\n      applyMatrix4(matrix) {\n          this.applyMatrix4ToRef(matrix, this);\n      }\n      /**\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n       * @param matrix - The transformation matrix\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      applyMatrix4ToRef(matrix, result) {\n          const { x, y, z } = this;\n          const { m } = matrix;\n          const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n          result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n          result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n          result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n          return result;\n      }\n      /**\n       * Rotates the current Vector3 based on the given quaternion\n       * @param q - defines the Quaternion\n       * @returns the current Vector3\n       */\n      rotate(q) {\n          return this.rotateToRef(q, this);\n      }\n      /**\n       * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n       * @param q - defines the Quaternion\n       * @param result - defines the target Vector3\n       * @returns the current Vector3\n       */\n      rotateToRef(q, result) {\n          const { x, y, z } = this;\n          const { x: qx, y: qy, z: qz, w: qw } = q;\n          // calculate quat * vector\n          const ix = qw * x + qy * z - qz * y;\n          const iy = qw * y + qz * x - qx * z;\n          const iz = qw * z + qx * y - qy * x;\n          const iw = -qx * x - qy * y - qz * z;\n          // calculate result * inverse quat\n          result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n          result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n          result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n          return result;\n      }\n      /**\n       * Gets a new Vector3 set with the current Vector3 negated coordinates\n       * @returns a new Vector3\n       */\n      negate() {\n          return new Vector3(-this.x, -this.y, -this.z);\n      }\n      /**\n       * Multiplies the Vector3 coordinates by the float \"scale\"\n       * @param scale - defines the multiplier factor\n       * @returns the current updated Vector3\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          this.z *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n       * @param scale - defines the multiplier factor\n       * @returns a new Vector3\n       */\n      scale(scale) {\n          return new Vector3(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n       * @param scale - defines the multiplier factor\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      scaleToRef(scale, result) {\n          return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Scale the current Vector3 values by a factor and add the result to a given Vector3\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the unmodified current Vector3\n       */\n      scaleAndAddToRef(scale, result) {\n          return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n       * @param otherVector - defines the second operand\n       * @returns true if both vectors are equals\n       */\n      equals(otherVector) {\n          return (otherVector &&\n              this.x === otherVector.x &&\n              this.y === otherVector.y &&\n              this.z === otherVector.z);\n      }\n      /**\n       * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n       * @param otherVector - defines the second operand\n       * @param epsilon - defines the minimal distance to define values as equals\n       * @returns true if both vectors are distant less than epsilon\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$6.Epsilon) {\n          return (otherVector &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));\n      }\n      /**\n       * Returns true if the current Vector3 coordinates equals the given floats\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns true if both vectors are equals\n       */\n      equalsToFloats(x, y, z) {\n          return this.x === x && this.y === y && this.z === z;\n      }\n      /**\n       * Multiplies the current Vector3 coordinates by the given ones\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          this.z *= otherVector.z;\n          return this;\n      }\n      /**\n       * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n       * @param otherVector - defines the second operand\n       * @returns the new Vector3\n       */\n      multiply(otherVector) {\n          return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\n      }\n      /**\n       * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      multiplyToRef(otherVector, result) {\n          return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the new Vector3\n       */\n      multiplyByFloats(x, y, z) {\n          return new Vector3(this.x * x, this.y * y, this.z * z);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n       * @param otherVector - defines the second operand\n       * @returns the new Vector3\n       */\n      divide(otherVector) {\n          return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      divideToRef(otherVector, result) {\n          return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones.\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector3\n       */\n      minimizeInPlace(other) {\n          return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\n      }\n      /**\n       * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n       * @param other - defines the second operand\n       * @returns the current updated Vector3\n       */\n      maximizeInPlace(other) {\n          return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\n      }\n      /**\n       * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      minimizeInPlaceFromFloats(x, y, z) {\n          if (x < this.x) {\n              this.x = x;\n          }\n          if (y < this.y) {\n              this.y = y;\n          }\n          if (z < this.z) {\n              this.z = z;\n          }\n          return this;\n      }\n      /**\n       * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      maximizeInPlaceFromFloats(x, y, z) {\n          if (x > this.x) {\n              this.x = x;\n          }\n          if (y > this.y) {\n              this.y = y;\n          }\n          if (z > this.z) {\n              this.z = z;\n          }\n          return this;\n      }\n      /**\n       * Gets a new Vector3 from current Vector3 floored values\n       * @returns a new Vector3\n       */\n      floor() {\n          return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n      }\n      /**\n       * Gets a new Vector3 from current Vector3 floored values\n       * @returns a new Vector3\n       */\n      fract() {\n          return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n      }\n      // Properties\n      /**\n       * Gets the length of the Vector3\n       * @returns the length of the Vecto3\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n      }\n      /**\n       * Gets the squared length of the Vector3\n       * @returns squared length of the Vector3\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z;\n      }\n      /**\n       * Normalize the current Vector3.\n       * Please note that this is an in place operation.\n       * @returns the current updated Vector3\n       */\n      normalize() {\n          return this.normalizeFromLength(this.length());\n      }\n      /**\n       * Normalize the current Vector3 with the given input length.\n       * Please note that this is an in place operation.\n       * @param len - the length of the vector\n       * @returns the current updated Vector3\n       */\n      normalizeFromLength(len) {\n          if (len === 0 || len === 1.0) {\n              return this;\n          }\n          return this.scaleInPlace(1.0 / len);\n      }\n      /**\n       * Normalize the current Vector3 to a new vector\n       * @returns the new Vector3\n       */\n      normalizeToNew() {\n          const normalized = new Vector3(0, 0, 0);\n          this.normalizeToRef(normalized);\n          return normalized;\n      }\n      /**\n       * Normalize the current Vector3 to the reference\n       * @param reference - define the Vector3 to update\n       * @returns the updated Vector3\n       */\n      normalizeToRef(reference) {\n          const len = this.length();\n          if (len === 0 || len === 1.0) {\n              return reference.copyFromFloats(this.x, this.y, this.z);\n          }\n          return this.scaleToRef(1.0 / len, reference);\n      }\n      /**\n       * Creates a new Vector3 copied from the current Vector3\n       * @returns the new Vector3\n       */\n      clone() {\n          return new Vector3(this.x, this.y, this.z);\n      }\n      /**\n       * Copies the given vector coordinates to the current Vector3 ones\n       * @param source - defines the source Vector3\n       * @returns the current updated Vector3\n       */\n      copyFrom(source) {\n          return this.copyFromFloats(source.x, source.y, source.z);\n      }\n      /**\n       * Copies the given floats to the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      copyFromFloats(x, y, z) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          return this;\n      }\n      /**\n       * Copies the given floats to the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      set(x, y, z) {\n          return this.copyFromFloats(x, y, z);\n      }\n      /**\n       * Copies the given float to the current Vector3 coordinates\n       * @param v - defines the x, y and z coordinates of the operand\n       * @returns the current updated Vector3\n       */\n      setAll(v) {\n          this.x = this.y = this.z = v;\n          return this;\n      }\n  }\n  Vector3$1.Vector3 = Vector3;\n\n  Object.defineProperty(preallocatedVariables, \"__esModule\", { value: true });\n  preallocatedVariables.MathTmp = void 0;\n  const utils_1 = utils;\n  const Vector3_1$4 = Vector3$1;\n  const Quaternion_1 = Quaternion$1;\n  const Matrix_1$1 = Matrix$1;\n  // Temporary pre-allocated objects for engine internal use\n  // usage in any internal function :\n  // var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\n  // There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\n  /**\n   * @public\n   * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n   */\n  preallocatedVariables.MathTmp = {\n      Vector3: (0, utils_1.buildArray)(6, Vector3_1$4.Vector3.Zero),\n      Matrix: (0, utils_1.buildArray)(2, Matrix_1$1.Matrix.Identity),\n      Quaternion: (0, utils_1.buildArray)(3, Quaternion_1.Quaternion.Zero),\n      staticUp: Vector3_1$4.Vector3.Up(),\n      tmpMatrix: Matrix_1$1.Matrix.Zero()\n  };\n\n  var Angle$1 = {};\n\n  Object.defineProperty(Angle$1, \"__esModule\", { value: true });\n  Angle$1.Angle = void 0;\n  /**\n   * Defines angle representation\n   * @public\n   */\n  class Angle {\n      /**\n       * Creates an Angle object of \"radians\" radians (float).\n       */\n      constructor(radians) {\n          this._radians = radians;\n          if (this._radians < 0.0) {\n              this._radians += 2.0 * Math.PI;\n          }\n      }\n      /**\n       * Gets a new Angle object valued with the angle value in radians between the two given vectors\n       * @param a - defines first vector\n       * @param b - defines second vector\n       * @returns a new Angle\n       */\n      static BetweenTwoPoints(a, b) {\n          const delta = b.subtract(a);\n          const theta = Math.atan2(delta.y, delta.x);\n          return new Angle(theta);\n      }\n      /**\n       * Gets a new Angle object from the given float in radians\n       * @param radians - defines the angle value in radians\n       * @returns a new Angle\n       */\n      static FromRadians(radians) {\n          return new Angle(radians);\n      }\n      /**\n       * Gets a new Angle object from the given float in degrees\n       * @param degrees - defines the angle value in degrees\n       * @returns a new Angle\n       */\n      static FromDegrees(degrees) {\n          return new Angle((degrees * Math.PI) / 180.0);\n      }\n      /**\n       * Get value in degrees\n       * @returns the Angle value in degrees (float)\n       */\n      degrees() {\n          return (this._radians * 180.0) / Math.PI;\n      }\n      /**\n       * Get value in radians\n       * @returns the Angle value in radians (float)\n       */\n      radians() {\n          return this._radians;\n      }\n  }\n  Angle$1.Angle = Angle;\n\n  var Arc2$1 = {};\n\n  var Vector2$1 = {};\n\n  Object.defineProperty(Vector2$1, \"__esModule\", { value: true });\n  Vector2$1.Vector2 = void 0;\n  const types_1$5 = types;\n  const Scalar_1$3 = Scalar$1;\n  /**\n   * Class representing a vector containing 2 coordinates\n   * @public\n   */\n  class Vector2 {\n      /**\n       * Creates a new Vector2 from the given x and y coordinates\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       */\n      constructor(\n      /** defines the first coordinate */\n      x = 0, \n      /** defines the second coordinate */\n      y = 0) {\n          this.x = x;\n          this.y = y;\n      }\n      /**\n       * Gets a new Vector2(0, 0)\n       * @returns a new Vector2\n       */\n      static Zero() {\n          return new Vector2(0, 0);\n      }\n      /**\n       * Gets a new Vector2(1, 1)\n       * @returns a new Vector2\n       */\n      static One() {\n          return new Vector2(1, 1);\n      }\n      /**\n       * Returns a new Vector2 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector2(vector1.x, vector1.y).addInPlace(vector2);\n      }\n      /**\n       * Gets a new Vector2 set from the given index element of the given array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the data source\n       * @returns a new Vector2\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector2(array[offset], array[offset + 1]);\n      }\n      /**\n       * Sets \"result\" from the given index element of the given array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the data source\n       * @param result - defines the target vector\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n      }\n      /**\n       * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n       * @param value1 - defines 1st point of control\n       * @param value2 - defines 2nd point of control\n       * @param value3 - defines 3rd point of control\n       * @param value4 - defines 4th point of control\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static CatmullRom(value1, value2, value3, value4, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const x = 0.5 *\n              (2.0 * value2.x +\n                  (-value1.x + value3.x) * amount +\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n                      squared +\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n          const y = 0.5 *\n              (2.0 * value2.y +\n                  (-value1.y + value3.y) * amount +\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n                      squared +\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\n       * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\n       * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n       * @param value - defines the value to clamp\n       * @param min - defines the lower limit\n       * @param max - defines the upper limit\n       * @returns a new Vector2\n       */\n      static Clamp(value, min, max) {\n          let x = value.x;\n          x = x > max.x ? max.x : x;\n          x = x < min.x ? min.x : x;\n          let y = value.y;\n          y = y > max.y ? max.y : y;\n          y = y < min.y ? min.y : y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\n       * @param value1 - defines the 1st control point\n       * @param tangent1 - defines the outgoing tangent\n       * @param value2 - defines the 2nd control point\n       * @param tangent2 - defines the incoming tangent\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n       * @param start - defines the start vector\n       * @param end - defines the end vector\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static Lerp(start, end, amount) {\n          const x = start.x + (end.x - start.x) * amount;\n          const y = start.y + (end.y - start.y) * amount;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets the dot product of the vector \"left\" and the vector \"right\"\n       * @param left - defines first vector\n       * @param right - defines second vector\n       * @returns the dot product (float)\n       */\n      static Dot(left, right) {\n          return left.x * right.x + left.y * right.y;\n      }\n      /**\n       * Returns a new Vector2 equal to the normalized given vector\n       * @param vector - defines the vector to normalize\n       * @returns a new Vector2\n       */\n      static Normalize(vector) {\n          const newVector = new Vector2(vector.x, vector.y);\n          newVector.normalize();\n          return newVector;\n      }\n      /**\n       * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n       * @param left - defines 1st vector\n       * @param right - defines 2nd vector\n       * @returns a new Vector2\n       */\n      static Minimize(left, right) {\n          const x = left.x < right.x ? left.x : right.x;\n          const y = left.y < right.y ? left.y : right.y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n       * @param left - defines 1st vector\n       * @param right - defines 2nd vector\n       * @returns a new Vector2\n       */\n      static Maximize(left, right) {\n          const x = left.x > right.x ? left.x : right.x;\n          const y = left.y > right.y ? left.y : right.y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n       * @param vector - defines the vector to transform\n       * @param transformation - defines the matrix to apply\n       * @returns a new Vector2\n       */\n      static Transform(vector, transformation) {\n          const r = Vector2.Zero();\n          Vector2.TransformToRef(vector, transformation, r);\n          return r;\n      }\n      /**\n       * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n       * @param vector - defines the vector to transform\n       * @param transformation - defines the matrix to apply\n       * @param result - defines the target vector\n       */\n      static TransformToRef(vector, transformation, result) {\n          const m = transformation.m;\n          const x = vector.x * m[0] + vector.y * m[4] + m[12];\n          const y = vector.x * m[1] + vector.y * m[5] + m[13];\n          result.x = x;\n          result.y = y;\n      }\n      /**\n       * Determines if a given vector is included in a triangle\n       * @param p - defines the vector to test\n       * @param p0 - defines 1st triangle point\n       * @param p1 - defines 2nd triangle point\n       * @param p2 - defines 3rd triangle point\n       * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\n       */\n      static PointInTriangle(p, p0, p1, p2) {\n          const a = (1 / 2) *\n              (-p1.y * p2.x +\n                  p0.y * (-p1.x + p2.x) +\n                  p0.x * (p1.y - p2.y) +\n                  p1.x * p2.y);\n          const sign = a < 0 ? -1 : 1;\n          const s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) *\n              sign;\n          const t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) *\n              sign;\n          return s > 0 && t > 0 && s + t < 2 * a * sign;\n      }\n      /**\n       * Gets the distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns the distance between vectors\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns the squared distance between vectors\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          return x * x + y * y;\n      }\n      /**\n       * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns a new Vector2\n       */\n      static Center(value1, value2) {\n          const center = Vector2.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n       * @param p - defines the middle point\n       * @param segA - defines one point of the segment\n       * @param segB - defines the other point of the segment\n       * @returns the shortest distance\n       */\n      static DistanceOfPointFromSegment(p, segA, segB) {\n          const l2 = Vector2.DistanceSquared(segA, segB);\n          if (l2 === 0.0) {\n              return Vector2.Distance(p, segA);\n          }\n          const v = segB.subtract(segA);\n          const t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n          const proj = segA.add(v.multiplyByFloats(t, t));\n          return Vector2.Distance(p, proj);\n      }\n      /**\n       * Gets a string with the Vector2 coordinates\n       * @returns a string with the Vector2 coordinates\n       */\n      toString() {\n          return '{X: ' + this.x + ' Y:' + this.y + '}';\n      }\n      /**\n       * Gets class name\n       * @returns the string \"Vector2\"\n       */\n      getClassName() {\n          return 'Vector2';\n      }\n      /**\n       * Gets current vector hash code\n       * @returns the Vector2 hash code as a number\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n       * @param array - defines the source array\n       * @param index - defines the offset in source array\n       * @returns the current Vector2\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          return this;\n      }\n      /**\n       * Copy the current vector to an array\n       * @returns a new array with 2 elements: the Vector2 coordinates.\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given Vector2 coordinates\n       * @param source - defines the source Vector2\n       * @returns the current updated Vector2\n       */\n      copyFrom(source) {\n          this.x = source.x;\n          this.y = source.y;\n          return this;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns the current updated Vector2\n       */\n      copyFromFloats(x, y) {\n          this.x = x;\n          this.y = y;\n          return this;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns the current updated Vector2\n       */\n      set(x, y) {\n          return this.copyFromFloats(x, y);\n      }\n      /**\n       * Add another vector with the current one\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n       */\n      add(otherVector) {\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      addToRef(otherVector, result) {\n          result.x = this.x + otherVector.x;\n          result.y = this.y + otherVector.y;\n          return this;\n      }\n      /**\n       * Set the Vector2 coordinates by adding the given Vector2 coordinates\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      addInPlace(otherVector) {\n          this.x += otherVector.x;\n          this.y += otherVector.y;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      addVector3(otherVector) {\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n      }\n      /**\n       * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      subtract(otherVector) {\n          return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      subtractToRef(otherVector, result) {\n          result.x = this.x - otherVector.x;\n          result.y = this.y - otherVector.y;\n          return this;\n      }\n      /**\n       * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          return this;\n      }\n      /**\n       * Multiplies in place the current Vector2 coordinates by the given ones\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          return this;\n      }\n      /**\n       * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      multiply(otherVector) {\n          return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n      }\n      /**\n       * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      multiplyToRef(otherVector, result) {\n          result.x = this.x * otherVector.x;\n          result.y = this.y * otherVector.y;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns a new Vector2\n       */\n      multiplyByFloats(x, y) {\n          return new Vector2(this.x * x, this.y * y);\n      }\n      /**\n       * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      divide(otherVector) {\n          return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      divideToRef(otherVector, result) {\n          result.x = this.x / otherVector.x;\n          result.y = this.y / otherVector.y;\n          return this;\n      }\n      /**\n       * Divides the current Vector2 coordinates by the given ones\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Gets a new Vector2 with current Vector2 negated coordinates\n       * @returns a new Vector2\n       */\n      negate() {\n          return new Vector2(-this.x, -this.y);\n      }\n      /**\n       * Multiply the Vector2 coordinates by scale\n       * @param scale - defines the scaling factor\n       * @returns the current updated Vector2\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n       * @param scale - defines the scaling factor\n       * @returns a new Vector2\n       */\n      scale(scale) {\n          const result = new Vector2(0, 0);\n          this.scaleToRef(scale, result);\n          return result;\n      }\n      /**\n       * Scale the current Vector2 values by a factor to a given Vector2\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector2 object where to store the result\n       * @returns the unmodified current Vector2\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          return this;\n      }\n      /**\n       * Scale the current Vector2 values by a factor and add the result to a given Vector2\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector2 object where to store the result\n       * @returns the unmodified current Vector2\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          return this;\n      }\n      /**\n       * Gets a boolean if two vectors are equals\n       * @param otherVector - defines the other vector\n       * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n       */\n      equals(otherVector) {\n          return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n      }\n      /**\n       * Gets a boolean if two vectors are equals (using an epsilon value)\n       * @param otherVector - defines the other vector\n       * @param epsilon - defines the minimal distance to consider equality\n       * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$5.Epsilon) {\n          return (otherVector &&\n              Scalar_1$3.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$3.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));\n      }\n      /**\n       * Gets a new Vector2 from current Vector2 floored values\n       * @returns a new Vector2\n       */\n      floor() {\n          return new Vector2(Math.floor(this.x), Math.floor(this.y));\n      }\n      /**\n       * Gets a new Vector2 from current Vector2 floored values\n       * @returns a new Vector2\n       */\n      fract() {\n          return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n      }\n      // Properties\n      /**\n       * Gets the length of the vector\n       * @returns the vector length (float)\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y);\n      }\n      /**\n       * Gets the vector squared length\n       * @returns the vector squared length (float)\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y;\n      }\n      // Methods\n      /**\n       * Normalize the vector\n       * @returns the current updated Vector2\n       */\n      normalize() {\n          const len = this.length();\n          if (len === 0) {\n              return this;\n          }\n          const num = 1.0 / len;\n          this.x *= num;\n          this.y *= num;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 copied from the Vector2\n       * @returns a new Vector2\n       */\n      clone() {\n          return new Vector2(this.x, this.y);\n      }\n  }\n  Vector2$1.Vector2 = Vector2;\n\n  Object.defineProperty(Arc2$1, \"__esModule\", { value: true });\n  Arc2$1.Arc2 = void 0;\n  const Angle_1 = Angle$1;\n  const Vector2_1$1 = Vector2$1;\n  const types_1$4 = types;\n  /**\n   * This represents an arc in a 2d space.\n   * @public\n   */\n  class Arc2 {\n      /**\n       * Creates an Arc object from the three given points : start, middle and end.\n       * @param startPoint - Defines the start point of the arc\n       * @param midPoint - Defines the midlle point of the arc\n       * @param endPoint - Defines the end point of the arc\n       */\n      constructor(\n      /** Defines the start point of the arc */\n      startPoint, \n      /** Defines the mid point of the arc */\n      midPoint, \n      /** Defines the end point of the arc */\n      endPoint) {\n          this.startPoint = startPoint;\n          this.midPoint = midPoint;\n          this.endPoint = endPoint;\n          const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\n          const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\n          const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\n          const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) -\n              (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\n          this.centerPoint = new Vector2_1$1.Vector2((startToMid * (midPoint.y - endPoint.y) -\n              midToEnd * (startPoint.y - midPoint.y)) /\n              det, ((startPoint.x - midPoint.x) * midToEnd -\n              (midPoint.x - endPoint.x) * startToMid) /\n              det);\n          this.radius = this.centerPoint.subtract(this.startPoint).length();\n          this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n          const a1 = this.startAngle.degrees();\n          let a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\n          let a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\n          // angles correction\n          if (a2 - a1 > +180.0) {\n              a2 -= 360.0;\n          }\n          if (a2 - a1 < -180.0) {\n              a2 += 360.0;\n          }\n          if (a3 - a2 > +180.0) {\n              a3 -= 360.0;\n          }\n          if (a3 - a2 < -180.0) {\n              a3 += 360.0;\n          }\n          this.orientation = a2 - a1 < 0 ? types_1$4.Orientation.CW : types_1$4.Orientation.CCW;\n          this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1$4.Orientation.CW ? a1 - a3 : a3 - a1);\n      }\n  }\n  Arc2$1.Arc2 = Arc2;\n\n  var Axis$1 = {};\n\n  Object.defineProperty(Axis$1, \"__esModule\", { value: true });\n  Axis$1.Axis = void 0;\n  const Vector3_1$3 = Vector3$1;\n  /**\n   * Defines the 3 main axes\n   * @public\n   */\n  class Axis {\n  }\n  Axis$1.Axis = Axis;\n  /** X axis */\n  Axis.X = new Vector3_1$3.Vector3(1.0, 0.0, 0.0);\n  /** Y axis */\n  Axis.Y = new Vector3_1$3.Vector3(0.0, 1.0, 0.0);\n  /** Z axis */\n  Axis.Z = new Vector3_1$3.Vector3(0.0, 0.0, 1.0);\n\n  var BezierCurve$1 = {};\n\n  Object.defineProperty(BezierCurve$1, \"__esModule\", { value: true });\n  BezierCurve$1.BezierCurve = void 0;\n  /**\n   * Class used to represent a Bezier curve\n   * @public\n   */\n  class BezierCurve {\n      /**\n       * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\n       * @param t - defines the time\n       * @param x1 - defines the left coordinate on X axis\n       * @param y1 - defines the left coordinate on Y axis\n       * @param x2 - defines the right coordinate on X axis\n       * @param y2 - defines the right coordinate on Y axis\n       * @returns the interpolated value\n       */\n      static Interpolate(t, x1, y1, x2, y2) {\n          // Extract X (which is equal to time here)\n          const f0 = 1 - 3 * x2 + 3 * x1;\n          const f1 = 3 * x2 - 6 * x1;\n          const f2 = 3 * x1;\n          let refinedT = t;\n          for (let i = 0; i < 5; i++) {\n              const refinedT2 = refinedT * refinedT;\n              const refinedT3 = refinedT2 * refinedT;\n              const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\n              const slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\n              refinedT -= (x - t) * slope;\n              refinedT = Math.min(1, Math.max(0, refinedT));\n          }\n          // Resolve cubic bezier for the given x\n          return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\n              3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\n              Math.pow(refinedT, 3));\n      }\n  }\n  BezierCurve$1.BezierCurve = BezierCurve;\n\n  var Color3$1 = {};\n\n  var Color4$1 = {};\n\n  Object.defineProperty(Color4$1, \"__esModule\", { value: true });\n  Color4$1.Color4 = void 0;\n  const Scalar_1$2 = Scalar$1;\n  const types_1$3 = types;\n  /**\n   * Class used to hold a RBGA color\n   * @public\n   */\n  class Color4 {\n      /**\n       * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n       * @param r - defines the red component (between 0 and 1, default is 0)\n       * @param g - defines the green component (between 0 and 1, default is 0)\n       * @param b - defines the blue component (between 0 and 1, default is 0)\n       * @param a - defines the alpha component (between 0 and 1, default is 1)\n       */\n      constructor(\n      /**\n       * Defines the red component (between 0 and 1, default is 0)\n       */\n      r = 0, \n      /**\n       * Defines the green component (between 0 and 1, default is 0)\n       */\n      g = 0, \n      /**\n       * Defines the blue component (between 0 and 1, default is 0)\n       */\n      b = 0, \n      /**\n       * Defines the alpha component (between 0 and 1, default is 1)\n       */\n      a = 1) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n      }\n      // Statics\n      /**\n       * Creates a new Color4 from the string containing valid hexadecimal values\n       * @param hex - defines a string containing valid hexadecimal values\n       * @returns a new Color4 object\n       */\n      static FromHexString(hex) {\n          if (hex.substring(0, 1) !== '#' || hex.length !== 9) {\n              return new Color4(0.0, 0.0, 0.0, 0.0);\n          }\n          const r = parseInt(hex.substring(1, 3), 16);\n          const g = parseInt(hex.substring(3, 5), 16);\n          const b = parseInt(hex.substring(5, 7), 16);\n          const a = parseInt(hex.substring(7, 9), 16);\n          return Color4.FromInts(r, g, b, a);\n      }\n      /**\n       * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @returns a new Color4 object\n       */\n      static Lerp(left, right, amount) {\n          const result = new Color4(0.0, 0.0, 0.0, 0.0);\n          Color4.LerpToRef(left, right, amount, result);\n          return result;\n      }\n      /**\n       * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @param result - defines the Color4 object where to store data\n       */\n      static LerpToRef(left, right, amount, result) {\n          result.r = left.r + (right.r - left.r) * amount;\n          result.g = left.g + (right.g - left.g) * amount;\n          result.b = left.b + (right.b - left.b) * amount;\n          result.a = left.a + (right.a - left.a) * amount;\n      }\n      /**\n       * Returns a Color4 value containing a red color\n       * @returns a new Color3 object\n       */\n      static Red() {\n          return new Color4(1.0, 0, 0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a green color\n       * @returns a new Color4 object\n       */\n      static Green() {\n          return new Color4(0, 1.0, 0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a blue color\n       * @returns a new Color4 object\n       */\n      static Blue() {\n          return new Color4(0, 0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a black color\n       * @returns a new Color4 object\n       */\n      static Black() {\n          return new Color4(0, 0, 0, 1);\n      }\n      /**\n       * Returns a Color4 value containing a white color\n       * @returns a new Color4 object\n       */\n      static White() {\n          return new Color4(1, 1, 1, 1);\n      }\n      /**\n       * Returns a Color4 value containing a purple color\n       * @returns a new Color4 object\n       */\n      static Purple() {\n          return new Color4(0.5, 0, 0.5, 1);\n      }\n      /**\n       * Returns a Color4 value containing a magenta color\n       * @returns a new Color4 object\n       */\n      static Magenta() {\n          return new Color4(1, 0, 1, 1);\n      }\n      /**\n       * Returns a Color4 value containing a yellow color\n       * @returns a new Color4 object\n       */\n      static Yellow() {\n          return new Color4(1, 1, 0, 1);\n      }\n      /**\n       * Returns a Color4 value containing a gray color\n       * @returns a new Color4 object\n       */\n      static Gray() {\n          return new Color4(0.5, 0.5, 0.5, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a teal color\n       * @returns a new Color4 object\n       */\n      static Teal() {\n          return new Color4(0, 1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a transparent color\n       * @returns a new Color4 object\n       */\n      static Clear() {\n          return new Color4(0, 0, 0, 0);\n      }\n      /**\n       * Creates a new Color4 from a Color3 and an alpha value\n       * @param color3 - defines the source Color3 to read from\n       * @param alpha - defines the alpha component (1.0 by default)\n       * @returns a new Color4 object\n       */\n      static FromColor3(color3, alpha = 1.0) {\n          return new Color4(color3.r, color3.g, color3.b, alpha);\n      }\n      /**\n       * Creates a new Color4 from the starting index element of the given array\n       * @param array - defines the source array to read from\n       * @param offset - defines the offset in the source array\n       * @returns a new Color4 object\n       */\n      static FromArray(array, offset = 0) {\n          return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Creates a new Color3 from integer values (less than 256)\n       * @param r - defines the red component to read from (value between 0 and 255)\n       * @param g - defines the green component to read from (value between 0 and 255)\n       * @param b - defines the blue component to read from (value between 0 and 255)\n       * @param a - defines the alpha component to read from (value between 0 and 255)\n       * @returns a new Color3 object\n       */\n      static FromInts(r, g, b, a) {\n          return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n      }\n      /**\n       * Check the content of a given array and convert it to an array containing RGBA data\n       * If the original array was already containing count * 4 values then it is returned directly\n       * @param colors - defines the array to check\n       * @param count - defines the number of RGBA data to expect\n       * @returns an array containing count * 4 values (RGBA)\n       */\n      static CheckColors4(colors, count) {\n          // Check if color3 was used\n          if (colors.length === count * 3) {\n              const colors4 = [];\n              for (let index = 0; index < colors.length; index += 3) {\n                  const newIndex = (index / 3) * 4;\n                  colors4[newIndex] = colors[index];\n                  colors4[newIndex + 1] = colors[index + 1];\n                  colors4[newIndex + 2] = colors[index + 2];\n                  colors4[newIndex + 3] = 1.0;\n              }\n              return colors4;\n          }\n          return colors;\n      }\n      // Operators\n      /**\n       * Adds in place the given Color4 values to the current Color4 object\n       * @param right - defines the second operand\n       * @returns the current updated Color4 object\n       */\n      addInPlace(right) {\n          this.r += right.r;\n          this.g += right.g;\n          this.b += right.b;\n          this.a += right.a;\n          return this;\n      }\n      /**\n       * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n       * @returns the new array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Stores from the starting index in the given array the Color4 successive values\n       * @param array - defines the array where to store the r,g,b components\n       * @param index - defines an optional index in the target array to define where to start storing values\n       * @returns the current Color4 object\n       */\n      toArray(array, index = 0) {\n          array[index] = this.r;\n          array[index + 1] = this.g;\n          array[index + 2] = this.b;\n          array[index + 3] = this.a;\n          return this;\n      }\n      /**\n       * Creates a new Color4 set with the added values of the current Color4 and of the given one\n       * @param right - defines the second operand\n       * @returns a new Color4 object\n       */\n      add(right) {\n          return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n      }\n      /**\n       * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n       * @param right - defines the second operand\n       * @returns a new Color4 object\n       */\n      subtract(right) {\n          return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n      }\n      /**\n       * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n       * @param right - defines the second operand\n       * @param result - defines the Color4 object where to store the result\n       * @returns the current Color4 object\n       */\n      subtractToRef(right, result) {\n          result.r = this.r - right.r;\n          result.g = this.g - right.g;\n          result.b = this.b - right.b;\n          result.a = this.a - right.a;\n          return this;\n      }\n      /**\n       * Creates a new Color4 with the current Color4 values multiplied by scale\n       * @param scale - defines the scaling factor to apply\n       * @returns a new Color4 object\n       */\n      scale(scale) {\n          return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n      }\n      /**\n       * Multiplies the current Color4 values by scale and stores the result in \"result\"\n       * @param scale - defines the scaling factor to apply\n       * @param result - defines the Color4 object where to store the result\n       * @returns the current unmodified Color4\n       */\n      scaleToRef(scale, result) {\n          result.r = this.r * scale;\n          result.g = this.g * scale;\n          result.b = this.b * scale;\n          result.a = this.a * scale;\n          return this;\n      }\n      /**\n       * Scale the current Color4 values by a factor and add the result to a given Color4\n       * @param scale - defines the scale factor\n       * @param result - defines the Color4 object where to store the result\n       * @returns the unmodified current Color4\n       */\n      scaleAndAddToRef(scale, result) {\n          result.r += this.r * scale;\n          result.g += this.g * scale;\n          result.b += this.b * scale;\n          result.a += this.a * scale;\n          return this;\n      }\n      /**\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\n       * @param min - defines minimum clamping value (default is 0)\n       * @param max - defines maximum clamping value (default is 1)\n       * @param result - defines color to store the result into.\n       * @returns the cuurent Color4\n       */\n      clampToRef(min = 0, max = 1, result) {\n          result.r = Scalar_1$2.Scalar.Clamp(this.r, min, max);\n          result.g = Scalar_1$2.Scalar.Clamp(this.g, min, max);\n          result.b = Scalar_1$2.Scalar.Clamp(this.b, min, max);\n          result.a = Scalar_1$2.Scalar.Clamp(this.a, min, max);\n          return this;\n      }\n      /**\n       * Multipy an Color4 value by another and return a new Color4 object\n       * @param color - defines the Color4 value to multiply by\n       * @returns a new Color4 object\n       */\n      multiply(color) {\n          return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n      }\n      /**\n       * Multipy a Color4 value by another and push the result in a reference value\n       * @param color - defines the Color4 value to multiply by\n       * @param result - defines the Color4 to fill the result in\n       * @returns the result Color4\n       */\n      multiplyToRef(color, result) {\n          result.r = this.r * color.r;\n          result.g = this.g * color.g;\n          result.b = this.b * color.b;\n          result.a = this.a * color.a;\n          return result;\n      }\n      /**\n       * Creates a string with the Color4 current values\n       * @returns the string representation of the Color4 object\n       */\n      toString() {\n          return ('{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + ' A:' + this.a + '}');\n      }\n      /**\n       * Returns the string \"Color4\"\n       * @returns \"Color4\"\n       */\n      getClassName() {\n          return 'Color4';\n      }\n      /**\n       * Compute the Color4 hash code\n       * @returns an unique number that can be used to hash Color4 objects\n       */\n      getHashCode() {\n          let hash = this.r || 0;\n          hash = (hash * 397) ^ (this.g || 0);\n          hash = (hash * 397) ^ (this.b || 0);\n          hash = (hash * 397) ^ (this.a || 0);\n          return hash;\n      }\n      /**\n       * Creates a new Color4 copied from the current one\n       * @returns a new Color4 object\n       */\n      clone() {\n          return new Color4(this.r, this.g, this.b, this.a);\n      }\n      /**\n       * Copies the given Color4 values into the current one\n       * @param source - defines the source Color4 object\n       * @returns the current updated Color4 object\n       */\n      copyFrom(source) {\n          this.r = source.r;\n          this.g = source.g;\n          this.b = source.b;\n          this.a = source.a;\n          return this;\n      }\n      /**\n       * Copies the given float values into the current one\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @param a - defines the alpha component to read from\n       * @returns the current updated Color4 object\n       */\n      copyFromFloats(r, g, b, a) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n          return this;\n      }\n      /**\n       * Copies the given float values into the current one\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @param a - defines the alpha component to read from\n       * @returns the current updated Color4 object\n       */\n      set(r, g, b, a) {\n          return this.copyFromFloats(r, g, b, a);\n      }\n      /**\n       * Compute the Color4 hexadecimal code as a string\n       * @returns a string containing the hexadecimal representation of the Color4 object\n       */\n      toHexString() {\n          const intR = (this.r * 255) | 0;\n          const intG = (this.g * 255) | 0;\n          const intB = (this.b * 255) | 0;\n          const intA = (this.a * 255) | 0;\n          return ('#' +\n              Scalar_1$2.Scalar.ToHex(intR) +\n              Scalar_1$2.Scalar.ToHex(intG) +\n              Scalar_1$2.Scalar.ToHex(intB) +\n              Scalar_1$2.Scalar.ToHex(intA));\n      }\n      /**\n       * Computes a new Color4 converted from the current one to linear space\n       * @returns a new Color4 object\n       */\n      toLinearSpace() {\n          const convertedColor = new Color4();\n          this.toLinearSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color4 object where to store the linear space version\n       * @returns the unmodified Color4\n       */\n      toLinearSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$3.ToLinearSpace);\n          convertedColor.g = Math.pow(this.g, types_1$3.ToLinearSpace);\n          convertedColor.b = Math.pow(this.b, types_1$3.ToLinearSpace);\n          convertedColor.a = this.a;\n          return this;\n      }\n      /**\n       * Computes a new Color4 converted from the current one to gamma space\n       * @returns a new Color4 object\n       */\n      toGammaSpace() {\n          const convertedColor = new Color4();\n          this.toGammaSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color4 object where to store the gamma space version\n       * @returns the unmodified Color4\n       */\n      toGammaSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$3.ToGammaSpace);\n          convertedColor.g = Math.pow(this.g, types_1$3.ToGammaSpace);\n          convertedColor.b = Math.pow(this.b, types_1$3.ToGammaSpace);\n          convertedColor.a = this.a;\n          return this;\n      }\n  }\n  Color4$1.Color4 = Color4;\n\n  Object.defineProperty(Color3$1, \"__esModule\", { value: true });\n  Color3$1.Color3 = void 0;\n  const types_1$2 = types;\n  const Color4_1 = Color4$1;\n  const Scalar_1$1 = Scalar$1;\n  /**\n   * Class used to hold a RBG color\n   * @public\n   */\n  class Color3 {\n      /**\n       * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n       * @param r - defines the red component (between 0 and 1, default is 0)\n       * @param g - defines the green component (between 0 and 1, default is 0)\n       * @param b - defines the blue component (between 0 and 1, default is 0)\n       */\n      constructor(\n      /**\n       * Defines the red component (between 0 and 1, default is 0)\n       */\n      r = 0, \n      /**\n       * Defines the green component (between 0 and 1, default is 0)\n       */\n      g = 0, \n      /**\n       * Defines the blue component (between 0 and 1, default is 0)\n       */\n      b = 0) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n      }\n      // Statics\n      /**\n       * Creates a new Color3 from the string containing valid hexadecimal values\n       * @param hex - defines a string containing valid hexadecimal values\n       * @returns a new Color3 object\n       */\n      static FromHexString(hex) {\n          if (hex.substring(0, 1) !== '#' || hex.length !== 7) {\n              return new Color3(0, 0, 0);\n          }\n          const r = parseInt(hex.substring(1, 3), 16);\n          const g = parseInt(hex.substring(3, 5), 16);\n          const b = parseInt(hex.substring(5, 7), 16);\n          return Color3.FromInts(r, g, b);\n      }\n      /**\n       * Creates a new Vector3 from the starting index of the given array\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @returns a new Color3 object\n       */\n      static FromArray(array, offset = 0) {\n          return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n      }\n      /**\n       * Creates a new Color3 from integer values (less than 256)\n       * @param r - defines the red component to read from (value between 0 and 255)\n       * @param g - defines the green component to read from (value between 0 and 255)\n       * @param b - defines the blue component to read from (value between 0 and 255)\n       * @returns a new Color3 object\n       */\n      static FromInts(r, g, b) {\n          return new Color3(r / 255.0, g / 255.0, b / 255.0);\n      }\n      /**\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n       * @param start - defines the start Color3 value\n       * @param end - defines the end Color3 value\n       * @param amount - defines the gradient value between start and end\n       * @returns a new Color3 object\n       */\n      static Lerp(start, end, amount) {\n          const result = new Color3(0.0, 0.0, 0.0);\n          Color3.LerpToRef(start, end, amount, result);\n          return result;\n      }\n      /**\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @param result - defines the Color3 object where to store the result\n       */\n      static LerpToRef(left, right, amount, result) {\n          result.r = left.r + (right.r - left.r) * amount;\n          result.g = left.g + (right.g - left.g) * amount;\n          result.b = left.b + (right.b - left.b) * amount;\n      }\n      /**\n       * Returns a Color3 value containing a red color\n       * @returns a new Color3 object\n       */\n      static Red() {\n          return new Color3(1, 0, 0);\n      }\n      /**\n       * Returns a Color3 value containing a green color\n       * @returns a new Color3 object\n       */\n      static Green() {\n          return new Color3(0, 1, 0);\n      }\n      /**\n       * Returns a Color3 value containing a blue color\n       * @returns a new Color3 object\n       */\n      static Blue() {\n          return new Color3(0, 0, 1);\n      }\n      /**\n       * Returns a Color3 value containing a black color\n       * @returns a new Color3 object\n       */\n      static Black() {\n          return new Color3(0, 0, 0);\n      }\n      /**\n       * Returns a Color3 value containing a white color\n       * @returns a new Color3 object\n       */\n      static White() {\n          return new Color3(1, 1, 1);\n      }\n      /**\n       * Returns a Color3 value containing a purple color\n       * @returns a new Color3 object\n       */\n      static Purple() {\n          return new Color3(0.5, 0, 0.5);\n      }\n      /**\n       * Returns a Color3 value containing a magenta color\n       * @returns a new Color3 object\n       */\n      static Magenta() {\n          return new Color3(1, 0, 1);\n      }\n      /**\n       * Returns a Color3 value containing a yellow color\n       * @returns a new Color3 object\n       */\n      static Yellow() {\n          return new Color3(1, 1, 0);\n      }\n      /**\n       * Returns a Color3 value containing a gray color\n       * @returns a new Color3 object\n       */\n      static Gray() {\n          return new Color3(0.5, 0.5, 0.5);\n      }\n      /**\n       * Returns a Color3 value containing a teal color\n       * @returns a new Color3 object\n       */\n      static Teal() {\n          return new Color3(0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color3 value containing a random color\n       * @returns a new Color3 object\n       */\n      static Random() {\n          return new Color3(Math.random(), Math.random(), Math.random());\n      }\n      /**\n       * Creates a string with the Color3 current values\n       * @returns the string representation of the Color3 object\n       */\n      toString() {\n          return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + '}';\n      }\n      /**\n       * Returns the string \"Color3\"\n       * @returns \"Color3\"\n       */\n      getClassName() {\n          return 'Color3';\n      }\n      /**\n       * Compute the Color3 hash code\n       * @returns an unique number that can be used to hash Color3 objects\n       */\n      getHashCode() {\n          let hash = this.r || 0;\n          hash = (hash * 397) ^ (this.g || 0);\n          hash = (hash * 397) ^ (this.b || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Stores in the given array from the given starting index the red, green, blue values as successive elements\n       * @param array - defines the array where to store the r,g,b components\n       * @param index - defines an optional index in the target array to define where to start storing values\n       * @returns the current Color3 object\n       */\n      toArray(array, index = 0) {\n          array[index] = this.r;\n          array[index + 1] = this.g;\n          array[index + 2] = this.b;\n          return this;\n      }\n      /**\n       * Returns a new Color4 object from the current Color3 and the given alpha\n       * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n       * @returns a new Color4 object\n       */\n      toColor4(alpha = 1) {\n          return new Color4_1.Color4(this.r, this.g, this.b, alpha);\n      }\n      /**\n       * Returns a new array populated with 3 numeric elements : red, green and blue values\n       * @returns the new array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Returns the luminance value\n       * @returns a float value\n       */\n      toLuminance() {\n          return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n      }\n      /**\n       * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n       * @param otherColor - defines the second operand\n       * @returns the new Color3 object\n       */\n      multiply(otherColor) {\n          return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n      }\n      /**\n       * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines the Color3 object where to store the result\n       * @returns the current Color3\n       */\n      multiplyToRef(otherColor, result) {\n          result.r = this.r * otherColor.r;\n          result.g = this.g * otherColor.g;\n          result.b = this.b * otherColor.b;\n          return this;\n      }\n      /**\n       * Determines equality between Color3 objects\n       * @param otherColor - defines the second operand\n       * @returns true if the rgb values are equal to the given ones\n       */\n      equals(otherColor) {\n          return (otherColor &&\n              this.r === otherColor.r &&\n              this.g === otherColor.g &&\n              this.b === otherColor.b);\n      }\n      /**\n       * Determines equality between the current Color3 object and a set of r,b,g values\n       * @param r - defines the red component to check\n       * @param g - defines the green component to check\n       * @param b - defines the blue component to check\n       * @returns true if the rgb values are equal to the given ones\n       */\n      equalsFloats(r, g, b) {\n          return this.r === r && this.g === g && this.b === b;\n      }\n      /**\n       * Multiplies in place each rgb value by scale\n       * @param scale - defines the scaling factor\n       * @returns the updated Color3\n       */\n      scale(scale) {\n          return new Color3(this.r * scale, this.g * scale, this.b * scale);\n      }\n      /**\n       * Multiplies the rgb values by scale and stores the result into \"result\"\n       * @param scale - defines the scaling factor\n       * @param result - defines the Color3 object where to store the result\n       * @returns the unmodified current Color3\n       */\n      scaleToRef(scale, result) {\n          result.r = this.r * scale;\n          result.g = this.g * scale;\n          result.b = this.b * scale;\n          return this;\n      }\n      /**\n       * Scale the current Color3 values by a factor and add the result to a given Color3\n       * @param scale - defines the scale factor\n       * @param result - defines color to store the result into\n       * @returns the unmodified current Color3\n       */\n      scaleAndAddToRef(scale, result) {\n          result.r += this.r * scale;\n          result.g += this.g * scale;\n          result.b += this.b * scale;\n          return this;\n      }\n      /**\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\n       * @param min - defines minimum clamping value (default is 0)\n       * @param max - defines maximum clamping value (default is 1)\n       * @param result - defines color to store the result into\n       * @returns the original Color3\n       */\n      clampToRef(min = 0, max = 1, result) {\n          result.r = Scalar_1$1.Scalar.Clamp(this.r, min, max);\n          result.g = Scalar_1$1.Scalar.Clamp(this.g, min, max);\n          result.b = Scalar_1$1.Scalar.Clamp(this.b, min, max);\n          return this;\n      }\n      /**\n       * Creates a new Color3 set with the added values of the current Color3 and of the given one\n       * @param otherColor - defines the second operand\n       * @returns the new Color3\n       */\n      add(otherColor) {\n          return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n      }\n      /**\n       * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines Color3 object to store the result into\n       * @returns the unmodified current Color3\n       */\n      addToRef(otherColor, result) {\n          result.r = this.r + otherColor.r;\n          result.g = this.g + otherColor.g;\n          result.b = this.b + otherColor.b;\n          return this;\n      }\n      /**\n       * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n       * @param otherColor - defines the second operand\n       * @returns the new Color3\n       */\n      subtract(otherColor) {\n          return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n      }\n      /**\n       * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines Color3 object to store the result into\n       * @returns the unmodified current Color3\n       */\n      subtractToRef(otherColor, result) {\n          result.r = this.r - otherColor.r;\n          result.g = this.g - otherColor.g;\n          result.b = this.b - otherColor.b;\n          return this;\n      }\n      /**\n       * Copy the current object\n       * @returns a new Color3 copied the current one\n       */\n      clone() {\n          return new Color3(this.r, this.g, this.b);\n      }\n      /**\n       * Copies the rgb values from the source in the current Color3\n       * @param source - defines the source Color3 object\n       * @returns the updated Color3 object\n       */\n      copyFrom(source) {\n          this.r = source.r;\n          this.g = source.g;\n          this.b = source.b;\n          return this;\n      }\n      /**\n       * Updates the Color3 rgb values from the given floats\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @returns the current Color3 object\n       */\n      copyFromFloats(r, g, b) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          return this;\n      }\n      /**\n       * Updates the Color3 rgb values from the given floats\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @returns the current Color3 object\n       */\n      set(r, g, b) {\n          return this.copyFromFloats(r, g, b);\n      }\n      /**\n       * Compute the Color3 hexadecimal code as a string\n       * @returns a string containing the hexadecimal representation of the Color3 object\n       */\n      toHexString() {\n          const intR = (this.r * 255) | 0;\n          const intG = (this.g * 255) | 0;\n          const intB = (this.b * 255) | 0;\n          return '#' + Scalar_1$1.Scalar.ToHex(intR) + Scalar_1$1.Scalar.ToHex(intG) + Scalar_1$1.Scalar.ToHex(intB);\n      }\n      /**\n       * Computes a new Color3 converted from the current one to linear space\n       * @returns a new Color3 object\n       */\n      toLinearSpace() {\n          const convertedColor = new Color3();\n          this.toLinearSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color3 object where to store the linear space version\n       * @returns the unmodified Color3\n       */\n      toLinearSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$2.ToLinearSpace);\n          convertedColor.g = Math.pow(this.g, types_1$2.ToLinearSpace);\n          convertedColor.b = Math.pow(this.b, types_1$2.ToLinearSpace);\n          return this;\n      }\n      /**\n       * Computes a new Color3 converted from the current one to gamma space\n       * @returns a new Color3 object\n       */\n      toGammaSpace() {\n          const convertedColor = new Color3();\n          this.toGammaSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color3 object where to store the gamma space version\n       * @returns the unmodified Color3\n       */\n      toGammaSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$2.ToGammaSpace);\n          convertedColor.g = Math.pow(this.g, types_1$2.ToGammaSpace);\n          convertedColor.b = Math.pow(this.b, types_1$2.ToGammaSpace);\n          return this;\n      }\n      /**\n       * Serializes Color3\n       */\n      toJSON() {\n          return {\n              r: this.r,\n              g: this.g,\n              b: this.b\n          };\n      }\n  }\n  Color3$1.Color3 = Color3;\n\n  var Curve3d = {};\n\n  Object.defineProperty(Curve3d, \"__esModule\", { value: true });\n  Curve3d.Curve3 = void 0;\n  const Vector3_1$2 = Vector3$1;\n  /**\n   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n   * A Curve3 is designed from a series of successive Vector3.\n   * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\n   * @public\n   */\n  class Curve3 {\n      /**\n       * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n       * A Curve3 is designed from a series of successive Vector3.\n       * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\n       * @param points - points which make up the curve\n       */\n      constructor(points) {\n          this._length = 0.0;\n          this._points = points;\n          this._length = this._computeLength(points);\n      }\n      /**\n       * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n       * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n       * @param v1 - (Vector3) the control point\n       * @param v2 - (Vector3) the end point of the Quadratic Bezier\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateQuadraticBezier(v0, v1, v2, nbPoints) {\n          // tslint:disable-next-line:no-parameter-reassignment\n          nbPoints = nbPoints > 2 ? nbPoints : 3;\n          const bez = new Array();\n          const equation = (t, val0, val1, val2) => {\n              const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\n              return res;\n          };\n          for (let i = 0; i <= nbPoints; i++) {\n              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\n          }\n          return new Curve3(bez);\n      }\n      /**\n       * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n       * @param v0 - (Vector3) the origin point of the Cubic Bezier\n       * @param v1 - (Vector3) the first control point\n       * @param v2 - (Vector3) the second control point\n       * @param v3 - (Vector3) the end point of the Cubic Bezier\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateCubicBezier(v0, v1, v2, v3, nbPoints) {\n          // tslint:disable-next-line:no-parameter-reassignment\n          nbPoints = nbPoints > 3 ? nbPoints : 4;\n          const bez = new Array();\n          const equation = (t, val0, val1, val2, val3) => {\n              const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\n                  3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\n                  3.0 * t * t * (1.0 - t) * val2 +\n                  t * t * t * val3;\n              return res;\n          };\n          for (let i = 0; i <= nbPoints; i++) {\n              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\n          }\n          return new Curve3(bez);\n      }\n      /**\n       * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n       * @param p1 - (Vector3) the origin point of the Hermite Spline\n       * @param t1 - (Vector3) the tangent vector at the origin point\n       * @param p2 - (Vector3) the end point of the Hermite Spline\n       * @param t2 - (Vector3) the tangent vector at the end point\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateHermiteSpline(p1, t1, p2, t2, nbPoints) {\n          const hermite = new Array();\n          const step = 1.0 / nbPoints;\n          for (let i = 0; i <= nbPoints; i++) {\n              hermite.push(Vector3_1$2.Vector3.Hermite(p1, t1, p2, t2, i * step));\n          }\n          return new Curve3(hermite);\n      }\n      /**\n       * Returns a Curve3 object along a CatmullRom Spline curve :\n       * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n       * @param nbPoints - (integer) the wanted number of points between each curve control points\n       * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n       * @returns the created Curve3\n       */\n      static CreateCatmullRomSpline(points, nbPoints, closed) {\n          const catmullRom = new Array();\n          const step = 1.0 / nbPoints;\n          let amount = 0.0;\n          if (closed) {\n              const pointsCount = points.length;\n              for (let i = 0; i < pointsCount; i++) {\n                  amount = 0;\n                  for (let c = 0; c < nbPoints; c++) {\n                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\n                      amount += step;\n                  }\n              }\n              catmullRom.push(catmullRom[0]);\n          }\n          else {\n              const totalPoints = new Array();\n              totalPoints.push(points[0].clone());\n              Array.prototype.push.apply(totalPoints, points);\n              totalPoints.push(points[points.length - 1].clone());\n              let i = 0;\n              for (i = 0; i < totalPoints.length - 3; i++) {\n                  amount = 0;\n                  for (let c = 0; c < nbPoints; c++) {\n                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n                      amount += step;\n                  }\n              }\n              i--;\n              catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n          }\n          return new Curve3(catmullRom);\n      }\n      /**\n       * @returns the Curve3 stored array of successive Vector3\n       */\n      getPoints() {\n          return this._points;\n      }\n      /**\n       * @returns the computed length (float) of the curve.\n       */\n      length() {\n          return this._length;\n      }\n      /**\n       * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\n       * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\n       * curveA and curveB keep unchanged.\n       * @param curve - the curve to continue from this curve\n       * @returns the newly constructed curve\n       */\n      continue(curve) {\n          const lastPoint = this._points[this._points.length - 1];\n          const continuedPoints = this._points.slice();\n          const curvePoints = curve.getPoints();\n          for (let i = 1; i < curvePoints.length; i++) {\n              continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\n          }\n          const continuedCurve = new Curve3(continuedPoints);\n          return continuedCurve;\n      }\n      _computeLength(path) {\n          let l = 0;\n          for (let i = 1; i < path.length; i++) {\n              l += path[i].subtract(path[i - 1]).length();\n          }\n          return l;\n      }\n  }\n  Curve3d.Curve3 = Curve3;\n\n  var Furstum = {};\n\n  var Plane$1 = {};\n\n  Object.defineProperty(Plane$1, \"__esModule\", { value: true });\n  Plane$1.Plane = void 0;\n  const Vector3_1$1 = Vector3$1;\n  const Matrix_1 = Matrix$1;\n  const preallocatedVariables_1 = preallocatedVariables;\n  /**\n   * Represens a plane by the equation ax + by + cz + d = 0\n   * @public\n   */\n  class Plane {\n      /**\n       * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n       * @param a - a component of the plane\n       * @param b - b component of the plane\n       * @param c - c component of the plane\n       * @param d - d component of the plane\n       */\n      constructor(a, b, c, d) {\n          this.normal = new Vector3_1$1.Vector3(a, b, c);\n          this.d = d;\n      }\n      // Statics\n      /**\n       * Creates a plane from an  array\n       * @param array - the array to create a plane from\n       * @returns a new Plane from the given array.\n       */\n      static FromArray(array) {\n          return new Plane(array[0], array[1], array[2], array[3]);\n      }\n      /**\n       * Creates a plane from three points\n       * @param point1 - point used to create the plane\n       * @param point2 - point used to create the plane\n       * @param point3 - point used to create the plane\n       * @returns a new Plane defined by the three given points.\n       */\n      static FromPoints(point1, point2, point3) {\n          const result = new Plane(0.0, 0.0, 0.0, 0.0);\n          result.copyFromPoints(point1, point2, point3);\n          return result;\n      }\n      /**\n       * Creates a plane from an origin point and a normal\n       * @param origin - origin of the plane to be constructed\n       * @param normal - normal of the plane to be constructed\n       * @returns a new Plane the normal vector to this plane at the given origin point.\n       * Note : the vector \"normal\" is updated because normalized.\n       */\n      static FromPositionAndNormal(origin, normal) {\n          const result = new Plane(0.0, 0.0, 0.0, 0.0);\n          normal.normalize();\n          result.normal = normal;\n          result.d = -(normal.x * origin.x +\n              normal.y * origin.y +\n              normal.z * origin.z);\n          return result;\n      }\n      /**\n       * Calculates the distance from a plane and a point\n       * @param origin - origin of the plane to be constructed\n       * @param normal - normal of the plane to be constructed\n       * @param point - point to calculate distance to\n       * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n       */\n      static SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {\n          const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n          return Vector3_1$1.Vector3.Dot(point, normal) + d;\n      }\n      /**\n       * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n       */\n      asArray() {\n          return [this.normal.x, this.normal.y, this.normal.z, this.d];\n      }\n      // Methods\n      /**\n       * @returns a new plane copied from the current Plane.\n       */\n      clone() {\n          return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n      }\n      /**\n       * @returns the string \"Plane\".\n       */\n      getClassName() {\n          return 'Plane';\n      }\n      /**\n       * @returns the Plane hash code.\n       */\n      getHashCode() {\n          let hash = this.normal.getHashCode();\n          hash = (hash * 397) ^ (this.d || 0);\n          return hash;\n      }\n      /**\n       * Normalize the current Plane in place.\n       * @returns the updated Plane.\n       */\n      normalize() {\n          const norm = Math.sqrt(this.normal.x * this.normal.x +\n              this.normal.y * this.normal.y +\n              this.normal.z * this.normal.z);\n          let magnitude = 0.0;\n          if (norm !== 0) {\n              magnitude = 1.0 / norm;\n          }\n          this.normal.x *= magnitude;\n          this.normal.y *= magnitude;\n          this.normal.z *= magnitude;\n          this.d *= magnitude;\n          return this;\n      }\n      /**\n       * Applies a transformation the plane and returns the result\n       * @param transformation - the transformation matrix to be applied to the plane\n       * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n       */\n      transform(transformation) {\n          const transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];\n          Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);\n          const m = transposedMatrix.m;\n          const x = this.normal.x;\n          const y = this.normal.y;\n          const z = this.normal.z;\n          const d = this.d;\n          const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n          const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n          const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n          const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n          return new Plane(normalX, normalY, normalZ, finalD);\n      }\n      /**\n       * Calcualtte the dot product between the point and the plane normal\n       * @param point - point to calculate the dot product with\n       * @returns the dot product (float) of the point coordinates and the plane normal.\n       */\n      dotCoordinate(point) {\n          return (this.normal.x * point.x +\n              this.normal.y * point.y +\n              this.normal.z * point.z +\n              this.d);\n      }\n      /**\n       * Updates the current Plane from the plane defined by the three given points.\n       * @param point1 - one of the points used to contruct the plane\n       * @param point2 - one of the points used to contruct the plane\n       * @param point3 - one of the points used to contruct the plane\n       * @returns the updated Plane.\n       */\n      copyFromPoints(point1, point2, point3) {\n          const x1 = point2.x - point1.x;\n          const y1 = point2.y - point1.y;\n          const z1 = point2.z - point1.z;\n          const x2 = point3.x - point1.x;\n          const y2 = point3.y - point1.y;\n          const z2 = point3.z - point1.z;\n          const yz = y1 * z2 - z1 * y2;\n          const xz = z1 * x2 - x1 * z2;\n          const xy = x1 * y2 - y1 * x2;\n          const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n          let invPyth;\n          if (pyth !== 0) {\n              invPyth = 1.0 / pyth;\n          }\n          else {\n              invPyth = 0.0;\n          }\n          this.normal.x = yz * invPyth;\n          this.normal.y = xz * invPyth;\n          this.normal.z = xy * invPyth;\n          this.d = -(this.normal.x * point1.x +\n              this.normal.y * point1.y +\n              this.normal.z * point1.z);\n          return this;\n      }\n      /**\n       * Checks if the plane is facing a given direction\n       * @param direction - the direction to check if the plane is facing\n       * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n       * @returns True is the vector \"direction\"  is the same side than the plane normal.\n       */\n      isFrontFacingTo(direction, epsilon) {\n          const dot = Vector3_1$1.Vector3.Dot(this.normal, direction);\n          return dot <= epsilon;\n      }\n      /**\n       * Calculates the distance to a point\n       * @param point - point to calculate distance to\n       * @returns the signed distance (float) from the given point to the Plane.\n       */\n      signedDistanceTo(point) {\n          return Vector3_1$1.Vector3.Dot(point, this.normal) + this.d;\n      }\n  }\n  Plane$1.Plane = Plane;\n\n  Object.defineProperty(Furstum, \"__esModule\", { value: true });\n  Furstum.Frustum = void 0;\n  const Plane_1 = Plane$1;\n  /**\n   * Reprasents a camera frustum\n   * @public\n   */\n  class Frustum {\n      /**\n       * Gets the planes representing the frustum\n       * @param transform - matrix to be applied to the returned planes\n       * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n       */\n      static GetPlanes(transform) {\n          const frustumPlanes = [];\n          for (let index = 0; index < 6; index++) {\n              frustumPlanes.push(new Plane_1.Plane(0.0, 0.0, 0.0, 0.0));\n          }\n          Frustum.GetPlanesToRef(transform, frustumPlanes);\n          return frustumPlanes;\n      }\n      /**\n       * Gets the near frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetNearPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[2];\n          frustumPlane.normal.y = m[7] + m[6];\n          frustumPlane.normal.z = m[11] + m[10];\n          frustumPlane.d = m[15] + m[14];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the far frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetFarPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[2];\n          frustumPlane.normal.y = m[7] - m[6];\n          frustumPlane.normal.z = m[11] - m[10];\n          frustumPlane.d = m[15] - m[14];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the left frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetLeftPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[0];\n          frustumPlane.normal.y = m[7] + m[4];\n          frustumPlane.normal.z = m[11] + m[8];\n          frustumPlane.d = m[15] + m[12];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the right frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetRightPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[0];\n          frustumPlane.normal.y = m[7] - m[4];\n          frustumPlane.normal.z = m[11] - m[8];\n          frustumPlane.d = m[15] - m[12];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the top frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetTopPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[1];\n          frustumPlane.normal.y = m[7] - m[5];\n          frustumPlane.normal.z = m[11] - m[9];\n          frustumPlane.d = m[15] - m[13];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the bottom frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetBottomPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[1];\n          frustumPlane.normal.y = m[7] + m[5];\n          frustumPlane.normal.z = m[11] + m[9];\n          frustumPlane.d = m[15] + m[13];\n          frustumPlane.normalize();\n      }\n      /**\n       * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n       * @param transform - transformation matrix to be applied to the resulting frustum planes\n       * @param frustumPlanes - the resuling frustum planes\n       */\n      static GetPlanesToRef(transform, frustumPlanes) {\n          // Near\n          Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n          // Far\n          Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n          // Left\n          Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n          // Right\n          Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n          // Top\n          Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n          // Bottom\n          Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n      }\n  }\n  Furstum.Frustum = Frustum;\n\n  var Path2d = {};\n\n  Object.defineProperty(Path2d, \"__esModule\", { value: true });\n  Path2d.Path2 = void 0;\n  const Vector2_1 = Vector2$1;\n  const Arc2_1 = Arc2$1;\n  const types_1$1 = types;\n  /**\n   * Represents a 2D path made up of multiple 2D points\n   * @public\n   */\n  class Path2 {\n      /**\n       * Creates a Path2 object from the starting 2D coordinates x and y.\n       * @param x - the starting points x value\n       * @param y - the starting points y value\n       */\n      constructor(x, y) {\n          /**\n           * If the path start and end point are the same\n           */\n          this.closed = false;\n          this._points = new Array();\n          this._length = 0.0;\n          this._points.push(new Vector2_1.Vector2(x, y));\n      }\n      /**\n       * Creates a new path starting from an x and y position\n       * @param x - starting x value\n       * @param y - starting y value\n       * @returns a new Path2 starting at the coordinates (x, y).\n       */\n      static StartingAt(x, y) {\n          return new Path2(x, y);\n      }\n      /**\n       * Adds a new segment until the given coordinates (x, y) to the current Path2.\n       * @param x - the added points x value\n       * @param y - the added points y value\n       * @returns the updated Path2.\n       */\n      addLineTo(x, y) {\n          if (this.closed) {\n              return this;\n          }\n          const newPoint = new Vector2_1.Vector2(x, y);\n          const previousPoint = this._points[this._points.length - 1];\n          this._points.push(newPoint);\n          this._length += newPoint.subtract(previousPoint).length();\n          return this;\n      }\n      /**\n       * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n       * @param midX - middle point x value\n       * @param midY - middle point y value\n       * @param endX - end point x value\n       * @param endY - end point y value\n       * @param numberOfSegments - (default: 36)\n       * @returns the updated Path2.\n       */\n      addArcTo(midX, midY, endX, endY, numberOfSegments = 36) {\n          if (this.closed) {\n              return this;\n          }\n          const startPoint = this._points[this._points.length - 1];\n          const midPoint = new Vector2_1.Vector2(midX, midY);\n          const endPoint = new Vector2_1.Vector2(endX, endY);\n          const arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);\n          let increment = arc.angle.radians() / numberOfSegments;\n          if (arc.orientation === types_1$1.Orientation.CW) {\n              increment *= -1;\n          }\n          let currentAngle = arc.startAngle.radians() + increment;\n          for (let i = 0; i < numberOfSegments; i++) {\n              const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\n              const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\n              this.addLineTo(x, y);\n              currentAngle += increment;\n          }\n          return this;\n      }\n      /**\n       * Closes the Path2.\n       * @returns the Path2.\n       */\n      close() {\n          this.closed = true;\n          return this;\n      }\n      /**\n       * Gets the sum of the distance between each sequential point in the path\n       * @returns the Path2 total length (float).\n       */\n      length() {\n          let result = this._length;\n          if (!this.closed) {\n              const lastPoint = this._points[this._points.length - 1];\n              const firstPoint = this._points[0];\n              result += firstPoint.subtract(lastPoint).length();\n          }\n          return result;\n      }\n      /**\n       * Gets the points which construct the path\n       * @returns the Path2 internal array of points.\n       */\n      getPoints() {\n          return this._points;\n      }\n      /**\n       * Retreives the point at the distance aways from the starting point\n       * @param normalizedLengthPosition - the length along the path to retreive the point from\n       * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n       */\n      getPointAtLengthPosition(normalizedLengthPosition) {\n          if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n              return Vector2_1.Vector2.Zero();\n          }\n          const lengthPosition = normalizedLengthPosition * this.length();\n          let previousOffset = 0;\n          for (let i = 0; i < this._points.length; i++) {\n              const j = (i + 1) % this._points.length;\n              const a = this._points[i];\n              const b = this._points[j];\n              const bToA = b.subtract(a);\n              const nextOffset = bToA.length() + previousOffset;\n              if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n                  const dir = bToA.normalize();\n                  const localOffset = lengthPosition - previousOffset;\n                  return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\n              }\n              previousOffset = nextOffset;\n          }\n          return Vector2_1.Vector2.Zero();\n      }\n  }\n  Path2d.Path2 = Path2;\n\n  var Path3d = {};\n\n  Object.defineProperty(Path3d, \"__esModule\", { value: true });\n  Path3d.Path3D = void 0;\n  const Vector3_1 = Vector3$1;\n  const types_1 = types;\n  const Scalar_1 = Scalar$1;\n  /**\n   * Represents a 3D path made up of multiple 3D points\n   * @public\n   */\n  class Path3D {\n      /**\n       * new Path3D(path, normal, raw)\n       * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\n       * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n       * @param path - an array of Vector3, the curve axis of the Path3D\n       * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n       * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\n       */\n      constructor(\n      /**\n       * an array of Vector3, the curve axis of the Path3D\n       */\n      path, firstNormal = null, raw) {\n          this.path = path;\n          this._curve = new Array();\n          this._distances = new Array();\n          this._tangents = new Array();\n          this._normals = new Array();\n          this._binormals = new Array();\n          for (let p = 0; p < path.length; p++) {\n              this._curve[p] = path[p].clone(); // hard copy\n          }\n          this._raw = raw || false;\n          this._compute(firstNormal);\n      }\n      /**\n       * Returns the Path3D array of successive Vector3 designing its curve.\n       * @returns the Path3D array of successive Vector3 designing its curve.\n       */\n      getCurve() {\n          return this._curve;\n      }\n      /**\n       * Returns an array populated with tangent vectors on each Path3D curve point.\n       * @returns an array populated with tangent vectors on each Path3D curve point.\n       */\n      getTangents() {\n          return this._tangents;\n      }\n      /**\n       * Returns an array populated with normal vectors on each Path3D curve point.\n       * @returns an array populated with normal vectors on each Path3D curve point.\n       */\n      getNormals() {\n          return this._normals;\n      }\n      /**\n       * Returns an array populated with binormal vectors on each Path3D curve point.\n       * @returns an array populated with binormal vectors on each Path3D curve point.\n       */\n      getBinormals() {\n          return this._binormals;\n      }\n      /**\n       * Returns an array populated with distances (float) of the i-th point from the first curve point.\n       * @returns an array populated with distances (float) of the i-th point from the first curve point.\n       */\n      getDistances() {\n          return this._distances;\n      }\n      /**\n       * Forces the Path3D tangent, normal, binormal and distance recomputation.\n       * @param path - path which all values are copied into the curves points\n       * @param firstNormal - which should be projected onto the curve\n       * @returns the same object updated.\n       */\n      update(path, firstNormal = null) {\n          for (let p = 0; p < path.length; p++) {\n              this._curve[p].x = path[p].x;\n              this._curve[p].y = path[p].y;\n              this._curve[p].z = path[p].z;\n          }\n          this._compute(firstNormal);\n          return this;\n      }\n      // private function compute() : computes tangents, normals and binormals\n      _compute(firstNormal) {\n          const l = this._curve.length;\n          // first and last tangents\n          this._tangents[0] = this._getFirstNonNullVector(0);\n          if (!this._raw) {\n              this._tangents[0].normalize();\n          }\n          this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\n          if (!this._raw) {\n              this._tangents[l - 1].normalize();\n          }\n          // normals and binormals at first point : arbitrary vector with _normalVector()\n          const tg0 = this._tangents[0];\n          const pp0 = this._normalVector(this._curve[0], tg0, firstNormal);\n          this._normals[0] = pp0;\n          if (!this._raw) {\n              this._normals[0].normalize();\n          }\n          this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);\n          if (!this._raw) {\n              this._binormals[0].normalize();\n          }\n          this._distances[0] = 0.0;\n          // normals and binormals : next points\n          let prev; // previous vector (segment)\n          let cur; // current vector (segment)\n          let curTang; // current tangent\n          // previous normal\n          let prevBinor; // previous binormal\n          for (let i = 1; i < l; i++) {\n              // tangents\n              prev = this._getLastNonNullVector(i);\n              if (i < l - 1) {\n                  cur = this._getFirstNonNullVector(i);\n                  this._tangents[i] = prev.add(cur);\n                  this._tangents[i].normalize();\n              }\n              this._distances[i] = this._distances[i - 1] + prev.length();\n              // normals and binormals\n              // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n              curTang = this._tangents[i];\n              prevBinor = this._binormals[i - 1];\n              this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);\n              if (!this._raw) {\n                  this._normals[i].normalize();\n              }\n              this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);\n              if (!this._raw) {\n                  this._binormals[i].normalize();\n              }\n          }\n      }\n      // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n      _getFirstNonNullVector(index) {\n          let i = 1;\n          let nNVector = this._curve[index + i].subtract(this._curve[index]);\n          while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n              i++;\n              nNVector = this._curve[index + i].subtract(this._curve[index]);\n          }\n          return nNVector;\n      }\n      // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n      _getLastNonNullVector(index) {\n          let i = 1;\n          let nLVector = this._curve[index].subtract(this._curve[index - i]);\n          while (nLVector.length() === 0 && index > i + 1) {\n              i++;\n              nLVector = this._curve[index].subtract(this._curve[index - i]);\n          }\n          return nLVector;\n      }\n      // private function normalVector(v0, vt, va) :\n      // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n      // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n      _normalVector(v0, vt, va) {\n          let normal0;\n          let tgl = vt.length();\n          if (tgl === 0.0) {\n              tgl = 1.0;\n          }\n          if (va === undefined || va === null) {\n              let point;\n              if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, types_1.Epsilon)) {\n                  // search for a point in the plane\n                  point = new Vector3_1.Vector3(0.0, -1.0, 0.0);\n              }\n              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, types_1.Epsilon)) {\n                  point = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n              }\n              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, types_1.Epsilon)) {\n                  point = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n              }\n              else {\n                  point = Vector3_1.Vector3.Zero();\n              }\n              normal0 = Vector3_1.Vector3.Cross(vt, point);\n          }\n          else {\n              normal0 = Vector3_1.Vector3.Cross(vt, va);\n              Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);\n          }\n          normal0.normalize();\n          return normal0;\n      }\n  }\n  Path3d.Path3D = Path3D;\n\n  var Size$1 = {};\n\n  Object.defineProperty(Size$1, \"__esModule\", { value: true });\n  Size$1.Size = void 0;\n  /**\n   * Size containing widht and height\n   * @public\n   */\n  class Size {\n      /**\n       * Creates a Size object from the given width and height (floats).\n       * @param width - width of the new size\n       * @param height - height of the new size\n       */\n      constructor(width, height) {\n          this.width = width;\n          this.height = height;\n      }\n      /**\n       * The surface of the Size : width * height (float).\n       */\n      get surface() {\n          return this.width * this.height;\n      }\n      /**\n       * Create a new size of zero\n       * @returns a new Size set to (0.0, 0.0)\n       */\n      static Zero() {\n          return new Size(0.0, 0.0);\n      }\n      /**\n       * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n       * @param start - starting size to lerp between\n       * @param end - end size to lerp between\n       * @param amount - amount to lerp between the start and end values\n       * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n       */\n      static Lerp(start, end, amount) {\n          const w = start.width + (end.width - start.width) * amount;\n          const h = start.height + (end.height - start.height) * amount;\n          return new Size(w, h);\n      }\n      /**\n       * Returns a string with the Size width and height\n       * @returns a string with the Size width and height\n       */\n      toString() {\n          return `{W: ${this.width}, H: ${this.height}}`;\n      }\n      /**\n       * \"Size\"\n       * @returns the string \"Size\"\n       */\n      getClassName() {\n          return 'Size';\n      }\n      /**\n       * Returns the Size hash code.\n       * @returns a hash code for a unique width and height\n       */\n      getHashCode() {\n          let hash = this.width || 0;\n          hash = (hash * 397) ^ (this.height || 0);\n          return hash;\n      }\n      /**\n       * Updates the current size from the given one.\n       * @param src - the given size\n       */\n      copyFrom(src) {\n          this.width = src.width;\n          this.height = src.height;\n      }\n      /**\n       * Updates in place the current Size from the given floats.\n       * @param width - width of the new size\n       * @param height - height of the new size\n       * @returns the updated Size.\n       */\n      copyFromFloats(width, height) {\n          this.width = width;\n          this.height = height;\n          return this;\n      }\n      /**\n       * Updates in place the current Size from the given floats.\n       * @param width - width to set\n       * @param height - height to set\n       * @returns the updated Size.\n       */\n      set(width, height) {\n          return this.copyFromFloats(width, height);\n      }\n      /**\n       * Multiplies the width and height by numbers\n       * @param w - factor to multiple the width by\n       * @param h - factor to multiple the height by\n       * @returns a new Size set with the multiplication result of the current Size and the given floats.\n       */\n      multiplyByFloats(w, h) {\n          return new Size(this.width * w, this.height * h);\n      }\n      /**\n       * Clones the size\n       * @returns a new Size copied from the given one.\n       */\n      clone() {\n          return new Size(this.width, this.height);\n      }\n      /**\n       * True if the current Size and the given one width and height are strictly equal.\n       * @param other - the other size to compare against\n       * @returns True if the current Size and the given one width and height are strictly equal.\n       */\n      equals(other) {\n          if (!other) {\n              return false;\n          }\n          return this.width === other.width && this.height === other.height;\n      }\n      /**\n       * Sums the width and height of two sizes\n       * @param otherSize - size to add to this size\n       * @returns a new Size set as the addition result of the current Size and the given one.\n       */\n      add(otherSize) {\n          const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n          return r;\n      }\n      /**\n       * Subtracts the width and height of two\n       * @param otherSize - size to subtract to this size\n       * @returns a new Size set as the subtraction result of  the given one from the current Size.\n       */\n      subtract(otherSize) {\n          const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n          return r;\n      }\n  }\n  Size$1.Size = Size;\n\n  (function (exports) {\n  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n      if (k2 === undefined) k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n  }) : (function(o, m, k, k2) {\n      if (k2 === undefined) k2 = k;\n      o[k2] = m[k];\n  }));\n  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n      for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n  };\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  __exportStar(types, exports);\n  __exportStar(preallocatedVariables, exports);\n  __exportStar(Angle$1, exports);\n  __exportStar(Arc2$1, exports);\n  __exportStar(Axis$1, exports);\n  __exportStar(BezierCurve$1, exports);\n  __exportStar(Color3$1, exports);\n  __exportStar(Color4$1, exports);\n  __exportStar(Curve3d, exports);\n  __exportStar(Furstum, exports);\n  __exportStar(Matrix$1, exports);\n  __exportStar(Path2d, exports);\n  __exportStar(Path3d, exports);\n  __exportStar(Plane$1, exports);\n  __exportStar(Quaternion$1, exports);\n  __exportStar(Scalar$1, exports);\n  __exportStar(Size$1, exports);\n  __exportStar(Vector2$1, exports);\n  __exportStar(Vector3$1, exports);\n  __exportStar(Vector4$1, exports);\n  __exportStar(dist, exports);\n\n  }(dist));\n\n  var defaultParams = {\r\n      looping: true,\r\n      speed: 1.0,\r\n      weight: 1.0,\r\n      layer: 0\r\n  };\r\n  /**\r\n   * @public\r\n   */\r\n  var AnimationState = /** @class */ (function (_super) {\r\n      __extends(AnimationState, _super);\r\n      function AnimationState(clip, params) {\r\n          if (params === void 0) { params = defaultParams; }\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.isAnimationClip = true;\r\n          /**\r\n           * Does the animation loop?, default: true\r\n           */\r\n          _this.looping = defaultParams.looping;\r\n          /**\r\n           * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\r\n           */\r\n          _this.weight = defaultParams.weight;\r\n          /**\r\n           * Is the animation playing? default: true\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Does any anyone asked to reset the animation? default: false\r\n           */\r\n          _this.shouldReset = false;\r\n          /**\r\n           * The animation speed\r\n           */\r\n          _this.speed = defaultParams.speed;\r\n          // @internal\r\n          _this.name = newId('AnimClip');\r\n          /**\r\n           * Layering allows you to have two or more levels of animation on an object's parameters at the same time\r\n           */\r\n          _this.layer = defaultParams.layer;\r\n          _this.clip = clip;\r\n          _this.setParams(__assign({}, params));\r\n          return _this;\r\n      }\r\n      /**\r\n       * Sets the clip parameters\r\n       */\r\n      AnimationState.prototype.setParams = function (params) {\r\n          this.looping = params.looping !== undefined ? params.looping : this.looping;\r\n          this.speed = params.speed || this.speed;\r\n          this.weight = params.weight || this.weight;\r\n          this.layer = params.layer || this.layer;\r\n          return this;\r\n      };\r\n      AnimationState.prototype.toJSON = function () {\r\n          var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n          if (this.shouldReset) {\r\n              this.shouldReset = false;\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      AnimationState.prototype.play = function (reset) {\r\n          var _a;\r\n          if (reset === void 0) { reset = false; }\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.play(this, reset);\r\n      };\r\n      /**\r\n       * Pauses the animation\r\n       */\r\n      AnimationState.prototype.pause = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.pause(this);\r\n      };\r\n      /**\r\n       * Resets the animation state to the frame 0\r\n       */\r\n      AnimationState.prototype.reset = function () {\r\n          this.shouldReset = true;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation\r\n       */\r\n      AnimationState.prototype.stop = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.stop(this);\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AnimationState.prototype, \"clip\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"looping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AnimationState.prototype, \"weight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"shouldReset\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AnimationState.prototype, \"speed\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AnimationState.prototype, \"name\", void 0);\r\n      return AnimationState;\r\n  }(ObservableComponent));\n\n  /** @public */\r\n  exports.InputEventType = void 0;\r\n  (function (InputEventType) {\r\n      InputEventType[InputEventType[\"DOWN\"] = 0] = \"DOWN\";\r\n      InputEventType[InputEventType[\"UP\"] = 1] = \"UP\";\r\n  })(exports.InputEventType || (exports.InputEventType = {}));\r\n  /** @public */\r\n  exports.CameraMode = void 0;\r\n  (function (CameraMode) {\r\n      CameraMode[CameraMode[\"FirstPerson\"] = 0] = \"FirstPerson\";\r\n      CameraMode[CameraMode[\"ThirdPerson\"] = 1] = \"ThirdPerson\";\r\n      // @internal\r\n      CameraMode[CameraMode[\"BuildingToolGodMode\"] = 2] = \"BuildingToolGodMode\";\r\n  })(exports.CameraMode || (exports.CameraMode = {}));\r\n  // @internal\r\n  var AVATAR_OBSERVABLE = 'AVATAR_OBSERVABLE';\r\n  /** @public */\r\n  exports.LandRole = void 0;\r\n  (function (LandRole) {\r\n      LandRole[\"OWNER\"] = \"owner\";\r\n      LandRole[\"OPERATOR\"] = \"operator\";\r\n  })(exports.LandRole || (exports.LandRole = {}));\n\n  /**\r\n   * @public\r\n   */\r\n  exports.ActionButton = void 0;\r\n  (function (ActionButton) {\r\n      ActionButton[\"POINTER\"] = \"POINTER\";\r\n      ActionButton[\"PRIMARY\"] = \"PRIMARY\";\r\n      ActionButton[\"SECONDARY\"] = \"SECONDARY\";\r\n      ActionButton[\"ANY\"] = \"ANY\";\r\n      ActionButton[\"FORWARD\"] = \"FORWARD\";\r\n      ActionButton[\"BACKWARD\"] = \"BACKWARD\";\r\n      ActionButton[\"RIGHT\"] = \"RIGHT\";\r\n      ActionButton[\"LEFT\"] = \"LEFT\";\r\n      ActionButton[\"JUMP\"] = \"JUMP\";\r\n      ActionButton[\"WALK\"] = \"WALK\";\r\n      ActionButton[\"ACTION_3\"] = \"ACTION_3\";\r\n      ActionButton[\"ACTION_4\"] = \"ACTION_4\";\r\n      ActionButton[\"ACTION_5\"] = \"ACTION_5\";\r\n      ActionButton[\"ACTION_6\"] = \"ACTION_6\";\r\n  })(exports.ActionButton || (exports.ActionButton = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventComponent = /** @class */ (function () {\r\n      function PointerEventComponent(callback) {\r\n          this.callback = callback;\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          Input.ensureInstance();\r\n      }\r\n      return PointerEventComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerDown = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerDown, _super);\r\n      function GlobalPointerDown() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerDown = __decorate([\r\n          Component('pointerDown')\r\n      ], GlobalPointerDown);\r\n      return GlobalPointerDown;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerUp = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerUp, _super);\r\n      function GlobalPointerUp() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerUp = __decorate([\r\n          Component('pointerUp')\r\n      ], GlobalPointerUp);\r\n      return GlobalPointerUp;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Subscription = /** @class */ (function () {\r\n      function Subscription(fn, useRaycast) {\r\n          this.fn = fn;\r\n          this.useRaycast = useRaycast;\r\n      }\r\n      return Subscription;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var Input = /** @class */ (function () {\r\n      function Input() {\r\n          // @internal\r\n          this.buttonIdMapping = [\r\n              exports.ActionButton.POINTER,\r\n              exports.ActionButton.PRIMARY,\r\n              exports.ActionButton.SECONDARY,\r\n              exports.ActionButton.ANY,\r\n              exports.ActionButton.FORWARD,\r\n              exports.ActionButton.BACKWARD,\r\n              exports.ActionButton.RIGHT,\r\n              exports.ActionButton.LEFT,\r\n              exports.ActionButton.JUMP,\r\n              exports.ActionButton.WALK,\r\n              exports.ActionButton.ACTION_3,\r\n              exports.ActionButton.ACTION_4,\r\n              exports.ActionButton.ACTION_5,\r\n              exports.ActionButton.ACTION_6\r\n          ];\r\n          // @internal\r\n          this.subscriptions = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: [], BUTTON_UP: [] }, _a)));\r\n          }, {});\r\n          this.internalState = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: false }, _a)));\r\n          }, {});\r\n      }\r\n      Object.defineProperty(Input, \"instance\", {\r\n          get: function () {\r\n              Input.ensureInstance();\r\n              return Input._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Input.ensureInstance = function () {\r\n          if (!Input._instance) {\r\n              Input._instance = new Input();\r\n          }\r\n      };\r\n      /**\r\n       * Allows to know if a button is pressed\r\n       *\r\n       * Returns true if the button is pressed\r\n       * @param buttonId - The id of the button.\r\n       */\r\n      Input.prototype.isButtonPressed = function (buttonId) {\r\n          return this.internalState[buttonId];\r\n      };\r\n      /**\r\n       * Subscribes to an input event and triggers the provided callback.\r\n       *\r\n       * Returns a function that can be called to remove the subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param useRaycast - Enables getting raycast information.\r\n       * @param fn - A callback function to be called when the event is triggered.\r\n       */\r\n      Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {\r\n          var _this = this;\r\n          this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));\r\n          return function () {\r\n              _this.unsubscribe(eventName, buttonId, fn);\r\n          };\r\n      };\r\n      /**\r\n       * Removes an existing input event subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param fn - The callback function used when subscribing to the event.\r\n       */\r\n      Input.prototype.unsubscribe = function (eventName, buttonId, fn) {\r\n          var index = this.getSubscriptionId(eventName, buttonId, fn);\r\n          if (index > -1) {\r\n              return this.subscriptions[buttonId][eventName].splice(index, 1);\r\n          }\r\n          return false;\r\n      };\r\n      Input.prototype.handlePointerEvent = function (data) {\r\n          var button = this.getPointerById(data.buttonId);\r\n          if (!button) {\r\n              return;\r\n          }\r\n          var eventResult = __assign(__assign({}, data), { button: button, direction: new dist.Vector3().copyFrom(data.direction), origin: new dist.Vector3().copyFrom(data.origin), hit: undefined });\r\n          var hit = data.hit\r\n              ? __assign(__assign({}, data.hit), { hitPoint: new dist.Vector3().copyFrom(data.hit.hitPoint), normal: new dist.Vector3().copyFrom(data.hit.normal), worldNormal: new dist.Vector3().copyFrom(data.hit.worldNormal) }) : undefined;\r\n          if (data.type === exports.InputEventType.DOWN) {\r\n              this.internalState[button].BUTTON_DOWN = true;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_DOWN'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_DOWN'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerDown);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.internalState[button].BUTTON_DOWN = false;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_UP'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_UP'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerUp);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {\r\n          for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\r\n              if (this.subscriptions[buttonId][eventName][i].fn === fn) {\r\n                  return i;\r\n              }\r\n          }\r\n          return -1;\r\n      };\r\n      Input.prototype.getPointerById = function (id) {\r\n          if (id < 0 || id >= this.buttonIdMapping.length) {\r\n              return null;\r\n          }\r\n          var actionButton = this.buttonIdMapping[id];\r\n          if (actionButton === exports.ActionButton.ANY) {\r\n              return null;\r\n          }\r\n          return actionButton;\r\n      };\r\n      return Input;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.CLASS_ID = void 0;\r\n  (function (CLASS_ID) {\r\n      CLASS_ID[CLASS_ID[\"TRANSFORM\"] = 1] = \"TRANSFORM\";\r\n      CLASS_ID[CLASS_ID[\"UUID_CALLBACK\"] = 8] = \"UUID_CALLBACK\";\r\n      CLASS_ID[CLASS_ID[\"BOX_SHAPE\"] = 16] = \"BOX_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"SPHERE_SHAPE\"] = 17] = \"SPHERE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"PLANE_SHAPE\"] = 18] = \"PLANE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CONE_SHAPE\"] = 19] = \"CONE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CYLINDER_SHAPE\"] = 20] = \"CYLINDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"TEXT_SHAPE\"] = 21] = \"TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"NFT_SHAPE\"] = 22] = \"NFT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_WORLD_SPACE_SHAPE\"] = 23] = \"UI_WORLD_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SCREEN_SPACE_SHAPE\"] = 24] = \"UI_SCREEN_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_RECT\"] = 25] = \"UI_CONTAINER_RECT\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_STACK\"] = 26] = \"UI_CONTAINER_STACK\";\r\n      CLASS_ID[CLASS_ID[\"UI_TEXT_SHAPE\"] = 27] = \"UI_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_INPUT_TEXT_SHAPE\"] = 28] = \"UI_INPUT_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_IMAGE_SHAPE\"] = 29] = \"UI_IMAGE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SLIDER_SHAPE\"] = 30] = \"UI_SLIDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CIRCLE_SHAPE\"] = 31] = \"CIRCLE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BILLBOARD\"] = 32] = \"BILLBOARD\";\r\n      CLASS_ID[CLASS_ID[\"ANIMATION\"] = 33] = \"ANIMATION\";\r\n      CLASS_ID[CLASS_ID[\"FONT\"] = 34] = \"FONT\";\r\n      CLASS_ID[CLASS_ID[\"UI_FULLSCREEN_SHAPE\"] = 40] = \"UI_FULLSCREEN_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_BUTTON_SHAPE\"] = 41] = \"UI_BUTTON_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"GLTF_SHAPE\"] = 54] = \"GLTF_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"OBJ_SHAPE\"] = 55] = \"OBJ_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_SHAPE\"] = 56] = \"AVATAR_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BASIC_MATERIAL\"] = 64] = \"BASIC_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"PBR_MATERIAL\"] = 65] = \"PBR_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"HIGHLIGHT_ENTITY\"] = 66] = \"HIGHLIGHT_ENTITY\";\r\n      /** @deprecated Sound has been deprecataed */\r\n      CLASS_ID[CLASS_ID[\"SOUND\"] = 67] = \"SOUND\";\r\n      CLASS_ID[CLASS_ID[\"TEXTURE\"] = 68] = \"TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_CLIP\"] = 70] = \"VIDEO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_TEXTURE\"] = 71] = \"VIDEO_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_TEXTURE\"] = 72] = \"AVATAR_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_CLIP\"] = 200] = \"AUDIO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_SOURCE\"] = 201] = \"AUDIO_SOURCE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_STREAM\"] = 202] = \"AUDIO_STREAM\";\r\n      CLASS_ID[CLASS_ID[\"GIZMOS\"] = 203] = \"GIZMOS\";\r\n      CLASS_ID[CLASS_ID[\"SMART_ITEM\"] = 204] = \"SMART_ITEM\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_MODIFIER_AREA\"] = 205] = \"AVATAR_MODIFIER_AREA\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_ATTACH\"] = 206] = \"AVATAR_ATTACH\";\r\n      CLASS_ID[CLASS_ID[\"CAMERA_MODE_AREA\"] = 207] = \"CAMERA_MODE_AREA\";\r\n      // For state sync only\r\n      CLASS_ID[CLASS_ID[\"NAME\"] = 300] = \"NAME\";\r\n      CLASS_ID[CLASS_ID[\"LOCKED_ON_EDIT\"] = 301] = \"LOCKED_ON_EDIT\";\r\n      CLASS_ID[CLASS_ID[\"VISIBLE_ON_EDIT\"] = 302] = \"VISIBLE_ON_EDIT\";\r\n  })(exports.CLASS_ID || (exports.CLASS_ID = {}));\r\n  /** @public */\r\n  exports.AvatarModifiers = void 0;\r\n  (function (AvatarModifiers) {\r\n      AvatarModifiers[\"HIDE_AVATARS\"] = \"HIDE_AVATARS\";\r\n      AvatarModifiers[\"DISABLE_PASSPORTS\"] = \"DISABLE_PASSPORTS\";\r\n  })(exports.AvatarModifiers || (exports.AvatarModifiers = {}));\r\n  /**\r\n   * Define an area where avatars can be modified in some way\r\n   * @public\r\n   */\r\n  var AvatarModifierArea = /** @class */ (function (_super) {\r\n      __extends(AvatarModifierArea, _super);\r\n      function AvatarModifierArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.modifiers = args.modifiers;\r\n          _this.excludeIds = args.excludeIds;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarModifierArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarModifierArea.prototype, \"modifiers\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarModifierArea.prototype, \"excludeIds\", void 0);\r\n      AvatarModifierArea = __decorate([\r\n          Component('engine.avatarModifierArea', exports.CLASS_ID.AVATAR_MODIFIER_AREA),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], AvatarModifierArea);\r\n      return AvatarModifierArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Transform = /** @class */ (function (_super) {\r\n      __extends(Transform, _super);\r\n      function Transform(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.position = args.position || dist.Vector3.Zero();\r\n          _this.rotation = args.rotation || dist.Quaternion.Identity;\r\n          _this.scale = args.scale || new dist.Vector3(1, 1, 1);\r\n          return _this;\r\n      }\r\n      Object.defineProperty(Transform.prototype, \"eulerAngles\", {\r\n          /**\r\n           * @public\r\n           * The rotation as Euler angles in degrees.\r\n           */\r\n          get: function () {\r\n              return this.rotation.eulerAngles;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * @public\r\n       * Rotates the transform so the forward vector points at target's current position.\r\n       */\r\n      Transform.prototype.lookAt = function (target, worldUp) {\r\n          if (worldUp === void 0) { worldUp = dist.MathTmp.staticUp; }\r\n          var result = new dist.Matrix();\r\n          dist.Matrix.LookAtLHToRef(this.position, target, worldUp, result);\r\n          result.invert();\r\n          dist.Quaternion.FromRotationMatrixToRef(result, this.rotation);\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Applies a rotation of euler angles around the x, y and z axis.\r\n       */\r\n      Transform.prototype.rotate = function (axis, angle) {\r\n          this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Moves the transform in the direction and distance of translation.\r\n       */\r\n      Transform.prototype.translate = function (vec) {\r\n          this.position.addInPlace(vec);\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Vector3)\r\n      ], Transform.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Quaternion)\r\n      ], Transform.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Vector3)\r\n      ], Transform.prototype, \"scale\", void 0);\r\n      Transform = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.TRANSFORM),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], Transform);\r\n      return Transform;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.AttachToAvatarAnchorPointId = void 0;\r\n  (function (AttachToAvatarAnchorPointId) {\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"Position\"] = 0] = \"Position\";\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"NameTag\"] = 1] = \"NameTag\";\r\n      /** @internal */\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"LeftHand\"] = 2] = \"LeftHand\";\r\n      /** @internal */\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"RightHand\"] = 3] = \"RightHand\";\r\n  })(exports.AttachToAvatarAnchorPointId || (exports.AttachToAvatarAnchorPointId = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var AttachToAvatar = /** @class */ (function (_super) {\r\n      __extends(AttachToAvatar, _super);\r\n      function AttachToAvatar(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.avatarId = args.avatarId || '';\r\n          _this.anchorPointId =\r\n              args.anchorPointId || exports.AttachToAvatarAnchorPointId.Position;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AttachToAvatar.prototype, \"avatarId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AttachToAvatar.prototype, \"anchorPointId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AttachToAvatar.prototype, \"avatarSceneId\", void 0);\r\n      AttachToAvatar = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.AVATAR_ATTACH),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], AttachToAvatar);\r\n      return AttachToAvatar;\r\n  }(ObservableComponent));\r\n  /**\r\n   * Billboard defines a behavior that makes the entity face the camera in any moment.\r\n   * @public\r\n   */\r\n  var Billboard = /** @class */ (function (_super) {\r\n      __extends(Billboard, _super);\r\n      function Billboard(x, y, z) {\r\n          if (x === void 0) { x = true; }\r\n          if (y === void 0) { y = true; }\r\n          if (z === void 0) { z = true; }\r\n          var _this = _super.call(this) || this;\r\n          _this.x = true;\r\n          _this.y = true;\r\n          _this.z = true;\r\n          _this.x = x;\r\n          _this.y = y;\r\n          _this.z = z;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"x\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"y\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"z\", void 0);\r\n      Billboard = __decorate([\r\n          Component('engine.billboard', exports.CLASS_ID.BILLBOARD),\r\n          __metadata(\"design:paramtypes\", [Boolean, Boolean, Boolean])\r\n      ], Billboard);\r\n      return Billboard;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Shape = /** @class */ (function (_super) {\r\n      __extends(Shape, _super);\r\n      function Shape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Set to true to turn on the collider for the entity.\r\n           */\r\n          _this.withCollisions = true;\r\n          /**\r\n           * Set to true to turn on the PointerEvents blocking for the entity.\r\n           */\r\n          _this.isPointerBlocker = true;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.visible = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"withCollisions\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"isPointerBlocker\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"visible\", void 0);\r\n      return Shape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BoxShape = /** @class */ (function (_super) {\r\n      __extends(BoxShape, _super);\r\n      function BoxShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], BoxShape.prototype, \"uvs\", void 0);\r\n      BoxShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.BOX_SHAPE)\r\n      ], BoxShape);\r\n      return BoxShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var SphereShape = /** @class */ (function (_super) {\r\n      __extends(SphereShape, _super);\r\n      function SphereShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SphereShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.SPHERE_SHAPE)\r\n      ], SphereShape);\r\n      return SphereShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CircleShape = /** @class */ (function (_super) {\r\n      __extends(CircleShape, _super);\r\n      function CircleShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CircleShape.prototype, \"segments\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CircleShape.prototype, \"arc\", void 0);\r\n      CircleShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CIRCLE_SHAPE)\r\n      ], CircleShape);\r\n      return CircleShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var PlaneShape = /** @class */ (function (_super) {\r\n      __extends(PlaneShape, _super);\r\n      function PlaneShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Sets the horizontal length of the plane. Defaults to 1.\r\n           */\r\n          _this.width = 1;\r\n          /**\r\n           * Sets the vertical length of the plane. Defaults to 1.\r\n           */\r\n          _this.height = 1;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], PlaneShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], PlaneShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], PlaneShape.prototype, \"uvs\", void 0);\r\n      PlaneShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.PLANE_SHAPE)\r\n      ], PlaneShape);\r\n      return PlaneShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var ConeShape = /** @class */ (function (_super) {\r\n      __extends(ConeShape, _super);\r\n      function ConeShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of a truncated cone. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 0;\r\n          /**\r\n           * The radius of the base of the cone. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cone height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cone sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cone around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], ConeShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], ConeShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"arc\", void 0);\r\n      ConeShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CONE_SHAPE)\r\n      ], ConeShape);\r\n      return ConeShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CylinderShape = /** @class */ (function (_super) {\r\n      __extends(CylinderShape, _super);\r\n      function CylinderShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of the cylinder. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 1;\r\n          /**\r\n           * The radius of the base of the cylinder. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cylinder sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], CylinderShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], CylinderShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"arc\", void 0);\r\n      CylinderShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CYLINDER_SHAPE)\r\n      ], CylinderShape);\r\n      return CylinderShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var GLTFShape = /** @class */ (function (_super) {\r\n      __extends(GLTFShape, _super);\r\n      function GLTFShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], GLTFShape.prototype, \"src\", void 0);\r\n      GLTFShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.GLTF_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], GLTFShape);\r\n      return GLTFShape;\r\n  }(Shape));\r\n  /** @public */\r\n  exports.PictureFrameStyle = void 0;\r\n  (function (PictureFrameStyle) {\r\n      PictureFrameStyle[PictureFrameStyle[\"Classic\"] = 0] = \"Classic\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Baroque_Ornament\"] = 1] = \"Baroque_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Diamond_Ornament\"] = 2] = \"Diamond_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Wide\"] = 3] = \"Minimal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Grey\"] = 4] = \"Minimal_Grey\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Blocky\"] = 5] = \"Blocky\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Edges\"] = 6] = \"Gold_Edges\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Carved\"] = 7] = \"Gold_Carved\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Wide\"] = 8] = \"Gold_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Rounded\"] = 9] = \"Gold_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Medium\"] = 10] = \"Metal_Medium\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Wide\"] = 11] = \"Metal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Slim\"] = 12] = \"Metal_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Rounded\"] = 13] = \"Metal_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Pins\"] = 14] = \"Pins\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Black\"] = 15] = \"Minimal_Black\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_White\"] = 16] = \"Minimal_White\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Tape\"] = 17] = \"Tape\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Slim\"] = 18] = \"Wood_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Wide\"] = 19] = \"Wood_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Twigs\"] = 20] = \"Wood_Twigs\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Canvas\"] = 21] = \"Canvas\";\r\n      PictureFrameStyle[PictureFrameStyle[\"None\"] = 22] = \"None\";\r\n  })(exports.PictureFrameStyle || (exports.PictureFrameStyle = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var NFTShape = /** @class */ (function (_super) {\r\n      __extends(NFTShape, _super);\r\n      function NFTShape(src, args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          var color = new dist.Color3(0.6404918, 0.611472, 0.8584906);\r\n          var style = exports.PictureFrameStyle.Classic;\r\n          // check if args is color (backwards compatibility)\r\n          if ('r' in args) {\r\n              color = args;\r\n          }\r\n          else if (args !== null) {\r\n              if (args.color)\r\n                  color = args.color;\r\n              if (args.style)\r\n                  style = args.style;\r\n          }\r\n          _this.color = color;\r\n          _this.style = style;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], NFTShape.prototype, \"src\", void 0);\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], NFTShape.prototype, \"style\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], NFTShape.prototype, \"color\", void 0);\r\n      NFTShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.NFT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], NFTShape);\r\n      return NFTShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Texture = /** @class */ (function (_super) {\r\n      __extends(Texture, _super);\r\n      function Texture(src, opts) {\r\n          var _this = _super.call(this) || this;\r\n          var base64Test = new RegExp('data:[a-z-]+/[a-z-]+;base64');\r\n          if (src.length > 2048 || base64Test.test(src)) {\r\n              log('⚠️🚨 Base64 textures will be deprecated in version 7 of decentraland-ecs');\r\n          }\r\n          _this.src = src;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], Texture.prototype, \"src\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], Texture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], Texture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Texture.prototype, \"hasAlpha\", void 0);\r\n      Texture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.TEXTURE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], Texture);\r\n      return Texture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Animator = /** @class */ (function (_super) {\r\n      __extends(Animator, _super);\r\n      function Animator() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.states = [];\r\n          return _this;\r\n      }\r\n      /**\r\n       * Adds an AnimationState to the animation lists.\r\n       */\r\n      Animator.prototype.addClip = function (clip) {\r\n          var _this = this;\r\n          this.states.push(clip);\r\n          clip.onChange(function () {\r\n              _this.dirty = true;\r\n          });\r\n          clip.owner = this;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the animation clip instance for the specified clip name.\r\n       * If the clip doesn't exist a new one will be created.\r\n       */\r\n      Animator.prototype.getClip = function (clipName) {\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var clip = this.states[i];\r\n              if (clip.clip === clipName) {\r\n                  return clip;\r\n              }\r\n          }\r\n          var newClip = new AnimationState(clipName);\r\n          this.addClip(newClip);\r\n          return newClip;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator\r\n       */\r\n      Animator.prototype.stop = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n              clip.shouldReset = true;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.stop(animationState);\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      Animator.prototype.play = function (clip, reset) {\r\n          if (reset === void 0) { reset = false; }\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var animationState = this.states[i];\r\n              if (animationState.layer === clip.layer && clip !== animationState) {\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n          if (reset)\r\n              clip.shouldReset = true;\r\n          clip.playing = true;\r\n          clip.dirty = true;\r\n          clip.data.nonce = Math.random();\r\n      };\r\n      /**\r\n       * Pauses the animation state, if the clip is null it will pause all animations on this animator\r\n       */\r\n      Animator.prototype.pause = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Array)\r\n      ], Animator.prototype, \"states\", void 0);\r\n      Animator = __decorate([\r\n          Component('engine.animator', exports.CLASS_ID.ANIMATION)\r\n      ], Animator);\r\n      return Animator;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var OBJShape = /** @class */ (function (_super) {\r\n      __extends(OBJShape, _super);\r\n      function OBJShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OBJShape.prototype, \"src\", void 0);\r\n      OBJShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.OBJ_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], OBJShape);\r\n      return OBJShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Font = /** @class */ (function (_super) {\r\n      __extends(Font, _super);\r\n      function Font(src) {\r\n          if (src === void 0) { src = ''; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], Font.prototype, \"src\", void 0);\r\n      Font = __decorate([\r\n          DisposableComponent('engine.font', exports.CLASS_ID.FONT),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], Font);\r\n      return Font;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.Fonts = void 0;\r\n  (function (Fonts) {\r\n      /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/\r\n      Fonts[\"SanFrancisco\"] = \"builtin:SF-UI-Text-Regular SDF\";\r\n      /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/\r\n      Fonts[\"SanFrancisco_Heavy\"] = \"builtin:SF-UI-Text-Heavy SDF\";\r\n      /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/\r\n      Fonts[\"SanFrancisco_Semibold\"] = \"builtin:SF-UI-Text-Semibold SDF\";\r\n      Fonts[\"LiberationSans\"] = \"builtin:LiberationSans SDF\";\r\n      Fonts[\"SansSerif\"] = \"SansSerif\";\r\n      Fonts[\"SansSerif_Heavy\"] = \"SansSerif_Heavy\";\r\n      Fonts[\"SansSerif_Bold\"] = \"SansSerif_Bold\";\r\n      Fonts[\"SansSerif_SemiBold\"] = \"SansSerif_SemiBold\";\r\n  })(exports.Fonts || (exports.Fonts = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var TextShape = /** @class */ (function (_super) {\r\n      __extends(TextShape, _super);\r\n      function TextShape(value) {\r\n          var _this = _super.call(this) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = new dist.Color3(1, 1, 1);\r\n          _this.color = new dist.Color3(1, 1, 1);\r\n          _this.fontSize = 10;\r\n          _this.opacity = 1.0;\r\n          _this.value = '';\r\n          _this.lineSpacing = '0px';\r\n          _this.lineCount = 0;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = new dist.Color3(1, 1, 1);\r\n          _this.hTextAlign = 'center';\r\n          _this.vTextAlign = 'center';\r\n          _this.width = 1;\r\n          _this.height = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.billboard = false;\r\n          _this.visible = true;\r\n          if (value) {\r\n              _this.value = value;\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], TextShape.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"billboard\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"visible\", void 0);\r\n      TextShape = __decorate([\r\n          Component('engine.text', exports.CLASS_ID.TEXT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], TextShape);\r\n      return TextShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.TransparencyMode = void 0;\r\n  (function (TransparencyMode) {\r\n      TransparencyMode[TransparencyMode[\"OPAQUE\"] = 0] = \"OPAQUE\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST\"] = 1] = \"ALPHA_TEST\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_BLEND\"] = 2] = \"ALPHA_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST_AND_BLEND\"] = 3] = \"ALPHA_TEST_AND_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"AUTO\"] = 4] = \"AUTO\";\r\n  })(exports.TransparencyMode || (exports.TransparencyMode = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var Material = /** @class */ (function (_super) {\r\n      __extends(Material, _super);\r\n      function Material() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\r\n           * Defaults to 0.5\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          /**\r\n           * Sets the transparency mode of the material.\r\n           * Defaults to -1.\r\n           *\r\n           * | Value | Type                                           |\r\n           * | ----- | ---------------------------------------------- |\r\n           * | 0     | OPAQUE  (default)                              |\r\n           * | 1     | ALPHATEST                                      |\r\n           * | 2     | ALPHABLEND                                     |\r\n           * | 3     | ALPHATESTANDBLEND                              |\r\n           * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\r\n           */\r\n          _this.transparencyMode = exports.TransparencyMode.AUTO;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"albedoColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3\r\n          /**\r\n           * Specifies the metallic scalar of the metallic/roughness workflow.\r\n           * Can also be used to scale the metalness values of the metallic texture.\r\n           * Defaults to  0.5.\r\n           */\r\n          )\r\n      ], Material.prototype, \"emissiveColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"metallic\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"roughness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3\r\n          /**\r\n           * Intensity of the direct lights e.g. the four lights available in scene.\r\n           * This impacts both the direct diffuse and specular highlights.\r\n           * Defaults to 1.\r\n           */\r\n          )\r\n      ], Material.prototype, \"reflectivityColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"directIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"microSurface\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"emissiveIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"specularIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"albedoTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"alphaTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"emissiveTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"bumpTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Material.prototype, \"castShadows\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"transparencyMode\", void 0);\r\n      Material = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.PBR_MATERIAL)\r\n      ], Material);\r\n      return Material;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BasicMaterial = /** @class */ (function (_super) {\r\n      __extends(BasicMaterial, _super);\r\n      function BasicMaterial() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * A number between 0 and 1.\r\n           * Any pixel with an alpha lower than this value will be shown as transparent.\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], BasicMaterial.prototype, \"texture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], BasicMaterial.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], BasicMaterial.prototype, \"castShadows\", void 0);\r\n      BasicMaterial = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.BASIC_MATERIAL)\r\n      ], BasicMaterial);\r\n      return BasicMaterial;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnUUIDEvent, _super);\r\n      function OnUUIDEvent(callback) {\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.uuid = newId('UUID');\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          _this.callback = callback;\r\n          return _this;\r\n      }\r\n      OnUUIDEvent.uuidEvent = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          if (value instanceof OnUUIDEvent) {\r\n                              this.data[propertyKey] = value.uuid;\r\n                          }\r\n                          else {\r\n                              throw new Error('value is not an OnUUIDEvent');\r\n                          }\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      OnUUIDEvent.prototype.toJSON = function () {\r\n          return { uuid: this.uuid, type: this.type };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Function)\r\n      ], OnUUIDEvent.prototype, \"callback\", void 0);\r\n      return OnUUIDEvent;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnPointerUUIDEvent, _super);\r\n      function OnPointerUUIDEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.button = exports.ActionButton.ANY;\r\n          _this.hoverText = 'Interact';\r\n          _this.distance = 10;\r\n          _this.showFeedback = true;\r\n          return _this;\r\n      }\r\n      OnPointerUUIDEvent.prototype.toJSON = function () {\r\n          return {\r\n              uuid: this.uuid,\r\n              type: this.type,\r\n              button: this.button,\r\n              hoverText: this.hoverText,\r\n              distance: this.distance,\r\n              showFeedback: this.showFeedback\r\n          };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUUIDEvent.prototype, \"button\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUUIDEvent.prototype, \"hoverText\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], OnPointerUUIDEvent.prototype, \"distance\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], OnPointerUUIDEvent.prototype, \"showFeedback\", void 0);\r\n      return OnPointerUUIDEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var OnPointerLock = /** @class */ (function (_super) {\r\n      __extends(OnPointerLock, _super);\r\n      function OnPointerLock() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onPointerLock';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerLock.prototype, \"type\", void 0);\r\n      OnPointerLock = __decorate([\r\n          Component('engine.onPointerLock', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnPointerLock);\r\n      return OnPointerLock;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnAnimationEnd = /** @class */ (function (_super) {\r\n      __extends(OnAnimationEnd, _super);\r\n      function OnAnimationEnd() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onAnimationEnd';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnAnimationEnd.prototype, \"type\", void 0);\r\n      OnAnimationEnd = __decorate([\r\n          Component('engine.onAnimationEnd', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnAnimationEnd);\r\n      return OnAnimationEnd;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var SmartItem = /** @class */ (function (_super) {\r\n      __extends(SmartItem, _super);\r\n      function SmartItem() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SmartItem = __decorate([\r\n          Component('engine.smartItem', exports.CLASS_ID.SMART_ITEM)\r\n      ], SmartItem);\r\n      return SmartItem;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoClip = /** @class */ (function (_super) {\r\n      __extends(VideoClip, _super);\r\n      function VideoClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], VideoClip.prototype, \"url\", void 0);\r\n      VideoClip = __decorate([\r\n          DisposableComponent('engine.VideoClip', exports.CLASS_ID.VIDEO_CLIP),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], VideoClip);\r\n      return VideoClip;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.VideoStatus = void 0;\r\n  (function (VideoStatus) {\r\n      VideoStatus[VideoStatus[\"NONE\"] = 0] = \"NONE\";\r\n      VideoStatus[VideoStatus[\"ERROR\"] = 1] = \"ERROR\";\r\n      VideoStatus[VideoStatus[\"LOADING\"] = 2] = \"LOADING\";\r\n      VideoStatus[VideoStatus[\"READY\"] = 3] = \"READY\";\r\n      VideoStatus[VideoStatus[\"PLAYING\"] = 4] = \"PLAYING\";\r\n      VideoStatus[VideoStatus[\"BUFFERING\"] = 5] = \"BUFFERING\";\r\n  })(exports.VideoStatus || (exports.VideoStatus = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoTexture = /** @class */ (function (_super) {\r\n      __extends(VideoTexture, _super);\r\n      function VideoTexture(videoClip, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.volume = 1;\r\n          _this.playbackRate = 1;\r\n          _this.loop = false;\r\n          _this.seek = -1;\r\n          _this._position = -1;\r\n          _this._videoLength = -1;\r\n          _this._status = exports.VideoStatus.NONE;\r\n          /**\r\n           * Is this VideoTexture playing?\r\n           */\r\n          _this.playing = false;\r\n          if (!(videoClip instanceof VideoClip)) {\r\n              throw new Error(\"Trying to create VideoTexture(VideoClip) with an invalid VideoClip\");\r\n          }\r\n          _this.videoClipId = getComponentId(videoClip);\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      VideoTexture.prototype.play = function () {\r\n          this.playing = true;\r\n      };\r\n      VideoTexture.prototype.pause = function () {\r\n          this.playing = false;\r\n      };\r\n      VideoTexture.prototype.reset = function () {\r\n          this.seekTime(0);\r\n          this.pause();\r\n      };\r\n      VideoTexture.prototype.seekTime = function (seconds) {\r\n          this.seek = seconds;\r\n          this.dirty = true;\r\n          this.data.nonce = Math.random();\r\n      };\r\n      VideoTexture.prototype.toJSON = function () {\r\n          if (this.seek >= 0) {\r\n              // the seek value was changed/used\r\n              var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n              this.seek = -1;\r\n              return ret;\r\n          }\r\n          return _super.prototype.toJSON.call(this);\r\n      };\r\n      VideoTexture.prototype.update = function (videoEvent) {\r\n          if (videoEvent.videoClipId === this.videoClipId) {\r\n              this._status = videoEvent.videoStatus || exports.VideoStatus.NONE;\r\n              this._videoLength = videoEvent.totalVideoLength;\r\n              this._position = videoEvent.currentOffset;\r\n          }\r\n      };\r\n      Object.defineProperty(VideoTexture.prototype, \"position\", {\r\n          get: function () {\r\n              return this._position;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"videoLength\", {\r\n          get: function () {\r\n              return this._videoLength;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"status\", {\r\n          get: function () {\r\n              return this._status;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], VideoTexture.prototype, \"videoClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"playbackRate\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], VideoTexture.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"seek\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], VideoTexture.prototype, \"playing\", void 0);\r\n      VideoTexture = __decorate([\r\n          DisposableComponent('engine.VideoTexture', exports.CLASS_ID.VIDEO_TEXTURE),\r\n          __metadata(\"design:paramtypes\", [VideoClip, Object])\r\n      ], VideoTexture);\r\n      return VideoTexture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var CameraModeArea = /** @class */ (function (_super) {\r\n      __extends(CameraModeArea, _super);\r\n      function CameraModeArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.cameraMode = args.cameraMode;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], CameraModeArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CameraModeArea.prototype, \"cameraMode\", void 0);\r\n      CameraModeArea = __decorate([\r\n          Component('engine.cameraModeArea', exports.CLASS_ID.CAMERA_MODE_AREA),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], CameraModeArea);\r\n      return CameraModeArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AvatarTexture = /** @class */ (function (_super) {\r\n      __extends(AvatarTexture, _super);\r\n      function AvatarTexture(userId, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.userId = userId;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarTexture.prototype, \"userId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarTexture.prototype, \"hasAlpha\", void 0);\r\n      AvatarTexture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.AVATAR_TEXTURE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], AvatarTexture);\r\n      return AvatarTexture;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var Camera = /** @class */ (function () {\r\n      function Camera() {\r\n          var _this = this;\r\n          /** Camera position, relative to the parcel. */\r\n          this.position = new dist.Vector3();\r\n          /** Camera rotation */\r\n          this.rotation = new dist.Quaternion();\r\n          /** Feet position, relative to the parcel.  */\r\n          this.feetPosition = new dist.Vector3();\r\n          /** Camera position, absolute. */\r\n          this.worldPosition = new dist.Vector3();\r\n          // @internal\r\n          this.lastEventPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };\r\n          // @internal\r\n          this._playerHeight = 1.6;\r\n          // @internal\r\n          this._cameraMode = exports.CameraMode.ThirdPerson;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('positionChanged');\r\n              dcl.subscribe('rotationChanged');\r\n              dcl.subscribe('cameraModeChanged');\r\n              dcl.onEvent(function (event) {\r\n                  switch (event.type) {\r\n                      case 'positionChanged':\r\n                          _this.positionChanged(event.data);\r\n                          break;\r\n                      case 'rotationChanged':\r\n                          _this.rotationChanged(event.data);\r\n                          break;\r\n                      case 'cameraModeChanged':\r\n                          _this.cameraModeChanged(event.data);\r\n                          break;\r\n                  }\r\n              });\r\n          }\r\n          Object.defineProperty(this.position, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.position, 'y', {\r\n              get: function () { return _this.lastEventPosition.y; }\r\n          });\r\n          Object.defineProperty(this.position, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'x', {\r\n              get: function () { return _this.lastEventWorldPosition.x; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'y', {\r\n              get: function () { return _this.lastEventWorldPosition.y; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'z', {\r\n              get: function () { return _this.lastEventWorldPosition.z; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'y', {\r\n              get: function () { return _this.lastEventPosition.y - _this.playerHeight; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'x', {\r\n              get: function () { return _this.lastEventRotation.x; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'y', {\r\n              get: function () { return _this.lastEventRotation.y; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'z', {\r\n              get: function () { return _this.lastEventRotation.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'w', {\r\n              get: function () { return _this.lastEventRotation.w; }\r\n          });\r\n      }\r\n      Object.defineProperty(Camera, \"instance\", {\r\n          get: function () {\r\n              if (!Camera._instance) {\r\n                  Camera._instance = new Camera();\r\n              }\r\n              return Camera._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"playerHeight\", {\r\n          /** Player height. */\r\n          get: function () {\r\n              return this._playerHeight;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"cameraMode\", {\r\n          /** @deprecated Use onCameraModeChangedObservable Observable instead. */\r\n          get: function () {\r\n              return this._cameraMode;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      // @internal\r\n      Camera.prototype.positionChanged = function (e) {\r\n          this.lastEventPosition = e.position;\r\n          this.lastEventWorldPosition = e.cameraPosition;\r\n          this._playerHeight = e.playerHeight;\r\n      };\r\n      // @internal\r\n      Camera.prototype.rotationChanged = function (e) {\r\n          this.lastEventRotation = e.quaternion;\r\n      };\r\n      // @internal\r\n      Camera.prototype.cameraModeChanged = function (e) {\r\n          this._cameraMode = e.cameraMode;\r\n      };\r\n      return Camera;\r\n  }());\n\n  /**\r\n   * @internal\r\n   */\r\n  var QueryPrefix;\r\n  (function (QueryPrefix) {\r\n      QueryPrefix[\"HitFirst\"] = \"rqhf\";\r\n      QueryPrefix[\"HitAll\"] = \"rqha\";\r\n  })(QueryPrefix || (QueryPrefix = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PhysicsCast = /** @class */ (function () {\r\n      function PhysicsCast() {\r\n          this.queries = {};\r\n      }\r\n      Object.defineProperty(PhysicsCast, \"instance\", {\r\n          get: function () {\r\n              PhysicsCast.ensureInstance();\r\n              return PhysicsCast._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      PhysicsCast.ensureInstance = function () {\r\n          if (!PhysicsCast._instance) {\r\n              PhysicsCast._instance = new PhysicsCast();\r\n          }\r\n      };\r\n      PhysicsCast.prototype.getRayFromCamera = function (distance) {\r\n          var rotation = Camera.instance.rotation;\r\n          var rotationMat = dist.Matrix.Identity();\r\n          rotation.toRotationMatrix(rotationMat);\r\n          var direction = dist.Vector3.TransformCoordinates(dist.Vector3.Forward(), rotationMat);\r\n          var ray = {\r\n              origin: Camera.instance.position,\r\n              direction: direction,\r\n              distance: distance\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.getRayFromPositions = function (from, to) {\r\n          var direction = to.subtract(from);\r\n          var length = direction.length();\r\n          var ray = {\r\n              origin: from,\r\n              direction: direction.normalize(),\r\n              distance: length\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.hitFirst = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitFirst + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitAll = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitAll + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitFirstAvatar = function (_ray, _hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.hitAllAvatars = function (_ray, _hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      return PhysicsCast;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var RaycastEventSystem = /** @class */ (function () {\r\n      function RaycastEventSystem() {\r\n      }\r\n      RaycastEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(RaycastResponse, this, function (event) {\r\n              if (event.payload.queryType === 'HitFirst') {\r\n                  PhysicsCast.instance.handleRaycastHitFirstResponse(event);\r\n              }\r\n              else if (event.payload.queryType === 'HitAll') {\r\n                  PhysicsCast.instance.handleRaycastHitAllResponse(event);\r\n              }\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('raycastResponse');\r\n          }\r\n      };\r\n      RaycastEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('raycastResponse');\r\n          }\r\n      };\r\n      return RaycastEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventSystem = /** @class */ (function () {\r\n      function PointerEventSystem() {\r\n      }\r\n      PointerEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(PointerEvent, this, function (event) {\r\n              Input.instance.handlePointerEvent(event.payload);\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('pointerUp');\r\n              dcl.subscribe('pointerDown');\r\n              dcl.subscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      PointerEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('pointerUp');\r\n              dcl.unsubscribe('pointerDown');\r\n              dcl.unsubscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      return PointerEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEventSystem = /** @class */ (function () {\r\n      function UUIDEventSystem() {\r\n          this.handlerMap = {};\r\n      }\r\n      UUIDEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(UUIDEvent, this, this.handleEvent);\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onAddEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onRemoveEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              if (event.component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[event.component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.handleEvent = function (event) {\r\n          if (event.uuid in this.handlerMap) {\r\n              var handler = this.handlerMap[event.uuid];\r\n              if (handler) {\r\n                  if (handler.callback && 'call' in handler.callback) {\r\n                      handler.callback(event.payload);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      return UUIDEventSystem;\r\n  }());\r\n  /** @internal */\r\n  var raycastEventSystem = new RaycastEventSystem();\r\n  /** @internal */\r\n  var pointerEventSystem = new PointerEventSystem();\r\n  /** @internal */\r\n  var uuidEventSystem = new UUIDEventSystem();\n\n  /**\r\n   * @public\r\n   */\r\n  var AudioClip = /** @class */ (function (_super) {\r\n      __extends(AudioClip, _super);\r\n      function AudioClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioClip.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioClip.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioClip.prototype, \"loadingCompleteEventId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioClip.prototype, \"volume\", void 0);\r\n      AudioClip = __decorate([\r\n          DisposableComponent('engine.AudioClip', exports.CLASS_ID.AUDIO_CLIP),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], AudioClip);\r\n      return AudioClip;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioSource = /** @class */ (function (_super) {\r\n      __extends(AudioSource, _super);\r\n      function AudioSource(audioClip) {\r\n          var _this = _super.call(this) || this;\r\n          _this.audioClip = audioClip;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          /**\r\n           * Is this AudioSource playing?\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Pitch, default: 1.0, range from 0.0 to MaxFloat\r\n           */\r\n          _this.pitch = 1.0;\r\n          /**\r\n           * Timestamp of when the playOnce was executed to see if we need to start over the audio\r\n           */\r\n          _this.playedAtTimestamp = Date.now();\r\n          if (!(audioClip instanceof AudioClip)) {\r\n              throw new Error(\"Trying to create AudioSource(AudioClip) with an invalid AudioClip\");\r\n          }\r\n          _this.audioClipId = getComponentId(audioClip);\r\n          return _this;\r\n      }\r\n      /**\r\n       * Disables the looping and plays the current source once.\r\n       * If the sound was playing, it stops and starts over.\r\n       */\r\n      AudioSource.prototype.playOnce = function () {\r\n          this.playing = true;\r\n          this.dirty = true;\r\n          this.playedAtTimestamp = Date.now();\r\n          this.data.nonce = Math.random();\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioSource.prototype, \"audioClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioSource.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioSource.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"pitch\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"playedAtTimestamp\", void 0);\r\n      AudioSource = __decorate([\r\n          Component('engine.AudioSource', exports.CLASS_ID.AUDIO_SOURCE),\r\n          __metadata(\"design:paramtypes\", [AudioClip])\r\n      ], AudioSource);\r\n      return AudioSource;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioStream = /** @class */ (function (_super) {\r\n      __extends(AudioStream, _super);\r\n      function AudioStream(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.playing = false;\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          _this.playing = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioStream.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioStream.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioStream.prototype, \"volume\", void 0);\r\n      AudioStream = __decorate([\r\n          Component('engine.AudioStream', exports.CLASS_ID.AUDIO_STREAM),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], AudioStream);\r\n      return AudioStream;\r\n  }(ObservableComponent));\n\n  /**\r\n   * Gizmo identifiers\r\n   * @public\r\n   */\r\n  exports.Gizmo = void 0;\r\n  (function (Gizmo) {\r\n      Gizmo[\"MOVE\"] = \"MOVE\";\r\n      Gizmo[\"ROTATE\"] = \"ROTATE\";\r\n      Gizmo[\"SCALE\"] = \"SCALE\";\r\n      Gizmo[\"NONE\"] = \"NONE\";\r\n  })(exports.Gizmo || (exports.Gizmo = {}));\r\n  /**\r\n   * This event is triggered after the user finalizes dragging a gizmo.\r\n   * @public\r\n   */\r\n  var OnGizmoEvent = /** @class */ (function (_super) {\r\n      __extends(OnGizmoEvent, _super);\r\n      function OnGizmoEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'gizmoEvent';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnGizmoEvent.prototype, \"type\", void 0);\r\n      OnGizmoEvent = __decorate([\r\n          Component('engine.gizmoEvent', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnGizmoEvent);\r\n      return OnGizmoEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\r\n   * @public\r\n   */\r\n  var Gizmos = /** @class */ (function (_super) {\r\n      __extends(Gizmos, _super);\r\n      function Gizmos() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Enable position gizmo\r\n           */\r\n          _this.position = true;\r\n          /**\r\n           * Enable rotation gizmo\r\n           */\r\n          _this.rotation = true;\r\n          /**\r\n           * Enable scale gizmo\r\n           */\r\n          _this.scale = true;\r\n          /**\r\n           * Cycle through gizmos using click.\r\n           */\r\n          _this.cycle = true;\r\n          /**\r\n           * Align the gizmos to match the local reference system\r\n           */\r\n          _this.localReference = false;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"scale\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"cycle\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], Gizmos.prototype, \"selectedGizmo\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"localReference\", void 0);\r\n      Gizmos = __decorate([\r\n          Component('engine.gizmos', exports.CLASS_ID.GIZMOS)\r\n      ], Gizmos);\r\n      return Gizmos;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var OnFocus = /** @class */ (function (_super) {\r\n      __extends(OnFocus, _super);\r\n      function OnFocus(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onFocus';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnFocus.prototype, \"type\", void 0);\r\n      OnFocus = __decorate([\r\n          Component('engine.onFocus', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnFocus);\r\n      return OnFocus;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnTextSubmit = /** @class */ (function (_super) {\r\n      __extends(OnTextSubmit, _super);\r\n      function OnTextSubmit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onTextSubmit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnTextSubmit.prototype, \"type\", void 0);\r\n      OnTextSubmit = __decorate([\r\n          Component('engine.onTextSubmit', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnTextSubmit);\r\n      return OnTextSubmit;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnBlur = /** @class */ (function (_super) {\r\n      __extends(OnBlur, _super);\r\n      function OnBlur(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onBlur';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnBlur.prototype, \"type\", void 0);\r\n      OnBlur = __decorate([\r\n          Component('engine.onBlur', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnBlur);\r\n      return OnBlur;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnEnter = /** @class */ (function (_super) {\r\n      __extends(OnEnter, _super);\r\n      function OnEnter(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnEnter.prototype, \"type\", void 0);\r\n      OnEnter = __decorate([\r\n          Component('engine.onEnter', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnEnter);\r\n      return OnEnter;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnChanged = /** @class */ (function (_super) {\r\n      __extends(OnChanged, _super);\r\n      function OnChanged(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onChange';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnChanged.prototype, \"type\", void 0);\r\n      OnChanged = __decorate([\r\n          Component('engine.onChange', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnChanged);\r\n      return OnChanged;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public @deprecated use `OnPointerDown` instead\r\n   */\r\n  var OnClick = /** @class */ (function (_super) {\r\n      __extends(OnClick, _super);\r\n      function OnClick(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onClick';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnClick.prototype, \"type\", void 0);\r\n      OnClick = __decorate([\r\n          Component('engine.onClick', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnClick);\r\n      return OnClick;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerDown = /** @class */ (function (_super) {\r\n      __extends(OnPointerDown, _super);\r\n      function OnPointerDown(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerDown';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerDown.prototype, \"type\", void 0);\r\n      OnPointerDown = __decorate([\r\n          Component('engine.pointerDown', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerDown);\r\n      return OnPointerDown;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUp = /** @class */ (function (_super) {\r\n      __extends(OnPointerUp, _super);\r\n      function OnPointerUp(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerUp';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUp.prototype, \"type\", void 0);\r\n      OnPointerUp = __decorate([\r\n          Component('engine.pointerUp', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerUp);\r\n      return OnPointerUp;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerHoverEnter = /** @class */ (function (_super) {\r\n      __extends(OnPointerHoverEnter, _super);\r\n      function OnPointerHoverEnter(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerHoverEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerHoverEnter.prototype, \"type\", void 0);\r\n      OnPointerHoverEnter = __decorate([\r\n          Component('engine.pointerHoverEnter', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerHoverEnter);\r\n      return OnPointerHoverEnter;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerHoverExit = /** @class */ (function (_super) {\r\n      __extends(OnPointerHoverExit, _super);\r\n      function OnPointerHoverExit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerHoverExit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          // Changed default distance value for this component because in most cases we probably\r\n          // don't want for the hover exit event to be limited by a distance, and it default value was too small.\r\n          _this.distance = 160;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerHoverExit.prototype, \"type\", void 0);\r\n      OnPointerHoverExit = __decorate([\r\n          Component('engine.pointerHoverExit', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnPointerHoverExit);\r\n      return OnPointerHoverExit;\r\n  }(OnPointerUUIDEvent));\n\n  /**\r\n   * @public\r\n   */\r\n  var UIShape = /** @class */ (function (_super) {\r\n      __extends(UIShape, _super);\r\n      function UIShape(parent) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.name = null;\r\n          _this.visible = true;\r\n          _this.opacity = 1;\r\n          _this.hAlign = 'center';\r\n          _this.vAlign = 'center';\r\n          _this.width = '100px';\r\n          _this.height = '50px';\r\n          _this.positionX = '0px';\r\n          _this.positionY = '0px';\r\n          _this.isPointerBlocker = true;\r\n          if (parent) {\r\n              _this._parent = parent;\r\n              _this.data.parentComponent = getComponentId(parent);\r\n          }\r\n          return _this;\r\n      }\r\n      Object.defineProperty(UIShape.prototype, \"parent\", {\r\n          get: function () {\r\n              return this._parent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(UIShape.prototype, \"parentComponent\", {\r\n          // @internal\r\n          get: function () {\r\n              return this.data.parentComponent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIShape.prototype, \"visible\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIShape.prototype, \"hAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIShape.prototype, \"vAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"positionX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"positionY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIShape.prototype, \"isPointerBlocker\", void 0);\r\n      return UIShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIFullScreen = /** @class */ (function (_super) {\r\n      __extends(UIFullScreen, _super);\r\n      function UIFullScreen() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIFullScreen = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_FULLSCREEN_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UIFullScreen);\r\n      return UIFullScreen;\r\n  }(UIShape));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIWorldSpace = /** @class */ (function (_super) {\r\n      __extends(UIWorldSpace, _super);\r\n      function UIWorldSpace() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIWorldSpace = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_WORLD_SPACE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UIWorldSpace);\r\n      return UIWorldSpace;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UICanvas = /** @class */ (function (_super) {\r\n      __extends(UICanvas, _super);\r\n      function UICanvas() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UICanvas = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SCREEN_SPACE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UICanvas);\r\n      return UICanvas;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerRect = /** @class */ (function (_super) {\r\n      __extends(UIContainerRect, _super);\r\n      function UIContainerRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.thickness = 0;\r\n          _this.color = dist.Color4.Clear();\r\n          _this.alignmentUsesSize = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerRect.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIContainerRect.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerRect.prototype, \"alignmentUsesSize\", void 0);\r\n      UIContainerRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_RECT)\r\n      ], UIContainerRect);\r\n      return UIContainerRect;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.UIStackOrientation = void 0;\r\n  (function (UIStackOrientation) {\r\n      UIStackOrientation[UIStackOrientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\r\n      UIStackOrientation[UIStackOrientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\r\n  })(exports.UIStackOrientation || (exports.UIStackOrientation = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerStack = /** @class */ (function (_super) {\r\n      __extends(UIContainerStack, _super);\r\n      function UIContainerStack() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.adaptWidth = true;\r\n          _this.adaptHeight = true;\r\n          _this.color = dist.Color4.Clear();\r\n          _this.stackOrientation = exports.UIStackOrientation.VERTICAL;\r\n          _this.spacing = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerStack.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerStack.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIContainerStack.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerStack.prototype, \"stackOrientation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerStack.prototype, \"spacing\", void 0);\r\n      UIContainerStack = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_STACK)\r\n      ], UIContainerStack);\r\n      return UIContainerStack;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIButton = /** @class */ (function (_super) {\r\n      __extends(UIButton, _super);\r\n      function UIButton() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.fontSize = 10;\r\n          _this.fontWeight = 'normal';\r\n          _this.thickness = 0;\r\n          _this.cornerRadius = 0;\r\n          _this.color = dist.Color4.White();\r\n          _this.background = dist.Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.Black();\r\n          _this.text = 'button';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIButton.prototype, \"fontWeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"cornerRadius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"background\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIButton.prototype, \"text\", void 0);\r\n      UIButton = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_BUTTON_SHAPE)\r\n      ], UIButton);\r\n      return UIButton;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIText = /** @class */ (function (_super) {\r\n      __extends(UIText, _super);\r\n      function UIText() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = dist.Color4.White();\r\n          _this.color = dist.Color4.White();\r\n          _this.fontSize = 10;\r\n          _this.fontAutoSize = false;\r\n          _this.value = '';\r\n          _this.lineSpacing = 0;\r\n          _this.lineCount = 0;\r\n          _this.adaptWidth = false;\r\n          _this.adaptHeight = false;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.Black();\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"fontAutoSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], UIText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingLeft\", void 0);\r\n      UIText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_TEXT_SHAPE)\r\n      ], UIText);\r\n      return UIText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIInputText = /** @class */ (function (_super) {\r\n      __extends(UIInputText, _super);\r\n      function UIInputText(parent) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = dist.Color4.Black();\r\n          _this.color = dist.Color4.Clear();\r\n          _this.fontSize = 10;\r\n          _this.value = '';\r\n          _this.placeholder = '';\r\n          _this.margin = 10;\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.focusedBackground = dist.Color4.Black();\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onTextSubmit = null;\r\n          _this.onChanged = null;\r\n          _this.onFocus = null;\r\n          _this.onBlur = null;\r\n          _this.onTextChanged = new OnChanged(function (e) {\r\n              var _a = e.value, value = _a.value, isSubmit = _a.isSubmit;\r\n              // NOTE: here we want to keep the same `dirty` state as before changing `this.value`\r\n              // because changing `this.value` will set the component as `dirty` and send a message to the renderer with it value\r\n              // and that message is unnecesary (if the only thing that have changed is `this.value`) since that new value has come from the renderer itself\r\n              var isDirty = _this.dirty;\r\n              _this.value = value;\r\n              _this.dirty = isDirty;\r\n              if (isSubmit && _this.onTextSubmit) {\r\n                  var onSubmitValue = { text: value };\r\n                  _this.onTextSubmit.callback(onSubmitValue);\r\n              }\r\n              else if (!isSubmit && _this.onChanged) {\r\n                  var onChangeValue = {\r\n                      value: value,\r\n                      pointerId: e.pointerId\r\n                  };\r\n                  _this.onChanged.callback(onChangeValue);\r\n              }\r\n          });\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], UIInputText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"placeholder\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"margin\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"focusedBackground\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIInputText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", OnChanged)\r\n      ], UIInputText.prototype, \"onTextChanged\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIInputText.prototype, \"onFocus\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIInputText.prototype, \"onBlur\", void 0);\r\n      UIInputText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_INPUT_TEXT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], UIInputText);\r\n      return UIInputText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIImage = /** @class */ (function (_super) {\r\n      __extends(UIImage, _super);\r\n      function UIImage(parent, source) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.sourceLeft = 0;\r\n          _this.sourceTop = 0;\r\n          _this.sourceWidth = 1;\r\n          _this.sourceHeight = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.sizeInPixels = true;\r\n          _this.onClick = null;\r\n          _this.source = source;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIImage.prototype, \"source\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIImage.prototype, \"sizeInPixels\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIImage.prototype, \"onClick\", void 0);\r\n      UIImage = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_IMAGE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [UIShape, Object])\r\n      ], UIImage);\r\n      return UIImage;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIScrollRect = /** @class */ (function (_super) {\r\n      __extends(UIScrollRect, _super);\r\n      function UIScrollRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.valueX = 0;\r\n          _this.valueY = 0;\r\n          _this.backgroundColor = dist.Color4.Clear();\r\n          _this.isHorizontal = false;\r\n          _this.isVertical = false;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onChanged = null;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"valueX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"valueY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIScrollRect.prototype, \"backgroundColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIScrollRect.prototype, \"isHorizontal\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIScrollRect.prototype, \"isVertical\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIScrollRect.prototype, \"onChanged\", void 0);\r\n      UIScrollRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SLIDER_SHAPE)\r\n      ], UIScrollRect);\r\n      return UIScrollRect;\r\n  }(UIShape));\n\n  /**\r\n   * @public\r\n   */\r\n  var AvatarShape = /** @class */ (function (_super) {\r\n      __extends(AvatarShape, _super);\r\n      function AvatarShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.useDummyModel = false;\r\n          _this.talking = false;\r\n          return _this;\r\n      }\r\n      AvatarShape_1 = AvatarShape;\r\n      AvatarShape.Dummy = function () {\r\n          var avatarShape = new AvatarShape_1();\r\n          avatarShape.useDummyModel = true;\r\n          return avatarShape;\r\n      };\r\n      var AvatarShape_1;\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"id\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"expressionTriggerId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarShape.prototype, \"expressionTriggerTimestamp\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"bodyShape\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarShape.prototype, \"wearables\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarShape.prototype, \"emotes\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"skinColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"hairColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"eyeColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarShape.prototype, \"useDummyModel\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarShape.prototype, \"talking\", void 0);\r\n      AvatarShape = AvatarShape_1 = __decorate([\r\n          Component('engine.avatarShape', exports.CLASS_ID.AVATAR_SHAPE)\r\n      ], AvatarShape);\r\n      return AvatarShape;\r\n  }(ObservableComponent));\n\n  var communicationsController = null;\r\n  var communicationsControllerPromise = null;\r\n  var _messageObserver = null;\r\n  /**\r\n   * @internal\r\n   */\r\n  function getMessageObserver() {\r\n      if (!_messageObserver) {\r\n          _messageObserver = new Observable();\r\n      }\r\n      return _messageObserver;\r\n  }\r\n  function ensureCommunicationsController() {\r\n      if (!communicationsControllerPromise) {\r\n          communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {});\r\n          void communicationsControllerPromise.then(function ($) {\r\n              communicationsController = $;\r\n          });\r\n          var observer_1 = getMessageObserver();\r\n          dcl.subscribe('comms');\r\n          dcl.onEvent(function (event) {\r\n              if (event.type === 'comms') {\r\n                  observer_1.notifyObservers(event.data);\r\n              }\r\n          });\r\n      }\r\n      return communicationsControllerPromise;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var MessageBus = /** @class */ (function () {\r\n      function MessageBus() {\r\n          var _this = this;\r\n          this.messageQueue = [];\r\n          this.connected = false;\r\n          this.flushing = false;\r\n          void ensureCommunicationsController().then(function () {\r\n              _this.connected = true;\r\n              _this.flush();\r\n          });\r\n      }\r\n      MessageBus.prototype.on = function (message, callback) {\r\n          return getMessageObserver().add(function (e) {\r\n              try {\r\n                  var m = JSON.parse(e.message);\r\n                  if (m.message === message) {\r\n                      callback(m.payload, e.sender);\r\n                  }\r\n              }\r\n              catch (e) {\r\n                  dcl.error('Error parsing comms message ' + (e.message || ''), e);\r\n              }\r\n          });\r\n      };\r\n      // @internal\r\n      MessageBus.prototype.sendRaw = function (message) {\r\n          this.messageQueue.push(message);\r\n          if (this.connected) {\r\n              this.flush();\r\n          }\r\n      };\r\n      MessageBus.prototype.emit = function (message, payload) {\r\n          var messageToSend = JSON.stringify({ message: message, payload: payload });\r\n          this.sendRaw(messageToSend);\r\n          getMessageObserver().notifyObservers({\r\n              message: messageToSend,\r\n              sender: 'self'\r\n          });\r\n      };\r\n      MessageBus.prototype.flush = function () {\r\n          var _this = this;\r\n          if (this.messageQueue.length === 0)\r\n              return;\r\n          if (!this.connected)\r\n              return;\r\n          if (!communicationsController)\r\n              return;\r\n          if (this.flushing)\r\n              return;\r\n          var message = this.messageQueue.shift();\r\n          this.flushing = true;\r\n          dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {\r\n              _this.flushing = false;\r\n              _this.flush();\r\n          }, function (e) {\r\n              _this.flushing = false;\r\n              error('Error flushing MessageBus', e);\r\n          });\r\n      };\r\n      return MessageBus;\r\n  }());\n\n  // CORE DEPENDENCIES\r\n  var entity = new Entity('scene');\r\n  entity.uuid = '0';\r\n  // Initialize engine\r\n  /** @public */\r\n  var engine = new Engine(entity);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  DisposableComponent.engine = engine;\r\n  // Initialize Decentraland interface\r\n  if (typeof dcl !== 'undefined') {\r\n      engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity);\r\n      _initEventObservables(dcl);\r\n  }\r\n  // Initialize UUID Events system\r\n  engine.addSystem(uuidEventSystem);\r\n  // Initialize Pointer Events System\r\n  engine.addSystem(pointerEventSystem);\r\n  // Initialize Raycast Events System\r\n  engine.addSystem(raycastEventSystem);\n\n  exports.AVATAR_OBSERVABLE = AVATAR_OBSERVABLE;\n  exports.Angle = dist.Angle;\n  exports.AnimationState = AnimationState;\n  exports.Animator = Animator;\n  exports.Arc2 = dist.Arc2;\n  exports.AttachToAvatar = AttachToAvatar;\n  exports.Attachable = Attachable;\n  exports.AudioClip = AudioClip;\n  exports.AudioSource = AudioSource;\n  exports.AudioStream = AudioStream;\n  exports.AvatarModifierArea = AvatarModifierArea;\n  exports.AvatarShape = AvatarShape;\n  exports.AvatarTexture = AvatarTexture;\n  exports.Axis = dist.Axis;\n  exports.BasicMaterial = BasicMaterial;\n  exports.BezierCurve = dist.BezierCurve;\n  exports.Billboard = Billboard;\n  exports.BoxShape = BoxShape;\n  exports.Camera = Camera;\n  exports.CameraModeArea = CameraModeArea;\n  exports.CircleShape = CircleShape;\n  exports.Color3 = dist.Color3;\n  exports.Color4 = dist.Color4;\n  exports.Component = Component;\n  exports.ComponentAdded = ComponentAdded;\n  exports.ComponentGroup = ComponentGroup;\n  exports.ComponentRemoved = ComponentRemoved;\n  exports.ConeShape = ConeShape;\n  exports.Curve3 = dist.Curve3;\n  exports.CylinderShape = CylinderShape;\n  exports.DEG2RAD = dist.DEG2RAD;\n  exports.DisposableComponent = DisposableComponent;\n  exports.DisposableComponentCreated = DisposableComponentCreated;\n  exports.DisposableComponentRemoved = DisposableComponentRemoved;\n  exports.DisposableComponentUpdated = DisposableComponentUpdated;\n  exports.Engine = Engine;\n  exports.Entity = Entity;\n  exports.Epsilon = dist.Epsilon;\n  exports.EventConstructor = EventConstructor;\n  exports.EventManager = EventManager;\n  exports.Font = Font;\n  exports.Frustum = dist.Frustum;\n  exports.GLTFShape = GLTFShape;\n  exports.Gizmos = Gizmos;\n  exports.GlobalPointerDown = GlobalPointerDown;\n  exports.GlobalPointerUp = GlobalPointerUp;\n  exports.Input = Input;\n  exports.Material = Material;\n  exports.Matrix = dist.Matrix;\n  exports.MessageBus = MessageBus;\n  exports.MultiObserver = MultiObserver;\n  exports.NFTShape = NFTShape;\n  exports.OBJShape = OBJShape;\n  exports.Observable = Observable;\n  exports.ObservableComponent = ObservableComponent;\n  exports.Observer = Observer;\n  exports.ObserverEventState = ObserverEventState;\n  exports.OnAnimationEnd = OnAnimationEnd;\n  exports.OnBlur = OnBlur;\n  exports.OnChanged = OnChanged;\n  exports.OnClick = OnClick;\n  exports.OnEnter = OnEnter;\n  exports.OnFocus = OnFocus;\n  exports.OnGizmoEvent = OnGizmoEvent;\n  exports.OnPointerDown = OnPointerDown;\n  exports.OnPointerHoverEnter = OnPointerHoverEnter;\n  exports.OnPointerHoverExit = OnPointerHoverExit;\n  exports.OnPointerLock = OnPointerLock;\n  exports.OnPointerUUIDEvent = OnPointerUUIDEvent;\n  exports.OnPointerUp = OnPointerUp;\n  exports.OnTextSubmit = OnTextSubmit;\n  exports.OnUUIDEvent = OnUUIDEvent;\n  exports.Orientation = dist.Orientation;\n  exports.ParentChanged = ParentChanged;\n  exports.Path2 = dist.Path2;\n  exports.Path3D = dist.Path3D;\n  exports.PhysicsCast = PhysicsCast;\n  exports.Plane = dist.Plane;\n  exports.PlaneShape = PlaneShape;\n  exports.PointerEvent = PointerEvent;\n  exports.PointerEventComponent = PointerEventComponent;\n  exports.PointerEventSystem = PointerEventSystem;\n  exports.Quaternion = dist.Quaternion;\n  exports.RAD2DEG = dist.RAD2DEG;\n  exports.RaycastEventSystem = RaycastEventSystem;\n  exports.RaycastResponse = RaycastResponse;\n  exports.Scalar = dist.Scalar;\n  exports.Shape = Shape;\n  exports.Size = dist.Size;\n  exports.SmartItem = SmartItem;\n  exports.Space = dist.Space;\n  exports.SphereShape = SphereShape;\n  exports.Subscription = Subscription;\n  exports.TextShape = TextShape;\n  exports.Texture = Texture;\n  exports.ToGammaSpace = dist.ToGammaSpace;\n  exports.ToLinearSpace = dist.ToLinearSpace;\n  exports.Transform = Transform;\n  exports.UIButton = UIButton;\n  exports.UICanvas = UICanvas;\n  exports.UIContainerRect = UIContainerRect;\n  exports.UIContainerStack = UIContainerStack;\n  exports.UIFullScreen = UIFullScreen;\n  exports.UIImage = UIImage;\n  exports.UIInputText = UIInputText;\n  exports.UIScrollRect = UIScrollRect;\n  exports.UIShape = UIShape;\n  exports.UIText = UIText;\n  exports.UIValue = UIValue;\n  exports.UIWorldSpace = UIWorldSpace;\n  exports.UUIDEvent = UUIDEvent;\n  exports.UUIDEventSystem = UUIDEventSystem;\n  exports.Vector2 = dist.Vector2;\n  exports.Vector3 = dist.Vector3;\n  exports.Vector4 = dist.Vector4;\n  exports.VideoClip = VideoClip;\n  exports.VideoTexture = VideoTexture;\n  exports._initEventObservables = _initEventObservables;\n  exports.buildArray = buildArray$1;\n  exports.engine = engine;\n  exports.error = error;\n  exports.executeTask = executeTask;\n  exports.getComponentClassId = getComponentClassId;\n  exports.getComponentId = getComponentId;\n  exports.getComponentName = getComponentName;\n  exports.getMessageObserver = getMessageObserver;\n  exports.isDisposableComponent = isDisposableComponent;\n  exports.log = log;\n  exports.newId = newId;\n  exports.onCameraModeChangedObservable = onCameraModeChangedObservable;\n  exports.onEnterScene = onEnterScene;\n  exports.onEnterSceneObservable = onEnterSceneObservable;\n  exports.onIdleStateChangedObservable = onIdleStateChangedObservable;\n  exports.onLeaveScene = onLeaveScene;\n  exports.onLeaveSceneObservable = onLeaveSceneObservable;\n  exports.onPlayerClickedObservable = onPlayerClickedObservable;\n  exports.onPlayerConnectedObservable = onPlayerConnectedObservable;\n  exports.onPlayerDisconnectedObservable = onPlayerDisconnectedObservable;\n  exports.onPlayerExpressionObservable = onPlayerExpressionObservable;\n  exports.onPointerLockedStateChange = onPointerLockedStateChange;\n  exports.onProfileChanged = onProfileChanged;\n  exports.onRealmChangedObservable = onRealmChangedObservable;\n  exports.onSceneReadyObservable = onSceneReadyObservable;\n  exports.onVideoEvent = onVideoEvent;\n  exports.openExternalURL = openExternalURL;\n  exports.openNFTDialog = openNFTDialog;\n  exports.pointerEventSystem = pointerEventSystem;\n  exports.raycastEventSystem = raycastEventSystem;\n  exports.teleportTo = teleportTo;\n  exports.uuid = uuid;\n  exports.uuidEventSystem = uuidEventSystem;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}(this.self = this.self || {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9lY3MvQXR0YWNoYWJsZS50cyIsIi4uL3NyYy9lY3MvaGVscGVycy50cyIsIi4uL3NyYy9lY3MvRXZlbnRNYW5hZ2VyLnRzIiwiLi4vc3JjL2Vjcy9JRW50aXR5LnRzIiwiLi4vc3JjL2Vjcy9VSVZhbHVlLnRzIiwiLi4vc3JjL2Vjcy9Db21wb25lbnQudHMiLCIuLi9zcmMvZWNzL0NvbXBvbmVudEdyb3VwLnRzIiwiLi4vc3JjL2Vjcy9FbnRpdHkudHMiLCIuLi9zcmMvZWNzL0VuZ2luZS50cyIsIi4uL3NyYy9lY3MvVGFzay50cyIsIi4uL3NyYy9lY3MvT2JzZXJ2YWJsZS50cyIsIi4uL3NyYy9lY3MvVXNlckFjdGlvbnMudHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL0V2ZW50cy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvSW1wbGVtZW50YXRpb24udHMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L3R5cGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvU2NhbGFyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9WZWN0b3I0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9NYXRyaXguanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1F1YXRlcm5pb24uanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1ZlY3RvcjMuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L3ByZWFsbG9jYXRlZFZhcmlhYmxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvQW5nbGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1ZlY3RvcjIuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0FyYzIuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0F4aXMuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0JlemllckN1cnZlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9Db2xvcjQuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0NvbG9yMy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvQ3VydmUzZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvUGxhbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L0Z1cnN0dW0uanMiLCIuLi9ub2RlX21vZHVsZXMvQGRjbC9lY3MtbWF0aC9kaXN0L1BhdGgyZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGNsL2Vjcy1tYXRoL2Rpc3QvUGF0aDNkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9TaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkY2wvZWNzLW1hdGgvZGlzdC9pbmRleC5qcyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQW5pbWF0aW9uU3RhdGUudHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL1R5cGVzLnRzIiwiLi4vc3JjL2RlY2VudHJhbGFuZC9JbnB1dC50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQ29tcG9uZW50cy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQ2FtZXJhLnRzIiwiLi4vc3JjL2RlY2VudHJhbGFuZC9QaHlzaWNzQ2FzdC50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvU3lzdGVtcy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvQXVkaW8udHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL0dpem1vcy50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvVUlFdmVudHMudHMiLCIuLi9zcmMvZGVjZW50cmFsYW5kL1VJU2hhcGVzLnRzIiwiLi4vc3JjL2RlY2VudHJhbGFuZC9BdmF0YXJTaGFwZS50cyIsIi4uL3NyYy9kZWNlbnRyYWxhbmQvTWVzc2FnZUJ1cy50cyIsIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRW50aXR5LCBJRW5naW5lIH0gZnJvbSAnLi9JRW50aXR5J1xuXG4vKipcbiAqIEVudGl0aWVzIGNhbiBiZSBhdHRhY2hlZCB0byBlYWNoIG90aGVyIGJ5IHVzaW5nIHRoZSBgc2V0UGFyZW50YCBtZXRob2QuIEhvd2V2ZXIsIHRoZXJlIGFyZSBjYXNlcyB3aGVyZSB3ZSBtaWdodCB3YW50IHRvIGF0dGFjaCBlbnRpdGllc1xuICogdG8gb3RoZXIgb2JqZWN0cyB0aGF0IGFyZSBub3QgZW50aXRpZXMgY3JlYXRlZCBieSB0aGUgc2FtZSBzY2VuZSAoZm9yIGV4YW1wbGUsIHRoZSBwbGF5ZXIncyBhdmF0YXIpLiBGb3IgdGhvc2UgY2FzZXMsIHdlIGhhdmUgdGhpcyBjbGFzcy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF0dGFjaGFibGUge1xuICAvKiogVXNlZCB0byBhdHRhY2ggZW50aXRpZXMgdG8gdGhlIGF2YXRhci4gRW50aXRpZXMgd2lsbCBmb2xsb3cgdGhlIGF2YXRhciB3aGVuIGl0IG1vdmVzICovXG4gIHN0YXRpYyByZWFkb25seSBBVkFUQVI6IEF0dGFjaGFibGUgPSB7XG4gICAgZ2V0RW50aXR5UmVwcmVzZW50YXRpb246IChlbmdpbmU6IElFbmdpbmUpID0+IGVuZ2luZS5hdmF0YXJFbnRpdHlcbiAgfSBhcyBjb25zdFxuICAvKiogVXNlZCB0byBhdHRhY2ggZW50aXRpZXMgdG8gdGhlIGNhbWVyYS4gV2hlbiBpbiBmaXJzdCBwZXJzb24gbW9kZSwgdGhlIGF0dGFjaGVkIGVudGl0aWVzIHdpbGwgYWxzbyByb3RhdGUgd2l0aCB0aGUgY2FtZXJhICovXG4gIHN0YXRpYyByZWFkb25seSBGSVJTVF9QRVJTT05fQ0FNRVJBOiBBdHRhY2hhYmxlID0ge1xuICAgIGdldEVudGl0eVJlcHJlc2VudGF0aW9uOiAoZW5naW5lOiBJRW5naW5lKSA9PiBlbmdpbmUuZmlyc3RQZXJzb25DYW1lcmFFbnRpdHlcbiAgfSBhcyBjb25zdFxuXG4gIC8vIEBpbnRlcm5hbFxuICAvKiogRW50aXRpZXMgbXVzdCBiZSBhdHRhY2hlZCB0byBlbnRpdGllcywgc28gaW4gdGhpcyBjYXNlLCBlYWNoIGF0dGFjaGFibGUgb2JqZWN0IG11c3QgcmV0dXJuIHRoZSBlbnRpdHkgdXNlZCB0byBwcmVzZW50IGl0ICovXG4gIGFic3RyYWN0IGdldEVudGl0eVJlcHJlc2VudGF0aW9uKGVuZ2luZTogSUVuZ2luZSk6IElFbnRpdHlcbn1cbiIsImxldCBsYXN0R2VuZXJhdGVkSWQgPSAwXG5cbmRlY2xhcmUgbGV0IGNvbnNvbGU6IGFueVxuXG4vKipcbiAqIExvZyBmdW5jdGlvbi4gT25seSB3b3JrcyBpbiBkZWJ1ZyBtb2RlLCBvdGhlcndpc2UgaXQgZG9lcyBub3RoaW5nLlxuICogQHBhcmFtIGFyZ3MgLSBhbnkgbG9nZ2FibGUgcGFyYW1ldGVyXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2coLi4uYXJnczogYW55W10pIHtcbiAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGNsLmxvZyguLi5hcmdzKVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKCdERUJVRzonLCAuLi5hcmdzKVxuICB9XG59XG5cbi8qKlxuICogRXJyb3IgZnVuY3Rpb24uIFByaW50cyBhIGNvbnNvbGUgZXJyb3IuIE9ubHkgd29ya3MgaW4gZGVidWcgbW9kZSwgb3RoZXJ3aXNlIGl0IGRvZXMgbm90aGluZy5cbiAqIEBwYXJhbSBlcnJvciAtIHN0cmluZyBvciBFcnJvciBvYmplY3QuXG4gKiBAcGFyYW0gZGF0YSAtIGFueSBkZWJ1ZyBpbmZvcm1hdGlvbi5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKGVycm9yOiBzdHJpbmcgfCBFcnJvciwgZGF0YT86IGFueSkge1xuICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkY2wuZXJyb3IoZXJyb3IgYXMgYW55LCBkYXRhKVxuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOicsIGVycm9yLCBkYXRhKVxuICB9XG59XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbmV3IHByZWZpeGVkIGlkXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCh0eXBlOiBzdHJpbmcpIHtcbiAgbGFzdEdlbmVyYXRlZElkKytcbiAgaWYgKHR5cGUubGVuZ3RoID09PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignbmV3SWQodHlwZTogc3RyaW5nKTogdHlwZSBjYW5ub3QgYmUgZW1wdHknKVxuICByZXR1cm4gdHlwZSArIGxhc3RHZW5lcmF0ZWRJZC50b1N0cmluZygzNilcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHV1aWQoKSB7XG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMFxuICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpXG4gIH0pXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZ2l2ZW4gc2l6ZSBmaWxsZWQgd2l0aCBlbGVtZW50IGJ1aWx0IGZyb20gdGhlIGdpdmVuIGNvbnN0cnVjdG9yIGFuZCB0aGUgcGFyYW10ZXJzXG4gKiBAcGFyYW0gc2l6ZSAtIHRoZSBudW1iZXIgb2YgZWxlbWVudCB0byBjb25zdHJ1Y3QgYW5kIHB1dCBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSBpdGVtQnVpbGRlciAtIGEgY2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBpdGVtLiBDYWxsZWQgb25jZSBwZXIgYXJyYXkgZW50cnkuXG4gKiBAcmV0dXJucyBhIG5ldyBhcnJheSBmaWxsZWQgd2l0aCBuZXcgb2JqZWN0c1xuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFycmF5PFQ+KHNpemU6IG51bWJlciwgaXRlbUJ1aWxkZXI6ICgpID0+IFQpOiBBcnJheTxUPiB7XG4gIGNvbnN0IGE6IFRbXSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgYS5wdXNoKGl0ZW1CdWlsZGVyKCkpXG4gIH1cbiAgcmV0dXJuIGFcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcGVuRXh0ZXJuYWxVUkwodXJsOiBzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGNsLm9wZW5FeHRlcm5hbFVybCh1cmwpXG4gIH0gZWxzZSB7XG4gICAgZXJyb3IoJ0VSUk9SOiBvcGVuRXh0ZXJuYWxVUkwgZGNsIGlzIHVuZGVmaW5lZCcpXG4gIH1cbn1cblxuLyoqXG4gKiBQb3B1cCBORlQgaW5mbyBkaWFsb2dcbiAqIEBwYXJhbSBzY3IgLSAnZXRoZXJldW06Ly9jb250cmFjdEFkZHJlc3MvdG9rZW5JRCdcbiAqIEBwYXJhbSBjb21tZW50IC0gb3B0aW9uYWwuIGFkZCBhIGNvbW1lbnQuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcGVuTkZURGlhbG9nKHNjcjogc3RyaW5nLCBjb21tZW50OiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCByZWdleCA9IC9ldGhlcmV1bTpcXC9cXC8oLispXFwvKC4rKS9cbiAgICBjb25zdCBtYXRjaGVzID0gc2NyLm1hdGNoKHJlZ2V4KVxuXG4gICAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXMubGVuZ3RoIDwgMykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZGNsLm9wZW5ORlREaWFsb2cobWF0Y2hlc1sxXSwgbWF0Y2hlc1syXSwgY29tbWVudClcbiAgfSBlbHNlIHtcbiAgICBlcnJvcignRVJST1I6IG9wZW5ORlREaWFsb2cgZGNsIGlzIHVuZGVmaW5lZCcpXG4gIH1cbn1cbiIsImltcG9ydCB7IGVycm9yLCBuZXdJZCB9IGZyb20gJy4vaGVscGVycydcblxuY29uc3QgZXZlbnROYW1lU3ltYm9sID0gJ19fZXZlbnRfbmFtZV9fJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRXZlbnRDb25zdHJ1Y3RvcjxUPiB7XG4gIC8vIEBpbnRlcm5hbFxuICBbZXZlbnROYW1lU3ltYm9sXT86IHN0cmluZ1xuICBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVFxufVxuXG5jb25zdCB0YWtlbkV2ZW50TmFtZXM6IHN0cmluZ1tdID0gW11cblxuZnVuY3Rpb24gZ2V0RXZlbnROYW1lRnJvbUNvbnN0cnVjdG9yPFQ+KGN0b3I6IElFdmVudENvbnN0cnVjdG9yPFQ+KTogc3RyaW5nIHtcbiAgaWYgKCEoZXZlbnROYW1lU3ltYm9sIGluIGN0b3IpIHx8IHR5cGVvZiBjdG9yW2V2ZW50TmFtZVN5bWJvbF0gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgRXZlbnRDb25zdHJ1Y3RvciBpcyBub3QgcmVnaXN0ZXJlZCcpXG4gIH1cbiAgcmV0dXJuIGN0b3JbZXZlbnROYW1lU3ltYm9sXSBhcyBhbnkgYXMgc3RyaW5nXG59XG5cbnR5cGUgRXZlbnRMaXN0ZW5lcjxYPiA9IHtcbiAgbGlzdGVuZXI6IFhcbiAgZm46ICh0aGlzOiBYLCBldmVudDogYW55KSA9PiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsIEFycmF5PEV2ZW50TGlzdGVuZXI8YW55Pj4+ID0ge31cblxuICBhZGRMaXN0ZW5lcjxULCBYPihcbiAgICBldmVudENsYXNzOiBJRXZlbnRDb25zdHJ1Y3RvcjxUPixcbiAgICBsaXN0ZW5lcjogWCxcbiAgICBsaXN0ZW5lckZ1bmN0aW9uOiAodGhpczogWCwgZXZlbnQ6IFQpID0+IHZvaWRcbiAgKSB7XG4gICAgaWYgKCFldmVudENsYXNzIHx8IHR5cGVvZiAoZXZlbnRDbGFzcyBhcyBhbnkpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgRXZlbnRDb25zdHJ1Y3RvcicpXG4gICAgfVxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcihldmVudENsYXNzKVxuXG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmICghbGlzdGVuZXJzKSB7XG4gICAgICBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudE5hbWVdID0gW11cbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeCA9IGxpc3RlbmVyc1tpXVxuICAgICAgaWYgKHgubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIGxpc3RlbmVyIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgbGlzdGVuZXIsXG4gICAgICBmbjogbGlzdGVuZXJGdW5jdGlvblxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVtb3ZlTGlzdGVuZXI8WD4obGlzdGVuZXI6IFgsIGV2ZW50Q2xhc3M6IElFdmVudENvbnN0cnVjdG9yPGFueT4pOiBib29sZWFuIHtcbiAgICBpZiAoIWV2ZW50Q2xhc3MgfHwgdHlwZW9mIChldmVudENsYXNzIGFzIGFueSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBFdmVudENvbnN0cnVjdG9yJylcbiAgICB9XG5cbiAgICBjb25zdCBldmVudE5hbWUgPSBnZXRFdmVudE5hbWVGcm9tQ29uc3RydWN0b3IoZXZlbnRDbGFzcylcblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmICghbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeCA9IGxpc3RlbmVyc1tpXVxuICAgICAgaWYgKHgubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZpcmVFdmVudDxUIGV4dGVuZHMgb2JqZWN0PihldmVudDogVCkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGdldEV2ZW50TmFtZUZyb21Db25zdHJ1Y3RvcigoZXZlbnQgYXMgYW55KS5jb25zdHJ1Y3RvcilcblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50TmFtZV1cblxuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbCA9IGxpc3RlbmVyc1tpXVxuICAgICAgICAgIGwuZm4uY2FsbChsLmxpc3RlbmVyLCBldmVudClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFRPRE86IGUgbWF5IG5vdCBiZSBhbiBpbnN0YW5jZSBvZiBFcnJvclxuICAgICAgICAgIGVycm9yKGUgYXMgYW55KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEV2ZW50Q29uc3RydWN0b3IoKTogQ2xhc3NEZWNvcmF0b3Ige1xuICBjb25zdCBldmVudE5hbWUgPSBuZXdJZCgnRVYnKVxuXG4gIGlmICh0YWtlbkV2ZW50TmFtZXMuaW5kZXhPZihldmVudE5hbWUpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGV2ZW50IG5hbWUgJHtldmVudE5hbWV9IGlzIGFscmVhZHkgdGFrZW5gKVxuICB9XG5cbiAgdGFrZW5FdmVudE5hbWVzLnB1c2goZXZlbnROYW1lKVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gIHJldHVybiA8VEZ1bmN0aW9uIGV4dGVuZHMgRnVuY3Rpb24+KHRhcmdldDogVEZ1bmN0aW9uKTogVEZ1bmN0aW9uIHwgdm9pZCA9PiB7XG4gICAgOyh0YXJnZXQgYXMgYW55KVtldmVudE5hbWVTeW1ib2xdID0gZXZlbnROYW1lXG4gICAgcmV0dXJuIHRhcmdldFxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnRMaWtlLCBDb21wb25lbnRDb25zdHJ1Y3RvciB9IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHsgRXZlbnRDb25zdHJ1Y3RvciwgRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi9FdmVudE1hbmFnZXInXG5pbXBvcnQgeyBBdHRhY2hhYmxlIH0gZnJvbSAnLi9BdHRhY2hhYmxlJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU3lzdGVtIHtcbiAgYWN0aXZlPzogYm9vbGVhblxuXG4gIGFjdGl2YXRlPyhlbmdpbmU6IElFbmdpbmUpOiB2b2lkXG4gIGRlYWN0aXZhdGU/KCk6IHZvaWRcblxuICB1cGRhdGU/KGR0OiBudW1iZXIpOiB2b2lkXG5cbiAgb25BZGRFbnRpdHk/KGVudGl0eTogSUVudGl0eSk6IHZvaWRcbiAgb25SZW1vdmVFbnRpdHk/KGVudGl0eTogSUVudGl0eSk6IHZvaWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUVuZ2luZSB7XG4gIHJvb3RFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgZmlyc3RQZXJzb25DYW1lcmFFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgYXZhdGFyRW50aXR5OiBJRW50aXR5XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cblxuICBhZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICByZW1vdmVFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogdm9pZFxuICBhZGRTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZFxuICByZW1vdmVTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKTogdm9pZFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJRW50aXR5IHtcbiAgY2hpbGRyZW46IFJlY29yZDxzdHJpbmcsIElFbnRpdHk+XG4gIGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyIHwgbnVsbFxuICBhbGl2ZTogYm9vbGVhblxuICByZWFkb25seSB1dWlkOiBzdHJpbmdcbiAgcmVhZG9ubHkgY29tcG9uZW50czogUmVjb3JkPHN0cmluZywgYW55PlxuXG4gIGlzQWRkZWRUb0VuZ2luZSgpOiBib29sZWFuXG4gIGdldFBhcmVudCgpOiBJRW50aXR5IHwgbnVsbFxuICBzZXRQYXJlbnQoZTogSUVudGl0eSB8IEF0dGFjaGFibGUgfCBudWxsKTogdm9pZFxuXG4gIGdldENvbXBvbmVudDxUID0gYW55Pihjb21wb25lbnQ6IHN0cmluZyk6IFRcbiAgZ2V0Q29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+KTogVFxuICBnZXRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmdcbiAgKTogVFxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29tcG9uZW50LCBpZiBpdCBkb2Vzbid0IGV4aXN0LCBpdCByZXR1cm5zIG51bGwuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgY2xhc3Mgb3IgbmFtZVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogVCB8IG51bGxcbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+XG4gICk6IFQgfCBudWxsXG4gIGdldENvbXBvbmVudE9yTnVsbDxUIGV4dGVuZHMgQ29tcG9uZW50TGlrZT4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZ1xuICApOiBUIHwgbnVsbFxuXG4gIGdldENvbXBvbmVudE9yQ3JlYXRlPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+ICYgeyBuZXcgKCk6IFQgfVxuICApOiBUXG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjb21wb25lbnQuIElmIHRoZSBjb21wb25lbnQgYWxyZWFkeSBleGlzdCwgaXQgdGhyb3dzIGFuIEVycm9yLlxuICAgKiBAcGFyYW0gY29tcG9uZW50IC0gY29tcG9uZW50IGluc3RhbmNlLlxuICAgKi9cbiAgYWRkQ29tcG9uZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IHZvaWRcblxuICBhZGRDb21wb25lbnRPclJlcGxhY2U8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBUKTogdm9pZFxuXG4gIHJlbW92ZUNvbXBvbmVudChjb21wb25lbnQ6IHN0cmluZywgdHJpZ2dlclJlbW92ZWRFdmVudD86IGJvb2xlYW4pOiB2b2lkXG4gIHJlbW92ZUNvbXBvbmVudDxUIGV4dGVuZHMgb2JqZWN0PihcbiAgICBjb21wb25lbnQ6IFQsXG4gICAgdHJpZ2dlclJlbW92ZWRFdmVudD86IGJvb2xlYW5cbiAgKTogdm9pZFxuICByZW1vdmVDb21wb25lbnQoXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+LFxuICAgIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuXG4gICk6IHZvaWRcbiAgcmVtb3ZlQ29tcG9uZW50KFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG4gICAgY29tcG9uZW50OiBvYmplY3QgfCBzdHJpbmcgfCBGdW5jdGlvbixcbiAgICB0cmlnZ2VyUmVtb3ZlZEV2ZW50OiBhbnlcbiAgKTogdm9pZFxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgaGFzQ29tcG9uZW50PFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cbiAgKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBUKTogYm9vbGVhblxuICBoYXNDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gfCBzdHJpbmdcbiAgKTogYm9vbGVhblxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFJlbW92ZWQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZW50aXR5OiBJRW50aXR5LFxuICAgIHB1YmxpYyBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIGNvbXBvbmVudDogQ29tcG9uZW50TGlrZVxuICApIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBFdmVudENvbnN0cnVjdG9yKClcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRBZGRlZCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbnRpdHk6IElFbnRpdHksXG4gICAgcHVibGljIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBwdWJsaWMgY2xhc3NJZDogbnVtYmVyIHwgbnVsbFxuICApIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBFdmVudENvbnN0cnVjdG9yKClcbmV4cG9ydCBjbGFzcyBQYXJlbnRDaGFuZ2VkIHtcbiAgY29uc3RydWN0b3IocHVibGljIGVudGl0eTogSUVudGl0eSwgcHVibGljIHBhcmVudDogSUVudGl0eSB8IG51bGwpIHtcbiAgICAvLyBzdHViXG4gIH1cbn1cbiIsIi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBVSVZhbHVlVHlwZSB7XG4gIFBFUkNFTlQgPSAwLFxuICBQSVhFTFMgPSAxXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVUlWYWx1ZSB7XG4gIHZhbHVlOiBudW1iZXJcbiAgdHlwZTogVUlWYWx1ZVR5cGVcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgdGhpcy50eXBlID0gVUlWYWx1ZVR5cGUuUElYRUxTXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdmFsdWVBc1N0cmluZzogc3RyaW5nID0gdmFsdWVcbiAgICAgIGlmICh2YWx1ZUFzU3RyaW5nLmluZGV4T2YoJ3B4JykgPiAtMSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBVSVZhbHVlVHlwZS5QSVhFTFNcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVBc1N0cmluZy5pbmRleE9mKCclJykgPiAtMSkge1xuICAgICAgICB0aGlzLnR5cGUgPSBVSVZhbHVlVHlwZS5QRVJDRU5UXG4gICAgICB9XG5cbiAgICAgIHRoaXMudmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlQXNTdHJpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgbGV0IHJlc3VsdDogc3RyaW5nID0gdGhpcy52YWx1ZS50b1N0cmluZygpXG5cbiAgICBpZiAodGhpcy50eXBlID09PSBVSVZhbHVlVHlwZS5QRVJDRU5UKSB7XG4gICAgICByZXN1bHQgKz0gJyUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSAncHgnXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG4iLCJpbXBvcnQgeyBuZXdJZCB9IGZyb20gJy4vaGVscGVycydcbmltcG9ydCB7IEV2ZW50Q29uc3RydWN0b3IgfSBmcm9tICcuL0V2ZW50TWFuYWdlcidcbmltcG9ydCB7IFVJVmFsdWUgfSBmcm9tICcuL1VJVmFsdWUnXG5cbmNvbnN0IGNvbXBvbmVudFN5bWJvbCA9ICdfX25hbWVfX3N5bWJvbF8nXG5jb25zdCBjb21wb25lbnRDbGFzc0lkU3ltYm9sID0gJ19fY2xhc3NJZF9fc3ltYm9sXydcbmNvbnN0IGNvbXBvbmVudElkU3ltYm9sID0gJ19fY29tcG9uZW50X19pZF8nXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudExpa2Uge1xuICAvLyBAaW50ZXJuYWxcbiAgW2NvbXBvbmVudFN5bWJvbF0/OiBzdHJpbmdcbiAgLy8gQGludGVybmFsXG4gIFtjb21wb25lbnRDbGFzc0lkU3ltYm9sXT86IG51bWJlclxuXG4gIC8vIEBpbnRlcm5hbFxuICBhZGRlZFRvRW50aXR5PyhlbnRpdHk6IGFueSk6IHZvaWRcbiAgLy8gQGludGVybmFsXG4gIHJlbW92ZWRGcm9tRW50aXR5PyhlbnRpdHk6IGFueSk6IHZvaWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGlzcG9zYWJsZUNvbXBvbmVudExpa2UgZXh0ZW5kcyBDb21wb25lbnRMaWtlIHtcbiAgLy8gQGludGVybmFsXG4gIFtjb21wb25lbnRJZFN5bWJvbF0/OiBzdHJpbmdcbiAgb25EaXNwb3NlPygpOiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudENvbnN0cnVjdG9yPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPiB7XG4gIC8vIEBpbnRlcm5hbFxuICBbY29tcG9uZW50U3ltYm9sXT86IHN0cmluZ1xuICAvLyBAaW50ZXJuYWxcbiAgW2NvbXBvbmVudENsYXNzSWRTeW1ib2xdPzogbnVtYmVyXG4gIGlzQ29tcG9uZW50PzogYm9vbGVhblxuICBvcmlnaW5hbENsYXNzTmFtZT86IHN0cmluZ1xuICBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEaXNwb3NhYmxlQ29tcG9uZW50Q29uc3RydWN0b3I8XG4gIFQgZXh0ZW5kcyBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZVxuPiB7XG4gIC8vIEBpbnRlcm5hbFxuICBbY29tcG9uZW50U3ltYm9sXT86IHN0cmluZ1xuICAvLyBAaW50ZXJuYWxcbiAgW2NvbXBvbmVudENsYXNzSWRTeW1ib2xdPzogbnVtYmVyXG4gIGlzQ29tcG9uZW50PzogYm9vbGVhblxuICBpc0Rpc3Bvc2FibGVDb21wb25lbnQ/OiB0cnVlXG4gIG9yaWdpbmFsQ2xhc3NOYW1lPzogc3RyaW5nXG4gIG5ldyAoLi4uYXJnczogYW55W10pOiBUXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgRGlzcG9zYWJsZUNvbXBvbmVudENyZWF0ZWQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY29tcG9uZW50SWQ6IHN0cmluZyxcbiAgICBwdWJsaWMgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyBjbGFzc0lkOiBudW1iZXJcbiAgKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARXZlbnRDb25zdHJ1Y3RvcigpXG5leHBvcnQgY2xhc3MgRGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWQge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29tcG9uZW50SWQ6IHN0cmluZykge1xuICAgIC8vIHN0dWJcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNvbXBvbmVudElkOiBzdHJpbmcsXG4gICAgcHVibGljIGNvbXBvbmVudDogRGlzcG9zYWJsZUNvbXBvbmVudExpa2VcbiAgKSB7XG4gICAgLy8gc3R1YlxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gQ29tcG9uZW50KGNvbXBvbmVudE5hbWU6IHN0cmluZywgY2xhc3NJZD86IG51bWJlcikge1xuICByZXR1cm4gZnVuY3Rpb24gPFRGdW5jdGlvbiBleHRlbmRzIENvbXBvbmVudENvbnN0cnVjdG9yPGFueT4+KFxuICAgIHRhcmdldDogVEZ1bmN0aW9uXG4gICk6IFRGdW5jdGlvbiB8IHZvaWQge1xuICAgIGlmICh0YXJnZXQuaXNDb21wb25lbnQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGBZb3UgY2Fubm90IGV4dGVuZCBhIGNvbXBvbmVudC4gVHJ5aW5nIHRvIGV4dGVuZCAke3RhcmdldC5vcmlnaW5hbENsYXNzTmFtZX0gd2l0aDogJHtjb21wb25lbnROYW1lfWBcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBleHRlbmRlZENsYXNzID0gdGFyZ2V0IGFzIGFueVxuXG4gICAgY29uc3QgUmVnaXN0ZXJlZENvbXBvbmVudDogYW55ID0gZnVuY3Rpb24gUmVnaXN0ZXJlZENvbXBvbmVudCgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIGNvbnN0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICBjb25zdCByZXQgPSBuZXcgZXh0ZW5kZWRDbGFzcyguLi5hcmdzKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBjb21wb25lbnRTeW1ib2wsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGNvbXBvbmVudE5hbWVcbiAgICAgIH0pXG5cbiAgICAgIGlmIChjbGFzc0lkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwgY29tcG9uZW50Q2xhc3NJZFN5bWJvbCwge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBjbGFzc0lkXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICBpZiAoY2xhc3NJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBSZWdpc3RlcmVkQ29tcG9uZW50W2NvbXBvbmVudENsYXNzSWRTeW1ib2xdID0gY2xhc3NJZFxuICAgIH1cblxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnRbY29tcG9uZW50U3ltYm9sXSA9IGNvbXBvbmVudE5hbWVcbiAgICBSZWdpc3RlcmVkQ29tcG9uZW50LmlzQ29tcG9uZW50ID0gdHJ1ZVxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQub3JpZ2luYWxDbGFzc05hbWUgPSBjb21wb25lbnROYW1lXG5cbiAgICBSZWdpc3RlcmVkQ29tcG9uZW50LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGVcbiAgICBSZWdpc3RlcmVkQ29tcG9uZW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHRhcmdldFxuXG4gICAgcmV0dXJuIFJlZ2lzdGVyZWRDb21wb25lbnQgYXMgVEZ1bmN0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIERpc3Bvc2FibGVDb21wb25lbnQoY29tcG9uZW50TmFtZTogc3RyaW5nLCBjbGFzc0lkOiBudW1iZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIDxURnVuY3Rpb24gZXh0ZW5kcyBEaXNwb3NhYmxlQ29tcG9uZW50Q29uc3RydWN0b3I8YW55Pj4oXG4gICAgdGFyZ2V0OiBURnVuY3Rpb25cbiAgKTogVEZ1bmN0aW9uIHwgdm9pZCB7XG4gICAgaWYgKHRhcmdldC5pc0NvbXBvbmVudCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgYFlvdSBjYW5ub3QgZXh0ZW5kIGEgY29tcG9uZW50LiBUcnlpbmcgdG8gZXh0ZW5kICR7dGFyZ2V0Lm9yaWdpbmFsQ2xhc3NOYW1lfSB3aXRoOiAke2NvbXBvbmVudE5hbWV9YFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgKGNsYXNzSWQgYXMgYW55KSAhPT0gJ251bWJlcicgfHwgaXNOYU4oY2xhc3NJZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2xhc3NJZDogJHtjbGFzc0lkfSBpcyBhbiBpbnZhbGlkIGludGVnZXJgKVxuICAgIH1cblxuICAgIGNvbnN0IGV4dGVuZGVkQ2xhc3MgPSB0YXJnZXRcblxuICAgIGNvbnN0IFJlZ2lzdGVyZWRDb21wb25lbnQ6IGFueSA9IGZ1bmN0aW9uIFJlZ2lzdGVyZWRDb21wb25lbnQoKSB7XG4gICAgICBpZiAoIURpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnWW91IG5lZWQgdG8gc2V0IGEgRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUgYmVmb3JlIGNyZWF0aW5nIGRpc3Bvc2FibGUgY29tcG9uZW50cydcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgICAgY29uc3QgcmV0ID0gbmV3IGV4dGVuZGVkQ2xhc3MoLi4uKGFyZ3MgYXMgYW55KSlcbiAgICAgIGNvbnN0IGlkID0gbmV3SWQoJ0MnKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBjb21wb25lbnRTeW1ib2wsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IGNvbXBvbmVudE5hbWVcbiAgICAgIH0pXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXQsIGNvbXBvbmVudElkU3ltYm9sLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBpZFxuICAgICAgfSlcblxuICAgICAgaWYgKChjbGFzc0lkIGFzIGFueSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBjb21wb25lbnRDbGFzc0lkU3ltYm9sLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IGNsYXNzSWRcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgaWYgKERpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lKSB7XG4gICAgICAgIERpc3Bvc2FibGVDb21wb25lbnQuZW5naW5lLnJlZ2lzdGVyQ29tcG9uZW50KHJldClcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldFxuICAgIH1cblxuICAgIGlmICgoY2xhc3NJZCBhcyBhbnkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIFJlZ2lzdGVyZWRDb21wb25lbnRbY29tcG9uZW50Q2xhc3NJZFN5bWJvbF0gPSBjbGFzc0lkXG4gICAgfVxuXG4gICAgUmVnaXN0ZXJlZENvbXBvbmVudFtjb21wb25lbnRTeW1ib2xdID0gY29tcG9uZW50TmFtZVxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQuaXNDb21wb25lbnQgPSB0cnVlXG4gICAgUmVnaXN0ZXJlZENvbXBvbmVudC5pc0Rpc3Bvc2FibGVDb21wb25lbnQgPSB0cnVlXG4gICAgUmVnaXN0ZXJlZENvbXBvbmVudC5vcmlnaW5hbENsYXNzTmFtZSA9IGNvbXBvbmVudE5hbWVcblxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZVxuICAgIFJlZ2lzdGVyZWRDb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gdGFyZ2V0XG5cbiAgICByZXR1cm4gUmVnaXN0ZXJlZENvbXBvbmVudCBhcyBURnVuY3Rpb25cbiAgfVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgbmFtZXNwYWNlIERpc3Bvc2FibGVDb21wb25lbnQge1xuICAvKiogQGludGVybmFsICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgZXhwb3J0IGxldCBlbmdpbmU6IGFueSA9IG51bGxcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lPFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+ID0gYW55PihcbiAgY29tcG9uZW50OiBUIHwgQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cbik6IHN0cmluZyB7XG4gIGlmICghY29tcG9uZW50KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb21wb25lbnQgKyAnIGlzIG5vdCBhIGNvbXBvbmVudC4nKVxuICB9XG4gIGlmIChjb21wb25lbnRbY29tcG9uZW50U3ltYm9sXSkge1xuICAgIHJldHVybiBjb21wb25lbnRbY29tcG9uZW50U3ltYm9sXSBhcyBzdHJpbmdcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbXBvbmVudCArICcgaXMgbm90IGEgcmVnaXN0ZXJlZCBjb21wb25lbnQuJylcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0lkPFQgZXh0ZW5kcyBSZWNvcmQ8YW55LCBhbnk+ID0gYW55PihcbiAgY29tcG9uZW50OiBUIHwgQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cbik6IG51bWJlciB8IG51bGwge1xuICBpZiAoIWNvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29tcG9uZW50ICsgJyBpcyBub3QgYSBjb21wb25lbnQuJylcbiAgfVxuICBpZiAoY29tcG9uZW50W2NvbXBvbmVudENsYXNzSWRTeW1ib2xdKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudFtjb21wb25lbnRDbGFzc0lkU3ltYm9sXSBhcyBudW1iZXJcbiAgfVxuICBpZiAoIWNvbXBvbmVudFtjb21wb25lbnRTeW1ib2xdKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb21wb25lbnQgKyAnIGlzIG5vdCBhIHJlZ2lzdGVyZWQgY29tcG9uZW50LicpXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudElkPFQgZXh0ZW5kcyBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZT4oXG4gIGNvbXBvbmVudDogVFxuKTogc3RyaW5nIHtcbiAgaWYgKCFjb21wb25lbnQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNvbXBvbmVudCArICcgaXMgbm90IGEgY29tcG9uZW50LicpXG4gIH1cbiAgaWYgKGNvbXBvbmVudFtjb21wb25lbnRJZFN5bWJvbF0pIHtcbiAgICByZXR1cm4gY29tcG9uZW50W2NvbXBvbmVudElkU3ltYm9sXSBhcyBhbnkgYXMgc3RyaW5nXG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb21wb25lbnQgKyAnIGlzIG5vdCBhIHJlZ2lzdGVyZWQgZGlzcG9zYWJsZSBjb21wb25lbnQuJylcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIE9ic2VydmFibGVDb21wb25lbnRTdWJzY3JpcHRpb24gPSAoXG4gIGtleTogc3RyaW5nLFxuICBuZXdWYWw6IGFueSxcbiAgb2xkVmFsOiBhbnlcbikgPT4gdm9pZFxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvLyBAaW50ZXJuYWxcbiAgZGlydHk6IGJvb2xlYW4gPSBmYWxzZVxuICAvLyBAaW50ZXJuYWxcbiAgZGF0YTogYW55ID0ge31cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBBcnJheTxPYnNlcnZhYmxlQ29tcG9uZW50U3Vic2NyaXB0aW9uPiA9IFtdXG5cbiAgc3RhdGljIGNvbXBvbmVudCh0YXJnZXQ6IE9ic2VydmFibGVDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoZGVsZXRlICh0YXJnZXQgYXMgYW55KVtwcm9wZXJ0eUtleV0pIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudFN5bWJvbCA9IHByb3BlcnR5S2V5ICsgJ18nICsgTWF0aC5yYW5kb20oKVxuICAgICAgOyh0YXJnZXQgYXMgYW55KVtjb21wb25lbnRTeW1ib2xdID0gdW5kZWZpbmVkXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbXBvbmVudFN5bWJvbCwge1xuICAgICAgICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29tcG9uZW50U3ltYm9sKSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LnRvU3RyaW5nKCksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbY29tcG9uZW50U3ltYm9sXVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpc1tjb21wb25lbnRTeW1ib2xdXG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtwcm9wZXJ0eUtleV0gPSBnZXRDb21wb25lbnRJZCh2YWx1ZSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzW2NvbXBvbmVudFN5bWJvbF0gPSB2YWx1ZVxuXG4gICAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldKHByb3BlcnR5S2V5LCB2YWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmaWVsZCh0YXJnZXQ6IE9ic2VydmFibGVDb21wb25lbnQsIHByb3BlcnR5S2V5OiBzdHJpbmcpIHtcbiAgICBpZiAoZGVsZXRlICh0YXJnZXQgYXMgYW55KVtwcm9wZXJ0eUtleV0pIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LnRvU3RyaW5nKCksIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAodGhpczogT2JzZXJ2YWJsZUNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFbcHJvcGVydHlLZXldXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHRoaXM6IE9ic2VydmFibGVDb21wb25lbnQsIHZhbHVlKSB7XG4gICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmRhdGFbcHJvcGVydHlLZXldXG4gICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IHZhbHVlXG5cbiAgICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNbaV0ocHJvcGVydHlLZXksIHZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHVpVmFsdWUodGFyZ2V0OiBPYnNlcnZhYmxlQ29tcG9uZW50LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gICAgaWYgKGRlbGV0ZSAodGFyZ2V0IGFzIGFueSlbcHJvcGVydHlLZXldKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleS50b1N0cmluZygpLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRoaXM6IE9ic2VydmFibGVDb21wb25lbnQpOiBzdHJpbmcgfCBudW1iZXIge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFbcHJvcGVydHlLZXldLnRvU3RyaW5nKClcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodGhpczogT2JzZXJ2YWJsZUNvbXBvbmVudCwgdmFsdWU6IHN0cmluZyB8IG51bWJlcikge1xuICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5kYXRhW3Byb3BlcnR5S2V5XVxuXG4gICAgICAgICAgY29uc3QgZmluYWxWYWx1ZSA9IG5ldyBVSVZhbHVlKHZhbHVlKVxuXG4gICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IGZpbmFsVmFsdWVcblxuICAgICAgICAgIGlmIChmaW5hbFZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldKHByb3BlcnR5S2V5LCBmaW5hbFZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5KHRhcmdldDogT2JzZXJ2YWJsZUNvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmIChkZWxldGUgKHRhcmdldCBhcyBhbnkpW3Byb3BlcnR5S2V5XSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkudG9TdHJpbmcoKSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICh0aGlzOiBPYnNlcnZhYmxlQ29tcG9uZW50KSB7XG4gICAgICAgICAgaWYgKHByb3BlcnR5S2V5IGluIHRoaXMuZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpZWxkICR7cHJvcGVydHlLZXl9IGlzIHVuaW5pdGlhbGl6ZWRgKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3Byb3BlcnR5S2V5XVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0aGlzOiBPYnNlcnZhYmxlQ29tcG9uZW50LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eUtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIGZpZWxkICR7cHJvcGVydHlLZXl9IGlzIHJlYWRvbmx5YClcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IHZhbHVlXG4gICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZShmbjogT2JzZXJ2YWJsZUNvbXBvbmVudFN1YnNjcmlwdGlvbikge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGZuKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEaXNwb3NhYmxlQ29tcG9uZW50KGNvbXBvbmVudDogQ29tcG9uZW50TGlrZSkge1xuICByZXR1cm4gY29tcG9uZW50SWRTeW1ib2wgaW4gY29tcG9uZW50XG59XG4iLCJpbXBvcnQgeyBnZXRDb21wb25lbnROYW1lLCBDb21wb25lbnRDb25zdHJ1Y3RvciB9IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHsgSUVudGl0eSB9IGZyb20gJy4vSUVudGl0eSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRHcm91cCB7XG4gIHJlYWRvbmx5IGVudGl0aWVzOiBSZWFkb25seUFycmF5PElFbnRpdHk+ID0gW11cbiAgcmVhZG9ubHkgcmVxdWlyZXMhOiBSZWFkb25seUFycmF5PENvbXBvbmVudENvbnN0cnVjdG9yPGFueT4+XG4gIHJlYWRvbmx5IHJlcXVpcmVzTmFtZXMhOiBSZWFkb25seUFycmF5PHN0cmluZz5cblxuICBhY3RpdmU6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIHByaXZhdGUgX3JlcXVpcmVzTmFtZXM6IHN0cmluZ1tdID0gW11cblxuICBjb25zdHJ1Y3RvciguLi5yZXF1aXJlczogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PltdKSB7XG4gICAgLy8gdmFsaWRhdGUgcmVxdWlyZXMgbGlzdFxuICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50R3JvdXA6IENvdWxkIG5vdCBsb2FkIHRoZSByZXF1aXJlcyBsaXN0JylcbiAgICB9XG4gICAgaWYgKCEocmVxdWlyZXMgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50R3JvdXA6IHJlcXVpcmVzIGxpc3QgaXMgbm90IGFuIEFycmF5JylcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JlcXVpcmVzJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZXF1aXJlcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXNOYW1lcycsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWlyZXNOYW1lcy5zbGljZSgpXG4gICAgICB9XG4gICAgfSlcblxuICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCByZXF1aXJlcy5sZW5ndGg7IGl4KyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHJlcXVpcmVzW2l4XVxuICAgICAgbGV0IG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsXG5cbiAgICAgIGlmICghY29tcG9uZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgaW52YWxpZGBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ29tcG9uZW50R3JvdXA6IHRoZSByZXF1aXJlZCBjb21wb25lbnQgYXQgbG9jYXRpb24gJHtpeH0gaXMgbm90IHJlZ2lzdGVyZWQgYXMgYSBAQ29tcG9uZW50LiBSZW1lbWJlciB0byBwcm92aWRlIHRoZSBjbGFzcyBvZiB0aGUgY29tcG9uZW50LCBub3QgdGhlIG5hbWVgXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3JlcXVpcmVzTmFtZXMuc29tZSgoJCkgPT4gJCA9PT0gbmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb21wb25lbnRHcm91cDogdGhlIHJlcXVpcmVkIGNvbXBvbmVudCBsaXN0IGhhcyBhIHJlcGVhdGVkIG5hbWUgJHtuYW1lfWBcbiAgICAgICAgKVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXF1aXJlc05hbWVzLnB1c2gobmFtZSlcbiAgICB9XG4gIH1cblxuICBoYXNFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogYm9vbGVhbiB7XG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVybiBmYWxzZVxuXG4gICAgcmV0dXJuIHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpICE9PSAtMVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGFkZEVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBpZiAoIWVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0NvbXBvbmVudEdyb3VwOiBDYW5ub3QgYWRkIGEgZW50aXR5IHRoYXQgaXMgbm90IGFkZGVkIHRvIHRoZSBlbmdpbmUnXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpID09PSAtMSkge1xuICAgICAgOyh0aGlzLmVudGl0aWVzIGFzIElFbnRpdHlbXSkucHVzaChlbnRpdHkpXG4gICAgfVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuZW50aXRpZXMuaW5kZXhPZihlbnRpdHkpXG5cbiAgICBpZiAoaWQgIT09IC0xKSB7XG4gICAgICA7KHRoaXMuZW50aXRpZXMgYXMgSUVudGl0eVtdKS5zcGxpY2UoaWQsIDEpXG4gICAgfVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGNvbXBvbmVudFJlbW92ZWQoZW50aXR5OiBJRW50aXR5LCBjb21wb25lbnQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLl9yZXF1aXJlc05hbWVzLmluZGV4T2YoY29tcG9uZW50KSAhPT0gLTEpIHtcbiAgICAgIHRoaXMucmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICB9XG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgbWVldHNSZXF1aXJlbWVudHMoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZXF1aXJlc05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjb21wb25lbnROYW1lID0gdGhpcy5fcmVxdWlyZXNOYW1lc1tpXVxuICAgICAgaWYgKCEoY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIGdldENvbXBvbmVudE5hbWUsXG4gIENvbXBvbmVudENvbnN0cnVjdG9yLFxuICBnZXRDb21wb25lbnRDbGFzc0lkLFxuICBDb21wb25lbnRMaWtlXG59IGZyb20gJy4vQ29tcG9uZW50J1xuaW1wb3J0IHtcbiAgSUVuZ2luZSxcbiAgSUVudGl0eSxcbiAgQ29tcG9uZW50QWRkZWQsXG4gIENvbXBvbmVudFJlbW92ZWQsXG4gIFBhcmVudENoYW5nZWRcbn0gZnJvbSAnLi9JRW50aXR5J1xuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSAnLi9FdmVudE1hbmFnZXInXG5pbXBvcnQgeyBuZXdJZCwgbG9nIH0gZnJvbSAnLi9oZWxwZXJzJ1xuaW1wb3J0IHsgQXR0YWNoYWJsZSB9IGZyb20gJy4vQXR0YWNoYWJsZSdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRpdHkgaW1wbGVtZW50cyBJRW50aXR5IHtcbiAgcHVibGljIGNoaWxkcmVuOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiA9IHt9XG4gIHB1YmxpYyBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlciB8IG51bGwgPSBudWxsXG4gIHB1YmxpYyBhbGl2ZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgcHVibGljIHJlYWRvbmx5IHV1aWQ6IHN0cmluZyA9IG5ld0lkKCdFJylcbiAgcHVibGljIHJlYWRvbmx5IGNvbXBvbmVudHM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwdWJsaWMgZW5naW5lOiBJRW5naW5lIHwgbnVsbCA9IG51bGxcblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBfcGFyZW50OiBJRW50aXR5IHwgbnVsbCA9IG51bGxcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZT86IHN0cmluZykge1xuICAgIC8vIHN0dWJcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG9yIHJlcGxhY2VzIGEgY29tcG9uZW50IGluIHRoZSBlbnRpdHkuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAqL1xuICBhZGRDb21wb25lbnRPclJlcGxhY2U8VCBleHRlbmRzIG9iamVjdD4oY29tcG9uZW50OiBUKTogVCB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1lvdSBwYXNzZWQgYSBmdW5jdGlvbiBvciBjbGFzcyBhcyBhIGNvbXBvbmVudCwgYW4gaW5zdGFuY2Ugb2YgY29tcG9uZW50IGlzIGV4cGVjdGVkJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgWW91IHBhc3NlZCBhICR7dHlwZW9mIGNvbXBvbmVudH0sIGFuIGluc3RhbmNlIG9mIGNvbXBvbmVudCBpcyBleHBlY3RlZGBcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQpXG5cbiAgICBpZiAodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICBpZiAodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgICAgfVxuICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLCBmYWxzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hZGRDb21wb25lbnQoY29tcG9uZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgYSBjb21wb25lbnQgaXMgcHJlc2VudCBpbiB0aGUgZW50aXR5LlxuICAgKiBAcGFyYW0gY29tcG9uZW50IC0gY29tcG9uZW50IGNsYXNzLCBpbnN0YW5jZSBvciBuYW1lXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gIGhhc0NvbXBvbmVudDxUID0gYW55Pihjb21wb25lbnQ6IHN0cmluZyk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+XG4gICk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBvYmplY3Q+KGNvbXBvbmVudDogVCk6IGJvb2xlYW5cbiAgaGFzQ29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+IHwgc3RyaW5nXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHR5cGVPZkNvbXBvbmVudCA9IHR5cGVvZiBjb21wb25lbnRcblxuICAgIGlmIChcbiAgICAgIHR5cGVPZkNvbXBvbmVudCAhPT0gJ3N0cmluZycgJiZcbiAgICAgIHR5cGVPZkNvbXBvbmVudCAhPT0gJ29iamVjdCcgJiZcbiAgICAgIHR5cGVPZkNvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJ1xuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnRW50aXR5I2hhcyhjb21wb25lbnQpOiBjb21wb25lbnQgaXMgbm90IGEgY2xhc3MsIG5hbWUgb3IgaW5zdGFuY2UnXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKChjb21wb25lbnQgYXMgYW55KSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlXG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lID1cbiAgICAgIHR5cGVPZkNvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAoY29tcG9uZW50IGFzIHN0cmluZylcbiAgICAgICAgOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudCBhcyBhbnkpXG5cbiAgICBjb25zdCBzdG9yZWRDb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cblxuICAgIGlmICghc3RvcmVkQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAodHlwZU9mQ29tcG9uZW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHN0b3JlZENvbXBvbmVudCA9PT0gY29tcG9uZW50XG4gICAgfVxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHN0b3JlZENvbXBvbmVudCBpbnN0YW5jZW9mIChjb21wb25lbnQgYXMgQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29tcG9uZW50LCBpZiBpdCBkb2Vzbid0IGV4aXN0LCBpdCB0aHJvd3MgYW4gRXJyb3IuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgY2xhc3Mgb3IgbmFtZVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50PFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogVFxuICBnZXRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pOiBUXG4gIGdldENvbXBvbmVudDxUIGV4dGVuZHMgQ29tcG9uZW50TGlrZT4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZ1xuICApOiBUIHtcbiAgICBjb25zdCB0eXBlT2ZDb21wb25lbnQgPSB0eXBlb2YgY29tcG9uZW50XG5cbiAgICBpZiAodHlwZU9mQ29tcG9uZW50ICE9PSAnc3RyaW5nJyAmJiB0eXBlT2ZDb21wb25lbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRW50aXR5I2dldChjb21wb25lbnQpOiBjb21wb25lbnQgaXMgbm90IGEgY2xhc3Mgb3IgbmFtZScpXG4gICAgfVxuXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9XG4gICAgICB0eXBlT2ZDb21wb25lbnQgPT09ICdzdHJpbmcnXG4gICAgICAgID8gKGNvbXBvbmVudCBhcyBzdHJpbmcpXG4gICAgICAgIDogZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnQgYXMgYW55KVxuXG4gICAgY29uc3Qgc3RvcmVkQ29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdXG5cbiAgICBpZiAoIXN0b3JlZENvbXBvbmVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ2FuIG5vdCBnZXQgY29tcG9uZW50IFwiJHtjb21wb25lbnROYW1lfVwiIGZyb20gZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCJgXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHN0b3JlZENvbXBvbmVudCBpbnN0YW5jZW9mIChjb21wb25lbnQgYXMgQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pKSB7XG4gICAgICAgIHJldHVybiBzdG9yZWRDb21wb25lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2FuIG5vdCBnZXQgY29tcG9uZW50IFwiJHtjb21wb25lbnROYW1lfVwiIGZyb20gZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCIgKGJ5IGluc3RhbmNlKWBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdG9yZWRDb21wb25lbnRcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29tcG9uZW50LCBpZiBpdCBkb2Vzbid0IGV4aXN0LCBpdCByZXR1cm5zIG51bGwuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgY2xhc3Mgb3IgbmFtZVxuICAgKi9cbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgPSBhbnk+KGNvbXBvbmVudDogc3RyaW5nKTogVCB8IG51bGxcbiAgZ2V0Q29tcG9uZW50T3JOdWxsPFQgZXh0ZW5kcyBDb21wb25lbnRMaWtlPihcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPFQ+XG4gICk6IFQgfCBudWxsXG4gIGdldENvbXBvbmVudE9yTnVsbDxUIGV4dGVuZHMgQ29tcG9uZW50TGlrZT4oXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPiB8IHN0cmluZ1xuICApOiBUIHwgbnVsbCB7XG4gICAgY29uc3QgdHlwZU9mQ29tcG9uZW50ID0gdHlwZW9mIGNvbXBvbmVudFxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCAhPT0gJ3N0cmluZycgJiYgdHlwZU9mQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdFbnRpdHkjZ2V0T3JOdWxsKGNvbXBvbmVudCk6IGNvbXBvbmVudCBpcyBub3QgYSBjbGFzcyBvciBuYW1lJ1xuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPVxuICAgICAgdHlwZU9mQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICAgICAgICA/IChjb21wb25lbnQgYXMgc3RyaW5nKVxuICAgICAgICA6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50IGFzIGFueSlcblxuICAgIGNvbnN0IHN0b3JlZENvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuXG4gICAgaWYgKCFzdG9yZWRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgaWYgKHR5cGVPZkNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHN0b3JlZENvbXBvbmVudCBpbnN0YW5jZW9mIChjb21wb25lbnQgYXMgQ29tcG9uZW50Q29uc3RydWN0b3I8VD4pKSB7XG4gICAgICAgIHJldHVybiBzdG9yZWRDb21wb25lbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3JlZENvbXBvbmVudFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgYSBjb21wb25lbnQsIGlmIGl0IGRvZXNuJ3QgZXhpc3QsIGl0IGNyZWF0ZXMgdGhlIGNvbXBvbmVudCBhbmQgcmV0dXJucyBpdC5cbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIGNvbXBvbmVudCBjbGFzc1xuICAgKi9cbiAgZ2V0Q29tcG9uZW50T3JDcmVhdGU8VCBleHRlbmRzIENvbXBvbmVudExpa2U+KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4gJiB7IG5ldyAoKTogVCB9XG4gICk6IFQge1xuICAgIGlmICh0eXBlb2YgKGNvbXBvbmVudCBhcyBhbnkpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VudGl0eSNnZXRPckNyZWF0ZShjb21wb25lbnQpOiBjb21wb25lbnQgaXMgbm90IGEgY2xhc3MnKVxuICAgIH1cblxuICAgIGxldCByZXQgPSB0aGlzLmdldENvbXBvbmVudE9yTnVsbChjb21wb25lbnQpXG5cbiAgICBpZiAoIXJldCkge1xuICAgICAgcmV0ID0gbmV3IGNvbXBvbmVudCgpXG4gICAgICAvLyBTYWZlLWd1YXJkIHRvIG9ubHkgYWRkIHJlZ2lzdGVyZWQgY29tcG9uZW50cyB0byBlbnRpdGllc1xuICAgICAgZ2V0Q29tcG9uZW50TmFtZShyZXQpXG4gICAgICB0aGlzLmFkZENvbXBvbmVudE9yUmVwbGFjZShyZXQgYXMgYW55KVxuICAgIH1cblxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgY29tcG9uZW50LiBJZiB0aGUgY29tcG9uZW50IGFscmVhZHkgZXhpc3QsIGl0IHRocm93cyBhbiBFcnJvci5cbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICovXG4gIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgb2JqZWN0Pihjb21wb25lbnQ6IFQpOiBUIHtcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0VudGl0eSNhZGQoY29tcG9uZW50KTogWW91IHBhc3NlZCBhIGZ1bmN0aW9uIG9yIGNsYXNzIGFzIGEgY29tcG9uZW50LCBhbiBpbnN0YW5jZSBvZiBjb21wb25lbnQgaXMgZXhwZWN0ZWQnXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50KVxuICAgIGNvbnN0IGNsYXNzSWQgPSBnZXRDb21wb25lbnRDbGFzc0lkKGNvbXBvbmVudClcblxuICAgIGlmICh0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEEgY29tcG9uZW50IG9mIHR5cGUgXCIke2NvbXBvbmVudE5hbWV9XCIgaXMgYWxyZWFkeSBwcmVzZW50IGluIGVudGl0eSBcIiR7dGhpcy5pZGVudGlmaWVyfVwiYFxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuY29tcG9uZW50c1tjb21wb25lbnROYW1lXSA9IGNvbXBvbmVudFxuXG4gICAgaWYgKHRoaXMuZXZlbnRNYW5hZ2VyKSB7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgIG5ldyBDb21wb25lbnRBZGRlZCh0aGlzLCBjb21wb25lbnROYW1lLCBjbGFzc0lkKVxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IHN0b3JlZENvbXBvbmVudCA9IGNvbXBvbmVudCBhcyBDb21wb25lbnRMaWtlXG5cbiAgICBpZiAodHlwZW9mIHN0b3JlZENvbXBvbmVudC5hZGRlZFRvRW50aXR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdG9yZWRDb21wb25lbnQuYWRkZWRUb0VudGl0eSh0aGlzKVxuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBpbnN0YW5jZSBmcm9tIHRoZSBlbnRpdHkuXG4gICAqIEBwYXJhbSBjb21wb25lbnQgLSBjb21wb25lbnQgaW5zdGFuY2UgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSB0cmlnZ2VyUmVtb3ZlZEV2ZW50IC0gc2hvdWxkIHRoaXMgYWN0aW9uIHRyaWdnZXIgYW4gZXZlbnQ/XG4gICAqL1xuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50OiBzdHJpbmcsIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuKTogdm9pZFxuICByZW1vdmVDb21wb25lbnQ8VCBleHRlbmRzIG9iamVjdD4oXG4gICAgY29tcG9uZW50OiBULFxuICAgIHRyaWdnZXJSZW1vdmVkRXZlbnQ/OiBib29sZWFuXG4gICk6IHZvaWRcbiAgcmVtb3ZlQ29tcG9uZW50KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PixcbiAgICB0cmlnZ2VyUmVtb3ZlZEV2ZW50PzogYm9vbGVhblxuICApOiB2b2lkXG4gIHJlbW92ZUNvbXBvbmVudChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuICAgIGNvbXBvbmVudDogb2JqZWN0IHwgc3RyaW5nIHwgRnVuY3Rpb24sXG4gICAgdHJpZ2dlclJlbW92ZWRFdmVudCA9IHRydWVcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgdHlwZU9mQ29tcG9uZW50ID0gdHlwZW9mIGNvbXBvbmVudFxuXG4gICAgaWYgKFxuICAgICAgdHlwZU9mQ29tcG9uZW50ICE9PSAnc3RyaW5nJyAmJlxuICAgICAgdHlwZU9mQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICB0eXBlT2ZDb21wb25lbnQgIT09ICdvYmplY3QnXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdFbnRpdHkjcmVtb3ZlKGNvbXBvbmVudCk6IGNvbXBvbmVudCBpcyBub3QgYSBjbGFzcywgY2xhc3Mgb3IgbmFtZSdcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lID1cbiAgICAgIHR5cGVPZkNvbXBvbmVudCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAoY29tcG9uZW50IGFzIHN0cmluZylcbiAgICAgICAgOiBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudCBhcyBhbnkpXG5cbiAgICBjb25zdCBzdG9yZWRDb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbXG4gICAgICBjb21wb25lbnROYW1lXG4gICAgXSBhcyBDb21wb25lbnRMaWtlIHwgdm9pZFxuXG4gICAgaWYgKCFzdG9yZWRDb21wb25lbnQpIHtcbiAgICAgIGxvZyhcbiAgICAgICAgYEVudGl0eSBXYXJuaW5nOiBUcnlpbmcgdG8gcmVtb3ZlIGluZXhpc3RpbmcgY29tcG9uZW50IFwiJHtjb21wb25lbnROYW1lfVwiIGZyb20gZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCJgXG4gICAgICApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZU9mQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoc3RvcmVkQ29tcG9uZW50IGluc3RhbmNlb2YgKGNvbXBvbmVudCBhcyBDb21wb25lbnRDb25zdHJ1Y3Rvcjxhbnk+KSkge1xuICAgICAgICBkZWxldGUgdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdXG5cbiAgICAgICAgaWYgKHN0b3JlZENvbXBvbmVudCkge1xuICAgICAgICAgIGlmICh0cmlnZ2VyUmVtb3ZlZEV2ZW50ICYmIHRoaXMuZXZlbnRNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgICAgICAgIG5ldyBDb21wb25lbnRSZW1vdmVkKHRoaXMsIGNvbXBvbmVudE5hbWUsIHN0b3JlZENvbXBvbmVudClcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZENvbXBvbmVudC5yZW1vdmVkRnJvbUVudGl0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RvcmVkQ29tcG9uZW50LnJlbW92ZWRGcm9tRW50aXR5KHRoaXMpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nKFxuICAgICAgICAgIGBFbnRpdHkgV2FybmluZzogVHJ5aW5nIHRvIHJlbW92ZSB3cm9uZyAoYnkgY29uc3RydWN0b3IpIGNvbXBvbmVudCBcIiR7Y29tcG9uZW50TmFtZX1cIiBmcm9tIGVudGl0eSBcIiR7dGhpcy5pZGVudGlmaWVyfVwiYFxuICAgICAgICApXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cblxuICAgIGlmIChzdG9yZWRDb21wb25lbnQpIHtcbiAgICAgIGlmICh0cmlnZ2VyUmVtb3ZlZEV2ZW50ICYmIHRoaXMuZXZlbnRNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChcbiAgICAgICAgICBuZXcgQ29tcG9uZW50UmVtb3ZlZCh0aGlzLCBjb21wb25lbnROYW1lLCBzdG9yZWRDb21wb25lbnQpXG4gICAgICAgIClcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzdG9yZWRDb21wb25lbnQucmVtb3ZlZEZyb21FbnRpdHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3RvcmVkQ29tcG9uZW50LnJlbW92ZWRGcm9tRW50aXR5KHRoaXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBlbnRpdHkgaXMgYWxyZWFkeSBhZGRlZCB0byB0aGUgZW5naW5lLlxuICAgKiBSZXR1cm5zIGZhbHNlIGlmIG5vIGVuZ2luZSB3YXMgZGVmaW5lZC5cbiAgICovXG4gIGlzQWRkZWRUb0VuZ2luZSgpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmVuZ2luZSAmJlxuICAgICAgKHRoaXMudXVpZCBpbiB0aGlzLmVuZ2luZS5lbnRpdGllcyB8fCB0aGlzLmVuZ2luZS5yb290RW50aXR5ID09PSB0aGlzKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYXJlbnQgZW50aXR5XG4gICAqL1xuICBzZXRQYXJlbnQoX3BhcmVudDogSUVudGl0eSB8IEF0dGFjaGFibGUgfCBudWxsKTogSUVudGl0eSB7XG4gICAgbGV0IG5ld1BhcmVudDogSUVudGl0eSB8IG51bGxcblxuICAgIC8vIENoZWNrIGlmIHBhcmVudCBpcyBvZiB0eXBlIEF0dGFjaGFibGVcbiAgICBpZiAoX3BhcmVudCAmJiAnZ2V0RW50aXR5UmVwcmVzZW50YXRpb24nIGluIF9wYXJlbnQpIHtcbiAgICAgIGlmICghdGhpcy5lbmdpbmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBJbiBvcmRlciB0byBzZXQgYW4gYXR0YWNoYWJsZSBhcyBwYXJlbnQsIHlvdSBmaXJzdCBuZWVkIHRvIGFkZCB0aGUgZW50aXR5IHRvIHRoZSBlbmdpbmUuYFxuICAgICAgICApXG4gICAgICB9XG4gICAgICBuZXdQYXJlbnQgPSBfcGFyZW50LmdldEVudGl0eVJlcHJlc2VudGF0aW9uKHRoaXMuZW5naW5lKVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQYXJlbnQgPSAhX3BhcmVudCAmJiB0aGlzLmVuZ2luZSA/IHRoaXMuZW5naW5lLnJvb3RFbnRpdHkgOiBfcGFyZW50XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRQYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpXG5cbiAgICBpZiAobmV3UGFyZW50ID09PSB0aGlzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gc2V0IHBhcmVudCBmb3IgZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCI6IEFuIGVudGl0eSBjYW4ndCBzZXQgaXRzZWxmIGFzIGEgaXRzIG93biBwYXJlbnRgXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKG5ld1BhcmVudCA9PT0gY3VycmVudFBhcmVudCkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBjb25zdCBjaXJjdWxhckFuY2VzdG9yID0gdGhpcy5nZXRDaXJjdWxhckFuY2VzdG9yKG5ld1BhcmVudClcblxuICAgIGlmIChjaXJjdWxhckFuY2VzdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gc2V0IHBhcmVudCBmb3IgZW50aXR5IFwiJHt0aGlzLmlkZW50aWZpZXJ9XCI6IENpcmN1bGFyIHBhcmVudCByZWZlcmVuY2VzIGFyZSBub3QgYWxsb3dlZCAoU2VlIGVudGl0eSBcIiR7Y2lyY3VsYXJBbmNlc3Rvcn1cIilgXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgIGRlbGV0ZSBjdXJyZW50UGFyZW50LmNoaWxkcmVuW3RoaXMudXVpZF1cbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgcGFyZW50IGFuZCBjaGlsZCBhcmUgYm90aCBvbiB0aGUgZW5naW5lLCBvciBvZmYgdGhlIGVuZ2luZSwgdG9nZXRoZXJcbiAgICBpZiAobmV3UGFyZW50ICE9PSBudWxsICYmIG5ld1BhcmVudC51dWlkICE9PSAnMCcpIHtcbiAgICAgIGlmICghbmV3UGFyZW50LmlzQWRkZWRUb0VuZ2luZSgpICYmIHRoaXMuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUhLnJlbW92ZUVudGl0eSh0aGlzKVxuICAgICAgfVxuICAgICAgaWYgKG5ld1BhcmVudC5pc0FkZGVkVG9FbmdpbmUoKSAmJiAhdGhpcy5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgICA7KG5ld1BhcmVudCBhcyBFbnRpdHkpLmVuZ2luZSEuYWRkRW50aXR5KHRoaXMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fcGFyZW50ID0gbmV3UGFyZW50IHx8IG51bGxcbiAgICB0aGlzLnJlZ2lzdGVyQXNDaGlsZCgpXG5cbiAgICBpZiAodGhpcy5ldmVudE1hbmFnZXIgJiYgdGhpcy5lbmdpbmUpIHtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChuZXcgUGFyZW50Q2hhbmdlZCh0aGlzLCBuZXdQYXJlbnQpKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgcGFyZW50IGVudGl0eVxuICAgKi9cbiAgZ2V0UGFyZW50KCk6IElFbnRpdHkgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyZW50XG4gIH1cblxuICBwcml2YXRlIGdldCBpZGVudGlmaWVyKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUgfHwgdGhpcy51dWlkXG4gIH1cblxuICBwcml2YXRlIGdldENpcmN1bGFyQW5jZXN0b3IoZW50OiBJRW50aXR5IHwgbnVsbCk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzLmVuZ2luZSA/IHRoaXMuZW5naW5lLnJvb3RFbnRpdHkgOiBudWxsXG4gICAgbGV0IGU6IElFbnRpdHkgfCBudWxsID0gZW50XG5cbiAgICB3aGlsZSAoZSAmJiBlICE9PSByb290KSB7XG4gICAgICBjb25zdCBwYXJlbnQ6IElFbnRpdHkgfCBudWxsID0gZS5nZXRQYXJlbnQoKVxuICAgICAgaWYgKHBhcmVudCA9PT0gdGhpcykge1xuICAgICAgICByZXR1cm4gZS51dWlkXG4gICAgICB9XG4gICAgICBlID0gcGFyZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJBc0NoaWxkKCkge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KClcblxuICAgIGlmICh0aGlzLnV1aWQgJiYgcGFyZW50KSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW5bdGhpcy51dWlkXSA9IHRoaXNcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIElFbmdpbmUsXG4gIElTeXN0ZW0sXG4gIElFbnRpdHksXG4gIENvbXBvbmVudEFkZGVkLFxuICBDb21wb25lbnRSZW1vdmVkXG59IGZyb20gJy4vSUVudGl0eSdcblxuaW1wb3J0IHtcbiAgZ2V0Q29tcG9uZW50TmFtZSxcbiAgZ2V0Q29tcG9uZW50SWQsXG4gIERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZSxcbiAgQ29tcG9uZW50Q29uc3RydWN0b3IsXG4gIERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZCxcbiAgZ2V0Q29tcG9uZW50Q2xhc3NJZFxufSBmcm9tICcuL0NvbXBvbmVudCdcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJy4vRXZlbnRNYW5hZ2VyJ1xuaW1wb3J0IHsgQ29tcG9uZW50R3JvdXAgfSBmcm9tICcuL0NvbXBvbmVudEdyb3VwJ1xuXG5pbXBvcnQgeyBsb2csIGVycm9yIH0gZnJvbSAnLi9oZWxwZXJzJ1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi9FbnRpdHknXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbnR5cGUgU3lzdGVtRW50cnkgPSB7IHN5c3RlbTogSVN5c3RlbTsgcHJpb3JpdHk6IG51bWJlciB9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgRW5naW5lIGltcGxlbWVudHMgSUVuZ2luZSB7XG4gIHJlYWRvbmx5IGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyID0gbmV3IEV2ZW50TWFuYWdlcigpXG4gIHJlYWRvbmx5IHJvb3RFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgZmlyc3RQZXJzb25DYW1lcmFFbnRpdHk6IElFbnRpdHlcbiAgcmVhZG9ubHkgYXZhdGFyRW50aXR5OiBJRW50aXR5XG5cbiAgLy8gQGludGVybmFsXG4gIHJlYWRvbmx5IHN5c3RlbXM6IFN5c3RlbUVudHJ5W10gPSBbXVxuXG4gIC8vIEBpbnRlcm5hbFxuICByZWFkb25seSBlbnRpdHlMaXN0czogUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgSUVudGl0eT4+ID0ge31cblxuICAvLyBAaW50ZXJuYWxcbiAgcmVhZG9ubHkgYWRkZWRTeXN0ZW1zOiBJU3lzdGVtW10gPSBbXVxuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2VudGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiA9IHt9XG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rpc3Bvc2FibGVDb21wb25lbnRzOiBSZWNvcmQ8XG4gICAgc3RyaW5nLFxuICAgIERpc3Bvc2FibGVDb21wb25lbnRMaWtlXG4gID4gPSB7fVxuICBwcml2YXRlIHJlYWRvbmx5IF9jb21wb25lbnRHcm91cHM6IFJlY29yZDxzdHJpbmcsIENvbXBvbmVudEdyb3VwW10+ID0ge31cblxuICAvLyBzeXN0ZW1zIHRoYXQgZG9lc24ndCByZXF1aXJlIGFueSBjb21wb25lbnQgb3IgaGFuZGxlIHRoZWlyIG93biBsb2dpY1xuICBwcml2YXRlIHJlYWRvbmx5IHNpbXBsZVN5c3RlbXM6IElTeXN0ZW1bXSA9IFtdXG5cbiAgZ2V0IGVudGl0aWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnRpdGllcyBhcyBSZWFkb25seTxSZWNvcmQ8c3RyaW5nLCBJRW50aXR5Pj5cbiAgfVxuXG4gIGdldCBkaXNwb3NhYmxlQ29tcG9uZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHMgYXMgUmVhZG9ubHk8XG4gICAgICBSZWNvcmQ8c3RyaW5nLCBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZT5cbiAgICA+XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihyb290RW50aXR5OiBJRW50aXR5KSB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoXG4gICAgICBDb21wb25lbnRBZGRlZCxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLmNvbXBvbmVudEFkZGVkSGFuZGxlclxuICAgIClcbiAgICB0aGlzLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIENvbXBvbmVudFJlbW92ZWQsXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5jb21wb25lbnRSZW1vdmVkSGFuZGxlclxuICAgIClcbiAgICB0aGlzLnJvb3RFbnRpdHkgPSByb290RW50aXR5XG4gICAgdGhpcy5maXJzdFBlcnNvbkNhbWVyYUVudGl0eSA9IG5ldyBFbnRpdHkoKVxuICAgIDsodGhpcy5maXJzdFBlcnNvbkNhbWVyYUVudGl0eSBhcyBhbnkpLnV1aWQgPVxuICAgICAgJ0ZpcnN0UGVyc29uQ2FtZXJhRW50aXR5UmVmZXJlbmNlJ1xuICAgIHRoaXMuYWRkRW50aXR5KHRoaXMuZmlyc3RQZXJzb25DYW1lcmFFbnRpdHkpXG4gICAgdGhpcy5hdmF0YXJFbnRpdHkgPSBuZXcgRW50aXR5KClcbiAgICA7KHRoaXMuYXZhdGFyRW50aXR5IGFzIGFueSkudXVpZCA9ICdBdmF0YXJFbnRpdHlSZWZlcmVuY2UnXG4gICAgdGhpcy5hZGRFbnRpdHkodGhpcy5hdmF0YXJFbnRpdHkpXG4gIH1cblxuICBhZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogSUVudGl0eSB7XG4gICAgY29uc3QgcGFyZW50ID0gZW50aXR5LmdldFBhcmVudCgpXG5cbiAgICBpZiAoZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICByZXR1cm4gZW50aXR5XG4gICAgfVxuXG4gICAgZW50aXR5LmV2ZW50TWFuYWdlciA9IHRoaXMuZXZlbnRNYW5hZ2VyXG4gICAgOyhlbnRpdHkgYXMgRW50aXR5KS5lbmdpbmUgPSB0aGlzXG5cbiAgICB0aGlzLl9lbnRpdGllc1tlbnRpdHkudXVpZF0gPSBlbnRpdHlcblxuICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHNBbmRBZGQoZW50aXR5KVxuXG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIGVudGl0eS5zZXRQYXJlbnQodGhpcy5yb290RW50aXR5KVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXBhcmVudC5pc0FkZGVkVG9FbmdpbmUoKSAmJiBwYXJlbnQgIT09IHRoaXMucm9vdEVudGl0eSkge1xuICAgICAgICBsb2coXG4gICAgICAgICAgJ0VuZ2luZTogd2FybmluZywgYWRkZWQgYW4gZW50aXR5IHdpdGggYSBwYXJlbnQgbm90IHByZXNlbnQgaW4gdGhlIGVuZ2luZS4gUGFyZW50IGlkOiAnICtcbiAgICAgICAgICAgIHBhcmVudC51dWlkXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbnRpdHkuYWxpdmUgPSB0cnVlXG5cbiAgICBmb3IgKGNvbnN0IGkgaW4gZW50aXR5LmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGVudGl0eS5jaGlsZHJlbltpXVxuICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgIGlmICghY2hpbGQuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgICAgICB0aGlzLmFkZEVudGl0eShjaGlsZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbnRpdHlcbiAgfVxuXG4gIHJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpOiBib29sZWFuIHtcbiAgICBjb25zdCBpZCA9IGVudGl0eS51dWlkXG5cbiAgICBpZiAoZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudE5hbWUgaW4gZW50aXR5LmNvbXBvbmVudHMpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50R3JvdXBzID0gdGhpcy5fY29tcG9uZW50R3JvdXBzW2NvbXBvbmVudE5hbWVdXG5cbiAgICAgICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICAgIGZvciAoY29uc3QgZ3JvdXBJbmRleCBpbiBjb21wb25lbnRHcm91cHMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudEdyb3Vwc1tncm91cEluZGV4XS5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2lkXVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2ltcGxlU3lzdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzeXN0ZW0gPSB0aGlzLnNpbXBsZVN5c3RlbXNbaV1cblxuICAgICAgICBpZiAoc3lzdGVtLm9uUmVtb3ZlRW50aXR5KSB7XG4gICAgICAgICAgc3lzdGVtLm9uUmVtb3ZlRW50aXR5KGVudGl0eSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGkgaW4gZW50aXR5LmNoaWxkcmVuKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gZW50aXR5LmNoaWxkcmVuW2ldXG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlRW50aXR5KGNoaWxkKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVudGl0eS5hbGl2ZSA9IGZhbHNlXG4gICAgICBlbnRpdHkuZXZlbnRNYW5hZ2VyID0gbnVsbFxuXG4gICAgICBkZWxldGUgdGhpcy5fZW50aXRpZXNbaWRdXG5cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZygnRW5naW5lOiBUcnlpbmcgdG8gcmVtb3ZlIG5vbiBleGlzdGVudCBlbnRpdHkgZnJvbSBlbmdpbmUuJylcbiAgICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICAgIGxvZyhcbiAgICAgICAgICBgRW5naW5lOiBFbnRpdHkgXCIke2VudGl0eS51dWlkfVwiIGhhcyBub3QgYmVlbiBhZGRlZCB0byBhbnkgZW5naW5lIHlldC5gXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZygnRW5naW5lOiBFbnRpdHkgaWQ6ICcgKyBpZClcbiAgICAgIH1cbiAgICAgIGxvZyhcIkVuZ2luZTogRW50aXR5J3MgY29tcG9uZW50czpcIilcbiAgICAgIGZvciAoY29uc3QgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgICBsb2coY29tcG9uZW50TmFtZSlcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGFkZFN5c3RlbShzeXN0ZW06IElTeXN0ZW0sIHByaW9yaXR5OiBudW1iZXIgPSAwKSB7XG4gICAgaWYgKHRoaXMuYWRkZWRTeXN0ZW1zLmluZGV4T2Yoc3lzdGVtKSAhPT0gLTEpIHtcbiAgICAgIGxvZygnRW5naW5lOiBUcnlpbmcgdG8gYWRkIGEgc3lzdGVtIHRoYXQgaXMgYWxyZWFkeSBhZGRlZC4gQWJvcnRpbmcnKVxuICAgICAgcmV0dXJuIHN5c3RlbVxuICAgIH1cblxuICAgIGlmICh0aGlzLnN5c3RlbXMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN5c3RlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLnN5c3RlbXNbaV1cbiAgICAgICAgY29uc3QgaXNMYXN0ID0gaSA9PT0gdGhpcy5zeXN0ZW1zLmxlbmd0aCAtIDFcblxuICAgICAgICBpZiAoZW50cnkucHJpb3JpdHkgPiBwcmlvcml0eSkge1xuICAgICAgICAgIHRoaXMuYWRkZWRTeXN0ZW1zLnB1c2goc3lzdGVtKVxuICAgICAgICAgIHRoaXMuc3lzdGVtcy5zcGxpY2UoaSwgMCwgeyBzeXN0ZW0sIHByaW9yaXR5IH0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIGlmIChpc0xhc3QpIHtcbiAgICAgICAgICB0aGlzLmFkZGVkU3lzdGVtcy5wdXNoKHN5c3RlbSlcbiAgICAgICAgICB0aGlzLnN5c3RlbXMuc3BsaWNlKGkgKyAxLCAwLCB7IHN5c3RlbSwgcHJpb3JpdHkgfSlcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkZWRTeXN0ZW1zLnB1c2goc3lzdGVtKVxuICAgICAgdGhpcy5zeXN0ZW1zLnNwbGljZSgxLCAwLCB7IHN5c3RlbSwgcHJpb3JpdHkgfSlcbiAgICB9XG5cbiAgICB0aGlzLnJlZ2lzdGVyU3lzdGVtKHN5c3RlbSlcblxuICAgIHJldHVybiBzeXN0ZW1cbiAgfVxuXG4gIHJlbW92ZVN5c3RlbShzeXN0ZW06IElTeXN0ZW0pIHtcbiAgICBjb25zdCBpZHggPSB0aGlzLmFkZGVkU3lzdGVtcy5pbmRleE9mKHN5c3RlbSlcblxuICAgIGlmIChpZHggIT09IC0xKSB7XG4gICAgICBzeXN0ZW0uYWN0aXZlID0gZmFsc2VcblxuICAgICAgaWYgKHN5c3RlbS5kZWFjdGl2YXRlKSB7XG4gICAgICAgIHN5c3RlbS5kZWFjdGl2YXRlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRlZFN5c3RlbXMuc3BsaWNlKGlkeCwgMSlcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN5c3RlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3lzID0gdGhpcy5zeXN0ZW1zW2ldLnN5c3RlbVxuICAgICAgICBpZiAoc3lzID09PSBzeXN0ZW0pIHtcbiAgICAgICAgICB0aGlzLnN5c3RlbXMuc3BsaWNlKGksIDEpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5zeXN0ZW1zKSB7XG4gICAgICBjb25zdCBzeXN0ZW0gPSB0aGlzLnN5c3RlbXNbaV0uc3lzdGVtXG4gICAgICBpZiAoc3lzdGVtLmFjdGl2ZSAmJiBzeXN0ZW0udXBkYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3lzdGVtLnVwZGF0ZShkdClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFRPRE86IGUgbWF5IG5vdCBiZSBhbiBFcnJvclxuICAgICAgICAgIGVycm9yKGUgYXMgYW55KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBnZXRFbnRpdGllc1dpdGhDb21wb25lbnQoY29tcG9uZW50OiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIGdldEVudGl0aWVzV2l0aENvbXBvbmVudChcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudENvbnN0cnVjdG9yPGFueT5cbiAgKTogUmVjb3JkPHN0cmluZywgSUVudGl0eT5cbiAgZ2V0RW50aXRpZXNXaXRoQ29tcG9uZW50KFxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PiB8IHN0cmluZ1xuICApOiBSZWNvcmQ8c3RyaW5nLCBJRW50aXR5PiB7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9XG4gICAgICB0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJyA/IGNvbXBvbmVudCA6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50KVxuXG4gICAgaWYgKGNvbXBvbmVudE5hbWUgaW4gdGhpcy5lbnRpdHlMaXN0cykge1xuICAgICAgcmV0dXJuIHRoaXMuZW50aXR5TGlzdHNbY29tcG9uZW50TmFtZV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICh0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdID0ge30pXG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJDb21wb25lbnQoY29tcG9uZW50OiBEaXNwb3NhYmxlQ29tcG9uZW50TGlrZSkge1xuICAgIGNvbnN0IGlkID0gZ2V0Q29tcG9uZW50SWQoY29tcG9uZW50KVxuICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudClcbiAgICBjb25zdCBjbGFzc0lkID0gZ2V0Q29tcG9uZW50Q2xhc3NJZChjb21wb25lbnQpXG4gICAgdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHNbaWRdID0gY29tcG9uZW50XG4gICAgaWYgKGNsYXNzSWQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChcbiAgICAgICAgbmV3IERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkKGlkLCBuYW1lLCBjbGFzc0lkKVxuICAgICAgKVxuICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZUV2ZW50KG5ldyBEaXNwb3NhYmxlQ29tcG9uZW50VXBkYXRlZChpZCwgY29tcG9uZW50KSlcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlQ29tcG9uZW50KGNvbXBvbmVudDogRGlzcG9zYWJsZUNvbXBvbmVudExpa2UpIHtcbiAgICBjb25zdCBpZCA9IGdldENvbXBvbmVudElkKGNvbXBvbmVudClcblxuICAgIGlmIChkZWxldGUgdGhpcy5fZGlzcG9zYWJsZUNvbXBvbmVudHNbaWRdKSB7XG4gICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlRXZlbnQobmV3IERpc3Bvc2FibGVDb21wb25lbnRSZW1vdmVkKGlkKSlcblxuICAgICAgaWYgKGNvbXBvbmVudC5vbkRpc3Bvc2UpIHtcbiAgICAgICAgY29tcG9uZW50Lm9uRGlzcG9zZSgpXG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHVwZGF0ZUNvbXBvbmVudChjb21wb25lbnQ6IERpc3Bvc2FibGVDb21wb25lbnRMaWtlKSB7XG4gICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZUV2ZW50KFxuICAgICAgbmV3IERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkKGdldENvbXBvbmVudElkKGNvbXBvbmVudCksIGNvbXBvbmVudClcbiAgICApXG4gIH1cblxuICBnZXRDb21wb25lbnRHcm91cCguLi5yZXF1aXJlczogQ29tcG9uZW50Q29uc3RydWN0b3I8YW55PltdKSB7XG4gICAgbGV0IGNvbXBvbmVudEdyb3VwID0gdW5kZWZpbmVkXG5cbiAgICAvLyBSZXR1cm4gYW4gYWxyZWFkeSBjcmVhdGVkIGNvbXBvbmVudC1ncm91cCBpZiBpdCBhbHJlYWR5IGV4aXN0c1xuICAgIGlmIChyZXF1aXJlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyAxLiBnZXQgY29tcG9uZW50IGdyb3VwcyBmb3IgZmlyc3QgcmVxdWlyZVxuICAgICAgY29uc3QgY29tcG9uZW50R3JvdXBzID1cbiAgICAgICAgdGhpcy5fY29tcG9uZW50R3JvdXBzW2dldENvbXBvbmVudE5hbWUocmVxdWlyZXNbMF0pXVxuXG4gICAgICBpZiAoY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudHMgPSByZXF1aXJlcy5zbGljZSgpXG5cbiAgICAgICAgLy8gMi4gc2VhcmNoIGZvciBhIGNvbXBvbmVudCBncm91cCB0aGF0IGhhcyBhbGwgdGhlIHNhbWUgcmVxdWlyZW1lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50R3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdHJhdmVyc2VkQ29tcG9uZW50R3JvdXAgPSBjb21wb25lbnRHcm91cHNbaV1cblxuICAgICAgICAgIGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gdHJhdmVyc2VkQ29tcG9uZW50R3JvdXAucmVxdWlyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbXBvbmVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRyYXZlcnNlZENvbXBvbmVudEdyb3VwLnJlcXVpcmVzLmluZGV4T2YoY29tcG9uZW50c1tqXSkgPT09IC0xXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGlmIChqID09PSBjb21wb25lbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRHcm91cCA9IHRyYXZlcnNlZENvbXBvbmVudEdyb3VwXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEdyb3VwKSBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb21wb25lbnRHcm91cCkge1xuICAgICAgLy8gMy4gRm91bmQgYW4gZXhpc3RlbnQgY29tcG9uZW50IGdyb3VwIHdpdGggdGhlIGV4YWN0IHNhbWUgcmVxdWlyZW1lbnRzXG4gICAgICByZXR1cm4gY29tcG9uZW50R3JvdXBcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UgY3JlYXRlIGFuZCBzdG9yZSBpdFxuICAgIGNvbXBvbmVudEdyb3VwID0gbmV3IENvbXBvbmVudEdyb3VwKC4uLnJlcXVpcmVzKVxuXG4gICAgY29tcG9uZW50R3JvdXAuYWN0aXZlID0gdHJ1ZVxuXG4gICAgY29uc3QgcmVxdWlyZXNOYW1lcyA9IGNvbXBvbmVudEdyb3VwLnJlcXVpcmVzTmFtZXNcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWlyZXNOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHJlcXVpcmVzTmFtZXNbaV1cblxuICAgICAgbGV0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoIWNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV0gPSBjb21wb25lbnRHcm91cHMgPSBbXVxuICAgICAgfVxuXG4gICAgICBpZiAoY29tcG9uZW50R3JvdXBzLmluZGV4T2YoY29tcG9uZW50R3JvdXApID09PSAtMSkge1xuICAgICAgICBjb21wb25lbnRHcm91cHMucHVzaChjb21wb25lbnRHcm91cClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eUlkIGluIHRoaXMuX2VudGl0aWVzKSB7XG4gICAgICB0aGlzLmNoZWNrUmVxdWlyZW1lbnRzKHRoaXMuX2VudGl0aWVzW2VudGl0eUlkXSwgY29tcG9uZW50R3JvdXApXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBvbmVudEdyb3VwXG4gIH1cblxuICByZW1vdmVDb21wb25lbnRHcm91cChjb21wb25lbnRHcm91cDogQ29tcG9uZW50R3JvdXApIHtcbiAgICBpZiAoY29tcG9uZW50R3JvdXAuYWN0aXZlKSB7XG4gICAgICBjb21wb25lbnRHcm91cC5hY3RpdmUgPSBmYWxzZVxuICAgICAgY29uc3QgcmVxdWlyZXNOYW1lcyA9IGNvbXBvbmVudEdyb3VwLnJlcXVpcmVzTmFtZXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVxdWlyZXNOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjb21wb25lbnROYW1lID0gcmVxdWlyZXNOYW1lc1tpXVxuXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgICAgIGlmIChjb21wb25lbnRHcm91cHMpIHtcbiAgICAgICAgICBjb25zdCBpZHggPSBjb21wb25lbnRHcm91cHMuaW5kZXhPZihjb21wb25lbnRHcm91cClcbiAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgY29tcG9uZW50R3JvdXBzLnNwbGljZShpZHgsIDEpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJTeXN0ZW0oc3lzdGVtOiBJU3lzdGVtKSB7XG4gICAgc3lzdGVtLmFjdGl2ZSA9IHRydWVcblxuICAgIGlmIChzeXN0ZW0uYWN0aXZhdGUpIHtcbiAgICAgIHN5c3RlbS5hY3RpdmF0ZSh0aGlzKVxuICAgIH1cblxuICAgIHRoaXMuc2ltcGxlU3lzdGVtcy5wdXNoKHN5c3RlbSlcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSZXF1aXJlbWVudHNBbmRBZGQoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVyblxuXG4gICAgZm9yIChjb25zdCBjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSB7XG4gICAgICBpZiAoIShjb21wb25lbnROYW1lIGluIHRoaXMuZW50aXR5TGlzdHMpKSB7XG4gICAgICAgIHRoaXMuZW50aXR5TGlzdHNbY29tcG9uZW50TmFtZV0gPSB7fVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXSA9IGVudGl0eVxuXG4gICAgICBjb25zdCBjb21wb25lbnRHcm91cHMgPSB0aGlzLl9jb21wb25lbnRHcm91cHNbY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICBmb3IgKGNvbnN0IHN5c3RlbUluZGV4IGluIGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5LCBjb21wb25lbnRHcm91cHNbc3lzdGVtSW5kZXhdKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpbXBsZVN5c3RlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN5c3RlbSA9IHRoaXMuc2ltcGxlU3lzdGVtc1tpXVxuXG4gICAgICBpZiAoc3lzdGVtLm9uQWRkRW50aXR5KSB7XG4gICAgICAgIHN5c3RlbS5vbkFkZEVudGl0eShlbnRpdHkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1JlcXVpcmVtZW50cyhlbnRpdHk6IElFbnRpdHksIHN5c3RlbTogQ29tcG9uZW50R3JvdXApIHtcbiAgICBpZiAoc3lzdGVtLm1lZXRzUmVxdWlyZW1lbnRzKGVudGl0eSkpIHtcbiAgICAgIGlmICghc3lzdGVtLmhhc0VudGl0eShlbnRpdHkpKSB7XG4gICAgICAgIHN5c3RlbS5hZGRFbnRpdHkoZW50aXR5KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3lzdGVtLmhhc0VudGl0eShlbnRpdHkpKSB7XG4gICAgICAgIHN5c3RlbS5yZW1vdmVFbnRpdHkoZW50aXR5KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50QWRkZWRIYW5kbGVyKGV2ZW50OiBDb21wb25lbnRBZGRlZCkge1xuICAgIGNvbnN0IHsgZW50aXR5LCBjb21wb25lbnROYW1lIH0gPSBldmVudFxuXG4gICAgaWYgKCFlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHJldHVyblxuXG4gICAgaWYgKCF0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdID0geyBbZW50aXR5LnV1aWRdOiBlbnRpdHkgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXSA9IGVudGl0eVxuICAgIH1cblxuICAgIGNvbnN0IGNvbXBvbmVudEdyb3VwcyA9IHRoaXMuX2NvbXBvbmVudEdyb3Vwc1tjb21wb25lbnROYW1lXVxuXG4gICAgaWYgKGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgZm9yIChjb25zdCBpIGluIGNvbXBvbmVudEdyb3Vwcykge1xuICAgICAgICB0aGlzLmNoZWNrUmVxdWlyZW1lbnRzKGVudGl0eSwgY29tcG9uZW50R3JvdXBzW2ldKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50UmVtb3ZlZEhhbmRsZXIoZXZlbnQ6IENvbXBvbmVudFJlbW92ZWQpIHtcbiAgICAvLyBJbiBjYXNlIGEgc2luZ2xlIGNvbXBvbmVudCBnZXRzIHJlbW92ZWQgZnJvbSBhbiBlbnRpdHksIHdlIGluZm9ybVxuICAgIC8vIGFsbCBzeXN0ZW1zIHRoYXQgdGhpcyBlbnRpdHkgbG9zdCB0aGlzIHNwZWNpZmljIGNvbXBvbmVudC5cbiAgICBjb25zdCB7IGVudGl0eSwgY29tcG9uZW50TmFtZSB9ID0gZXZlbnRcblxuICAgIGlmICghZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSByZXR1cm5cblxuICAgIGRlbGV0ZSB0aGlzLmVudGl0eUxpc3RzW2NvbXBvbmVudE5hbWVdW2VudGl0eS51dWlkXVxuXG4gICAgY29uc3QgY29tcG9uZW50R3JvdXBzID0gdGhpcy5fY29tcG9uZW50R3JvdXBzW2NvbXBvbmVudE5hbWVdXG5cbiAgICBpZiAoY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gY29tcG9uZW50R3JvdXBzKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlbWVudHMoZW50aXR5LCBjb21wb25lbnRHcm91cHNbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBlcnJvciB9IGZyb20gJy4vaGVscGVycydcblxuZGVjbGFyZSBsZXQgUHJvbWlzZTogYW55XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBUYXNrUmVzdWx0PFQ+ID0gUHJvbWlzZTxUPiAmIHtcbiAgaXNDb21wbGV0ZTogYm9vbGVhblxuICBkaWRGYWlsPzogYm9vbGVhblxuICBlcnJvcj86IEVycm9yXG4gIHJlc3VsdD86IFRcbn1cblxuY29uc3QgX2RlZmVyID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbi5iaW5kKFByb21pc2UucmVzb2x2ZSgpKVxuXG4vKipcbiAqIEV4ZWN1dGVzIGFuIGFzeW5jaHJvbm91cyB0YXNrXG4gKiBAcGFyYW0gdGFzayAtIHRoZSB0YXNrIHRvIGV4ZWN1dGVcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVUYXNrPFQ+KHRhc2s6ICgpID0+IFByb21pc2U8VD4pOiBUYXNrUmVzdWx0PFQ+IHtcbiAgY29uc3QgcmVzdWx0OiBUYXNrUmVzdWx0PFQ+ID0gX2RlZmVyKHRhc2spXG5cbiAgcmVzdWx0LmlzQ29tcGxldGUgPSBmYWxzZVxuXG4gIHJlc3VsdFxuICAgIC50aGVuKCgkKSA9PiB7XG4gICAgICByZXN1bHQuaXNDb21wbGV0ZSA9IHRydWVcbiAgICAgIHJlc3VsdC5yZXN1bHQgPSAkXG4gICAgICByZXN1bHQuZGlkRmFpbCA9IGZhbHNlXG4gICAgfSlcbiAgICAuY2F0Y2goKCQpID0+IHtcbiAgICAgIHJlc3VsdC5pc0NvbXBsZXRlID0gdHJ1ZVxuICAgICAgcmVzdWx0LmVycm9yID0gJFxuICAgICAgcmVzdWx0LmRpZEZhaWwgPSB0cnVlXG4gICAgICBlcnJvcignZXhlY3V0ZVRhc2s6IEZBSUxFRCAnICsgJC50b1N0cmluZygpLCAkKVxuICAgIH0pXG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiaW1wb3J0IHsgZXhlY3V0ZVRhc2sgfSBmcm9tICcuL1Rhc2snXG5cbmRlY2xhcmUgbGV0IFByb21pc2U6IGFueVxuXG4vKipcbiAqIEEgY2xhc3Mgc2VydmVzIGFzIGEgbWVkaXVtIGJldHdlZW4gdGhlIG9ic2VydmFibGUgYW5kIGl0cyBvYnNlcnZlcnNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmVyRXZlbnRTdGF0ZSB7XG4gIC8qKlxuICAgKiBBbiBPYnNlcnZlciBjYW4gc2V0IHRoaXMgcHJvcGVydHkgdG8gdHJ1ZSB0byBwcmV2ZW50IHN1YnNlcXVlbnQgb2JzZXJ2ZXJzIG9mIGJlaW5nIG5vdGlmaWVkXG4gICAqL1xuICBwdWJsaWMgc2tpcE5leHRPYnNlcnZlcnMhOiBib29sZWFuXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWFzayB2YWx1ZSB0aGF0IHdlcmUgdXNlZCB0byB0cmlnZ2VyIHRoZSBldmVudCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgRXZlbnRTdGF0ZSBvYmplY3RcbiAgICovXG4gIHB1YmxpYyBtYXNrITogbnVtYmVyXG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdGhhdCBvcmlnaW5hbGx5IG5vdGlmaWVkIHRoZSBldmVudFxuICAgKi9cbiAgcHVibGljIHRhcmdldD86IGFueVxuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBvYmplY3QgaW4gdGhlIGJ1YmJsaW5nIHBoYXNlXG4gICAqL1xuICBwdWJsaWMgY3VycmVudFRhcmdldD86IGFueVxuXG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbGFzdCBmdW5jdGlvbiB0aGF0IHdhcyBleGVjdXRlZC5cbiAgICogSWYgaXQgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBjYWxsYmFjayBjaGFpbiBpdCB3aWxsIGJlIHRoZSBldmVudCBkYXRhLlxuICAgKi9cbiAgcHVibGljIGxhc3RSZXR1cm5WYWx1ZT86IGFueVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgRXZlbnRTdGF0ZVxuICAgKiBAcGFyYW0gbWFzayAtIGRlZmluZXMgdGhlIG1hc2sgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3RhdGVcbiAgICogQHBhcmFtIHNraXBOZXh0T2JzZXJ2ZXJzIC0gZGVmaW5lcyBhIGZsYWcgd2hpY2ggd2lsbCBpbnN0cnVjdCB0aGUgb2JzZXJ2YWJsZSB0byBza2lwIGZvbGxvd2luZyBvYnNlcnZlcnMgd2hlbiBzZXQgdG8gdHJ1ZVxuICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB0aGUgb3JpZ2luYWwgdGFyZ2V0IG9mIHRoZSBzdGF0ZVxuICAgKiBAcGFyYW0gY3VycmVudFRhcmdldCAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdGFyZ2V0IG9mIHRoZSBzdGF0ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgbWFzazogbnVtYmVyLFxuICAgIHNraXBOZXh0T2JzZXJ2ZXJzID0gZmFsc2UsXG4gICAgdGFyZ2V0PzogYW55LFxuICAgIGN1cnJlbnRUYXJnZXQ/OiBhbnlcbiAgKSB7XG4gICAgdGhpcy5pbml0YWxpemUobWFzaywgc2tpcE5leHRPYnNlcnZlcnMsIHRhcmdldCwgY3VycmVudFRhcmdldClcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBjdXJyZW50IGV2ZW50IHN0YXRlXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayBhc3NvY2lhdGVkIHdpdGggdGhpcyBzdGF0ZVxuICAgKiBAcGFyYW0gc2tpcE5leHRPYnNlcnZlcnMgLSBkZWZpbmVzIGEgZmxhZyB3aGljaCB3aWxsIGluc3RydWN0IHRoZSBvYnNlcnZhYmxlIHRvIHNraXAgZm9sbG93aW5nIG9ic2VydmVycyB3aGVuIHNldCB0byB0cnVlXG4gICAqIEBwYXJhbSB0YXJnZXQgLSBkZWZpbmVzIHRoZSBvcmlnaW5hbCB0YXJnZXQgb2YgdGhlIHN0YXRlXG4gICAqIEBwYXJhbSBjdXJyZW50VGFyZ2V0IC0gZGVmaW5lcyB0aGUgY3VycmVudCB0YXJnZXQgb2YgdGhlIHN0YXRlXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IGV2ZW50IHN0YXRlXG4gICAqL1xuICBwdWJsaWMgaW5pdGFsaXplKFxuICAgIG1hc2s6IG51bWJlcixcbiAgICBza2lwTmV4dE9ic2VydmVycyA9IGZhbHNlLFxuICAgIHRhcmdldD86IGFueSxcbiAgICBjdXJyZW50VGFyZ2V0PzogYW55XG4gICk6IE9ic2VydmVyRXZlbnRTdGF0ZSB7XG4gICAgdGhpcy5tYXNrID0gbWFza1xuICAgIHRoaXMuc2tpcE5leHRPYnNlcnZlcnMgPSBza2lwTmV4dE9ic2VydmVyc1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0XG4gICAgdGhpcy5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldFxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYW4gT2JzZXJ2ZXIgcmVnaXN0ZXJlZCB0byBhIGdpdmVuIE9ic2VydmFibGUgb2JqZWN0LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgT2JzZXJ2ZXI8VD4ge1xuICAvKipcbiAgICogR2V0cyBvciBzZXRzIGEgcHJvcGVydHkgZGVmaW5pbmcgdGhhdCB0aGUgb2JzZXJ2ZXIgYXMgdG8gYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHRoZSBuZXh0IG5vdGlmaWNhdGlvblxuICAgKi9cbiAgcHVibGljIHVucmVnaXN0ZXJPbk5leHRDYWxsID0gZmFsc2VcblxuICAvKiogRm9yIGludGVybmFsIHVzYWdlICovXG4gIHB1YmxpYyBfd2lsbEJlVW5yZWdpc3RlcmVkID0gZmFsc2VcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBvYnNlcnZlclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBkZWZpbmVzIHRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gdGhlIG9ic2VydmVyIGlzIG5vdGlmaWVkXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayBvZiB0aGUgb2JzZXJ2ZXIgKHVzZWQgdG8gZmlsdGVyIG5vdGlmaWNhdGlvbnMpXG4gICAqIEBwYXJhbSBzY29wZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgc2NvcGUgdXNlZCB0byByZXN0b3JlIHRoZSBKUyBjb250ZXh0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW4gdGhlIG9ic2VydmVyIGlzIG5vdGlmaWVkXG4gICAgICovXG4gICAgcHVibGljIGNhbGxiYWNrOiAoZXZlbnREYXRhOiBULCBldmVudFN0YXRlOiBPYnNlcnZlckV2ZW50U3RhdGUpID0+IHZvaWQsXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbWFzayBvZiB0aGUgb2JzZXJ2ZXIgKHVzZWQgdG8gZmlsdGVyIG5vdGlmaWNhdGlvbnMpXG4gICAgICovXG4gICAgcHVibGljIG1hc2s6IG51bWJlcixcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjdXJyZW50IHNjb3BlIHVzZWQgdG8gcmVzdG9yZSB0aGUgSlMgY29udGV4dFxuICAgICAqL1xuICAgIHB1YmxpYyBzY29wZTogYW55ID0gbnVsbFxuICApIHt9XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgbGlzdCBvZiBvYnNlcnZlcnMgcmVnaXN0ZXJlZCB0byBtdWx0aXBsZSBPYnNlcnZhYmxlcyBvYmplY3QuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aU9ic2VydmVyPFQ+IHtcbiAgcHJpdmF0ZSBfb2JzZXJ2ZXJzOiBPYnNlcnZlcjxUPltdIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBfb2JzZXJ2YWJsZXM6IE9ic2VydmFibGU8VD5bXSB8IG51bGwgPSBudWxsXG5cbiAgLyoqXG4gICAqIFJhaXNlIGEgY2FsbGJhY2sgd2hlbiBvbmUgb2YgdGhlIG9ic2VydmFibGUgd2lsbCBub3RpZnlcbiAgICogQHBhcmFtIG9ic2VydmFibGVzIC0gZGVmaW5lcyBhIGxpc3Qgb2Ygb2JzZXJ2YWJsZXMgdG8gd2F0Y2hcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gZGVmaW5lcyB0aGUgY2FsbGJhY2sgdG8gY2FsbCBvbiBub3RpZmljYXRpb25cbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIHVzZWQgdG8gZmlsdGVyIG5vdGlmaWNhdGlvbnNcbiAgICogQHBhcmFtIHNjb3BlIC0gZGVmaW5lcyB0aGUgY3VycmVudCBzY29wZSB1c2VkIHRvIHJlc3RvcmUgdGhlIEpTIGNvbnRleHRcbiAgICogQHJldHVybnMgdGhlIG5ldyBNdWx0aU9ic2VydmVyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIFdhdGNoPFQ+KFxuICAgIG9ic2VydmFibGVzOiBPYnNlcnZhYmxlPFQ+W10sXG4gICAgY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICBzY29wZTogYW55ID0gbnVsbFxuICApOiBNdWx0aU9ic2VydmVyPFQ+IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTXVsdGlPYnNlcnZlcjxUPigpXG5cbiAgICByZXN1bHQuX29ic2VydmVycyA9IG5ldyBBcnJheTxPYnNlcnZlcjxUPj4oKVxuICAgIHJlc3VsdC5fb2JzZXJ2YWJsZXMgPSBvYnNlcnZhYmxlc1xuXG4gICAgZm9yIChjb25zdCBvYnNlcnZhYmxlIG9mIG9ic2VydmFibGVzKSB7XG4gICAgICBjb25zdCBvYnNlcnZlciA9IG9ic2VydmFibGUuYWRkKGNhbGxiYWNrLCBtYXNrLCBmYWxzZSwgc2NvcGUpXG4gICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzdWx0Ll9vYnNlcnZlcnMucHVzaChvYnNlcnZlcilcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogUmVsZWFzZSBhc3NvY2lhdGVkIHJlc291cmNlc1xuICAgKi9cbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29ic2VydmVycyAmJiB0aGlzLl9vYnNlcnZhYmxlcykge1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX29ic2VydmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZXNbaW5kZXhdLnJlbW92ZSh0aGlzLl9vYnNlcnZlcnNbaW5kZXhdKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX29ic2VydmVycyA9IG51bGxcbiAgICB0aGlzLl9vYnNlcnZhYmxlcyA9IG51bGxcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBPYnNlcnZhYmxlIGNsYXNzIGlzIGEgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBPYnNlcnZhYmxlIHBhdHRlcm4uXG4gKlxuICogVGhlcmUncyBvbmUgc2xpZ2h0IHBhcnRpY3VsYXJpdHkgdGhvdWdoOiBhIGdpdmVuIE9ic2VydmFibGUgY2FuIG5vdGlmeSBpdHMgb2JzZXJ2ZXIgdXNpbmcgYSBwYXJ0aWN1bGFyIG1hc2sgdmFsdWUsIG9ubHkgdGhlIE9ic2VydmVycyByZWdpc3RlcmVkIHdpdGggdGhpcyBtYXNrIHZhbHVlIHdpbGwgYmUgbm90aWZpZWQuXG4gKiBUaGlzIGVuYWJsZSBhIG1vcmUgZmluZSBncmFpbmVkIGV4ZWN1dGlvbiB3aXRob3V0IGhhdmluZyB0byByZWx5IG9uIG11bHRpcGxlIGRpZmZlcmVudCBPYnNlcnZhYmxlIG9iamVjdHMuXG4gKiBGb3IgaW5zdGFuY2UgeW91IG1heSBoYXZlIGEgZ2l2ZW4gT2JzZXJ2YWJsZSB0aGF0IGhhdmUgZm91ciBkaWZmZXJlbnQgdHlwZXMgb2Ygbm90aWZpY2F0aW9uczogTW92ZSAobWFzayA9IDB4MDEpLCBTdG9wIChtYXNrID0gMHgwMiksIFR1cm4gUmlnaHQgKG1hc2sgPSAwWDA0KSwgVHVybiBMZWZ0IChtYXNrID0gMFgwOCkuXG4gKiBBIGdpdmVuIG9ic2VydmVyIGNhbiByZWdpc3RlciBpdHNlbGYgd2l0aCBvbmx5IE1vdmUgYW5kIFN0b3AgKG1hc2sgPSAweDAzKSwgdGhlbiBpdCB3aWxsIG9ubHkgYmUgbm90aWZpZWQgd2hlbiBvbmUgb2YgdGhlc2UgdHdvIG9jY3VycyBhbmQgd2lsbCBuZXZlciBiZSBmb3IgVHVybiBMZWZ0L1JpZ2h0LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmFibGU8VD4ge1xuICBwcml2YXRlIF9vYnNlcnZlcnMgPSBuZXcgQXJyYXk8T2JzZXJ2ZXI8VD4+KClcblxuICBwcml2YXRlIF9ldmVudFN0YXRlOiBPYnNlcnZlckV2ZW50U3RhdGVcblxuICBwcml2YXRlIF9vbk9ic2VydmVyQWRkZWQ6IG51bGwgfCAoKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZCkgPSBudWxsXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgb2JzZXJ2YWJsZVxuICAgKiBAcGFyYW0gb25PYnNlcnZlckFkZGVkIC0gZGVmaW5lcyBhIGNhbGxiYWNrIHRvIGNhbGwgd2hlbiBhIG5ldyBvYnNlcnZlciBpcyBhZGRlZFxuICAgKi9cbiAgY29uc3RydWN0b3Iob25PYnNlcnZlckFkZGVkPzogKG9ic2VydmVyOiBPYnNlcnZlcjxUPikgPT4gdm9pZCkge1xuICAgIHRoaXMuX2V2ZW50U3RhdGUgPSBuZXcgT2JzZXJ2ZXJFdmVudFN0YXRlKDApXG5cbiAgICBpZiAob25PYnNlcnZlckFkZGVkKSB7XG4gICAgICB0aGlzLl9vbk9ic2VydmVyQWRkZWQgPSBvbk9ic2VydmVyQWRkZWRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IE9ic2VydmVyIHdpdGggdGhlIHNwZWNpZmllZCBjYWxsYmFja1xuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSB0aGUgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGZvciB0aGF0IE9ic2VydmVyXG4gICAqIEBwYXJhbSBtYXNrIC0gdGhlIG1hc2sgdXNlZCB0byBmaWx0ZXIgb2JzZXJ2ZXJzXG4gICAqIEBwYXJhbSBpbnNlcnRGaXJzdCAtIGlmIHRydWUgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW5zZXJ0ZWQgYXQgdGhlIGZpcnN0IHBvc2l0aW9uLCBoZW5jZSBleGVjdXRlZCBiZWZvcmUgdGhlIG90aGVycyBvbmVzLiBJZiBmYWxzZSAoZGVmYXVsdCBiZWhhdmlvcikgdGhlIGNhbGxiYWNrIHdpbGwgYmUgaW5zZXJ0ZWQgYXQgdGhlIGxhc3QgcG9zaXRpb24sIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgb3RoZXJzIGFscmVhZHkgcHJlc2VudC5cbiAgICogQHBhcmFtIHNjb3BlIC0gb3B0aW9uYWwgc2NvcGUgZm9yIHRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgZnJvbVxuICAgKiBAcGFyYW0gdW5yZWdpc3Rlck9uRmlyc3RDYWxsIC0gZGVmaW5lcyBpZiB0aGUgb2JzZXJ2ZXIgYXMgdG8gYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHRoZSBuZXh0IG5vdGlmaWNhdGlvblxuICAgKiBAcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGNyZWF0ZWQgZm9yIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgcHVibGljIGFkZChcbiAgICBjYWxsYmFjazogKGV2ZW50RGF0YTogVCwgZXZlbnRTdGF0ZTogT2JzZXJ2ZXJFdmVudFN0YXRlKSA9PiB2b2lkLFxuICAgIG1hc2s6IG51bWJlciA9IC0xLFxuICAgIGluc2VydEZpcnN0ID0gZmFsc2UsXG4gICAgc2NvcGU6IGFueSA9IG51bGwsXG4gICAgdW5yZWdpc3Rlck9uRmlyc3RDYWxsID0gZmFsc2VcbiAgKTogbnVsbCB8IE9ic2VydmVyPFQ+IHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyKGNhbGxiYWNrLCBtYXNrLCBzY29wZSlcbiAgICBvYnNlcnZlci51bnJlZ2lzdGVyT25OZXh0Q2FsbCA9IHVucmVnaXN0ZXJPbkZpcnN0Q2FsbFxuXG4gICAgaWYgKGluc2VydEZpcnN0KSB7XG4gICAgICB0aGlzLl9vYnNlcnZlcnMudW5zaGlmdChvYnNlcnZlcilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29uT2JzZXJ2ZXJBZGRlZCkge1xuICAgICAgdGhpcy5fb25PYnNlcnZlckFkZGVkKG9ic2VydmVyKVxuICAgIH1cblxuICAgIHJldHVybiBvYnNlcnZlclxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBPYnNlcnZlciB3aXRoIHRoZSBzcGVjaWZpZWQgY2FsbGJhY2sgYW5kIHVucmVnaXN0ZXJzIGFmdGVyIHRoZSBuZXh0IG5vdGlmaWNhdGlvblxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSB0aGUgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGZvciB0aGF0IE9ic2VydmVyXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgY3JlYXRlZCBmb3IgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBwdWJsaWMgYWRkT25jZShcbiAgICBjYWxsYmFjazogKGV2ZW50RGF0YTogVCwgZXZlbnRTdGF0ZTogT2JzZXJ2ZXJFdmVudFN0YXRlKSA9PiB2b2lkXG4gICk6IG51bGwgfCBPYnNlcnZlcjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRkKGNhbGxiYWNrLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBPYnNlcnZlciBmcm9tIHRoZSBPYnNlcnZhYmxlIG9iamVjdFxuICAgKiBAcGFyYW0gb2JzZXJ2ZXIgLSB0aGUgaW5zdGFuY2Ugb2YgdGhlIE9ic2VydmVyIHRvIHJlbW92ZVxuICAgKiBAcmV0dXJucyBmYWxzZSBpZiBpdCBkb2Vzbid0IGJlbG9uZyB0byB0aGlzIE9ic2VydmFibGVcbiAgICovXG4gIHB1YmxpYyByZW1vdmUob2JzZXJ2ZXI6IG51bGwgfCBPYnNlcnZlcjxUPik6IGJvb2xlYW4ge1xuICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fb2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpXG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLl9kZWZlclVucmVnaXN0ZXIob2JzZXJ2ZXIpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIE9ic2VydmFibGUgb2JqZWN0XG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIHRoZSBjYWxsYmFjayB0byByZW1vdmVcbiAgICogQHBhcmFtIHNjb3BlIC0gb3B0aW9uYWwgc2NvcGUuIElmIHVzZWQgb25seSB0aGUgY2FsbGJhY2tzIHdpdGggdGhpcyBzY29wZSB3aWxsIGJlIHJlbW92ZWRcbiAgICogQHJldHVybnMgZmFsc2UgaWYgaXQgZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBPYnNlcnZhYmxlXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlQ2FsbGJhY2soXG4gICAgY2FsbGJhY2s6IChldmVudERhdGE6IFQsIGV2ZW50U3RhdGU6IE9ic2VydmVyRXZlbnRTdGF0ZSkgPT4gdm9pZCxcbiAgICBzY29wZT86IGFueVxuICApOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLl9vYnNlcnZlcnNbaW5kZXhdLmNhbGxiYWNrID09PSBjYWxsYmFjayAmJlxuICAgICAgICAoIXNjb3BlIHx8IHNjb3BlID09PSB0aGlzLl9vYnNlcnZlcnNbaW5kZXhdLnNjb3BlKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2RlZmVyVW5yZWdpc3Rlcih0aGlzLl9vYnNlcnZlcnNbaW5kZXhdKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBhbGwgT2JzZXJ2ZXJzIGJ5IGNhbGxpbmcgdGhlaXIgcmVzcGVjdGl2ZSBjYWxsYmFjayB3aXRoIHRoZSBnaXZlbiBkYXRhXG4gICAqIFdpbGwgcmV0dXJuIHRydWUgaWYgYWxsIG9ic2VydmVycyB3ZXJlIGV4ZWN1dGVkLCBmYWxzZSBpZiBhbiBvYnNlcnZlciBzZXQgc2tpcE5leHRPYnNlcnZlcnMgdG8gdHJ1ZSwgdGhlbiBwcmV2ZW50IHRoZSBzdWJzZXF1ZW50IG9uZXMgdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0gZXZlbnREYXRhIC0gZGVmaW5lcyB0aGUgZGF0YSB0byBzZW5kIHRvIGFsbCBvYnNlcnZlcnNcbiAgICogQHBhcmFtIG1hc2sgLSBkZWZpbmVzIHRoZSBtYXNrIG9mIHRoZSBjdXJyZW50IG5vdGlmaWNhdGlvbiAob2JzZXJ2ZXJzIHdpdGggaW5jb21wYXRpYmxlIG1hc2sgKGllIG1hc2sgJiBvYnNlcnZlci5tYXNrID09PSAwKSB3aWxsIG5vdCBiZSBub3RpZmllZClcbiAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgdGhlIG9yaWdpbmFsIHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHBhcmFtIGN1cnJlbnRUYXJnZXQgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHRhcmdldCBvZiB0aGUgc3RhdGVcbiAgICogQHJldHVybnMgZmFsc2UgaWYgdGhlIGNvbXBsZXRlIG9ic2VydmVyIGNoYWluIHdhcyBub3QgcHJvY2Vzc2VkIChiZWNhdXNlIG9uZSBvYnNlcnZlciBzZXQgdGhlIHNraXBOZXh0T2JzZXJ2ZXJzIHRvIHRydWUpXG4gICAqL1xuICBwdWJsaWMgbm90aWZ5T2JzZXJ2ZXJzKFxuICAgIGV2ZW50RGF0YTogVCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICB0YXJnZXQ/OiBhbnksXG4gICAgY3VycmVudFRhcmdldD86IGFueVxuICApOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuX29ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9ldmVudFN0YXRlXG4gICAgc3RhdGUubWFzayA9IG1hc2tcbiAgICBzdGF0ZS50YXJnZXQgPSB0YXJnZXRcbiAgICBzdGF0ZS5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldFxuICAgIHN0YXRlLnNraXBOZXh0T2JzZXJ2ZXJzID0gZmFsc2VcbiAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBldmVudERhdGFcblxuICAgIGZvciAoY29uc3Qgb2JzIG9mIHRoaXMuX29ic2VydmVycykge1xuICAgICAgaWYgKG9icy5fd2lsbEJlVW5yZWdpc3RlcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChvYnMubWFzayAmIG1hc2spIHtcbiAgICAgICAgaWYgKG9icy5zY29wZSkge1xuICAgICAgICAgIHN0YXRlLmxhc3RSZXR1cm5WYWx1ZSA9IG9icy5jYWxsYmFjay5hcHBseShvYnMuc2NvcGUsIFtcbiAgICAgICAgICAgIGV2ZW50RGF0YSxcbiAgICAgICAgICAgIHN0YXRlXG4gICAgICAgICAgXSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBvYnMuY2FsbGJhY2soZXZlbnREYXRhLCBzdGF0ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYnMudW5yZWdpc3Rlck9uTmV4dENhbGwpIHtcbiAgICAgICAgICB0aGlzLl9kZWZlclVucmVnaXN0ZXIob2JzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGluZyB0aGlzIHdpbGwgZXhlY3V0ZSBlYWNoIGNhbGxiYWNrLCBleHBlY3RpbmcgaXQgdG8gYmUgYSBwcm9taXNlIG9yIHJldHVybiBhIHZhbHVlLlxuICAgKiBJZiBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluIG9uZSBmdW5jdGlvbiBmYWlscywgdGhlIHByb21pc2Ugd2lsbCBmYWlsIGFuZCB0aGUgZXhlY3V0aW9uIHdpbGwgbm90IGNvbnRpbnVlLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgY2hhaW4gb2YgZXZlbnRzIChzb21ldGltZXMgYXN5bmMgZXZlbnRzKSBpcyBuZWVkZWQgdG8gaW5pdGlhbGl6ZSBhIGNlcnRhaW4gb2JqZWN0XG4gICAqIGFuZCBpdCBpcyBjcnVjaWFsIHRoYXQgYWxsIGNhbGxiYWNrcyB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgKiBUaGUgb3JkZXIgb2YgdGhlIGNhbGxiYWNrcyBpcyBrZXB0LCBjYWxsYmFja3MgYXJlIG5vdCBleGVjdXRlZCBwYXJhbGxlbC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50RGF0YSAtIFRoZSBkYXRhIHRvIGJlIHNlbnQgdG8gZWFjaCBjYWxsYmFja1xuICAgKiBAcGFyYW0gbWFzayAtIGlzIHVzZWQgdG8gZmlsdGVyIG9ic2VydmVycyBkZWZhdWx0cyB0byAtMVxuICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB0aGUgY2FsbGJhY2sgdGFyZ2V0IChzZWUgRXZlbnRTdGF0ZSlcbiAgICogQHBhcmFtIGN1cnJlbnRUYXJnZXQgLSBkZWZpbmVzIGhlIGN1cnJlbnQgb2JqZWN0IGluIHRoZSBidWJibGluZyBwaGFzZVxuICAgKiBAcmV0dXJucyB3aWxsIHJldHVybiBhIFByb21pc2UgdGhhbiByZXNvbHZlcyB3aGVuIGFsbCBjYWxsYmFja3MgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5LlxuICAgKi9cbiAgcHVibGljIG5vdGlmeU9ic2VydmVyc1dpdGhQcm9taXNlKFxuICAgIGV2ZW50RGF0YTogVCxcbiAgICBtYXNrOiBudW1iZXIgPSAtMSxcbiAgICB0YXJnZXQ/OiBhbnksXG4gICAgY3VycmVudFRhcmdldD86IGFueVxuICApOiBQcm9taXNlPFQ+IHtcbiAgICAvLyBjcmVhdGUgYW4gZW1wdHkgcHJvbWlzZVxuICAgIGxldCBwOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoZXZlbnREYXRhKVxuXG4gICAgLy8gbm8gb2JzZXJ2ZXJzPyByZXR1cm4gdGhpcyBwcm9taXNlLlxuICAgIGlmICghdGhpcy5fb2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHBcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX2V2ZW50U3RhdGVcbiAgICBzdGF0ZS5tYXNrID0gbWFza1xuICAgIHN0YXRlLnRhcmdldCA9IHRhcmdldFxuICAgIHN0YXRlLmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0XG4gICAgc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZVxuXG4gICAgLy8gZXhlY3V0ZSBvbmUgY2FsbGJhY2sgYWZ0ZXIgYW5vdGhlciAobm90IHVzaW5nIFByb21pc2UuYWxsLCB0aGUgb3JkZXIgaXMgaW1wb3J0YW50KVxuICAgIHRoaXMuX29ic2VydmVycy5mb3JFYWNoKChvYnMpID0+IHtcbiAgICAgIGlmIChzdGF0ZS5za2lwTmV4dE9ic2VydmVycykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChvYnMuX3dpbGxCZVVucmVnaXN0ZXJlZCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmIChvYnMubWFzayAmIG1hc2spIHtcbiAgICAgICAgaWYgKG9icy5zY29wZSkge1xuICAgICAgICAgIHAgPSBwLnRoZW4oKGxhc3RSZXR1cm5lZFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBsYXN0UmV0dXJuZWRWYWx1ZVxuICAgICAgICAgICAgcmV0dXJuIG9icy5jYWxsYmFjay5hcHBseShvYnMuc2NvcGUsIFtldmVudERhdGEsIHN0YXRlXSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHAgPSBwLnRoZW4oKGxhc3RSZXR1cm5lZFZhbHVlKSA9PiB7XG4gICAgICAgICAgICBzdGF0ZS5sYXN0UmV0dXJuVmFsdWUgPSBsYXN0UmV0dXJuZWRWYWx1ZVxuICAgICAgICAgICAgcmV0dXJuIG9icy5jYWxsYmFjayhldmVudERhdGEsIHN0YXRlKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9icy51bnJlZ2lzdGVyT25OZXh0Q2FsbCkge1xuICAgICAgICAgIHRoaXMuX2RlZmVyVW5yZWdpc3RlcihvYnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gcmV0dXJuIHRoZSBldmVudERhdGFcbiAgICByZXR1cm4gcC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBldmVudERhdGFcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBhIHNwZWNpZmljIG9ic2VydmVyXG4gICAqIEBwYXJhbSBvYnNlcnZlciAtIGRlZmluZXMgdGhlIG9ic2VydmVyIHRvIG5vdGlmeVxuICAgKiBAcGFyYW0gZXZlbnREYXRhIC0gZGVmaW5lcyB0aGUgZGF0YSB0byBiZSBzZW50IHRvIGVhY2ggY2FsbGJhY2tcbiAgICogQHBhcmFtIG1hc2sgLSBpcyB1c2VkIHRvIGZpbHRlciBvYnNlcnZlcnMgZGVmYXVsdHMgdG8gLTFcbiAgICovXG4gIHB1YmxpYyBub3RpZnlPYnNlcnZlcihcbiAgICBvYnNlcnZlcjogT2JzZXJ2ZXI8VD4sXG4gICAgZXZlbnREYXRhOiBULFxuICAgIG1hc2s6IG51bWJlciA9IC0xXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fZXZlbnRTdGF0ZVxuICAgIHN0YXRlLm1hc2sgPSBtYXNrXG4gICAgc3RhdGUuc2tpcE5leHRPYnNlcnZlcnMgPSBmYWxzZVxuXG4gICAgb2JzZXJ2ZXIuY2FsbGJhY2soZXZlbnREYXRhLCBzdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBvYnNlcnZhYmxlIGhhcyBhdCBsZWFzdCBvbmUgb2JzZXJ2ZXJcbiAgICogQHJldHVybnMgdHJ1ZSBpcyB0aGUgT2JzZXJ2YWJsZSBoYXMgYXQgbGVhc3Qgb25lIE9ic2VydmVyIHJlZ2lzdGVyZWRcbiAgICovXG4gIHB1YmxpYyBoYXNPYnNlcnZlcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX29ic2VydmVycy5sZW5ndGggPiAwXG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgdGhlIGxpc3Qgb2Ygb2JzZXJ2ZXJzXG4gICAqL1xuICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0gbmV3IEFycmF5PE9ic2VydmVyPFQ+PigpXG4gICAgdGhpcy5fb25PYnNlcnZlckFkZGVkID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoZSBjdXJyZW50IG9ic2VydmFibGVcbiAgICogQHJldHVybnMgYSBuZXcgb2JzZXJ2YWJsZVxuICAgKi9cbiAgcHVibGljIGNsb25lKCk6IE9ic2VydmFibGU8VD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBPYnNlcnZhYmxlPFQ+KClcblxuICAgIHJlc3VsdC5fb2JzZXJ2ZXJzID0gdGhpcy5fb2JzZXJ2ZXJzLnNsaWNlKDApXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogRG9lcyB0aGlzIG9ic2VydmFibGUgaGFuZGxlcyBvYnNlcnZlciByZWdpc3RlcmVkIHdpdGggYSBnaXZlbiBtYXNrXG4gICAqIEBwYXJhbSBtYXNrIC0gZGVmaW5lcyB0aGUgbWFzayB0byBiZSB0ZXN0ZWRcbiAgICogQHJldHVybnMgd2hldGhlciBvciBub3Qgb25lIG9ic2VydmVyIHJlZ2lzdGVyZWQgd2l0aCB0aGUgZ2l2ZW4gbWFzayBpcyBoYW5kZWxlZFxuICAgKi9cbiAgcHVibGljIGhhc1NwZWNpZmljTWFzayhtYXNrOiBudW1iZXIgPSAtMSk6IGJvb2xlYW4ge1xuICAgIGZvciAoY29uc3Qgb2JzIG9mIHRoaXMuX29ic2VydmVycykge1xuICAgICAgaWYgKG9icy5tYXNrICYgbWFzayB8fCBvYnMubWFzayA9PT0gbWFzaykge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHByaXZhdGUgX2RlZmVyVW5yZWdpc3RlcihvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pOiB2b2lkIHtcbiAgICBvYnNlcnZlci51bnJlZ2lzdGVyT25OZXh0Q2FsbCA9IGZhbHNlXG4gICAgb2JzZXJ2ZXIuX3dpbGxCZVVucmVnaXN0ZXJlZCA9IHRydWVcbiAgICB2b2lkIGV4ZWN1dGVUYXNrKGFzeW5jICgpID0+IHRoaXMuX3JlbW92ZShvYnNlcnZlcikpXG4gIH1cblxuICAvLyBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuIG5vdCBpdGVyYXRpbmcgb3ZlciBfb2JzZXJ2ZXJzIHRvIGF2b2lkIGNhbGxiYWNrIHNraXBwaW5nLlxuICAvLyBSZW1vdmVzIGFuIG9ic2VydmVyIGZyb20gdGhlIF9vYnNlcnZlciBBcnJheS5cbiAgcHJpdmF0ZSBfcmVtb3ZlKG9ic2VydmVyOiBudWxsIHwgT2JzZXJ2ZXI8VD4pOiBib29sZWFuIHtcbiAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX29ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKVxuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbiIsImxldCBtb2R1bGVQcm9taXNlOiBhbnlcblxuLyoqXG4gKiB0ZWxlcG9ydCBwbGF5ZXIgdG8gYSBkZXN0aW5hdGlvblxuICogQHBhcmFtIGRlc3RpbmF0aW9uIC0gXCJjb29yZFgsY29vcmRZXCIsIFwibWFnaWNcIiwgXCJjcm93ZFwiXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZWxlcG9ydFRvKGRlc3RpbmF0aW9uOiBzdHJpbmcpIHtcbiAgLy8gZXJyb3IoYHRlbGVwb3J0VG8oZGVzdGluYXRpb24pIHdhcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlOlxuXG4gIC8vIGltcG9ydCB7cmVxdWVzdFRlbGVwb3J0fSBmcm9tICdAZGVjZW50cmFsYW5kL1VzZXJBY3Rpb25Nb2R1bGUnXG4gIC8vIGV4ZWN1dGVUYXNrKGFzeW5jICgpID0+IHtcbiAgLy8gICBhd2FpdCByZXF1ZXN0VGVsZXBvcnQoZGVzdGluYXRpb24pXG4gIC8vIH0pYClcbiAgY2FsbE1vZHVsZVJwYygncmVxdWVzdFRlbGVwb3J0JywgW2Rlc3RpbmF0aW9uXSlcbn1cblxuZnVuY3Rpb24gZW5zdXJlTW9kdWxlKCk6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIG1vZHVsZVByb21pc2UgPT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlUHJvbWlzZSA9IGRjbC5sb2FkTW9kdWxlKCdAZGVjZW50cmFsYW5kL1VzZXJBY3Rpb25Nb2R1bGUnLCB7fSlcbiAgfVxuICByZXR1cm4gdHlwZW9mIG1vZHVsZVByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnXG59XG5cbmZ1bmN0aW9uIGNhbGxNb2R1bGVScGMobWV0aG9kTmFtZTogc3RyaW5nLCBhcmdzOiBhbnlbXSk6IHZvaWQge1xuICBpZiAoZW5zdXJlTW9kdWxlKCkpIHtcbiAgICBtb2R1bGVQcm9taXNlLnRoZW4oKCQ6IGFueSkgPT4ge1xuICAgICAgdm9pZCBkY2wuY2FsbFJwYygkLnJwY0hhbmRsZSwgbWV0aG9kTmFtZSwgYXJncylcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyBFdmVudENvbnN0cnVjdG9yIH0gZnJvbSAnLi4vZWNzL0V2ZW50TWFuYWdlcidcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9lY3MvT2JzZXJ2YWJsZSdcbmltcG9ydCB7IFZpZGVvVGV4dHVyZSB9IGZyb20gJy4vQ29tcG9uZW50cydcbmltcG9ydCB7IERpc3Bvc2FibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFVVSURFdmVudDxUID0gYW55PiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB1dWlkOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBUKSB7fVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFJheWNhc3RSZXNwb25zZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBSYXljYXN0UmVzcG9uc2VQYXlsb2FkPFQ+KSB7fVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQEV2ZW50Q29uc3RydWN0b3IoKVxuZXhwb3J0IGNsYXNzIFBvaW50ZXJFdmVudDxHbG9iYWxJbnB1dEV2ZW50UmVzdWx0PiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwYXlsb2FkOiBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0KSB7fVxufVxuXG5sZXQgaW50ZXJuYWxEY2w6IERlY2VudHJhbGFuZEludGVyZmFjZSB8IHZvaWRcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGEgY2FsbGJhY2sgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIE9ic2VydmFibGVcbiAqIGNvbnN0cnVjdG9yIHRvIHN1YnNjcmliZSB0byB0aGUgZXZlbnRzIG9mIHRoZSBEZWNlbnRyYWxhbmRJbnRlcmZhY2VcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3Vic2NyaWJlcihldmVudE5hbWU6IGtleW9mIElFdmVudHMpIHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoaW50ZXJuYWxEY2wpIHtcbiAgICAgIGludGVybmFsRGNsLnN1YnNjcmliZShldmVudE5hbWUpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiB5b3UgY2hhbmdlIHlvdXIgY2FtZXJhIGJldHdlZW4gMXN0IGFuZCAzcmQgcGVyc29uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvbkNhbWVyYU1vZGVDaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFxuICBJRXZlbnRzWydjYW1lcmFNb2RlQ2hhbmdlZCddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ2NhbWVyYU1vZGVDaGFuZ2VkJykpXG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiB5b3UgY2hhbmdlIHlvdXIgY2FtZXJhIGJldHdlZW4gMXN0IGFuZCAzcmQgcGVyc29uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvbklkbGVTdGF0ZUNoYW5nZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8XG4gIElFdmVudHNbJ2lkbGVTdGF0ZUNoYW5nZWQnXVxuPihjcmVhdGVTdWJzY3JpYmVyKCdpZGxlU3RhdGVDaGFuZ2VkJykpXG5cbi8qKlxuICogVGhlc2UgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgYWZ0ZXIgeW91ciBjaGFyYWN0ZXIgZW50ZXJzIHRoZSBzY2VuZS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG9uRW50ZXJTY2VuZU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydvbkVudGVyU2NlbmUnXT4oXG4gIGNyZWF0ZVN1YnNjcmliZXIoJ29uRW50ZXJTY2VuZScpXG4pXG5cbi8qKiBAcHVibGljIEBkZXByZWNhdGVkIFVzZSBvbkVudGVyU2NlbmVPYnNlcnZhYmxlIGluc3RlYWQuICovXG5leHBvcnQgY29uc3Qgb25FbnRlclNjZW5lID0gb25FbnRlclNjZW5lT2JzZXJ2YWJsZVxuXG4vKipcbiAqIFRoZXNlIGV2ZW50cyBhcmUgdHJpZ2dlcmVkIGFmdGVyIHlvdXIgY2hhcmFjdGVyIGxlYXZlcyB0aGUgc2NlbmUuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvbkxlYXZlU2NlbmVPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1snb25MZWF2ZVNjZW5lJ10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCdvbkxlYXZlU2NlbmUnKVxuKVxuXG4vKiogQHB1YmxpYyBAZGVwcmVjYXRlZCBVc2Ugb25MZWF2ZVNjZW5lT2JzZXJ2YWJsZSBpbnN0ZWFkLiAqL1xuZXhwb3J0IGNvbnN0IG9uTGVhdmVTY2VuZSA9IG9uTGVhdmVTY2VuZU9ic2VydmFibGVcblxuLyoqXG4gKiBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciBhbGwgdGhlIHJlc291cmNlcyBvZiB0aGUgc2NlbmUgd2VyZSBsb2FkZWQgKG1vZGVscywgdGV4dHVyZXMsIGV0Yy4uLilcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG9uU2NlbmVSZWFkeU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydzY2VuZVN0YXJ0J10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCdzY2VuZVN0YXJ0JylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblBsYXllckV4cHJlc3Npb25PYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8XG4gIElFdmVudHNbJ3BsYXllckV4cHJlc3Npb24nXVxuPihjcmVhdGVTdWJzY3JpYmVyKCdwbGF5ZXJFeHByZXNzaW9uJykpXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgb25Qb2ludGVyTG9ja2VkU3RhdGVDaGFuZ2UgPSBuZXcgT2JzZXJ2YWJsZTxcbiAgSUV2ZW50c1snb25Qb2ludGVyTG9jayddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ29uUG9pbnRlckxvY2snKSlcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblZpZGVvRXZlbnQgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWyd2aWRlb0V2ZW50J10+KFxuICBjcmVhdGVTdWJzY3JpYmVyKCd2aWRlb0V2ZW50JylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblByb2ZpbGVDaGFuZ2VkID0gbmV3IE9ic2VydmFibGU8SUV2ZW50c1sncHJvZmlsZUNoYW5nZWQnXT4oXG4gIGNyZWF0ZVN1YnNjcmliZXIoJ3Byb2ZpbGVDaGFuZ2VkJylcbilcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBvblBsYXllckNvbm5lY3RlZE9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZTxcbiAgSUV2ZW50c1sncGxheWVyQ29ubmVjdGVkJ11cbj4oY3JlYXRlU3Vic2NyaWJlcigncGxheWVyQ29ubmVjdGVkJykpXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgb25QbGF5ZXJEaXNjb25uZWN0ZWRPYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8XG4gIElFdmVudHNbJ3BsYXllckRpc2Nvbm5lY3RlZCddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ3BsYXllckRpc2Nvbm5lY3RlZCcpKVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IG9uUmVhbG1DaGFuZ2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFxuICBJRXZlbnRzWydvblJlYWxtQ2hhbmdlZCddXG4+KGNyZWF0ZVN1YnNjcmliZXIoJ29uUmVhbG1DaGFuZ2VkJykpXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgb25QbGF5ZXJDbGlja2VkT2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlPFxuICBJRXZlbnRzWydwbGF5ZXJDbGlja2VkJ11cbj4oY3JlYXRlU3Vic2NyaWJlcigncGxheWVyQ2xpY2tlZCcpKVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogVGhpcyBmdW5jdGlvbiBhZGRzIF9vbmVfIGxpc3RlbmVyIHRvIHRoZSBvbkV2ZW50IGV2ZW50IG9mIGRjbCBpbnRlcmZhY2UuXG4gKiBMZXZlcmFnaW5nIGEgc3dpdGNoIHRvIHJvdXRlIGV2ZW50cyB0byB0aGUgT2JzZXJ2YWJsZSBoYW5kbGVycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9pbml0RXZlbnRPYnNlcnZhYmxlcyhkY2w6IERlY2VudHJhbGFuZEludGVyZmFjZSkge1xuICAvLyBzdG9yZSBpbnRlcm5hbCByZWZlcmVuY2UgdG8gZGNsLCBpdCBpcyBnb2luZyB0byBiZSB1c2VkIHRvIHN1YnNjcmliZSB0byB0aGUgZXZlbnRzXG4gIGludGVybmFsRGNsID0gZGNsXG5cbiAgaWYgKGludGVybmFsRGNsKSB7XG4gICAgaW50ZXJuYWxEY2wub25FdmVudCgoZXZlbnQpID0+IHtcbiAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICBjYXNlICdvbkVudGVyU2NlbmUnOiB7XG4gICAgICAgICAgb25FbnRlclNjZW5lT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ29uRW50ZXJTY2VuZSddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ29uTGVhdmVTY2VuZSc6IHtcbiAgICAgICAgICBvbkxlYXZlU2NlbmVPYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhcbiAgICAgICAgICAgIGV2ZW50LmRhdGEgYXMgSUV2ZW50c1snb25MZWF2ZVNjZW5lJ11cbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnY2FtZXJhTW9kZUNoYW5nZWQnOiB7XG4gICAgICAgICAgb25DYW1lcmFNb2RlQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydjYW1lcmFNb2RlQ2hhbmdlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2lkbGVTdGF0ZUNoYW5nZWQnOiB7XG4gICAgICAgICAgb25JZGxlU3RhdGVDaGFuZ2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ2lkbGVTdGF0ZUNoYW5nZWQnXVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdzY2VuZVN0YXJ0Jzoge1xuICAgICAgICAgIG9uU2NlbmVSZWFkeU9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydzY2VuZVN0YXJ0J11cbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncGxheWVyRXhwcmVzc2lvbic6IHtcbiAgICAgICAgICBvblBsYXllckV4cHJlc3Npb25PYnNlcnZhYmxlLm5vdGlmeU9ic2VydmVycyhcbiAgICAgICAgICAgIGV2ZW50LmRhdGEgYXMgSUV2ZW50c1sncGxheWVyRXhwcmVzc2lvbiddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3ZpZGVvRXZlbnQnOiB7XG4gICAgICAgICAgY29uc3QgdmlkZW9EYXRhID0gZXZlbnQuZGF0YSBhcyBJRXZlbnRzWyd2aWRlb0V2ZW50J11cbiAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZS5kaXNwb3NhYmxlQ29tcG9uZW50c1tcbiAgICAgICAgICAgIHZpZGVvRGF0YS5jb21wb25lbnRJZFxuICAgICAgICAgIF0gYXMgVmlkZW9UZXh0dXJlXG4gICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgY29tcG9uZW50LnVwZGF0ZSh2aWRlb0RhdGEpXG4gICAgICAgICAgfVxuICAgICAgICAgIG9uVmlkZW9FdmVudC5ub3RpZnlPYnNlcnZlcnModmlkZW9EYXRhKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3Byb2ZpbGVDaGFuZ2VkJzoge1xuICAgICAgICAgIG9uUHJvZmlsZUNoYW5nZWQubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydwcm9maWxlQ2hhbmdlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ29uUG9pbnRlckxvY2snOiB7XG4gICAgICAgICAgb25Qb2ludGVyTG9ja2VkU3RhdGVDaGFuZ2Uubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydvblBvaW50ZXJMb2NrJ11cbiAgICAgICAgICApXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncGxheWVyQ29ubmVjdGVkJzoge1xuICAgICAgICAgIG9uUGxheWVyQ29ubmVjdGVkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ3BsYXllckNvbm5lY3RlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3BsYXllckRpc2Nvbm5lY3RlZCc6IHtcbiAgICAgICAgICBvblBsYXllckRpc2Nvbm5lY3RlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydwbGF5ZXJEaXNjb25uZWN0ZWQnXVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdvblJlYWxtQ2hhbmdlZCc6IHtcbiAgICAgICAgICBvblJlYWxtQ2hhbmdlZE9ic2VydmFibGUubm90aWZ5T2JzZXJ2ZXJzKFxuICAgICAgICAgICAgZXZlbnQuZGF0YSBhcyBJRXZlbnRzWydvblJlYWxtQ2hhbmdlZCddXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3BsYXllckNsaWNrZWQnOiB7XG4gICAgICAgICAgb25QbGF5ZXJDbGlja2VkT2JzZXJ2YWJsZS5ub3RpZnlPYnNlcnZlcnMoXG4gICAgICAgICAgICBldmVudC5kYXRhIGFzIElFdmVudHNbJ3BsYXllckNsaWNrZWQnXVxuICAgICAgICAgIClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkLFxuICBEaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZCxcbiAgRGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWQsXG4gIGdldENvbXBvbmVudENsYXNzSWQsXG4gIGdldENvbXBvbmVudElkLFxuICBpc0Rpc3Bvc2FibGVDb21wb25lbnQsXG4gIE9ic2VydmFibGVDb21wb25lbnRcbn0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL2Vjcy9FbmdpbmUnXG5pbXBvcnQge1xuICBDb21wb25lbnRBZGRlZCxcbiAgQ29tcG9uZW50UmVtb3ZlZCxcbiAgSUVudGl0eSxcbiAgSVN5c3RlbSxcbiAgUGFyZW50Q2hhbmdlZFxufSBmcm9tICcuLi9lY3MvSUVudGl0eSdcbmltcG9ydCB7IFVVSURFdmVudCwgUG9pbnRlckV2ZW50LCBSYXljYXN0UmVzcG9uc2UgfSBmcm9tICcuL0V2ZW50cydcbmltcG9ydCB7IFJheWNhc3RIaXRFbnRpdGllcywgUmF5Y2FzdEhpdEVudGl0eSB9IGZyb20gJy4vUGh5c2ljc0Nhc3QnXG5cbi8vIFRoaXMgbnVtYmVyIGlzIGRlZmluZWQgaW4gdGhlIHByb3RvY29sIEVDUy5TZXRFbnRpdHlQYXJlbnQuM1xuY29uc3QgUk9PVF9FTlRJVFlfSUQgPSAnMCdcblxuZXhwb3J0IGNsYXNzIERlY2VudHJhbGFuZFN5bmNocm9uaXphdGlvblN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xuICBjYWNoZWRDb21wb25lbnRzOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHt9XG4gIGVuZ2luZSE6IEVuZ2luZVxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkY2w6IERlY2VudHJhbGFuZEludGVyZmFjZSkge31cblxuICBhY3RpdmF0ZShlbmdpbmU6IEVuZ2luZSkge1xuICAgIHRoaXMuZW5naW5lID0gZW5naW5lXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihDb21wb25lbnRBZGRlZCwgdGhpcywgdGhpcy5jb21wb25lbnRBZGRlZClcbiAgICBlbmdpbmUuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKFxuICAgICAgQ29tcG9uZW50UmVtb3ZlZCxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLmNvbXBvbmVudFJlbW92ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIERpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZGlzcG9zYWJsZUNvbXBvbmVudENyZWF0ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIERpc3Bvc2FibGVDb21wb25lbnRSZW1vdmVkLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIERpc3Bvc2FibGVDb21wb25lbnRVcGRhdGVkLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMuZGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWRcbiAgICApXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihQYXJlbnRDaGFuZ2VkLCB0aGlzLCB0aGlzLnBhcmVudENoYW5nZWQpXG5cbiAgICBjb25zdCByb290SWQgPSBlbmdpbmUucm9vdEVudGl0eS51dWlkXG5cbiAgICB0aGlzLmRjbC5hZGRFbnRpdHkocm9vdElkKVxuXG4gICAgLy8gVE9ETyhhZ3VzKTogc2VuZCBkaXNwb3NhYmxlQ29tcG9uZW50cyBpZiBleGlzdFxuXG4gICAgdGhpcy5kY2wub25VcGRhdGUoKGR0KSA9PiB7XG4gICAgICBlbmdpbmUudXBkYXRlKGR0KVxuICAgICAgdGhpcy5wcmVzZW50RW50aXRpZXMoKVxuICAgIH0pXG5cbiAgICB0aGlzLmRjbC5vbkV2ZW50KChldmVudCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGEgYXMgYW55XG4gICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAndXVpZEV2ZW50JzpcbiAgICAgICAgICBlbmdpbmUuZXZlbnRNYW5hZ2VyLmZpcmVFdmVudChuZXcgVVVJREV2ZW50KGRhdGEudXVpZCwgZGF0YS5wYXlsb2FkKSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdyYXljYXN0UmVzcG9uc2UnOlxuICAgICAgICAgIGlmIChkYXRhLnF1ZXJ5VHlwZSA9PT0gJ0hpdEZpcnN0Jykge1xuICAgICAgICAgICAgZW5naW5lLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgICAgICAgIG5ldyBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0eT4oZGF0YSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEucXVlcnlUeXBlID09PSAnSGl0QWxsJykge1xuICAgICAgICAgICAgZW5naW5lLmV2ZW50TWFuYWdlci5maXJlRXZlbnQoXG4gICAgICAgICAgICAgIG5ldyBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0aWVzPihkYXRhKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdhY3Rpb25CdXR0b25FdmVudCc6XG4gICAgICAgICAgZW5naW5lLmV2ZW50TWFuYWdlci5maXJlRXZlbnQobmV3IFBvaW50ZXJFdmVudChkYXRhLnBheWxvYWQpKVxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBzeXN0ZW0ub25BZGRFbnRpdHkgaXMgY2FsbGVkIGJ5IHRoZSBlbmdpbmUgd2hlbiBhIGVudGl0eSBpcyBhZGRlZCB0byB0aGVcbiAgICogZW5naW5lLlxuICAgKi9cbiAgb25BZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgaWYgKGVudGl0eSAmJiBlbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIGNvbnN0IGVudGl0eUlkID0gZW50aXR5LnV1aWRcbiAgICAgIGNvbnN0IHBhcmVudCA9IGVudGl0eS5nZXRQYXJlbnQoKVxuXG4gICAgICB0aGlzLmRjbC5hZGRFbnRpdHkoZW50aXR5SWQpXG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgdGhlIGVudGl0eSBoYXMgYSBwYXJlbnQsIHdlIHNlbmQgdGhlIHRoZSBlbnBhcmVudGluZyBzaWduYWxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBlbmdpbmUgd2lsbCBrbm93IHRoZSBlbnRpdHkgaXMgc2V0IGFzIGEgY2hpbGQgb2ZcbiAgICAgICAgLy8gZW5naW5lLnJvb3RFbnRpdHkgYnkgZGVmYXVsdFxuICAgICAgICB0aGlzLmRjbC5zZXRQYXJlbnQoZW50aXR5SWQsIHBhcmVudC51dWlkKVxuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIGNyZWF0ZXMgYSBjYWNoZSBkaWN0aW9uYXJ5IHRvIGF2b2lkIHNlbmQgcmVkdW5kYW50IGluZm9ybWF0aW9uIHRvXG4gICAgICAvLyB0aGUgZW5naW5lIGluIG9yZGVyIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdvcmsgaW4gdGhlIG1haW4gdGhyZWFkLlxuICAgICAgdGhpcy5jYWNoZWRDb21wb25lbnRzW2VudGl0eUlkXSA9IHt9XG5cbiAgICAgIC8vIHRoaXMgaXRlcmF0b3Igc2VuZHMgdGhlIGN1cnJlbnQgY29tcG9uZW50cyBvZiB0ZSBlbmdpbmUgYXQgdGhlIG1vbWVudFxuICAgICAgLy8gb2YgYWRkaXRpb25cbiAgICAgIGZvciAoY29uc3QgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBlbnRpdHkuY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuICAgICAgICBjb25zdCBjbGFzc0lkID0gZ2V0Q29tcG9uZW50Q2xhc3NJZChjb21wb25lbnQpXG5cbiAgICAgICAgaWYgKGNsYXNzSWQgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoaXNEaXNwb3NhYmxlQ29tcG9uZW50KGNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgIC8vIFNlbmQgdGhlIGF0dGFjaCBjb21wb25lbnQgc2lnbmFsXG4gICAgICAgICAgICB0aGlzLmRjbC5hdHRhY2hFbnRpdHlDb21wb25lbnQoXG4gICAgICAgICAgICAgIGVudGl0eS51dWlkLFxuICAgICAgICAgICAgICBjb21wb25lbnROYW1lLFxuICAgICAgICAgICAgICBnZXRDb21wb25lbnRJZChjb21wb25lbnQpXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudEpzb246IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudClcblxuICAgICAgICAgICAgLy8gU2VuZCB0aGUgdXBkYXRlZCBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuZGNsLnVwZGF0ZUVudGl0eUNvbXBvbmVudChcbiAgICAgICAgICAgICAgZW50aXR5SWQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgIGNsYXNzSWQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudEpzb25cbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjYWNoZWQgY29weSBvZiB0aGUgc2VudCBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkQ29tcG9uZW50c1tlbnRpdHlJZF1bY29tcG9uZW50TmFtZV0gPSBjb21wb25lbnRKc29uXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHN5c3RlbS5vblJlbW92ZUVudGl0eSBpcyBjYWxsZWQgYnkgdGhlIGVuZ2luZSB3aGVuIGEgZW50aXR5IGdldHMgcmVtb3ZlZFxuICAgKiBmcm9tIHRoZSBlbmdpbmUuXG4gICAqL1xuICBvblJlbW92ZUVudGl0eShlbnRpdHk6IElFbnRpdHkpIHtcbiAgICBpZiAoZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICBjb25zdCBlbnRpdHlJZCA9IGVudGl0eS51dWlkXG5cbiAgICAgIC8vIFNlbmQgdGhlIHJlbW92ZUVudGl0eSBzaWduYWxcbiAgICAgIHRoaXMuZGNsLnJlbW92ZUVudGl0eShlbnRpdHlJZClcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBjYWNoZXMgZnJvbSBsb2NhbCBtZW1vcnlcbiAgICAgIGRlbGV0ZSB0aGlzLmNhY2hlZENvbXBvbmVudHNbZW50aXR5SWRdXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhdCB0aGUgZW5kIG9mIGV2ZXJ5IHVwZGF0ZSBjeWNsZS5cbiAgICogSXQgZmluZHMgYW5kIHNlbmRzIHVwZGF0ZXMgaW4gY29tcG9uZW50cyBvZiB0aGUgZW5naW5lIGVudGl0aWVzLlxuICAgKi9cbiAgcHJpdmF0ZSBwcmVzZW50RW50aXRpZXMoKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuZW5naW5lLmVudGl0aWVzKSB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVuZ2luZS5lbnRpdGllc1tpXVxuXG4gICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudE5hbWUgaW4gZW50aXR5LmNvbXBvbmVudHMpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cbiAgICAgICAgY29uc3QgY2xhc3NJZCA9IGdldENvbXBvbmVudENsYXNzSWQoY29tcG9uZW50KVxuXG4gICAgICAgIGlmIChjbGFzc0lkICE9PSBudWxsICYmICFpc0Rpc3Bvc2FibGVDb21wb25lbnQoY29tcG9uZW50KSkge1xuICAgICAgICAgIGNvbnN0IGpzb25SZXByZXNlbnRhdGlvbiA9IHRoaXMuZ2V0SnNvbklmRGlydHkoXG4gICAgICAgICAgICBlbnRpdHkudXVpZCxcbiAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICBjb21wb25lbnRcbiAgICAgICAgICApXG4gICAgICAgICAgaWYgKGpzb25SZXByZXNlbnRhdGlvbikge1xuICAgICAgICAgICAgLy8gU2VuZCB0aGUgdXBkYXRlZCBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuZGNsLnVwZGF0ZUVudGl0eUNvbXBvbmVudChcbiAgICAgICAgICAgICAgZW50aXR5LnV1aWQsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICAgIGNsYXNzSWQsXG4gICAgICAgICAgICAgIGpzb25SZXByZXNlbnRhdGlvblxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgdGhpcy5jbGVhckRpcnR5KFxuICAgICAgICAgICAgICBlbnRpdHkudXVpZCxcbiAgICAgICAgICAgICAgY29tcG9uZW50TmFtZSxcbiAgICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgICBqc29uUmVwcmVzZW50YXRpb25cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuZW5naW5lLmRpc3Bvc2FibGVDb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmVuZ2luZS5kaXNwb3NhYmxlQ29tcG9uZW50c1tpZF1cbiAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlQ29tcG9uZW50ICYmIGNvbXBvbmVudC5kaXJ0eSkge1xuICAgICAgICB0aGlzLmRjbC5jb21wb25lbnRVcGRhdGVkKGlkLCBKU09OLnN0cmluZ2lmeShjb21wb25lbnQpKVxuICAgICAgICBjb21wb25lbnQuZGlydHkgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYWZ0ZXIgYSBjb21wb25lbnQgaXMgYWRkZWQgdG8gYW4gZW50aXR5LiBUaGUgZXZlbnRcbiAgICogKHBhcmFtIDEpIGNvbnRhaW5zIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gdG8gbm90aWZ5IHRoZSBlbmdpbmUgYWJvdXQgdGhlXG4gICAqIGNvbXBvbmVudCB0aGF0IHdhcyBhZGRlZCBhbmQgdGhlIGVudGl0eS5cbiAgICovXG4gIHByaXZhdGUgY29tcG9uZW50QWRkZWQoZXZlbnQ6IENvbXBvbmVudEFkZGVkKSB7XG4gICAgaWYgKGV2ZW50LmVudGl0eS5pc0FkZGVkVG9FbmdpbmUoKSkge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gZXZlbnQuZW50aXR5LmNvbXBvbmVudHNbZXZlbnQuY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGlzRGlzcG9zYWJsZUNvbXBvbmVudChjb21wb25lbnQpKSB7XG4gICAgICAgIHRoaXMuZGNsLmF0dGFjaEVudGl0eUNvbXBvbmVudChcbiAgICAgICAgICBldmVudC5lbnRpdHkudXVpZCxcbiAgICAgICAgICBldmVudC5jb21wb25lbnROYW1lLFxuICAgICAgICAgIGdldENvbXBvbmVudElkKGNvbXBvbmVudClcbiAgICAgICAgKVxuICAgICAgfSBlbHNlIGlmIChldmVudC5jbGFzc0lkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEpzb246IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudClcblxuICAgICAgICAvLyBTZW5kIHRoZSB1cGRhdGVkIGNvbXBvbmVudFxuICAgICAgICB0aGlzLmRjbC51cGRhdGVFbnRpdHlDb21wb25lbnQoXG4gICAgICAgICAgZXZlbnQuZW50aXR5LnV1aWQsXG4gICAgICAgICAgZXZlbnQuY29tcG9uZW50TmFtZSxcbiAgICAgICAgICBldmVudC5jbGFzc0lkLFxuICAgICAgICAgIGNvbXBvbmVudEpzb25cbiAgICAgICAgKVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgY2FjaGVkIGNvcHkgb2YgdGhlIHNlbnQgY29tcG9uZW50XG4gICAgICAgIHRoaXMuY2FjaGVkQ29tcG9uZW50c1tldmVudC5lbnRpdHkudXVpZF1bZXZlbnQuY29tcG9uZW50TmFtZV0gPVxuICAgICAgICAgIGNvbXBvbmVudEpzb25cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gYSBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIGFuIGVudGl0eS5cbiAgICovXG4gIHByaXZhdGUgY29tcG9uZW50UmVtb3ZlZChldmVudDogQ29tcG9uZW50UmVtb3ZlZCkge1xuICAgIGlmIChldmVudC5lbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIHRoaXMuZGNsLnJlbW92ZUVudGl0eUNvbXBvbmVudChldmVudC5lbnRpdHkudXVpZCwgZXZlbnQuY29tcG9uZW50TmFtZSlcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBjYWNoZWQgY29tcG9uZW50IHNvIHdlIGNhbiBzZW5kIGl0IGFnYWluIHdoZW4gcmUtYWRkaW5nXG4gICAgICBkZWxldGUgdGhpcy5jYWNoZWRDb21wb25lbnRzW2V2ZW50LmVudGl0eS51dWlkXVtldmVudC5jb21wb25lbnROYW1lXVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgYWZ0ZXIgYSBkaXNwb3NhYmxlQ29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqIEl0IGluc3RhbnRpYXRlcyB0aGUgY29tcG9uZW50IGluIHRoZSBlbmdpbmUsIHRoZSBldmVudCB0aGF0IHVwZGF0ZXMgdGhlXG4gICAqIGNyZWF0ZWQgY29tcG9uZW50IGlzIGZpcmVkIGltbWVkaWF0bHkgYWZ0ZXIuXG4gICAqL1xuICBwcml2YXRlIGRpc3Bvc2FibGVDb21wb25lbnRDcmVhdGVkKGV2ZW50OiBEaXNwb3NhYmxlQ29tcG9uZW50Q3JlYXRlZCkge1xuICAgIHRoaXMuZGNsLmNvbXBvbmVudENyZWF0ZWQoXG4gICAgICBldmVudC5jb21wb25lbnRJZCxcbiAgICAgIGV2ZW50LmNvbXBvbmVudE5hbWUsXG4gICAgICBldmVudC5jbGFzc0lkXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBhZnRlciBhIGRpc3Bvc2FibGVDb21wb25lbnQgaXMgdXBkYXRlZCwgb25jZSBwZXJcbiAgICogdXBkYXRlIGN5Y2xlIGFuZCBvbmNlIGFmdGVyIGNyZWF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlQ29tcG9uZW50UmVtb3ZlZChldmVudDogRGlzcG9zYWJsZUNvbXBvbmVudFJlbW92ZWQpIHtcbiAgICB0aGlzLmRjbC5jb21wb25lbnREaXNwb3NlZChldmVudC5jb21wb25lbnRJZClcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgYSBkaXBvc2FibGVDb21wb25lbnQgZ2V0cyBkaXNwb3NlZC4gVGhhdFxuICAgKiBwcm9jZXNzIGlzIG1hbnVhbC5cbiAgICpcbiAgICogVE9ETyhtZW5kdXosZGFuaSk6IFdoYXQgaGFwcGVucyBpZiBhIGRpc3Bvc2FibGVDb21wb25lbnQgZ2V0cyBkaXNwb3NlZCBhbmRcbiAgICogaXQgcmVtYWlucyBhdHRhY2hlZCB0byBzb21lIGVudGl0aWVzP1xuICAgKi9cbiAgcHJpdmF0ZSBkaXNwb3NhYmxlQ29tcG9uZW50VXBkYXRlZChldmVudDogRGlzcG9zYWJsZUNvbXBvbmVudFVwZGF0ZWQpIHtcbiAgICB0aGlzLmRjbC5jb21wb25lbnRVcGRhdGVkKFxuICAgICAgZXZlbnQuY29tcG9uZW50SWQsXG4gICAgICBKU09OLnN0cmluZ2lmeShldmVudC5jb21wb25lbnQpXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgcGFyZW50IGNoYW5nZXMgaW4gYW4gZW50aXR5LlxuICAgKi9cbiAgcHJpdmF0ZSBwYXJlbnRDaGFuZ2VkKGV2ZW50OiBQYXJlbnRDaGFuZ2VkKSB7XG4gICAgdGhpcy5kY2wuc2V0UGFyZW50KFxuICAgICAgZXZlbnQuZW50aXR5LnV1aWQsXG4gICAgICBldmVudC5wYXJlbnQgPyBldmVudC5wYXJlbnQudXVpZCA6IFJPT1RfRU5USVRZX0lEXG4gICAgKVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRKc29uSWZEaXJ0eShcbiAgICBlbnRpdHlJZDogc3RyaW5nLFxuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBjb21wb25lbnQ6IGFueVxuICApOiBmYWxzZSB8IHN0cmluZyB7XG4gICAgY29uc3QganNvblJlcHJlc2VudGF0aW9uID0gSlNPTi5zdHJpbmdpZnkoY29tcG9uZW50KVxuICAgIHJldHVybiAoXG4gICAgICBqc29uUmVwcmVzZW50YXRpb24gIT09IHRoaXMuY2FjaGVkQ29tcG9uZW50c1tlbnRpdHlJZF1bY29tcG9uZW50TmFtZV0gJiZcbiAgICAgIGpzb25SZXByZXNlbnRhdGlvblxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJEaXJ0eShcbiAgICBlbnRpdHlJZDogc3RyaW5nLFxuICAgIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgICBjb21wb25lbnQ6IGFueSxcbiAgICBqc29uUmVwcmVzZW50YXRpb246IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLmNhY2hlZENvbXBvbmVudHNbZW50aXR5SWRdW2NvbXBvbmVudE5hbWVdID0ganNvblJlcHJlc2VudGF0aW9uXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SQUQyREVHID0gZXhwb3J0cy5ERUcyUkFEID0gZXhwb3J0cy5FcHNpbG9uID0gZXhwb3J0cy5Ub0xpbmVhclNwYWNlID0gZXhwb3J0cy5Ub0dhbW1hU3BhY2UgPSBleHBvcnRzLlNwYWNlID0gZXhwb3J0cy5PcmllbnRhdGlvbiA9IHZvaWQgMDtcbi8qKlxuICogRGVmaW5lcyBwb3RlbnRpYWwgb3JpZW50YXRpb24gZm9yIGJhY2sgZmFjZSBjdWxsaW5nXG4gKiBAcHVibGljXG4gKi9cbnZhciBPcmllbnRhdGlvbjtcbihmdW5jdGlvbiAoT3JpZW50YXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDbG9ja3dpc2VcbiAgICAgKi9cbiAgICBPcmllbnRhdGlvbltPcmllbnRhdGlvbltcIkNXXCJdID0gMF0gPSBcIkNXXCI7XG4gICAgLyoqIENvdW50ZXIgY2xvY2t3aXNlICovXG4gICAgT3JpZW50YXRpb25bT3JpZW50YXRpb25bXCJDQ1dcIl0gPSAxXSA9IFwiQ0NXXCI7XG59KShPcmllbnRhdGlvbiA9IGV4cG9ydHMuT3JpZW50YXRpb24gfHwgKGV4cG9ydHMuT3JpZW50YXRpb24gPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHN1cHBvcnRlZCBzcGFjZXNcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFNwYWNlO1xuKGZ1bmN0aW9uIChTcGFjZSkge1xuICAgIC8qKiBMb2NhbCAob2JqZWN0KSBzcGFjZSAqL1xuICAgIFNwYWNlW1NwYWNlW1wiTE9DQUxcIl0gPSAwXSA9IFwiTE9DQUxcIjtcbiAgICAvKiogV29ybGQgc3BhY2UgKi9cbiAgICBTcGFjZVtTcGFjZVtcIldPUkxEXCJdID0gMV0gPSBcIldPUkxEXCI7XG4gICAgLyoqIEJvbmUgc3BhY2UgKi9cbiAgICBTcGFjZVtTcGFjZVtcIkJPTkVcIl0gPSAyXSA9IFwiQk9ORVwiO1xufSkoU3BhY2UgPSBleHBvcnRzLlNwYWNlIHx8IChleHBvcnRzLlNwYWNlID0ge30pKTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGEgdmFsdWUgdG8gZ2FtbWEgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub0dhbW1hU3BhY2UgPSAxIC8gMi4yO1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGNvbnZlcnQgYSB2YWx1ZSB0byBsaW5lYXIgc3BhY2VcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub0xpbmVhclNwYWNlID0gMi4yO1xuLyoqXG4gKiBDb25zdGFudCB1c2VkIHRvIGRlZmluZSB0aGUgbWluaW1hbCBudW1iZXIgdmFsdWUgaW4gQmFieWxvbi5qc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLkVwc2lsb24gPSAwLjAwMDAwMTtcbi8qKlxuICogQ29uc3RhbnQgdXNlZCB0byBjb252ZXJ0IGZyb20gRXVsZXIgZGVncmVlcyB0byByYWRpYW5zXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuREVHMlJBRCA9IE1hdGguUEkgLyAxODA7XG4vKipcbiAqIENvbnN0YW50IHVzZWQgdG8gY29udmVydCBmcm9tIHJhZGlhbnMgdG8gRXVsZXIgZGVncmVlc1xuICogQHB1YmxpY1xuICovXG5leHBvcnRzLlJBRDJERUcgPSAzNjAgLyAoTWF0aC5QSSAqIDIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1aWxkQXJyYXkgPSB2b2lkIDA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgZ2l2ZW4gc2l6ZSBmaWxsZWQgd2l0aCBlbGVtZW50IGJ1aWx0IGZyb20gdGhlIGdpdmVuIGNvbnN0cnVjdG9yIGFuZCB0aGUgcGFyYW10ZXJzXG4gKiBAcGFyYW0gc2l6ZSAtIHRoZSBudW1iZXIgb2YgZWxlbWVudCB0byBjb25zdHJ1Y3QgYW5kIHB1dCBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSBpdGVtQnVpbGRlciAtIGEgY2FsbGJhY2sgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBpdGVtLiBDYWxsZWQgb25jZSBwZXIgYXJyYXkgZW50cnkuXG4gKiBAcmV0dXJucyBhIG5ldyBhcnJheSBmaWxsZWQgd2l0aCBuZXcgb2JqZWN0c1xuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkQXJyYXkoc2l6ZSwgaXRlbUJ1aWxkZXIpIHtcbiAgICBjb25zdCBhID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgICAgYS5wdXNoKGl0ZW1CdWlsZGVyKCkpO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn1cbmV4cG9ydHMuYnVpbGRBcnJheSA9IGJ1aWxkQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2NhbGFyID0gdm9pZCAwO1xuLyoqXG4gKiBTY2FsYXIgY29tcHV0YXRpb24gbGlicmFyeVxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTY2FsYXIge1xuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gOiB0cnVlIGlmIHRoZSBhYnNvbHV0ZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYiBpcyBsb3dlciB0aGFuIGVwc2lsb24gKGRlZmF1bHQgPSAxLjQwMTI5OEUtNDUpXG4gICAgICogQHBhcmFtIGEgLSBudW1iZXJcbiAgICAgKiBAcGFyYW0gYiAtIG51bWJlclxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gKGRlZmF1bHQgPSAxLjQwMTI5OEUtNDUpXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgYWJzb2x1dGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgYW5kIGIgaXMgbG93ZXIgdGhhbiBlcHNpbG9uIChkZWZhdWx0ID0gMS40MDEyOThFLTQ1KVxuICAgICAqL1xuICAgIHN0YXRpYyBXaXRoaW5FcHNpbG9uKGEsIGIsIGVwc2lsb24gPSAxLjQwMTI5OGUtNDUpIHtcbiAgICAgICAgY29uc3QgbnVtID0gYSAtIGI7XG4gICAgICAgIHJldHVybiAtZXBzaWxvbiA8PSBudW0gJiYgbnVtIDw9IGVwc2lsb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgOiB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gICAgICogQHBhcmFtIGkgLSBudW1iZXJcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBwZXIgY2FzZSB0cmFuc2xhdGlvbiBvZiB0aGUgbnVtYmVyIGkgdG8gaGV4YWRlY2ltYWwuXG4gICAgICovXG4gICAgc3RhdGljIFRvSGV4KGkpIHtcbiAgICAgICAgY29uc3Qgc3RyID0gaS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpIDw9IDE1KSB7XG4gICAgICAgICAgICByZXR1cm4gKCcwJyArIHN0cikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgLTEgaWYgdmFsdWUgaXMgbmVnYXRpdmUgYW5kICsxIGlzIHZhbHVlIGlzIHBvc2l0aXZlLlxuICAgICAqIEBwYXJhbSBfdmFsdWUgLSB0aGUgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgaXRzZWxmIGlmIGl0J3MgZXF1YWwgdG8gemVyby5cbiAgICAgKi9cbiAgICBzdGF0aWMgU2lnbih2YWx1ZSkge1xuICAgICAgICBjb25zdCBfdmFsdWUgPSArdmFsdWU7IC8vIGNvbnZlcnQgdG8gYSBudW1iZXJcbiAgICAgICAgaWYgKF92YWx1ZSA9PT0gMCB8fCBpc05hTihfdmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gX3ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdmFsdWUgPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBpdHNlbGYgaWYgaXQncyBiZXR3ZWVuIG1pbiBhbmQgbWF4LlxuICAgICAqIFJldHVybnMgbWluIGlmIHRoZSB2YWx1ZSBpcyBsb3dlciB0aGFuIG1pbi5cbiAgICAgKiBSZXR1cm5zIG1heCBpZiB0aGUgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIG1heC5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2xtYXBcbiAgICAgKiBAcGFyYW0gbWluIC0gdGhlIG1pbiB2YWx1ZSB0byBjbGFtcCB0byAoZGVmYXVsdDogMClcbiAgICAgKiBAcGFyYW0gbWF4IC0gdGhlIG1heCB2YWx1ZSB0byBjbGFtcCB0byAoZGVmYXVsdDogMSlcbiAgICAgKiBAcmV0dXJucyB0aGUgY2xhbXBlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBDbGFtcCh2YWx1ZSwgbWluID0gMCwgbWF4ID0gMSkge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIHZhbHVlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHRoZSBsb2cyIG9mIHZhbHVlLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjb21wdXRlIGxvZzIgb2ZcbiAgICAgKiBAcmV0dXJucyB0aGUgbG9nMiBvZiB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgTG9nMih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5sb2codmFsdWUpICogTWF0aC5MT0cyRTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9vcHMgdGhlIHZhbHVlLCBzbyB0aGF0IGl0IGlzIG5ldmVyIGxhcmdlciB0aGFuIGxlbmd0aCBhbmQgbmV2ZXIgc21hbGxlciB0aGFuIDAuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHNpbWlsYXIgdG8gdGhlIG1vZHVsbyBvcGVyYXRvciBidXQgaXQgd29ya3Mgd2l0aCBmbG9hdGluZyBwb2ludCBudW1iZXJzLlxuICAgICAqIEZvciBleGFtcGxlLCB1c2luZyAzLjAgZm9yIHQgYW5kIDIuNSBmb3IgbGVuZ3RoLCB0aGUgcmVzdWx0IHdvdWxkIGJlIDAuNS5cbiAgICAgKiBXaXRoIHQgPSA1IGFuZCBsZW5ndGggPSAyLjUsIHRoZSByZXN1bHQgd291bGQgYmUgMC4wLlxuICAgICAqIE5vdGUsIGhvd2V2ZXIsIHRoYXQgdGhlIGJlaGF2aW91ciBpcyBub3QgZGVmaW5lZCBmb3IgbmVnYXRpdmUgbnVtYmVycyBhcyBpdCBpcyBmb3IgdGhlIG1vZHVsbyBvcGVyYXRvclxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZVxuICAgICAqIEBwYXJhbSBsZW5ndGggLSB0aGUgbGVuZ3RoXG4gICAgICogQHJldHVybnMgdGhlIGxvb3BlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBSZXBlYXQodmFsdWUsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgLSBNYXRoLmZsb29yKHZhbHVlIC8gbGVuZ3RoKSAqIGxlbmd0aDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplIHRoZSB2YWx1ZSBiZXR3ZWVuIDAuMCBhbmQgMS4wIHVzaW5nIG1pbiBhbmQgbWF4IHZhbHVlc1xuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIG5vcm1hbGl6ZVxuICAgICAqIEBwYXJhbSBtaW4gLSBtYXggdG8gbm9ybWFsaXplIGJldHdlZW5cbiAgICAgKiBAcGFyYW0gbWF4IC0gbWluIHRvIG5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHJldHVybnMgdGhlIG5vcm1hbGl6ZWQgdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgTm9ybWFsaXplKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZW5vcm1hbGl6ZSB0aGUgdmFsdWUgZnJvbSAwLjAgYW5kIDEuMCB1c2luZyBtaW4gYW5kIG1heCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZCAtIHZhbHVlIHRvIGRlbm9ybWFsaXplXG4gICAgICogQHBhcmFtIG1pbiAtIG1heCB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHBhcmFtIG1heCAtIG1pbiB0byBkZW5vcm1hbGl6ZSBiZXR3ZWVuXG4gICAgICogQHJldHVybnMgdGhlIGRlbm9ybWFsaXplZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBEZW5vcm1hbGl6ZShub3JtYWxpemVkLCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplZCAqIChtYXggLSBtaW4pICsgbWluO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzaG9ydGVzdCBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGdpdmVuIGFuZ2xlcyBnaXZlbiBpbiBkZWdyZWVzLlxuICAgICAqIEBwYXJhbSBjdXJyZW50IC0gY3VycmVudCBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIHRhcmdldCAtIHRhcmdldCBhbmdsZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybnMgdGhlIGRlbHRhXG4gICAgICovXG4gICAgc3RhdGljIERlbHRhQW5nbGUoY3VycmVudCwgdGFyZ2V0KSB7XG4gICAgICAgIGxldCBudW0gPSBTY2FsYXIuUmVwZWF0KHRhcmdldCAtIGN1cnJlbnQsIDM2MC4wKTtcbiAgICAgICAgaWYgKG51bSA+IDE4MC4wKSB7XG4gICAgICAgICAgICBudW0gLT0gMzYwLjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGluZ1BvbmdzIHRoZSB2YWx1ZSB0LCBzbyB0aGF0IGl0IGlzIG5ldmVyIGxhcmdlciB0aGFuIGxlbmd0aCBhbmQgbmV2ZXIgc21hbGxlciB0aGFuIDAuXG4gICAgICogQHBhcmFtIHR4IC0gdmFsdWVcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIC0gbGVuZ3RoXG4gICAgICogQHJldHVybnMgVGhlIHJldHVybmVkIHZhbHVlIHdpbGwgbW92ZSBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIDAgYW5kIGxlbmd0aFxuICAgICAqL1xuICAgIHN0YXRpYyBQaW5nUG9uZyh0eCwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHQgPSBTY2FsYXIuUmVwZWF0KHR4LCBsZW5ndGggKiAyLjApO1xuICAgICAgICByZXR1cm4gbGVuZ3RoIC0gTWF0aC5hYnModCAtIGxlbmd0aCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVycG9sYXRlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4IHdpdGggc21vb3RoaW5nIGF0IHRoZSBsaW1pdHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGludGVycG9sYXRlcyBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluIGEgc2ltaWxhciB3YXkgdG8gTGVycC4gSG93ZXZlciwgdGhlIGludGVycG9sYXRpb24gd2lsbCBncmFkdWFsbHkgc3BlZWQgdXBcbiAgICAgKiBmcm9tIHRoZSBzdGFydCBhbmQgc2xvdyBkb3duIHRvd2FyZCB0aGUgZW5kLiBUaGlzIGlzIHVzZWZ1bCBmb3IgY3JlYXRpbmcgbmF0dXJhbC1sb29raW5nIGFuaW1hdGlvbiwgZmFkaW5nIGFuZCBvdGhlciB0cmFuc2l0aW9ucy5cbiAgICAgKiBAcGFyYW0gZnJvbSAtIGZyb21cbiAgICAgKiBAcGFyYW0gdG8gLSB0b1xuICAgICAqIEBwYXJhbSB0eCAtIHZhbHVlXG4gICAgICogQHJldHVybnMgdGhlIHNtb290aCBzdGVwcGVkIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIFNtb290aFN0ZXAoZnJvbSwgdG8sIHR4KSB7XG4gICAgICAgIGxldCB0ID0gU2NhbGFyLkNsYW1wKHR4KTtcbiAgICAgICAgdCA9IC0yLjAgKiB0ICogdCAqIHQgKyAzLjAgKiB0ICogdDtcbiAgICAgICAgcmV0dXJuIHRvICogdCArIGZyb20gKiAoMS4wIC0gdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgdmFsdWUgY3VycmVudCB0b3dhcmRzIHRhcmdldC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgZXNzZW50aWFsbHkgdGhlIHNhbWUgYXMgTWF0aGYuTGVycCBidXQgaW5zdGVhZCB0aGUgZnVuY3Rpb24gd2lsbCBlbnN1cmUgdGhhdCB0aGUgc3BlZWQgbmV2ZXIgZXhjZWVkcyBtYXhEZWx0YS5cbiAgICAgKiBOZWdhdGl2ZSB2YWx1ZXMgb2YgbWF4RGVsdGEgcHVzaGVzIHRoZSB2YWx1ZSBhd2F5IGZyb20gdGFyZ2V0LlxuICAgICAqIEBwYXJhbSBjdXJyZW50IC0gY3VycmVudCB2YWx1ZVxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSB0YXJnZXQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4RGVsdGEgLSBtYXggZGlzdGFuY2UgdG8gbW92ZVxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBNb3ZlVG93YXJkcyhjdXJyZW50LCB0YXJnZXQsIG1heERlbHRhKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBpZiAoTWF0aC5hYnModGFyZ2V0IC0gY3VycmVudCkgPD0gbWF4RGVsdGEpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRhcmdldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGN1cnJlbnQgKyBTY2FsYXIuU2lnbih0YXJnZXQgLSBjdXJyZW50KSAqIG1heERlbHRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMgTW92ZVRvd2FyZHMgYnV0IG1ha2VzIHN1cmUgdGhlIHZhbHVlcyBpbnRlcnBvbGF0ZSBjb3JyZWN0bHkgd2hlbiB0aGV5IHdyYXAgYXJvdW5kIDM2MCBkZWdyZWVzLlxuICAgICAqXG4gICAgICogVmFyaWFibGVzIGN1cnJlbnQgYW5kIHRhcmdldCBhcmUgYXNzdW1lZCB0byBiZSBpbiBkZWdyZWVzLiBGb3Igb3B0aW1pemF0aW9uIHJlYXNvbnMsIG5lZ2F0aXZlIHZhbHVlcyBvZiBtYXhEZWx0YVxuICAgICAqICBhcmUgbm90IHN1cHBvcnRlZCBhbmQgbWF5IGNhdXNlIG9zY2lsbGF0aW9uLiBUbyBwdXNoIGN1cnJlbnQgYXdheSBmcm9tIGEgdGFyZ2V0IGFuZ2xlLCBhZGQgMTgwIHRvIHRoYXQgYW5nbGUgaW5zdGVhZC5cbiAgICAgKiBAcGFyYW0gY3VycmVudCAtIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gdGFyZ2V0IHZhbHVlXG4gICAgICogQHBhcmFtIG1heERlbHRhIC0gbWF4IGRpc3RhbmNlIHRvIG1vdmVcbiAgICAgKiBAcmV0dXJucyByZXN1bHRpbmcgYW5nbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgTW92ZVRvd2FyZHNBbmdsZShjdXJyZW50LCB0YXJnZXQsIG1heERlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IFNjYWxhci5EZWx0YUFuZ2xlKGN1cnJlbnQsIHRhcmdldCk7XG4gICAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgICBpZiAoLW1heERlbHRhIDwgbnVtICYmIG51bSA8IG1heERlbHRhKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBTY2FsYXIuTW92ZVRvd2FyZHMoY3VycmVudCwgY3VycmVudCArIG51bSwgbWF4RGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2NhbGFyIHdpdGggdmFsdWVzIGxpbmVhcmx5IGludGVycG9sYXRlZCBvZiBcImFtb3VudFwiIGJldHdlZW4gdGhlIHN0YXJ0IHNjYWxhciBhbmQgdGhlIGVuZCBzY2FsYXIuXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gdGFyZ2V0IHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGFtb3VudCB0byBsZXJwIGJldHdlZW5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVycGVkIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIExlcnAoc3RhcnQsIGVuZCwgYW1vdW50KSB7XG4gICAgICAgIHJldHVybiBzdGFydCArIChlbmQgLSBzdGFydCkgKiBhbW91bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMgTGVycCBidXQgbWFrZXMgc3VyZSB0aGUgdmFsdWVzIGludGVycG9sYXRlIGNvcnJlY3RseSB3aGVuIHRoZXkgd3JhcCBhcm91bmQgMzYwIGRlZ3JlZXMuXG4gICAgICogVGhlIHBhcmFtZXRlciB0IGlzIGNsYW1wZWQgdG8gdGhlIHJhbmdlIFswLCAxXS4gVmFyaWFibGVzIGEgYW5kIGIgYXJlIGFzc3VtZWQgdG8gYmUgaW4gZGVncmVlcy5cbiAgICAgKiBAcGFyYW0gc3RhcnQgLSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmQgLSB0YXJnZXQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gYW1vdW50IHRvIGxlcnAgYmV0d2VlblxuICAgICAqIEByZXR1cm5zIHRoZSBsZXJwZWQgdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycEFuZ2xlKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBsZXQgbnVtID0gU2NhbGFyLlJlcGVhdChlbmQgLSBzdGFydCwgMzYwLjApO1xuICAgICAgICBpZiAobnVtID4gMTgwLjApIHtcbiAgICAgICAgICAgIG51bSAtPSAzNjAuMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnQgKyBudW0gKiBTY2FsYXIuQ2xhbXAoYW1vdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbGluZWFyIHBhcmFtZXRlciB0IHRoYXQgcHJvZHVjZXMgdGhlIGludGVycG9sYW50IHZhbHVlIHdpdGhpbiB0aGUgcmFuZ2UgW2EsIGJdLlxuICAgICAqIEBwYXJhbSBhIC0gc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYiAtIHRhcmdldCB2YWx1ZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIGJldHdlZW4gYSBhbmQgYlxuICAgICAqIEByZXR1cm5zIHRoZSBpbnZlcnNlTGVycCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBJbnZlcnNlTGVycChhLCBiLCB2YWx1ZSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFNjYWxhci5DbGFtcCgodmFsdWUgLSBhKSAvIChiIC0gYSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gMC4wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgc2NhbGFyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgc2NhbGFycyBcInZhbHVlMVwiLCBcInZhbHVlM1wiLCBcInRhbmdlbnQxXCIsIFwidGFuZ2VudDJcIi5cbiAgICAgKiB7QGxpbmsgaHR0cDovL21hdGh3b3JsZC53b2xmcmFtLmNvbS9IZXJtaXRlUG9seW5vbWlhbC5odG1sfVxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBzcGxpbmUgdmFsdWVcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDEgLSBzcGxpbmUgdmFsdWVcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gc3BsaW5lIHZhbHVlXG4gICAgICogQHBhcmFtIHRhbmdlbnQyIC0gc3BsaW5lIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGlucHV0IHZhbHVlXG4gICAgICogQHJldHVybnMgaGVybWl0ZSByZXN1bHRcbiAgICAgKi9cbiAgICBzdGF0aWMgSGVybWl0ZSh2YWx1ZTEsIHRhbmdlbnQxLCB2YWx1ZTIsIHRhbmdlbnQyLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MSA9IDIuMCAqIGN1YmVkIC0gMy4wICogc3F1YXJlZCArIDEuMDtcbiAgICAgICAgY29uc3QgcGFydDIgPSAtMi4wICogY3ViZWQgKyAzLjAgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MyA9IGN1YmVkIC0gMi4wICogc3F1YXJlZCArIGFtb3VudDtcbiAgICAgICAgY29uc3QgcGFydDQgPSBjdWJlZCAtIHNxdWFyZWQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTEgKiBwYXJ0MSArIHZhbHVlMiAqIHBhcnQyICsgdGFuZ2VudDEgKiBwYXJ0MyArIHRhbmdlbnQyICogcGFydDQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByYW5kb20gZmxvYXQgbnVtYmVyIGJldHdlZW4gYW5kIG1pbiBhbmQgbWF4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBtaW4gLSBtaW4gdmFsdWUgb2YgcmFuZG9tXG4gICAgICogQHBhcmFtIG1heCAtIG1heCB2YWx1ZSBvZiByYW5kb21cbiAgICAgKiBAcmV0dXJucyByYW5kb20gdmFsdWVcbiAgICAgKi9cbiAgICBzdGF0aWMgUmFuZG9tUmFuZ2UobWluLCBtYXgpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBwZXJjZW50YWdlIG9mIGEgbnVtYmVyIGluIGEgZ2l2ZW4gcmFuZ2UuXG4gICAgICpcbiAgICAgKiBSYW5nZVRvUGVyY2VudCg0MCwyMCw2MCkgd2lsbCByZXR1cm4gMC41ICg1MCUpXG4gICAgICogUmFuZ2VUb1BlcmNlbnQoMzQsMCwxMDApIHdpbGwgcmV0dXJuIDAuMzQgKDM0JSlcbiAgICAgKiBAcGFyYW0gbnVtIC0gdG8gY29udmVydCB0byBwZXJjZW50YWdlXG4gICAgICogQHBhcmFtIG1pbiAtIG1pbiByYW5nZVxuICAgICAqIEBwYXJhbSBtYXggLSBtYXggcmFuZ2VcbiAgICAgKiBAcmV0dXJucyB0aGUgcGVyY2VudGFnZVxuICAgICAqL1xuICAgIHN0YXRpYyBSYW5nZVRvUGVyY2VudChudW0sIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiAobnVtIC0gbWluKSAvIChtYXggLSBtaW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgbnVtYmVyIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHBlcmNlbnRhZ2UgaW4gYSBnaXZlbiByYW5nZS5cbiAgICAgKlxuICAgICAqIFBlcmNlbnRUb1JhbmdlKDAuMzQsMCwxMDApIHdpbGwgcmV0dXJuIDM0LlxuICAgICAqIEBwYXJhbSBwZXJjZW50IC0gdG8gY29udmVydCB0byBudW1iZXJcbiAgICAgKiBAcGFyYW0gbWluIC0gbWluIHJhbmdlXG4gICAgICogQHBhcmFtIG1heCAtIG1heCByYW5nZVxuICAgICAqIEByZXR1cm5zIHRoZSBudW1iZXJcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyY2VudFRvUmFuZ2UocGVyY2VudCwgbWluLCBtYXgpIHtcbiAgICAgICAgcmV0dXJuIChtYXggLSBtaW4pICogcGVyY2VudCArIG1pbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYW5nbGUgY29udmVydGVkIHRvIGVxdWl2YWxlbnQgdmFsdWUgYmV0d2VlbiAtTWF0aC5QSSBhbmQgTWF0aC5QSSByYWRpYW5zLlxuICAgICAqIEBwYXJhbSBhbmdsZSAtIFRoZSBhbmdsZSB0byBub3JtYWxpemUgaW4gcmFkaWFuLlxuICAgICAqIEByZXR1cm5zIFRoZSBjb252ZXJ0ZWQgYW5nbGUuXG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZVJhZGlhbnMoYW5nbGUpIHtcbiAgICAgICAgLy8gTW9yZSBwcmVjaXNlIGJ1dCBzbG93ZXIgdmVyc2lvbiBrZXB0IGZvciByZWZlcmVuY2UuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWNvbW1lbnRlZC1vdXQtY29kZVxuICAgICAgICAvKlxuICAgICAgICAgIC8vIGFuZ2xlID0gYW5nbGUgJSBUb29scy5Ud29QaTtcbiAgICAgICAgICAvLyBhbmdsZSA9IChhbmdsZSArIFRvb2xzLlR3b1BpKSAlIFRvb2xzLlR3b1BpO1xuICAgIFxuICAgICAgICAgIC8vaWYgKGFuZ2xlID4gTWF0aC5QSSkge1xuICAgICAgICAgIC8vXHRhbmdsZSAtPSBUb29scy5Ud29QaTtcbiAgICAgICAgICAvL31cbiAgICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIGFuZ2xlIC0gU2NhbGFyLlR3b1BpICogTWF0aC5mbG9vcigoYW5nbGUgKyBNYXRoLlBJKSAvIFNjYWxhci5Ud29QaSk7XG4gICAgfVxufVxuZXhwb3J0cy5TY2FsYXIgPSBTY2FsYXI7XG4vKipcbiAqIFR3byBwaSBjb25zdGFudHMgY29udmVuaWVudCBmb3IgY29tcHV0YXRpb24uXG4gKi9cblNjYWxhci5Ud29QaSA9IE1hdGguUEkgKiAyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2NhbGFyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZWN0b3I0ID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuLyoqXG4gKiBWZWN0b3I0IGNsYXNzIGNyZWF0ZWQgZm9yIEV1bGVyQW5nbGUgY2xhc3MgY29udmVyc2lvbiB0byBRdWF0ZXJuaW9uXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFZlY3RvcjQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBWZWN0b3I0IG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdHMuXG4gICAgICogQHBhcmFtIHggLSB4IHZhbHVlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geSAtIHkgdmFsdWUgb2YgdGhlIHZlY3RvclxuICAgICAqIEBwYXJhbSB6IC0geiB2YWx1ZSBvZiB0aGUgdmVjdG9yXG4gICAgICogQHBhcmFtIHcgLSB3IHZhbHVlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogeCB2YWx1ZSBvZiB0aGUgdmVjdG9yICovXG4gICAgeCwgXG4gICAgLyoqIHkgdmFsdWUgb2YgdGhlIHZlY3RvciAqL1xuICAgIHksIFxuICAgIC8qKiB6IHZhbHVlIG9mIHRoZSB2ZWN0b3IgKi9cbiAgICB6LCBcbiAgICAvKiogdyB2YWx1ZSBvZiB0aGUgdmVjdG9yICovXG4gICAgdykge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLncgPSB3O1xuICAgIH1cbiAgICAvLyBTdGF0aWNzXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IGFzIHRoZSByZXN1bHQgb2YgdGhlIGFkZGl0aW9uIG9mIHRoZSB0d28gZ2l2ZW4gdmVjdG9ycy5cbiAgICAgKiBAcGFyYW0gdmVjdG9yMSAtIHRoZSBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yMiAtIHRoZSBzZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgQWRkKHZlY3RvcjEsIHZlY3RvcjIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHZlY3RvcjEueCwgdmVjdG9yMS55LCB2ZWN0b3IxLnosIHZlY3RvcjEudykuYWRkSW5QbGFjZSh2ZWN0b3IyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgZ2l2ZW4gYXJyYXkuXG4gICAgICogQHBhcmFtIGFycmF5IC0gdGhlIGFycmF5IHRvIHB1bGwgdmFsdWVzIGZyb21cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gdGhlIG9mZnNldCBpbnRvIHRoZSBhcnJheSB0byBzdGFydCBhdFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0sIGFycmF5W29mZnNldCArIDJdLCBhcnJheVtvZmZzZXQgKyAzXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGZyb20gdGhlIHN0YXJ0aW5nIGluZGV4IG9mIHRoZSBnaXZlbiBhcnJheS5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gcHVsbCB2YWx1ZXMgZnJvbVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSB0aGUgb2Zmc2V0IGludG8gdGhlIGFycmF5IHRvIHN0YXJ0IGF0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtvZmZzZXRdO1xuICAgICAgICByZXN1bHQueSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgICAgICByZXN1bHQueiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgICAgICByZXN1bHQudyA9IGFycmF5W29mZnNldCArIDNdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgZ2l2ZW4gRmxvYXRBcnJheS5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gcHVsbCB2YWx1ZXMgZnJvbVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSB0aGUgb2Zmc2V0IGludG8gdGhlIGFycmF5IHRvIHN0YXJ0IGF0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRBcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICBWZWN0b3I0LkZyb21BcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIGZyb20gdGhlIGdpdmVuIGZsb2F0cy5cbiAgICAgKiBAcGFyYW0geCAtIGZsb2F0IHRvIHNldCBmcm9tXG4gICAgICogQHBhcmFtIHkgLSBmbG9hdCB0byBzZXQgZnJvbVxuICAgICAqIEBwYXJhbSB6IC0gZmxvYXQgdG8gc2V0IGZyb21cbiAgICAgKiBAcGFyYW0gdyAtIGZsb2F0IHRvIHNldCBmcm9tXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gdGhlIGZsb2F0cyBpblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdywgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0geDtcbiAgICAgICAgcmVzdWx0LnkgPSB5O1xuICAgICAgICByZXN1bHQueiA9IHo7XG4gICAgICAgIHJlc3VsdC53ID0gdztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCB0byAoMC4wLCAwLjAsIDAuMCwgMC4wKVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIFplcm8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHRvICgxLjAsIDEuMCwgMS4wLCAxLjApXG4gICAgICogQHJldHVybnMgdGhlIG5ldyB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgT25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBub3JtYWxpemVkIFZlY3RvcjQgZnJvbSB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSB0aGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICAgICAqIEByZXR1cm5zIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgTm9ybWFsaXplKHZlY3Rvcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3I0Llplcm8oKTtcbiAgICAgICAgVmVjdG9yNC5Ob3JtYWxpemVUb1JlZih2ZWN0b3IsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGZyb20gdGhlIG5vcm1hbGl6YXRpb24gb2YgdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gdGhlIHZlY3RvciB0byBub3JtYWxpemVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gdGhlIHZlY3RvciB0byBzdG9yZSB0aGUgcmVzdWx0IGluXG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZVRvUmVmKHZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5jb3B5RnJvbSh2ZWN0b3IpO1xuICAgICAgICByZXN1bHQubm9ybWFsaXplKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB2ZWN0b3Igd2l0aCB0aGUgbWluaW11bSB2YWx1ZXMgZnJvbSB0aGUgbGVmdCBhbmQgcmlnaHQgdmVjdG9yc1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gbGVmdCB2ZWN0b3IgdG8gbWluaW1pemVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSByaWdodCB2ZWN0b3IgdG8gbWluaW1pemVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCB0aGUgbWluaW11bSBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgdmVjdG9yIHZhbHVlc1xuICAgICAqL1xuICAgIHN0YXRpYyBNaW5pbWl6ZShsZWZ0LCByaWdodCkge1xuICAgICAgICBjb25zdCBtaW4gPSBuZXcgVmVjdG9yNChsZWZ0LngsIGxlZnQueSwgbGVmdC56LCBsZWZ0LncpO1xuICAgICAgICBtaW4ubWluaW1pemVJblBsYWNlKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHZlY3RvciB3aXRoIHRoZSBtYXhpbXVtIHZhbHVlcyBmcm9tIHRoZSBsZWZ0IGFuZCByaWdodCB2ZWN0b3JzXG4gICAgICogQHBhcmFtIGxlZnQgLSBsZWZ0IHZlY3RvciB0byBtYXhpbWl6ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIHJpZ2h0IHZlY3RvciB0byBtYXhpbWl6ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IHZlY3RvciB3aXRoIHRoZSBtYXhpbXVtIG9mIHRoZSBsZWZ0IGFuZCByaWdodCB2ZWN0b3IgdmFsdWVzXG4gICAgICovXG4gICAgc3RhdGljIE1heGltaXplKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1heCA9IG5ldyBWZWN0b3I0KGxlZnQueCwgbGVmdC55LCBsZWZ0LnosIGxlZnQudyk7XG4gICAgICAgIG1heC5tYXhpbWl6ZUluUGxhY2UocmlnaHQpO1xuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkaXN0YW5jZSAoZmxvYXQpIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIi5cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gdmFsdWUgdG8gY2FsdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW5cbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gdmFsdWUgdG8gY2FsdWxhdGUgdGhlIGRpc3RhbmNlIGJldHdlZW5cbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2UodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3I0LkRpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIChmbG9hdCkgYmV0d2VlbiB0aGUgdmVjdG9ycyBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiLlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSB2YWx1ZSB0byBjYWx1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlblxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSB2YWx1ZSB0byBjYWx1bGF0ZSB0aGUgZGlzdGFuY2UgYmV0d2VlblxuICAgICAqIEByZXR1cm5zIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gdmVjdG9ycyBzcXVhcmVkXG4gICAgICovXG4gICAgc3RhdGljIERpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikge1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggLSB2YWx1ZTIueDtcbiAgICAgICAgY29uc3QgeSA9IHZhbHVlMS55IC0gdmFsdWUyLnk7XG4gICAgICAgIGNvbnN0IHogPSB2YWx1ZTEueiAtIHZhbHVlMi56O1xuICAgICAgICBjb25zdCB3ID0gdmFsdWUxLncgLSB2YWx1ZTIudztcbiAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgbG9jYXRlZCBhdCB0aGUgY2VudGVyIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIi5cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gdmFsdWUgdG8gY2FsdWxhdGUgdGhlIGNlbnRlciBiZXR3ZWVuXG4gICAgICogQHBhcmFtIHZhbHVlMiAtIHZhbHVlIHRvIGNhbHVsYXRlIHRoZSBjZW50ZXIgYmV0d2VlblxuICAgICAqIEByZXR1cm5zIHRoZSBjZW50ZXIgYmV0d2VlbiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2VudGVyKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IFZlY3RvcjQuQWRkKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgY2VudGVyLnNjYWxlSW5QbGFjZSgwLjUpO1xuICAgICAgICByZXR1cm4gY2VudGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbm9ybWFsIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5LlxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYXBwbHlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHZlY3RvclxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWwodmVjdG9yLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3I0Llplcm8oKTtcbiAgICAgICAgVmVjdG9yNC5UcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3IuXG4gICAgICogVGhpcyBtZXRob2RzIGNvbXB1dGVzIHRyYW5zZm9ybWVkIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHZlY3RvcnMgb25seS5cbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGFwcGx5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybWF0aW9uLm07XG4gICAgICAgIGNvbnN0IHggPSB2ZWN0b3IueCAqIG1bMF0gKyB2ZWN0b3IueSAqIG1bNF0gKyB2ZWN0b3IueiAqIG1bOF07XG4gICAgICAgIGNvbnN0IHkgPSB2ZWN0b3IueCAqIG1bMV0gKyB2ZWN0b3IueSAqIG1bNV0gKyB2ZWN0b3IueiAqIG1bOV07XG4gICAgICAgIGNvbnN0IHogPSB2ZWN0b3IueCAqIG1bMl0gKyB2ZWN0b3IueSAqIG1bNl0gKyB2ZWN0b3IueiAqIG1bMTBdO1xuICAgICAgICByZXN1bHQueCA9IHg7XG4gICAgICAgIHJlc3VsdC55ID0geTtcbiAgICAgICAgcmVzdWx0LnogPSB6O1xuICAgICAgICByZXN1bHQudyA9IHZlY3Rvci53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiBmbG9hdHMgKHgsIHksIHosIHcpLlxuICAgICAqIFRoaXMgbWV0aG9kcyBjb21wdXRlcyB0cmFuc2Zvcm1lZCBub3JtYWxpemVkIGRpcmVjdGlvbiB2ZWN0b3JzIG9ubHkuXG4gICAgICogQHBhcmFtIHggLSB2YWx1ZSB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0geSAtIHZhbHVlIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB6IC0gdmFsdWUgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHcgLSB2YWx1ZSB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGFwcGx5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdHMgaW5cbiAgICAgKi9cbiAgICBzdGF0aWMgVHJhbnNmb3JtTm9ybWFsRnJvbUZsb2F0c1RvUmVmKHgsIHksIHosIHcsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybWF0aW9uLm07XG4gICAgICAgIHJlc3VsdC54ID0geCAqIG1bMF0gKyB5ICogbVs0XSArIHogKiBtWzhdO1xuICAgICAgICByZXN1bHQueSA9IHggKiBtWzFdICsgeSAqIG1bNV0gKyB6ICogbVs5XTtcbiAgICAgICAgcmVzdWx0LnogPSB4ICogbVsyXSArIHkgKiBtWzZdICsgeiAqIG1bMTBdO1xuICAgICAgICByZXN1bHQudyA9IHc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0cmluZyB3aXRoIHRoZSBWZWN0b3I0IGNvb3JkaW5hdGVzLlxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgYWxsIHRoZSB2ZWN0b3IgdmFsdWVzXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAoJ3tYOiAnICsgdGhpcy54ICsgJyBZOicgKyB0aGlzLnkgKyAnIFo6JyArIHRoaXMueiArICcgVzonICsgdGhpcy53ICsgJ30nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RyaW5nIFwiVmVjdG9yNFwiLlxuICAgICAqIEByZXR1cm5zIFwiVmVjdG9yNFwiXG4gICAgICovXG4gICAgZ2V0Q2xhc3NOYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1ZlY3RvcjQnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBWZWN0b3I0IGhhc2ggY29kZS5cbiAgICAgKiBAcmV0dXJucyBhIHVuaXF1ZSBoYXNoIGNvZGVcbiAgICAgKi9cbiAgICBnZXRIYXNoQ29kZSgpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB0aGlzLnggfHwgMDtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLnkgfHwgMCk7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy56IHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMudyB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8vIE9wZXJhdG9yc1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgYXJyYXkgcG9wdWxhdGVkIHdpdGggNCBlbGVtZW50cyA6IHRoZSBWZWN0b3I0IGNvb3JkaW5hdGVzLlxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgYXJyYXlcbiAgICAgKi9cbiAgICBhc0FycmF5KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy50b0FycmF5KHJlc3VsdCwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyB0aGUgZ2l2ZW4gYXJyYXkgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggd2l0aCB0aGUgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBhcnJheSB0byBwb3B1bGF0ZVxuICAgICAqIEBwYXJhbSBpbmRleCAtIGluZGV4IG9mIHRoZSBhcnJheSB0byBzdGFydCBhdCAoZGVmYXVsdDogMClcbiAgICAgKiBAcmV0dXJucyB0aGUgVmVjdG9yNC5cbiAgICAgKi9cbiAgICB0b0FycmF5KGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGhpcy54O1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdGhpcy55O1xuICAgICAgICBhcnJheVtpbmRleCArIDJdID0gdGhpcy56O1xuICAgICAgICBhcnJheVtpbmRleCArIDNdID0gdGhpcy53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gdmVjdG9yIHRvIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gdGhlIHZlY3RvciB0byBhZGRcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3I0LlxuICAgICAqL1xuICAgIGFkZEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54ICs9IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSArPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogKz0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgdGhpcy53ICs9IG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgYXMgdGhlIHJlc3VsdCBvZiB0aGUgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yNCBhbmQgdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgYWRkKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggKyBvdGhlclZlY3Rvci54LCB0aGlzLnkgKyBvdGhlclZlY3Rvci55LCB0aGlzLnogKyBvdGhlclZlY3Rvci56LCB0aGlzLncgKyBvdGhlclZlY3Rvci53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3I0IGFuZCB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHRoZSB2ZWN0b3IgdG8gYWRkXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgYWRkVG9SZWYob3RoZXJWZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCArIG90aGVyVmVjdG9yLng7XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy55ICsgb3RoZXJWZWN0b3IueTtcbiAgICAgICAgcmVzdWx0LnogPSB0aGlzLnogKyBvdGhlclZlY3Rvci56O1xuICAgICAgICByZXN1bHQudyA9IHRoaXMudyArIG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCBpbiBwbGFjZSB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIHN1YnRyYWN0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBzdWJ0cmFjdEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54IC09IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAtPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogLT0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgdGhpcy53IC09IG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIGFkZFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgdmVjdG9yIHdpdGggdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN1YnRyYWN0KG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggLSBvdGhlclZlY3Rvci54LCB0aGlzLnkgLSBvdGhlclZlY3Rvci55LCB0aGlzLnogLSBvdGhlclZlY3Rvci56LCB0aGlzLncgLSBvdGhlclZlY3Rvci53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB0aGUgdmVjdG9yIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgc3VidHJhY3RUb1JlZihvdGhlclZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy54IC0gb3RoZXJWZWN0b3IueDtcbiAgICAgICAgcmVzdWx0LnkgPSB0aGlzLnkgLSBvdGhlclZlY3Rvci55O1xuICAgICAgICByZXN1bHQueiA9IHRoaXMueiAtIG90aGVyVmVjdG9yLno7XG4gICAgICAgIHJlc3VsdC53ID0gdGhpcy53IC0gb3RoZXJWZWN0b3IudztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yNCBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gZmxvYXRzIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgc3VidHJhY3Rpb24gb2YgdGhlIGdpdmVuIGZsb2F0cyBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSB2YWx1ZSB0byBzdWJ0cmFjdFxuICAgICAqIEBwYXJhbSB5IC0gdmFsdWUgdG8gc3VidHJhY3RcbiAgICAgKiBAcGFyYW0geiAtIHZhbHVlIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHcgLSB2YWx1ZSB0byBzdWJ0cmFjdFxuICAgICAqIEByZXR1cm5zIG5ldyB2ZWN0b3IgY29udGFpbmluZyB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3VidHJhY3RGcm9tRmxvYXRzKHgsIHksIHosIHcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHosIHRoaXMudyAtIHcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gZmxvYXRzIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0geCAtIHZhbHVlIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHkgLSB2YWx1ZSB0byBzdWJ0cmFjdFxuICAgICAqIEBwYXJhbSB6IC0gdmFsdWUgdG8gc3VidHJhY3RcbiAgICAgKiBAcGFyYW0gdyAtIHZhbHVlIHRvIHN1YnRyYWN0XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgc3VidHJhY3RGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdywgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy54IC0geDtcbiAgICAgICAgcmVzdWx0LnkgPSB0aGlzLnkgLSB5O1xuICAgICAgICByZXN1bHQueiA9IHRoaXMueiAtIHo7XG4gICAgICAgIHJlc3VsdC53ID0gdGhpcy53IC0gdztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yNCBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3I0IG5lZ2F0ZWQgY29vcmRpbmF0ZXMuXG4gICAgICogQHJldHVybnMgYSBuZXcgdmVjdG9yIHdpdGggdGhlIG5lZ2F0ZWQgdmFsdWVzXG4gICAgICovXG4gICAgbmVnYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQoLXRoaXMueCwgLXRoaXMueSwgLXRoaXMueiwgLXRoaXMudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcyBieSBzY2FsZSAoZmxvYXQpLlxuICAgICAqIEBwYXJhbSBzY2FsZSAtIHRoZSBudW1iZXIgdG8gc2NhbGUgd2l0aFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIFZlY3RvcjQuXG4gICAgICovXG4gICAgc2NhbGVJblBsYWNlKHNjYWxlKSB7XG4gICAgICAgIHRoaXMueCAqPSBzY2FsZTtcbiAgICAgICAgdGhpcy55ICo9IHNjYWxlO1xuICAgICAgICB0aGlzLnogKj0gc2NhbGU7XG4gICAgICAgIHRoaXMudyAqPSBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yNCBzZXQgd2l0aCB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIG11bHRpcGxpZWQgYnkgc2NhbGUgKGZsb2F0KS5cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSB0aGUgbnVtYmVyIHRvIHNjYWxlIHdpdGhcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB2ZWN0b3Igd2l0aCB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc2NhbGUoc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSwgdGhpcy56ICogc2NhbGUsIHRoaXMudyAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIG11bHRpcGxpZWQgYnkgc2NhbGUgKGZsb2F0KS5cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSB0aGUgbnVtYmVyIHRvIHNjYWxlIHdpdGhcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gYSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjQuXG4gICAgICovXG4gICAgc2NhbGVUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy54ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy55ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy56ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC53ID0gdGhpcy53ICogc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBWZWN0b3I0IHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBWZWN0b3I0XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjQgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBjdXJyZW50IFZlY3RvcjRcbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggKz0gdGhpcy54ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC55ICs9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiArPSB0aGlzLnogKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LncgKz0gdGhpcy53ICogc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCb29sZWFuIDogVHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIGFyZSBzdHJpY2x5IGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHRoZSB2ZWN0b3IgdG8gY29tcGFyZSBhZ2FpbnN0XG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGV5IGFyZSBlcXVhbFxuICAgICAqL1xuICAgIGVxdWFscyhvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gKG90aGVyVmVjdG9yICYmXG4gICAgICAgICAgICB0aGlzLnggPT09IG90aGVyVmVjdG9yLnggJiZcbiAgICAgICAgICAgIHRoaXMueSA9PT0gb3RoZXJWZWN0b3IueSAmJlxuICAgICAgICAgICAgdGhpcy56ID09PSBvdGhlclZlY3Rvci56ICYmXG4gICAgICAgICAgICB0aGlzLncgPT09IG90aGVyVmVjdG9yLncpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCb29sZWFuIDogVHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3I0IGNvb3JkaW5hdGVzIGFyZSBlYWNoIGJlbmVhdGggdGhlIGRpc3RhbmNlIFwiZXBzaWxvblwiIGZyb20gdGhlIGdpdmVuIHZlY3RvciBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBjb21wYXJlIGFnYWluc3RcbiAgICAgKiBAcGFyYW0gZXBzaWxvbiAtIChEZWZhdWx0OiB2ZXJ5IHNtYWxsIG51bWJlcilcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZXkgYXJlIGVxdWFsXG4gICAgICovXG4gICAgZXF1YWxzV2l0aEVwc2lsb24ob3RoZXJWZWN0b3IsIGVwc2lsb24gPSB0eXBlc18xLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChvdGhlclZlY3RvciAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy54LCBvdGhlclZlY3Rvci54LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy55LCBvdGhlclZlY3Rvci55LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy56LCBvdGhlclZlY3Rvci56LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy53LCBvdGhlclZlY3Rvci53LCBlcHNpbG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gOiBUcnVlIGlmIHRoZSBnaXZlbiBmbG9hdHMgYXJlIHN0cmljdGx5IGVxdWFsIHRvIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSB4IHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB5IC0geSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3RcbiAgICAgKiBAcGFyYW0geiAtIHogdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0XG4gICAgICogQHBhcmFtIHcgLSB3IHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZXF1YWxcbiAgICAgKi9cbiAgICBlcXVhbHNUb0Zsb2F0cyh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT09IHggJiYgdGhpcy55ID09PSB5ICYmIHRoaXMueiA9PT0geiAmJiB0aGlzLncgPT09IHc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgaW4gcGxhY2UgdGhlIGN1cnJlbnQgVmVjdG9yNCBieSB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBtdWx0aXBsZSB3aXRoXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBtdWx0aXBseUluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54ICo9IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAqPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogKj0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgdGhpcy53ICo9IG90aGVyVmVjdG9yLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgc2V0IHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBWZWN0b3I0IGFuZCB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBtdWx0aXBsZSB3aXRoXG4gICAgICogQHJldHVybnMgcmVzdWx0aW5nIG5ldyB2ZWN0b3JcbiAgICAgKi9cbiAgICBtdWx0aXBseShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodGhpcy54ICogb3RoZXJWZWN0b3IueCwgdGhpcy55ICogb3RoZXJWZWN0b3IueSwgdGhpcy56ICogb3RoZXJWZWN0b3IueiwgdGhpcy53ICogb3RoZXJWZWN0b3Iudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBWZWN0b3I0IGFuZCB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBtdWx0aXBsZSB3aXRoXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIHZlY3RvciB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBtdWx0aXBseVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggKiBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy56ICogb3RoZXJWZWN0b3IuejtcbiAgICAgICAgcmVzdWx0LncgPSB0aGlzLncgKiBvdGhlclZlY3Rvci53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCB3aXRoIHRoZSBtdWx0aXBsaWNhdGlvbiByZXN1bHQgb2YgdGhlIGdpdmVuIGZsb2F0cyBhbmQgdGhlIGN1cnJlbnQgVmVjdG9yNCBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0geCAtIHggdmFsdWUgbXVsdGlwbHkgd2l0aFxuICAgICAqIEBwYXJhbSB5IC0geSB2YWx1ZSBtdWx0aXBseSB3aXRoXG4gICAgICogQHBhcmFtIHogLSB6IHZhbHVlIG11bHRpcGx5IHdpdGhcbiAgICAgKiBAcGFyYW0gdyAtIHcgdmFsdWUgbXVsdGlwbHkgd2l0aFxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgbXVsdGlwbHlCeUZsb2F0cyh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggKiB4LCB0aGlzLnkgKiB5LCB0aGlzLnogKiB6LCB0aGlzLncgKiB3KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3I0IHNldCB3aXRoIHRoZSBkaXZpc2lvbiByZXN1bHQgb2YgdGhlIGN1cnJlbnQgVmVjdG9yNCBieSB0aGUgZ2l2ZW4gb25lLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBkZXZpZGUgd2l0aFxuICAgICAqIEByZXR1cm5zIHJlc3VsdGluZyBuZXcgdmVjdG9yXG4gICAgICovXG4gICAgZGl2aWRlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56LCB0aGlzLncgLyBvdGhlclZlY3Rvci53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgZGl2aXNpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IFZlY3RvcjQgYnkgdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSB2ZWN0b3IgdG8gZGV2aWRlIHdpdGhcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gdmVjdG9yIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3I0LlxuICAgICAqL1xuICAgIGRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggLyBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAvIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy56IC8gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgcmVzdWx0LncgPSB0aGlzLncgLyBvdGhlclZlY3Rvci53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIHZlY3RvciB0byBkZXZpZGUgd2l0aFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIFZlY3RvcjMuXG4gICAgICovXG4gICAgZGl2aWRlSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXZpZGVUb1JlZihvdGhlclZlY3RvciwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIFZlY3RvcjQgY29vcmRpbmF0ZXMgd2l0aCB0aGUgbWluaW11bSB2YWx1ZXMgYmV0d2VlbiBpdHMgb3duIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yNFxuICAgICAqL1xuICAgIG1pbmltaXplSW5QbGFjZShvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIueCA8IHRoaXMueCkge1xuICAgICAgICAgICAgdGhpcy54ID0gb3RoZXIueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIueSA8IHRoaXMueSkge1xuICAgICAgICAgICAgdGhpcy55ID0gb3RoZXIueTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIueiA8IHRoaXMueikge1xuICAgICAgICAgICAgdGhpcy56ID0gb3RoZXIuejtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIudyA8IHRoaXMudykge1xuICAgICAgICAgICAgdGhpcy53ID0gb3RoZXIudztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgVmVjdG9yNCBjb29yZGluYXRlcyB3aXRoIHRoZSBtYXhpbXVtIHZhbHVlcyBiZXR3ZWVuIGl0cyBvd24gYW5kIHRoZSBnaXZlbiB2ZWN0b3Igb25lc1xuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3I0XG4gICAgICovXG4gICAgbWF4aW1pemVJblBsYWNlKG90aGVyKSB7XG4gICAgICAgIGlmIChvdGhlci54ID4gdGhpcy54KSB7XG4gICAgICAgICAgICB0aGlzLnggPSBvdGhlci54O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlci55ID4gdGhpcy55KSB7XG4gICAgICAgICAgICB0aGlzLnkgPSBvdGhlci55O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlci56ID4gdGhpcy56KSB7XG4gICAgICAgICAgICB0aGlzLnogPSBvdGhlci56O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlci53ID4gdGhpcy53KSB7XG4gICAgICAgICAgICB0aGlzLncgPSBvdGhlci53O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjQgZnJvbSBjdXJyZW50IFZlY3RvcjQgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgZmxvb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNChNYXRoLmZsb29yKHRoaXMueCksIE1hdGguZmxvb3IodGhpcy55KSwgTWF0aC5mbG9vcih0aGlzLnopLCBNYXRoLmZsb29yKHRoaXMudykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjQgZnJvbSBjdXJyZW50IFZlY3RvcjMgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgZnJhY3QoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLnggLSBNYXRoLmZsb29yKHRoaXMueCksIHRoaXMueSAtIE1hdGguZmxvb3IodGhpcy55KSwgdGhpcy56IC0gTWF0aC5mbG9vcih0aGlzLnopLCB0aGlzLncgLSBNYXRoLmZsb29yKHRoaXMudykpO1xuICAgIH1cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgVmVjdG9yNCBsZW5ndGggKGZsb2F0KS5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoXG4gICAgICovXG4gICAgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFZlY3RvcjQgc3F1YXJlZCBsZW5ndGggKGZsb2F0KS5cbiAgICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoIHNxdWFyZWRcbiAgICAgKi9cbiAgICBsZW5ndGhTcXVhcmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuICAgIH1cbiAgICAvLyBNZXRob2RzXG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplcyBpbiBwbGFjZSB0aGUgVmVjdG9yNC5cbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3I0LlxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVJblBsYWNlKDEuMCAvIGxlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBmcm9tIHRoZSBWZWN0b3I0ICh4LCB5LCB6KSBjb29yZGluYXRlcy5cbiAgICAgKiBAcmV0dXJucyB0aGlzIGNvbnZlcnRlZCB0byBhIG5ldyB2ZWN0b3IzXG4gICAgICovXG4gICAgdG9WZWN0b3IzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjNfMS5WZWN0b3IzKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjQgY29waWVkIGZyb20gdGhlIGN1cnJlbnQgb25lLlxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgY2xvbmVkIHZlY3RvclxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBWZWN0b3I0IHdpdGggdGhlIGdpdmVuIG9uZSBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0gc291cmNlIC0gdGhlIHNvdXJjZSB2ZWN0b3IgdG8gY29weSBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBjb3B5RnJvbShzb3VyY2UpIHtcbiAgICAgICAgdGhpcy54ID0gc291cmNlLng7XG4gICAgICAgIHRoaXMueSA9IHNvdXJjZS55O1xuICAgICAgICB0aGlzLnogPSBzb3VyY2UuejtcbiAgICAgICAgdGhpcy53ID0gc291cmNlLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMgd2l0aCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB4IC0gZmxvYXQgdG8gY29weSBmcm9tXG4gICAgICogQHBhcmFtIHkgLSBmbG9hdCB0byBjb3B5IGZyb21cbiAgICAgKiBAcGFyYW0geiAtIGZsb2F0IHRvIGNvcHkgZnJvbVxuICAgICAqIEBwYXJhbSB3IC0gZmxvYXQgdG8gY29weSBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgVmVjdG9yNC5cbiAgICAgKi9cbiAgICBjb3B5RnJvbUZsb2F0cyh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIHRoaXMueiA9IHo7XG4gICAgICAgIHRoaXMudyA9IHc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjQgY29vcmRpbmF0ZXMgd2l0aCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB4IC0gZmxvYXQgdG8gc2V0IGZyb21cbiAgICAgKiBAcGFyYW0geSAtIGZsb2F0IHRvIHNldCBmcm9tXG4gICAgICogQHBhcmFtIHogLSBmbG9hdCB0byBzZXQgZnJvbVxuICAgICAqIEBwYXJhbSB3IC0gZmxvYXQgdG8gc2V0IGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3I0LlxuICAgICAqL1xuICAgIHNldCh4LCB5LCB6LCB3KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHgsIHksIHosIHcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHRvIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gdiAtIGRlZmluZXMgdGhlIHgsIHksIHogYW5kIHcgY29vcmRpbmF0ZXMgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzZXRBbGwodikge1xuICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSB0aGlzLncgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlZlY3RvcjQgPSBWZWN0b3I0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVjdG9yNC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWF0cml4ID0gdm9pZCAwO1xuY29uc3QgVmVjdG9yM18xID0gcmVxdWlyZShcIi4vVmVjdG9yM1wiKTtcbmNvbnN0IFF1YXRlcm5pb25fMSA9IHJlcXVpcmUoXCIuL1F1YXRlcm5pb25cIik7XG5jb25zdCBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMSA9IHJlcXVpcmUoXCIuL3ByZWFsbG9jYXRlZFZhcmlhYmxlc1wiKTtcbmNvbnN0IFZlY3RvcjRfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjRcIik7XG4vKipcbiAqIENsYXNzIHVzZWQgdG8gc3RvcmUgbWF0cml4IGRhdGEgKDR4NClcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgTWF0cml4IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGVtcHR5IG1hdHJpeCAoZmlsbGVkIHdpdGggemVyb3MpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eTN4MiA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX20gPSBbXG4gICAgICAgICAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGZhbHNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW50ZXJuYWwgZGF0YSBvZiB0aGUgbWF0cml4XG4gICAgICovXG4gICAgZ2V0IG0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuIGlkZW50aXR5IG1hdHJpeCB0aGF0IG11c3Qgbm90IGJlIHVwZGF0ZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElkZW50aXR5UmVhZE9ubHkoKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXguX2lkZW50aXR5UmVhZE9ubHk7XG4gICAgfVxuICAgIC8vIFN0YXRpY3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IE1hdHJpeCBzZXQgZnJvbSB0aGUgc3RhcnRpbmcgaW5kZXggb2YgdGhlIGdpdmVuIGFycmF5XG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Gcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjb250ZW50IG9mIGFuIGFycmF5IGludG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSBhcnJheVtpbmRleCArIG9mZnNldF07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhbiBhcnJheSBpbnRvIGEgbWF0cml4IGFmdGVyIGhhdmluZyBtdWx0aXBsaWVkIGVhY2ggY29tcG9uZW50IGJ5IGEgZ2l2ZW4gZmFjdG9yXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRBcnJheVRvUmVmU2NhbGVkKGFycmF5LCBvZmZzZXQsIHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdID0gYXJyYXlbaW5kZXggKyBvZmZzZXRdICogc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIGxpc3Qgb2YgdmFsdWVzICgxNikgaW5zaWRlIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMTQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAxc3Qgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMjQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAybmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNMzQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiAzcmQgcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDEgLSBkZWZpbmVzIDFzdCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDIgLSBkZWZpbmVzIDJuZCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDMgLSBkZWZpbmVzIDNyZCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIGluaXRpYWxNNDQgLSBkZWZpbmVzIDR0aCB2YWx1ZSBvZiA0dGggcm93XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbVZhbHVlc1RvUmVmKGluaXRpYWxNMTEsIGluaXRpYWxNMTIsIGluaXRpYWxNMTMsIGluaXRpYWxNMTQsIGluaXRpYWxNMjEsIGluaXRpYWxNMjIsIGluaXRpYWxNMjMsIGluaXRpYWxNMjQsIGluaXRpYWxNMzEsIGluaXRpYWxNMzIsIGluaXRpYWxNMzMsIGluaXRpYWxNMzQsIGluaXRpYWxNNDEsIGluaXRpYWxNNDIsIGluaXRpYWxNNDMsIGluaXRpYWxNNDQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gcmVzdWx0Ll9tO1xuICAgICAgICBtWzBdID0gaW5pdGlhbE0xMTtcbiAgICAgICAgbVsxXSA9IGluaXRpYWxNMTI7XG4gICAgICAgIG1bMl0gPSBpbml0aWFsTTEzO1xuICAgICAgICBtWzNdID0gaW5pdGlhbE0xNDtcbiAgICAgICAgbVs0XSA9IGluaXRpYWxNMjE7XG4gICAgICAgIG1bNV0gPSBpbml0aWFsTTIyO1xuICAgICAgICBtWzZdID0gaW5pdGlhbE0yMztcbiAgICAgICAgbVs3XSA9IGluaXRpYWxNMjQ7XG4gICAgICAgIG1bOF0gPSBpbml0aWFsTTMxO1xuICAgICAgICBtWzldID0gaW5pdGlhbE0zMjtcbiAgICAgICAgbVsxMF0gPSBpbml0aWFsTTMzO1xuICAgICAgICBtWzExXSA9IGluaXRpYWxNMzQ7XG4gICAgICAgIG1bMTJdID0gaW5pdGlhbE00MTtcbiAgICAgICAgbVsxM10gPSBpbml0aWFsTTQyO1xuICAgICAgICBtWzE0XSA9IGluaXRpYWxNNDM7XG4gICAgICAgIG1bMTVdID0gaW5pdGlhbE00NDtcbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgbmV3IG1hdHJpeCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMgKDE2KVxuICAgICAqIEBwYXJhbSBpbml0aWFsTTExIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTEyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTEzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTE0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgMXN0IHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTIxIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTIyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTIzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTI0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgMm5kIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTMxIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTMyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTMzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTM0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgM3JkIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQxIC0gZGVmaW5lcyAxc3QgdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQyIC0gZGVmaW5lcyAybmQgdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQzIC0gZGVmaW5lcyAzcmQgdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEBwYXJhbSBpbml0aWFsTTQ0IC0gZGVmaW5lcyA0dGggdmFsdWUgb2YgNHRoIHJvd1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIEZyb21WYWx1ZXMoaW5pdGlhbE0xMSwgaW5pdGlhbE0xMiwgaW5pdGlhbE0xMywgaW5pdGlhbE0xNCwgaW5pdGlhbE0yMSwgaW5pdGlhbE0yMiwgaW5pdGlhbE0yMywgaW5pdGlhbE0yNCwgaW5pdGlhbE0zMSwgaW5pdGlhbE0zMiwgaW5pdGlhbE0zMywgaW5pdGlhbE0zNCwgaW5pdGlhbE00MSwgaW5pdGlhbE00MiwgaW5pdGlhbE00MywgaW5pdGlhbE00NCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSBpbml0aWFsTTExO1xuICAgICAgICBtWzFdID0gaW5pdGlhbE0xMjtcbiAgICAgICAgbVsyXSA9IGluaXRpYWxNMTM7XG4gICAgICAgIG1bM10gPSBpbml0aWFsTTE0O1xuICAgICAgICBtWzRdID0gaW5pdGlhbE0yMTtcbiAgICAgICAgbVs1XSA9IGluaXRpYWxNMjI7XG4gICAgICAgIG1bNl0gPSBpbml0aWFsTTIzO1xuICAgICAgICBtWzddID0gaW5pdGlhbE0yNDtcbiAgICAgICAgbVs4XSA9IGluaXRpYWxNMzE7XG4gICAgICAgIG1bOV0gPSBpbml0aWFsTTMyO1xuICAgICAgICBtWzEwXSA9IGluaXRpYWxNMzM7XG4gICAgICAgIG1bMTFdID0gaW5pdGlhbE0zNDtcbiAgICAgICAgbVsxMl0gPSBpbml0aWFsTTQxO1xuICAgICAgICBtWzEzXSA9IGluaXRpYWxNNDI7XG4gICAgICAgIG1bMTRdID0gaW5pdGlhbE00MztcbiAgICAgICAgbVsxNV0gPSBpbml0aWFsTTQ0O1xuICAgICAgICByZXN1bHQuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXRyaXggY29tcG9zZWQgYnkgbWVyZ2luZyBzY2FsZSAodmVjdG9yMyksIHJvdGF0aW9uIChxdWF0ZXJuaW9uKSBhbmQgdHJhbnNsYXRpb24gKHZlY3RvcjMpXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgdmVjdG9yM1xuICAgICAqIEBwYXJhbSByb3RhdGlvbiAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IzXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIENvbXBvc2Uoc2NhbGUsIHJvdGF0aW9uLCB0cmFuc2xhdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Db21wb3NlVG9SZWYoc2NhbGUsIHJvdGF0aW9uLCB0cmFuc2xhdGlvbiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIG1hdHJpeCB0byBhIHZhbHVlIGNvbXBvc2VkIGJ5IG1lcmdpbmcgc2NhbGUgKHZlY3RvcjMpLCByb3RhdGlvbiAocXVhdGVybmlvbikgYW5kIHRyYW5zbGF0aW9uICh2ZWN0b3IzKVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIHZlY3RvcjNcbiAgICAgKiBAcGFyYW0gcm90YXRpb24gLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yM1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIENvbXBvc2VUb1JlZihzY2FsZSwgcm90YXRpb24sIHRyYW5zbGF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LlNjYWxpbmdUb1JlZihzY2FsZS54LCBzY2FsZS55LCBzY2FsZS56LCBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLk1hdHJpeFsxXSk7XG4gICAgICAgIHJvdGF0aW9uLnRvUm90YXRpb25NYXRyaXgocHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5NYXRyaXhbMF0pO1xuICAgICAgICBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLk1hdHJpeFsxXS5tdWx0aXBseVRvUmVmKHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuc2V0VHJhbnNsYXRpb24odHJhbnNsYXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IGlkZW50aXR5IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBJZGVudGl0eSgpIHtcbiAgICAgICAgY29uc3QgaWRlbnRpdHkgPSBNYXRyaXguRnJvbVZhbHVlcygxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgICAgICBpZGVudGl0eS5fdXBkYXRlSWRlbnRpdHlTdGF0dXModHJ1ZSk7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXRyaXggYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgSWRlbnRpdHlUb1JlZihyZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZigxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlSWRlbnRpdHlTdGF0dXModHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgemVybyBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB6ZXJvIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICBjb25zdCB6ZXJvID0gTWF0cml4LkZyb21WYWx1ZXMoMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgemVyby5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoZmFsc2UpO1xuICAgICAgICByZXR1cm4gemVybztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWCBheGlzXG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWChhbmdsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvblhUb1JlZihhbmdsZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXRyaXggYXMgdGhlIGludmVydCBvZiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgSW52ZXJ0KHNvdXJjZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIHNvdXJjZS5pbnZlcnRUb1JlZihyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCBmb3IgXCJhbmdsZVwiIHJhZGlhbnMgYXJvdW5kIHRoZSBYIGF4aXMgYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvblhUb1JlZihhbmdsZSwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIHMsIDAuMCwgMC4wLCAtcywgYywgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoYyA9PT0gMSAmJiBzID09PSAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWSBheGlzXG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWShhbmdsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvbllUb1JlZihhbmdsZSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBtYXRyaXggZm9yIFwiYW5nbGVcIiByYWRpYW5zIGFyb3VuZCB0aGUgWSBheGlzIGFuZCBzdG9yZXMgaXQgaW4gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25ZVG9SZWYoYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKGMsIDAuMCwgLXMsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCBzLCAwLjAsIGMsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGMgPT09IDEgJiYgcyA9PT0gMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIFogYXhpc1xuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvblooYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUm90YXRpb25aVG9SZWYoYW5nbGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIFogYXhpcyBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGFuZ2xlIC0gZGVmaW5lcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHVzZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWlRvUmVmKGFuZ2xlLCByZXN1bHQpIHtcbiAgICAgICAgY29uc3QgcyA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihjLCBzLCAwLjAsIDAuMCwgLXMsIGMsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhjID09PSAxICYmIHMgPT09IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCBmb3IgXCJhbmdsZVwiIHJhZGlhbnMgYXJvdW5kIHRoZSBnaXZlbiBheGlzXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSB0byB1c2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvbkF4aXMoYXhpcywgYW5nbGUpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm90YXRpb24gbWF0cml4IGZvciBcImFuZ2xlXCIgcmFkaWFucyBhcm91bmQgdGhlIGdpdmVuIGF4aXMgYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBheGlzIC0gZGVmaW5lcyB0aGUgYXhpcyB0byB1c2VcbiAgICAgKiBAcGFyYW0gYW5nbGUgLSBkZWZpbmVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgdG8gdXNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzID0gTWF0aC5zaW4oLWFuZ2xlKTtcbiAgICAgICAgY29uc3QgYyA9IE1hdGguY29zKC1hbmdsZSk7XG4gICAgICAgIGNvbnN0IGMxID0gMSAtIGM7XG4gICAgICAgIGF4aXMubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSBheGlzLnggKiBheGlzLnggKiBjMSArIGM7XG4gICAgICAgIG1bMV0gPSBheGlzLnggKiBheGlzLnkgKiBjMSAtIGF4aXMueiAqIHM7XG4gICAgICAgIG1bMl0gPSBheGlzLnggKiBheGlzLnogKiBjMSArIGF4aXMueSAqIHM7XG4gICAgICAgIG1bM10gPSAwLjA7XG4gICAgICAgIG1bNF0gPSBheGlzLnkgKiBheGlzLnggKiBjMSArIGF4aXMueiAqIHM7XG4gICAgICAgIG1bNV0gPSBheGlzLnkgKiBheGlzLnkgKiBjMSArIGM7XG4gICAgICAgIG1bNl0gPSBheGlzLnkgKiBheGlzLnogKiBjMSAtIGF4aXMueCAqIHM7XG4gICAgICAgIG1bN10gPSAwLjA7XG4gICAgICAgIG1bOF0gPSBheGlzLnogKiBheGlzLnggKiBjMSAtIGF4aXMueSAqIHM7XG4gICAgICAgIG1bOV0gPSBheGlzLnogKiBheGlzLnkgKiBjMSArIGF4aXMueCAqIHM7XG4gICAgICAgIG1bMTBdID0gYXhpcy56ICogYXhpcy56ICogYzEgKyBjO1xuICAgICAgICBtWzExXSA9IDAuMDtcbiAgICAgICAgbVsxMl0gPSAwLjA7XG4gICAgICAgIG1bMTNdID0gMC4wO1xuICAgICAgICBtWzE0XSA9IDAuMDtcbiAgICAgICAgbVsxNV0gPSAxLjA7XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcm90YXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHlhdyAtIGRlZmluZXMgdGhlIHlhdyBhbmdsZSBpbiByYWRpYW5zIChZIGF4aXMpXG4gICAgICogQHBhcmFtIHBpdGNoIC0gZGVmaW5lcyB0aGUgcGl0Y2ggYW5nbGUgaW4gcmFkaWFucyAoWCBheGlzKVxuICAgICAqIEBwYXJhbSByb2xsIC0gZGVmaW5lcyB0aGUgcm9sbCBhbmdsZSBpbiByYWRpYW5zIChYIGF4aXMpXG4gICAgICogQHJldHVybnMgdGhlIG5ldyByb3RhdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25ZYXdQaXRjaFJvbGwoeWF3LCBwaXRjaCwgcm9sbCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Sb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmKHlhdywgcGl0Y2gsIHJvbGwsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByb3RhdGlvbiBtYXRyaXggYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSB5YXcgLSBkZWZpbmVzIHRoZSB5YXcgYW5nbGUgaW4gcmFkaWFucyAoWSBheGlzKVxuICAgICAqIEBwYXJhbSBwaXRjaCAtIGRlZmluZXMgdGhlIHBpdGNoIGFuZ2xlIGluIHJhZGlhbnMgKFggYXhpcylcbiAgICAgKiBAcGFyYW0gcm9sbCAtIGRlZmluZXMgdGhlIHJvbGwgYW5nbGUgaW4gcmFkaWFucyAoWCBheGlzKVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcmVzdWx0KSB7XG4gICAgICAgIFF1YXRlcm5pb25fMS5RdWF0ZXJuaW9uLlJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5RdWF0ZXJuaW9uWzBdKTtcbiAgICAgICAgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5RdWF0ZXJuaW9uWzBdLnRvUm90YXRpb25NYXRyaXgocmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNjYWxpbmcgbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWCBheGlzXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWSBheGlzXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3Igb24gWiBheGlzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgU2NhbGluZyh4LCB5LCB6KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LlNjYWxpbmdUb1JlZih4LCB5LCB6LCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2NhbGluZyBtYXRyaXggYW5kIHN0b3JlcyBpdCBpbiBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yIG9uIFogYXhpc1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFNjYWxpbmdUb1JlZih4LCB5LCB6LCByZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZih4LCAwLjAsIDAuMCwgMC4wLCAwLjAsIHksIDAuMCwgMC4wLCAwLjAsIDAuMCwgeiwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHJlc3VsdCk7XG4gICAgICAgIHJlc3VsdC5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoeCA9PT0gMSAmJiB5ID09PSAxICYmIHogPT09IDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdHJhbnNsYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiBvbiBYIGF4aXNcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb25vbiBaIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2xhdGlvbih4LCB5LCB6KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LlRyYW5zbGF0aW9uVG9SZWYoeCwgeSwgeiwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHRyYW5zbGF0aW9uIG1hdHJpeCBhbmQgc3RvcmVzIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiBvbiBYIGF4aXNcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIG9uIFkgYXhpc1xuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdHJhbnNsYXRpb25vbiBaIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2xhdGlvblRvUmVmKHgsIHksIHosIHJlc3VsdCkge1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCAwLjAsIHgsIHksIHosIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyh4ID09PSAwICYmIHkgPT09IDAgJiYgeiA9PT0gMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgTWF0cml4IHdob3NlIHZhbHVlcyBhcmUgdGhlIGludGVycG9sYXRlZCB2YWx1ZXMgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIGJldHdlZW4gdGhlIG9uZXMgb2YgdGhlIG1hdHJpY2VzIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIuXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGZhY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIExlcnAoc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LkxlcnBUb1JlZihzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZ2l2ZW4gbWF0cml4IFwicmVzdWx0XCIgYXMgdGhlIGludGVycG9sYXRlZCB2YWx1ZXMgZm9yIFwiZ3JhZGllbnRcIiAoZmxvYXQpIGJldHdlZW4gdGhlIG9uZXMgb2YgdGhlIG1hdHJpY2VzIFwic3RhcnRWYWx1ZVwiIGFuZCBcImVuZFZhbHVlXCIuXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRWYWx1ZSAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBNYXRyaXggb2JqZWN0IHdoZXJlIHRvIHN0b3JlIGRhdGFcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycFRvUmVmKHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBncmFkaWVudCwgcmVzdWx0KSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgcmVzdWx0Ll9tW2luZGV4XSA9XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZS5fbVtpbmRleF0gKiAoMS4wIC0gZ3JhZGllbnQpICsgZW5kVmFsdWUuX21baW5kZXhdICogZ3JhZGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJ1aWxkcyBhIG5ldyBtYXRyaXggd2hvc2UgdmFsdWVzIGFyZSBjb21wdXRlZCBieTpcbiAgICAgKiAqIGRlY29tcG9zaW5nIHRoZSB0aGUgXCJzdGFydFZhbHVlXCIgYW5kIFwiZW5kVmFsdWVcIiBtYXRyaWNlcyBpbnRvIHRoZWlyIHJlc3BlY3RpdmUgc2NhbGUsIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGlvbiBtYXRyaWNlc1xuICAgICAqICogaW50ZXJwb2xhdGluZyBmb3IgXCJncmFkaWVudFwiIChmbG9hdCkgdGhlIHZhbHVlcyBiZXR3ZWVuIGVhY2ggb2YgdGhlc2UgZGVjb21wb3NlZCBtYXRyaWNlcyBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgdGhlIGVuZFxuICAgICAqICogcmVjb21wb3NpbmcgYSBuZXcgbWF0cml4IGZyb20gdGhlc2UgMyBpbnRlcnBvbGF0ZWQgc2NhbGUsIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGlvbiBtYXRyaWNlc1xuICAgICAqIEBwYXJhbSBzdGFydFZhbHVlIC0gZGVmaW5lcyB0aGUgZmlyc3QgbWF0cml4XG4gICAgICogQHBhcmFtIGVuZFZhbHVlIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG1hdHJpeFxuICAgICAqIEBwYXJhbSBncmFkaWVudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IGJldHdlZW4gdGhlIHR3byBtYXRyaWNlc1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIERlY29tcG9zZUxlcnAoc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LkRlY29tcG9zZUxlcnBUb1JlZihzdGFydFZhbHVlLCBlbmRWYWx1ZSwgZ3JhZGllbnQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBhIG1hdHJpeCB0byB2YWx1ZXMgd2hpY2ggYXJlIGNvbXB1dGVkIGJ5OlxuICAgICAqICogZGVjb21wb3NpbmcgdGhlIHRoZSBcInN0YXJ0VmFsdWVcIiBhbmQgXCJlbmRWYWx1ZVwiIG1hdHJpY2VzIGludG8gdGhlaXIgcmVzcGVjdGl2ZSBzY2FsZSwgcm90YXRpb24gYW5kIHRyYW5zbGF0aW9uIG1hdHJpY2VzXG4gICAgICogKiBpbnRlcnBvbGF0aW5nIGZvciBcImdyYWRpZW50XCIgKGZsb2F0KSB0aGUgdmFsdWVzIGJldHdlZW4gZWFjaCBvZiB0aGVzZSBkZWNvbXBvc2VkIG1hdHJpY2VzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCB0aGUgZW5kXG4gICAgICogKiByZWNvbXBvc2luZyBhIG5ldyBtYXRyaXggZnJvbSB0aGVzZSAzIGludGVycG9sYXRlZCBzY2FsZSwgcm90YXRpb24gYW5kIHRyYW5zbGF0aW9uIG1hdHJpY2VzXG4gICAgICogQHBhcmFtIHN0YXJ0VmFsdWUgLSBkZWZpbmVzIHRoZSBmaXJzdCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZW5kVmFsdWUgLSBkZWZpbmVzIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgICogQHBhcmFtIGdyYWRpZW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgYmV0d2VlbiB0aGUgdHdvIG1hdHJpY2VzXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgRGVjb21wb3NlTGVycFRvUmVmKHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBncmFkaWVudCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0U2NhbGUgPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMF07XG4gICAgICAgIGNvbnN0IHN0YXJ0Um90YXRpb24gPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlF1YXRlcm5pb25bMF07XG4gICAgICAgIGNvbnN0IHN0YXJ0VHJhbnNsYXRpb24gPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV07XG4gICAgICAgIHN0YXJ0VmFsdWUuZGVjb21wb3NlKHN0YXJ0U2NhbGUsIHN0YXJ0Um90YXRpb24sIHN0YXJ0VHJhbnNsYXRpb24pO1xuICAgICAgICBjb25zdCBlbmRTY2FsZSA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1syXTtcbiAgICAgICAgY29uc3QgZW5kUm90YXRpb24gPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlF1YXRlcm5pb25bMV07XG4gICAgICAgIGNvbnN0IGVuZFRyYW5zbGF0aW9uID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzNdO1xuICAgICAgICBlbmRWYWx1ZS5kZWNvbXBvc2UoZW5kU2NhbGUsIGVuZFJvdGF0aW9uLCBlbmRUcmFuc2xhdGlvbik7XG4gICAgICAgIGNvbnN0IHJlc3VsdFNjYWxlID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzRdO1xuICAgICAgICBWZWN0b3IzXzEuVmVjdG9yMy5MZXJwVG9SZWYoc3RhcnRTY2FsZSwgZW5kU2NhbGUsIGdyYWRpZW50LCByZXN1bHRTY2FsZSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdFJvdGF0aW9uID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5RdWF0ZXJuaW9uWzJdO1xuICAgICAgICBRdWF0ZXJuaW9uXzEuUXVhdGVybmlvbi5TbGVycFRvUmVmKHN0YXJ0Um90YXRpb24sIGVuZFJvdGF0aW9uLCBncmFkaWVudCwgcmVzdWx0Um90YXRpb24pO1xuICAgICAgICBjb25zdCByZXN1bHRUcmFuc2xhdGlvbiA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1s1XTtcbiAgICAgICAgVmVjdG9yM18xLlZlY3RvcjMuTGVycFRvUmVmKHN0YXJ0VHJhbnNsYXRpb24sIGVuZFRyYW5zbGF0aW9uLCBncmFkaWVudCwgcmVzdWx0VHJhbnNsYXRpb24pO1xuICAgICAgICBNYXRyaXguQ29tcG9zZVRvUmVmKHJlc3VsdFNjYWxlLCByZXN1bHRSb3RhdGlvbiwgcmVzdWx0VHJhbnNsYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgcm90YXRpb24gbWF0cml4IHVzZWQgdG8gcm90YXRlIGFuIGVudGl0eSBzbyBhcyBpdCBsb29rcyBhdCB0aGUgdGFyZ2V0IHZlY3RvcjMsIGZyb20gdGhlIGV5ZSB2ZWN0b3IzIHBvc2l0aW9uLCB0aGUgdXAgdmVjdG9yMyBiZWluZyBvcmllbnRlZCBsaWtlIFwidXBcIlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd29ya3MgaW4gbGVmdCBoYW5kZWQgbW9kZVxuICAgICAqIEBwYXJhbSBleWUgLSBkZWZpbmVzIHRoZSBmaW5hbCBwb3NpdGlvbiBvZiB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHRhcmdldCAtIGRlZmluZXMgd2hlcmUgdGhlIGVudGl0eSBzaG91bGQgbG9vayBhdFxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIHVwIHZlY3RvciBmb3IgdGhlIGVudGl0eVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIExvb2tBdExIKGV5ZSwgdGFyZ2V0LCB1cCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5Mb29rQXRMSFRvUmVmKGV5ZSwgdGFyZ2V0LCB1cCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIiBNYXRyaXggdG8gYSByb3RhdGlvbiBtYXRyaXggdXNlZCB0byByb3RhdGUgYW4gZW50aXR5IHNvIHRoYXQgaXQgbG9va3MgYXQgdGhlIHRhcmdldCB2ZWN0b3IzLCBmcm9tIHRoZSBleWUgdmVjdG9yMyBwb3NpdGlvbiwgdGhlIHVwIHZlY3RvcjMgYmVpbmcgb3JpZW50ZWQgbGlrZSBcInVwXCIuXG4gICAgICogVGhpcyBmdW5jdGlvbiB3b3JrcyBpbiBsZWZ0IGhhbmRlZCBtb2RlXG4gICAgICogQHBhcmFtIGV5ZSAtIGRlZmluZXMgdGhlIGZpbmFsIHBvc2l0aW9uIG9mIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB3aGVyZSB0aGUgZW50aXR5IHNob3VsZCBsb29rIGF0XG4gICAgICogQHBhcmFtIHVwIC0gZGVmaW5lcyB0aGUgdXAgdmVjdG9yIGZvciB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgTG9va0F0TEhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4QXhpcyA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1swXTtcbiAgICAgICAgY29uc3QgeUF4aXMgPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV07XG4gICAgICAgIGNvbnN0IHpBeGlzID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzJdO1xuICAgICAgICAvLyBaIGF4aXNcbiAgICAgICAgdGFyZ2V0LnN1YnRyYWN0VG9SZWYoZXllLCB6QXhpcyk7XG4gICAgICAgIHpBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBYIGF4aXNcbiAgICAgICAgVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3NUb1JlZih1cCwgekF4aXMsIHhBeGlzKTtcbiAgICAgICAgY29uc3QgeFNxdWFyZUxlbmd0aCA9IHhBeGlzLmxlbmd0aFNxdWFyZWQoKTtcbiAgICAgICAgaWYgKHhTcXVhcmVMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHhBeGlzLnggPSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB4QXhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKE1hdGguc3FydCh4U3F1YXJlTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gWSBheGlzXG4gICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzVG9SZWYoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG4gICAgICAgIHlBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBFeWUgYW5nbGVzXG4gICAgICAgIGNvbnN0IGV4ID0gLVZlY3RvcjNfMS5WZWN0b3IzLkRvdCh4QXhpcywgZXllKTtcbiAgICAgICAgY29uc3QgZXkgPSAtVmVjdG9yM18xLlZlY3RvcjMuRG90KHlBeGlzLCBleWUpO1xuICAgICAgICBjb25zdCBleiA9IC1WZWN0b3IzXzEuVmVjdG9yMy5Eb3QoekF4aXMsIGV5ZSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoeEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMC4wLCB4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLjAsIHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAuMCwgZXgsIGV5LCBleiwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IHJvdGF0aW9uIG1hdHJpeCB1c2VkIHRvIHJvdGF0ZSBhbiBlbnRpdHkgc28gYXMgaXQgbG9va3MgYXQgdGhlIHRhcmdldCB2ZWN0b3IzLCBmcm9tIHRoZSBleWUgdmVjdG9yMyBwb3NpdGlvbiwgdGhlIHVwIHZlY3RvcjMgYmVpbmcgb3JpZW50ZWQgbGlrZSBcInVwXCJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdvcmtzIGluIHJpZ2h0IGhhbmRlZCBtb2RlXG4gICAgICogQHBhcmFtIGV5ZSAtIGRlZmluZXMgdGhlIGZpbmFsIHBvc2l0aW9uIG9mIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB3aGVyZSB0aGUgZW50aXR5IHNob3VsZCBsb29rIGF0XG4gICAgICogQHBhcmFtIHVwIC0gZGVmaW5lcyB0aGUgdXAgdmVjdG9yIGZvciB0aGUgZW50aXR5XG4gICAgICogQHJldHVybnMgdGhlIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgTG9va0F0UkgoZXllLCB0YXJnZXQsIHVwKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4Lkxvb2tBdFJIVG9SZWYoZXllLCB0YXJnZXQsIHVwLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBcInJlc3VsdFwiIE1hdHJpeCB0byBhIHJvdGF0aW9uIG1hdHJpeCB1c2VkIHRvIHJvdGF0ZSBhbiBlbnRpdHkgc28gdGhhdCBpdCBsb29rcyBhdCB0aGUgdGFyZ2V0IHZlY3RvcjMsIGZyb20gdGhlIGV5ZSB2ZWN0b3IzIHBvc2l0aW9uLCB0aGUgdXAgdmVjdG9yMyBiZWluZyBvcmllbnRlZCBsaWtlIFwidXBcIi5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdvcmtzIGluIHJpZ2h0IGhhbmRlZCBtb2RlXG4gICAgICogQHBhcmFtIGV5ZSAtIGRlZmluZXMgdGhlIGZpbmFsIHBvc2l0aW9uIG9mIHRoZSBlbnRpdHlcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gZGVmaW5lcyB3aGVyZSB0aGUgZW50aXR5IHNob3VsZCBsb29rIGF0XG4gICAgICogQHBhcmFtIHVwIC0gZGVmaW5lcyB0aGUgdXAgdmVjdG9yIGZvciB0aGUgZW50aXR5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgTG9va0F0UkhUb1JlZihleWUsIHRhcmdldCwgdXAsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4QXhpcyA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1swXTtcbiAgICAgICAgY29uc3QgeUF4aXMgPSBwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV07XG4gICAgICAgIGNvbnN0IHpBeGlzID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzJdO1xuICAgICAgICAvLyBaIGF4aXNcbiAgICAgICAgZXllLnN1YnRyYWN0VG9SZWYodGFyZ2V0LCB6QXhpcyk7XG4gICAgICAgIHpBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBYIGF4aXNcbiAgICAgICAgVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3NUb1JlZih1cCwgekF4aXMsIHhBeGlzKTtcbiAgICAgICAgY29uc3QgeFNxdWFyZUxlbmd0aCA9IHhBeGlzLmxlbmd0aFNxdWFyZWQoKTtcbiAgICAgICAgaWYgKHhTcXVhcmVMZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHhBeGlzLnggPSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB4QXhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKE1hdGguc3FydCh4U3F1YXJlTGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gWSBheGlzXG4gICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzVG9SZWYoekF4aXMsIHhBeGlzLCB5QXhpcyk7XG4gICAgICAgIHlBeGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAvLyBFeWUgYW5nbGVzXG4gICAgICAgIGNvbnN0IGV4ID0gLVZlY3RvcjNfMS5WZWN0b3IzLkRvdCh4QXhpcywgZXllKTtcbiAgICAgICAgY29uc3QgZXkgPSAtVmVjdG9yM18xLlZlY3RvcjMuRG90KHlBeGlzLCBleWUpO1xuICAgICAgICBjb25zdCBleiA9IC1WZWN0b3IzXzEuVmVjdG9yMy5Eb3QoekF4aXMsIGV5ZSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoeEF4aXMueCwgeUF4aXMueCwgekF4aXMueCwgMC4wLCB4QXhpcy55LCB5QXhpcy55LCB6QXhpcy55LCAwLjAsIHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAuMCwgZXgsIGV5LCBleiwgMS4wLCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBsZWZ0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gd2lkdGggLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCB3aWR0aFxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBoZWlnaHRcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIE9ydGhvTEgod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguT3J0aG9MSFRvUmVmKHdpZHRoLCBoZWlnaHQsIHpuZWFyLCB6ZmFyLCBtYXRyaXgpO1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9yZSBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIHRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHdpZHRoIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgd2lkdGhcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIE9ydGhvTEhUb1JlZih3aWR0aCwgaGVpZ2h0LCB6bmVhciwgemZhciwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IG4gPSB6bmVhcjtcbiAgICAgICAgY29uc3QgZiA9IHpmYXI7XG4gICAgICAgIGNvbnN0IGEgPSAyLjAgLyB3aWR0aDtcbiAgICAgICAgY29uc3QgYiA9IDIuMCAvIGhlaWdodDtcbiAgICAgICAgY29uc3QgYyA9IDIuMCAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAtKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDAuMCwgMC4wLCAwLjAsIGQsIDEuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhhID09PSAxICYmIGIgPT09IDEgJiYgYyA9PT0gMSAmJiBkID09PSAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbGVmdC1oYW5kZWQgb3J0aG9ncmFwaGljIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBsZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCByaWdodCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIGJvdHRvbSAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGJvdHRvbSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHRvcCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBPcnRob09mZkNlbnRlckxIKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguT3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIGxlZnQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIGludG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGxlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHJpZ2h0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gYm90dG9tIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgYm90dG9tIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdG9wIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgdG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgT3J0aG9PZmZDZW50ZXJMSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCBhID0gMi4wIC8gKHJpZ2h0IC0gbGVmdCk7XG4gICAgICAgIGNvbnN0IGIgPSAyLjAgLyAodG9wIC0gYm90dG9tKTtcbiAgICAgICAgY29uc3QgYyA9IDIuMCAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAtKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGkwID0gKGxlZnQgKyByaWdodCkgLyAobGVmdCAtIHJpZ2h0KTtcbiAgICAgICAgY29uc3QgaTEgPSAodG9wICsgYm90dG9tKSAvIChib3R0b20gLSB0b3ApO1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKGEsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYiwgMC4wLCAwLjAsIDAuMCwgMC4wLCBjLCAwLjAsIGkwLCBpMSwgZCwgMS4wLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJpZ2h0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGxlZnQgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHJpZ2h0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gYm90dG9tIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgYm90dG9tIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdG9wIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgdG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgcmlnaHQtaGFuZGVkIG9ydGhvZ3JhcGhpYyBwcm9qZWN0aW9uIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBPcnRob09mZkNlbnRlclJIKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguT3J0aG9PZmZDZW50ZXJSSFRvUmVmKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgem5lYXIsIHpmYXIsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIHJpZ2h0LWhhbmRlZCBvcnRob2dyYXBoaWMgcHJvamVjdGlvbiBpbnRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCBsZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSB2aWV3cG9ydCByaWdodCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIGJvdHRvbSAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IGJvdHRvbSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHRvcCAtIGRlZmluZXMgdGhlIHZpZXdwb3J0IHRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIE9ydGhvT2ZmQ2VudGVyUkhUb1JlZihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpuZWFyLCB6ZmFyLCByZXN1bHQpIHtcbiAgICAgICAgTWF0cml4Lk9ydGhvT2ZmQ2VudGVyTEhUb1JlZihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIHpuZWFyLCB6ZmFyLCByZXN1bHQpO1xuICAgICAgICByZXN1bHQuX21bMTBdICo9IC0xOyAvLyBObyBuZWVkIHRvIGNhbGwgX21hcmtBc1VwZGF0ZWQgYXMgcHJldmlvdXMgZnVuY3Rpb24gYWxyZWFkeSBjYWxsZWQgaXQgYW5kIGxldCBfaXNJZGVudGl0eURpcnR5IHRvIHRydWVcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHdpZHRoIC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgd2lkdGhcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gZGVmaW5lcyB0aGUgdmlld3BvcnQgaGVpZ2h0XG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBhcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFBlcnNwZWN0aXZlTEgod2lkdGgsIGhlaWdodCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBjb25zdCBuID0gem5lYXI7XG4gICAgICAgIGNvbnN0IGYgPSB6ZmFyO1xuICAgICAgICBjb25zdCBhID0gKDIuMCAqIG4pIC8gd2lkdGg7XG4gICAgICAgIGNvbnN0IGIgPSAoMi4wICogbikgLyBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGMgPSAoZiArIG4pIC8gKGYgLSBuKTtcbiAgICAgICAgY29uc3QgZCA9ICgtMi4wICogZiAqIG4pIC8gKGYgLSBuKTtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihhLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGIsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYywgMS4wLCAwLjAsIDAuMCwgZCwgMC4wLCBtYXRyaXgpO1xuICAgICAgICBtYXRyaXguX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxlZnQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4XG4gICAgICogQHBhcmFtIGZvdiAtIGRlZmluZXMgdGhlIGhvcml6b250YWwgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSBhc3BlY3QgLSBkZWZpbmVzIHRoZSBhc3BlY3QgcmF0aW9cbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIGEgbGVmdC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyc3BlY3RpdmVGb3ZMSChmb3YsIGFzcGVjdCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUGVyc3BlY3RpdmVGb3ZMSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgbWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgbGVmdC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBpbnRvIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIGZvdiAtIGRlZmluZXMgdGhlIGhvcml6b250YWwgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSBhc3BlY3QgLSBkZWZpbmVzIHRoZSBhc3BlY3QgcmF0aW9cbiAgICAgKiBAcGFyYW0gem5lYXIgLSBkZWZpbmVzIHRoZSBuZWFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gemZhciAtIGRlZmluZXMgdGhlIGZhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gaXNWZXJ0aWNhbEZvdkZpeGVkIC0gZGVmaW5lcyBpdCB0aGUgZm92IGlzIHZlcnRpY2FsbHkgZml4ZWQgKGRlZmF1bHQpIG9yIGhvcml6b250YWxseVxuICAgICAqL1xuICAgIHN0YXRpYyBQZXJzcGVjdGl2ZUZvdkxIVG9SZWYoZm92LCBhc3BlY3QsIHpuZWFyLCB6ZmFyLCByZXN1bHQsIGlzVmVydGljYWxGb3ZGaXhlZCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgbiA9IHpuZWFyO1xuICAgICAgICBjb25zdCBmID0gemZhcjtcbiAgICAgICAgY29uc3QgdCA9IDEuMCAvIE1hdGgudGFuKGZvdiAqIDAuNSk7XG4gICAgICAgIGNvbnN0IGEgPSBpc1ZlcnRpY2FsRm92Rml4ZWQgPyB0IC8gYXNwZWN0IDogdDtcbiAgICAgICAgY29uc3QgYiA9IGlzVmVydGljYWxGb3ZGaXhlZCA/IHQgOiB0ICogYXNwZWN0O1xuICAgICAgICBjb25zdCBjID0gKGYgKyBuKSAvIChmIC0gbik7XG4gICAgICAgIGNvbnN0IGQgPSAoLTIuMCAqIGYgKiBuKSAvIChmIC0gbik7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoYSwgMC4wLCAwLjAsIDAuMCwgMC4wLCBiLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGMsIDEuMCwgMC4wLCAwLjAsIGQsIDAuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByaWdodC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZm92IC0gZGVmaW5lcyB0aGUgaG9yaXpvbnRhbCBmaWVsZCBvZiB2aWV3XG4gICAgICogQHBhcmFtIGFzcGVjdCAtIGRlZmluZXMgdGhlIGFzcGVjdCByYXRpb1xuICAgICAqIEBwYXJhbSB6bmVhciAtIGRlZmluZXMgdGhlIG5lYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSB6ZmFyIC0gZGVmaW5lcyB0aGUgZmFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXggYXMgYSByaWdodC1oYW5kZWQgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyc3BlY3RpdmVGb3ZSSChmb3YsIGFzcGVjdCwgem5lYXIsIHpmYXIpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICBNYXRyaXguUGVyc3BlY3RpdmVGb3ZSSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgbWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgcmlnaHQtaGFuZGVkIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gaW50byBhIGdpdmVuIG1hdHJpeFxuICAgICAqIEBwYXJhbSBmb3YgLSBkZWZpbmVzIHRoZSBob3Jpem9udGFsIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0gYXNwZWN0IC0gZGVmaW5lcyB0aGUgYXNwZWN0IHJhdGlvXG4gICAgICogQHBhcmFtIHpuZWFyIC0gZGVmaW5lcyB0aGUgbmVhciBjbGlwIHBsYW5lXG4gICAgICogQHBhcmFtIHpmYXIgLSBkZWZpbmVzIHRoZSBmYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHBhcmFtIGlzVmVydGljYWxGb3ZGaXhlZCAtIGRlZmluZXMgaXQgdGhlIGZvdiBpcyB2ZXJ0aWNhbGx5IGZpeGVkIChkZWZhdWx0KSBvciBob3Jpem9udGFsbHlcbiAgICAgKi9cbiAgICBzdGF0aWMgUGVyc3BlY3RpdmVGb3ZSSFRvUmVmKGZvdiwgYXNwZWN0LCB6bmVhciwgemZhciwgcmVzdWx0LCBpc1ZlcnRpY2FsRm92Rml4ZWQgPSB0cnVlKSB7XG4gICAgICAgIC8qIGFsdGVybmF0aXZlbHkgdGhpcyBjb3VsZCBiZSBleHByZXNzZWQgYXM6XG4gICAgICAgIC8vICAgIG0gPSBQZXJzcGVjdGl2ZUZvdkxIVG9SZWZcbiAgICAgICAgLy8gICAgbVsxMF0gKj0gLTEuMDtcbiAgICAgICAgLy8gICAgbVsxMV0gKj0gLTEuMDtcbiAgICAgICAgKi9cbiAgICAgICAgY29uc3QgbiA9IHpuZWFyO1xuICAgICAgICBjb25zdCBmID0gemZhcjtcbiAgICAgICAgY29uc3QgdCA9IDEuMCAvIE1hdGgudGFuKGZvdiAqIDAuNSk7XG4gICAgICAgIGNvbnN0IGEgPSBpc1ZlcnRpY2FsRm92Rml4ZWQgPyB0IC8gYXNwZWN0IDogdDtcbiAgICAgICAgY29uc3QgYiA9IGlzVmVydGljYWxGb3ZGaXhlZCA/IHQgOiB0ICogYXNwZWN0O1xuICAgICAgICBjb25zdCBjID0gLShmICsgbikgLyAoZiAtIG4pO1xuICAgICAgICBjb25zdCBkID0gKC0yICogZiAqIG4pIC8gKGYgLSBuKTtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihhLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGIsIDAuMCwgMC4wLCAwLjAsIDAuMCwgYywgLTEuMCwgMC4wLCAwLjAsIGQsIDAuMCwgcmVzdWx0KTtcbiAgICAgICAgcmVzdWx0Ll91cGRhdGVJZGVudGl0eVN0YXR1cyhmYWxzZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gZm9yIFdlYlZSIGluZm8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gZm92IC0gZGVmaW5lcyB0aGUgZmllbGQgb2Ygdmlld1xuICAgICAqIEBwYXJhbSB6bmVhciAtIGRlZmluZXMgdGhlIG5lYXIgY2xpcCBwbGFuZVxuICAgICAqIEBwYXJhbSB6ZmFyIC0gZGVmaW5lcyB0aGUgZmFyIGNsaXAgcGxhbmVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqIEBwYXJhbSByaWdodEhhbmRlZCAtIGRlZmluZXMgaWYgdGhlIG1hdHJpeCBtdXN0IGJlIGluIHJpZ2h0LWhhbmRlZCBtb2RlIChmYWxzZSBieSBkZWZhdWx0KVxuICAgICAqL1xuICAgIHN0YXRpYyBQZXJzcGVjdGl2ZUZvdldlYlZSVG9SZWYoZm92LCB6bmVhciwgemZhciwgcmVzdWx0LCByaWdodEhhbmRlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHJpZ2h0SGFuZGVkRmFjdG9yID0gcmlnaHRIYW5kZWQgPyAtMSA6IDE7XG4gICAgICAgIGNvbnN0IHVwVGFuID0gTWF0aC50YW4oKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgZG93blRhbiA9IE1hdGgudGFuKChmb3YuZG93bkRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgbGVmdFRhbiA9IE1hdGgudGFuKChmb3YubGVmdERlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wKTtcbiAgICAgICAgY29uc3QgcmlnaHRUYW4gPSBNYXRoLnRhbigoZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkpIC8gMTgwLjApO1xuICAgICAgICBjb25zdCB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgICAgICAgY29uc3QgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XG4gICAgICAgIGNvbnN0IG0gPSByZXN1bHQuX207XG4gICAgICAgIG1bMF0gPSB4U2NhbGU7XG4gICAgICAgIG1bMV0gPSBtWzJdID0gbVszXSA9IG1bNF0gPSAwLjA7XG4gICAgICAgIG1bNV0gPSB5U2NhbGU7XG4gICAgICAgIG1bNl0gPSBtWzddID0gMC4wO1xuICAgICAgICBtWzhdID0gKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjU7XG4gICAgICAgIG1bOV0gPSAtKCh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41KTtcbiAgICAgICAgbVsxMF0gPSAtemZhciAvICh6bmVhciAtIHpmYXIpO1xuICAgICAgICBtWzExXSA9IDEuMCAqIHJpZ2h0SGFuZGVkRmFjdG9yO1xuICAgICAgICBtWzEyXSA9IG1bMTNdID0gbVsxNV0gPSAwLjA7XG4gICAgICAgIG1bMTRdID0gLSgyLjAgKiB6ZmFyICogem5lYXIpIC8gKHpmYXIgLSB6bmVhcik7XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIDJ4MiBtYXRyaXggZnJvbSBhIGdpdmVuIG1hdHJpeCBhbmQgc3RvcmUgdGhlIHJlc3VsdCBpbiBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IEZsb2F0QXJyYXkgYXJyYXkgd2l0aCA0IGVsZW1lbnRzIDogdGhlIDJ4MiBtYXRyaXggZXh0cmFjdGVkIGZyb20gdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRBc01hdHJpeDJ4MihtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIFttYXRyaXguX21bMF0sIG1hdHJpeC5fbVsxXSwgbWF0cml4Ll9tWzRdLCBtYXRyaXguX21bNV1dO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyBhIDN4MyBtYXRyaXggZnJvbSBhIGdpdmVuIG1hdHJpeCBhbmQgc3RvcmUgdGhlIHJlc3VsdCBpbiBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IEZsb2F0QXJyYXkgYXJyYXkgd2l0aCA5IGVsZW1lbnRzIDogdGhlIDN4MyBtYXRyaXggZXh0cmFjdGVkIGZyb20gdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRBc01hdHJpeDN4MyhtYXRyaXgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG1hdHJpeC5fbVswXSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVsxXSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVsyXSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs0XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs1XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs2XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs4XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVs5XSxcbiAgICAgICAgICAgIG1hdHJpeC5fbVsxMF1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIG1hdHJpeCAtIGRlZmluZXMgdGhlIG1hdHJpeCB0byB0cmFuc3Bvc2VcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc3Bvc2UobWF0cml4KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgTWF0cml4LlRyYW5zcG9zZVRvUmVmKG1hdHJpeCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIGEgbWF0cml4IGFuZCBzdG9yZSBpdCBpbiBhIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIHRyYW5zcG9zZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFRyYW5zcG9zZVRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHJtID0gcmVzdWx0Ll9tO1xuICAgICAgICBjb25zdCBtbSA9IG1hdHJpeC5fbTtcbiAgICAgICAgcm1bMF0gPSBtbVswXTtcbiAgICAgICAgcm1bMV0gPSBtbVs0XTtcbiAgICAgICAgcm1bMl0gPSBtbVs4XTtcbiAgICAgICAgcm1bM10gPSBtbVsxMl07XG4gICAgICAgIHJtWzRdID0gbW1bMV07XG4gICAgICAgIHJtWzVdID0gbW1bNV07XG4gICAgICAgIHJtWzZdID0gbW1bOV07XG4gICAgICAgIHJtWzddID0gbW1bMTNdO1xuICAgICAgICBybVs4XSA9IG1tWzJdO1xuICAgICAgICBybVs5XSA9IG1tWzZdO1xuICAgICAgICBybVsxMF0gPSBtbVsxMF07XG4gICAgICAgIHJtWzExXSA9IG1tWzE0XTtcbiAgICAgICAgcm1bMTJdID0gbW1bM107XG4gICAgICAgIHJtWzEzXSA9IG1tWzddO1xuICAgICAgICBybVsxNF0gPSBtbVsxMV07XG4gICAgICAgIHJtWzE1XSA9IG1tWzE1XTtcbiAgICAgICAgLy8gaWRlbnRpdHktbmVzcyBkb2VzIG5vdCBjaGFuZ2Ugd2hlbiB0cmFuc3Bvc2luZ1xuICAgICAgICByZXN1bHQuX3VwZGF0ZUlkZW50aXR5U3RhdHVzKG1hdHJpeC5faXNJZGVudGl0eSwgbWF0cml4Ll9pc0lkZW50aXR5RGlydHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIHJlZmxlY3Rpb24gbWF0cml4IGZyb20gYSBwbGFuZVxuICAgICAqIEBwYXJhbSBwbGFuZSAtIGRlZmluZXMgdGhlIHJlZmxlY3Rpb24gcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBtYXRyaXhcbiAgICAgKi9cbiAgICBzdGF0aWMgUmVmbGVjdGlvbihwbGFuZSkge1xuICAgICAgICBjb25zdCBtYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgICAgIE1hdHJpeC5SZWZsZWN0aW9uVG9SZWYocGxhbmUsIG1hdHJpeCk7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGEgcmVmbGVjdGlvbiBtYXRyaXggZnJvbSBhIHBsYW5lXG4gICAgICogQHBhcmFtIHBsYW5lIC0gZGVmaW5lcyB0aGUgcmVmbGVjdGlvbiBwbGFuZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICovXG4gICAgc3RhdGljIFJlZmxlY3Rpb25Ub1JlZihwbGFuZSwgcmVzdWx0KSB7XG4gICAgICAgIHBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgICAgICBjb25zdCB4ID0gcGxhbmUubm9ybWFsLng7XG4gICAgICAgIGNvbnN0IHkgPSBwbGFuZS5ub3JtYWwueTtcbiAgICAgICAgY29uc3QgeiA9IHBsYW5lLm5vcm1hbC56O1xuICAgICAgICBjb25zdCB0ZW1wID0gLTIgKiB4O1xuICAgICAgICBjb25zdCB0ZW1wMiA9IC0yICogeTtcbiAgICAgICAgY29uc3QgdGVtcDMgPSAtMiAqIHo7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYodGVtcCAqIHggKyAxLCB0ZW1wMiAqIHgsIHRlbXAzICogeCwgMC4wLCB0ZW1wICogeSwgdGVtcDIgKiB5ICsgMSwgdGVtcDMgKiB5LCAwLjAsIHRlbXAgKiB6LCB0ZW1wMiAqIHosIHRlbXAzICogeiArIDEsIDAuMCwgdGVtcCAqIHBsYW5lLmQsIHRlbXAyICogcGxhbmUuZCwgdGVtcDMgKiBwbGFuZS5kLCAxLjAsIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIG1hdHJpeCBhcyBhIHJvdGF0aW9uIG1hdHJpeCBjb21wb3NlZCBmcm9tIHRoZSAzIGxlZnQgaGFuZGVkIGF4ZXNcbiAgICAgKiBAcGFyYW0geGF4aXMgLSBkZWZpbmVzIHRoZSB2YWx1ZSBvZiB0aGUgMXN0IGF4aXNcbiAgICAgKiBAcGFyYW0geWF4aXMgLSBkZWZpbmVzIHRoZSB2YWx1ZSBvZiB0aGUgMm5kIGF4aXNcbiAgICAgKiBAcGFyYW0gemF4aXMgLSBkZWZpbmVzIHRoZSB2YWx1ZSBvZiB0aGUgM3JkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tWFlaQXhlc1RvUmVmKHhheGlzLCB5YXhpcywgemF4aXMsIHJlc3VsdCkge1xuICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKHhheGlzLngsIHhheGlzLnksIHhheGlzLnosIDAuMCwgeWF4aXMueCwgeWF4aXMueSwgeWF4aXMueiwgMC4wLCB6YXhpcy54LCB6YXhpcy55LCB6YXhpcy56LCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiBhbmQgc3RvcmVzIGl0IGluIGEgdGFyZ2V0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBxdWF0IC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byB1c2VcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IG1hdHJpeFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tUXVhdGVybmlvblRvUmVmKHF1YXQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4eCA9IHF1YXQueCAqIHF1YXQueDtcbiAgICAgICAgY29uc3QgeXkgPSBxdWF0LnkgKiBxdWF0Lnk7XG4gICAgICAgIGNvbnN0IHp6ID0gcXVhdC56ICogcXVhdC56O1xuICAgICAgICBjb25zdCB4eSA9IHF1YXQueCAqIHF1YXQueTtcbiAgICAgICAgY29uc3QgencgPSBxdWF0LnogKiBxdWF0Lnc7XG4gICAgICAgIGNvbnN0IHp4ID0gcXVhdC56ICogcXVhdC54O1xuICAgICAgICBjb25zdCB5dyA9IHF1YXQueSAqIHF1YXQudztcbiAgICAgICAgY29uc3QgeXogPSBxdWF0LnkgKiBxdWF0Lno7XG4gICAgICAgIGNvbnN0IHh3ID0gcXVhdC54ICogcXVhdC53O1xuICAgICAgICByZXN1bHQuX21bMF0gPSAxLjAgLSAyLjAgKiAoeXkgKyB6eik7XG4gICAgICAgIHJlc3VsdC5fbVsxXSA9IDIuMCAqICh4eSArIHp3KTtcbiAgICAgICAgcmVzdWx0Ll9tWzJdID0gMi4wICogKHp4IC0geXcpO1xuICAgICAgICByZXN1bHQuX21bM10gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVs0XSA9IDIuMCAqICh4eSAtIHp3KTtcbiAgICAgICAgcmVzdWx0Ll9tWzVdID0gMS4wIC0gMi4wICogKHp6ICsgeHgpO1xuICAgICAgICByZXN1bHQuX21bNl0gPSAyLjAgKiAoeXogKyB4dyk7XG4gICAgICAgIHJlc3VsdC5fbVs3XSA9IDAuMDtcbiAgICAgICAgcmVzdWx0Ll9tWzhdID0gMi4wICogKHp4ICsgeXcpO1xuICAgICAgICByZXN1bHQuX21bOV0gPSAyLjAgKiAoeXogLSB4dyk7XG4gICAgICAgIHJlc3VsdC5fbVsxMF0gPSAxLjAgLSAyLjAgKiAoeXkgKyB4eCk7XG4gICAgICAgIHJlc3VsdC5fbVsxMV0gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxMl0gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxM10gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxNF0gPSAwLjA7XG4gICAgICAgIHJlc3VsdC5fbVsxNV0gPSAxLjA7XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX21hcmtBc1VwZGF0ZWQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRmxhZyA9IE1hdHJpeC5fdXBkYXRlRmxhZ1NlZWQrKztcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHlEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWU7XG4gICAgfVxuICAgIC8vIFByb3BlcnRpZXNcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY3VycmVudCBtYXRyaXggaXMgaWRlbnRpdHlcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlzIHRoZSBtYXRyaXggaXMgdGhlIGlkZW50aXR5IG1hdHJpeFxuICAgICAqL1xuICAgIGlzSWRlbnRpdHkoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0lkZW50aXR5RGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzSWRlbnRpdHlEaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgICAgICB0aGlzLl9pc0lkZW50aXR5ID1cbiAgICAgICAgICAgICAgICBtWzBdID09PSAxLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxXSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMl0gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzNdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVs0XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bNV0gPT09IDEuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzZdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVs3XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bOF0gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzldID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxMF0gPT09IDEuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzExXSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMTJdID09PSAwLjAgJiZcbiAgICAgICAgICAgICAgICAgICAgbVsxM10gPT09IDAuMCAmJlxuICAgICAgICAgICAgICAgICAgICBtWzE0XSA9PT0gMC4wICYmXG4gICAgICAgICAgICAgICAgICAgIG1bMTVdID09PSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSWRlbnRpdHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IG1hdHJpeCBpcyBpZGVudGl0eSBhcyBhIHRleHR1cmUgbWF0cml4ICgzeDIgc3RvcmUgaW4gNHg0KVxuICAgICAqIEByZXR1cm5zIHRydWUgaXMgdGhlIG1hdHJpeCBpcyB0aGUgaWRlbnRpdHkgbWF0cml4XG4gICAgICovXG4gICAgaXNJZGVudGl0eUFzM3gyKCkge1xuICAgICAgICBpZiAodGhpcy5faXNJZGVudGl0eTN4MkRpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tWzBdICE9PSAxLjAgfHwgdGhpcy5fbVs1XSAhPT0gMS4wIHx8IHRoaXMuX21bMTVdICE9PSAxLjApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9tWzFdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzJdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzNdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzRdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzZdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzddICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzhdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzldICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzEwXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fbVsxMV0gIT09IDAuMCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuX21bMTJdICE9PSAwLjAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLl9tWzEzXSAhPT0gMC4wIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5fbVsxNF0gIT09IDAuMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzSWRlbnRpdHkzeDIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0lkZW50aXR5M3gyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkZXRlcm1pbmFudCBvZiB0aGUgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIG1hdHJpeCBkZXRlcm1pbmFudFxuICAgICAqL1xuICAgIGRldGVybWluYW50KCkge1xuICAgICAgICBpZiAodGhpcy5faXNJZGVudGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0wMCA9IG1bMF0sIG0wMSA9IG1bMV0sIG0wMiA9IG1bMl0sIG0wMyA9IG1bM107XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0xMCA9IG1bNF0sIG0xMSA9IG1bNV0sIG0xMiA9IG1bNl0sIG0xMyA9IG1bN107XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IG0yMCA9IG1bOF0sIG0yMSA9IG1bOV0sIG0yMiA9IG1bMTBdLCBtMjMgPSBtWzExXTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTMwID0gbVsxMl0sIG0zMSA9IG1bMTNdLCBtMzIgPSBtWzE0XSwgbTMzID0gbVsxNV07XG4gICAgICAgIC8qXG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhcGxhY2VfZXhwYW5zaW9uXG4gICAgICAgIC8vIHRvIGNvbXB1dGUgdGhlIGRldGVycm1pbmFudCBvZiBhIDR4NCBNYXRyaXggd2UgY29tcHV0ZSB0aGUgY29mYWN0b3JzIG9mIGFueSByb3cgb3IgY29sdW1uLFxuICAgICAgICAvLyB0aGVuIHdlIG11bHRpcGx5IGVhY2ggQ29mYWN0b3IgYnkgaXRzIGNvcnJlc3BvbmRpbmcgbWF0cml4IHZhbHVlIGFuZCBzdW0gdGhlbSBhbGwgdG8gZ2V0IHRoZSBkZXRlcm1pbmFudFxuICAgICAgICAvLyBDb2ZhY3RvcihpLCBqKSA9IHNpZ24oaSxqKSAqIGRldChNaW5vcihpLCBqKSlcbiAgICAgICAgLy8gd2hlcmVcbiAgICAgICAgLy8gIC0gc2lnbihpLGopID0gKGkraikgJSAyID09PSAwID8gMSA6IC0xXG4gICAgICAgIC8vICAtIE1pbm9yKGksIGopIGlzIHRoZSAzeDMgbWF0cml4IHdlIGdldCBieSByZW1vdmluZyByb3cgaSBhbmQgY29sdW1uIGogZnJvbSBjdXJyZW50IE1hdHJpeFxuICAgICAgICAvL1xuICAgICAgICAvLyBIZXJlIHdlIGRvIHRoYXQgZm9yIHRoZSAxc3Qgcm93LlxuICAgICAgICAqL1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lXG4gICAgICAgIGNvbnN0IGRldF8yMl8zMyA9IG0yMiAqIG0zMyAtIG0zMiAqIG0yMztcbiAgICAgICAgY29uc3QgZGV0XzIxXzMzID0gbTIxICogbTMzIC0gbTMxICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjFfMzIgPSBtMjEgKiBtMzIgLSBtMzEgKiBtMjI7XG4gICAgICAgIGNvbnN0IGRldF8yMF8zMyA9IG0yMCAqIG0zMyAtIG0zMCAqIG0yMztcbiAgICAgICAgY29uc3QgZGV0XzIwXzMyID0gbTIwICogbTMyIC0gbTIyICogbTMwO1xuICAgICAgICBjb25zdCBkZXRfMjBfMzEgPSBtMjAgKiBtMzEgLSBtMzAgKiBtMjE7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMCA9ICsobTExICogZGV0XzIyXzMzIC0gbTEyICogZGV0XzIxXzMzICsgbTEzICogZGV0XzIxXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAxID0gLShtMTAgKiBkZXRfMjJfMzMgLSBtMTIgKiBkZXRfMjBfMzMgKyBtMTMgKiBkZXRfMjBfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMDIgPSArKG0xMCAqIGRldF8yMV8zMyAtIG0xMSAqIGRldF8yMF8zMyArIG0xMyAqIGRldF8yMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMyA9IC0obTEwICogZGV0XzIxXzMyIC0gbTExICogZGV0XzIwXzMyICsgbTEyICogZGV0XzIwXzMxKTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lXG4gICAgICAgIHJldHVybiBtMDAgKiBjb2ZhY3RfMDAgKyBtMDEgKiBjb2ZhY3RfMDEgKyBtMDIgKiBjb2ZhY3RfMDIgKyBtMDMgKiBjb2ZhY3RfMDM7XG4gICAgfVxuICAgIC8vIE1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXRyaXggYXMgYSBGbG9hdEFycmF5XG4gICAgICogQHJldHVybnMgdGhlIG1hdHJpeCB1bmRlcmx5aW5nIGFycmF5XG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hdHJpeCBhcyBhIEZsb2F0QXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbWF0cml4IHVuZGVybHlpbmcgYXJyYXkuXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX207XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludmVydHMgdGhlIGN1cnJlbnQgbWF0cml4IGluIHBsYWNlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgaW52ZXJ0ZWQgbWF0cml4XG4gICAgICovXG4gICAgaW52ZXJ0KCkge1xuICAgICAgICB0aGlzLmludmVydFRvUmVmKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhbGwgdGhlIG1hdHJpeCBlbGVtZW50cyB0byB6ZXJvXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCB0aGlzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlSWRlbnRpdHlTdGF0dXMoZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgY3VycmVudCBtYXRyaXggd2l0aCBhIHNlY29uZCBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBtYXRyaXggdG8gYWRkXG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGFzIHRoZSBhZGRpdGlvbiBvZiB0aGUgY3VycmVudCBtYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKi9cbiAgICBhZGQob3RoZXIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICB0aGlzLmFkZFRvUmVmKG90aGVyLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiBtYXRyaXggXCJyZXN1bHRcIiB0byB0aGUgYWRkaXRpb24gb2YgdGhlIGN1cnJlbnQgbWF0cml4IGFuZCB0aGUgZ2l2ZW4gb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgbWF0cml4IHRvIGFkZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgYWRkVG9SZWYob3RoZXIsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSB0aGlzLl9tW2luZGV4XSArIG90aGVyLl9tW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgaW4gcGxhY2UgdGhlIGdpdmVuIG1hdHJpeCB0byB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgYWRkVG9TZWxmKG90aGVyKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy5fbVtpbmRleF0gKz0gb3RoZXIuX21baW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIG1hdHJpeCB0byB0aGUgY3VycmVudCBpbnZlcnRlZCBNYXRyaXhcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBpbnZlcnRUb1JlZihvdGhlcikge1xuICAgICAgICBpZiAodGhpcy5faXNJZGVudGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgTWF0cml4LklkZW50aXR5VG9SZWYob3RoZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhlIGludmVyc2Ugb2YgYSBNYXRyaXggaXMgdGhlIHRyYW5zcG9zZSBvZiBjb2ZhY3RvciBtYXRyaXggZGl2aWRlZCBieSB0aGUgZGV0ZXJtaW5hbnRcbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3QgbTAwID0gbVswXSwgbTAxID0gbVsxXSwgbTAyID0gbVsyXSwgbTAzID0gbVszXTtcbiAgICAgICAgY29uc3QgbTEwID0gbVs0XSwgbTExID0gbVs1XSwgbTEyID0gbVs2XSwgbTEzID0gbVs3XTtcbiAgICAgICAgY29uc3QgbTIwID0gbVs4XSwgbTIxID0gbVs5XSwgbTIyID0gbVsxMF0sIG0yMyA9IG1bMTFdO1xuICAgICAgICBjb25zdCBtMzAgPSBtWzEyXSwgbTMxID0gbVsxM10sIG0zMiA9IG1bMTRdLCBtMzMgPSBtWzE1XTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWVcbiAgICAgICAgY29uc3QgZGV0XzIyXzMzID0gbTIyICogbTMzIC0gbTMyICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjFfMzMgPSBtMjEgKiBtMzMgLSBtMzEgKiBtMjM7XG4gICAgICAgIGNvbnN0IGRldF8yMV8zMiA9IG0yMSAqIG0zMiAtIG0zMSAqIG0yMjtcbiAgICAgICAgY29uc3QgZGV0XzIwXzMzID0gbTIwICogbTMzIC0gbTMwICogbTIzO1xuICAgICAgICBjb25zdCBkZXRfMjBfMzIgPSBtMjAgKiBtMzIgLSBtMjIgKiBtMzA7XG4gICAgICAgIGNvbnN0IGRldF8yMF8zMSA9IG0yMCAqIG0zMSAtIG0zMCAqIG0yMTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAwID0gKyhtMTEgKiBkZXRfMjJfMzMgLSBtMTIgKiBkZXRfMjFfMzMgKyBtMTMgKiBkZXRfMjFfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMDEgPSAtKG0xMCAqIGRldF8yMl8zMyAtIG0xMiAqIGRldF8yMF8zMyArIG0xMyAqIGRldF8yMF8zMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8wMiA9ICsobTEwICogZGV0XzIxXzMzIC0gbTExICogZGV0XzIwXzMzICsgbTEzICogZGV0XzIwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzAzID0gLShtMTAgKiBkZXRfMjFfMzIgLSBtMTEgKiBkZXRfMjBfMzIgKyBtMTIgKiBkZXRfMjBfMzEpO1xuICAgICAgICBjb25zdCBkZXQgPSBtMDAgKiBjb2ZhY3RfMDAgKyBtMDEgKiBjb2ZhY3RfMDEgKyBtMDIgKiBjb2ZhY3RfMDIgKyBtMDMgKiBjb2ZhY3RfMDM7XG4gICAgICAgIGlmIChkZXQgPT09IDApIHtcbiAgICAgICAgICAgIC8vIG5vdCBpbnZlcnRpYmxlXG4gICAgICAgICAgICBvdGhlci5jb3B5RnJvbSh0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRldEludiA9IDEgLyBkZXQ7XG4gICAgICAgIGNvbnN0IGRldF8xMl8zMyA9IG0xMiAqIG0zMyAtIG0zMiAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzExXzMzID0gbTExICogbTMzIC0gbTMxICogbTEzO1xuICAgICAgICBjb25zdCBkZXRfMTFfMzIgPSBtMTEgKiBtMzIgLSBtMzEgKiBtMTI7XG4gICAgICAgIGNvbnN0IGRldF8xMF8zMyA9IG0xMCAqIG0zMyAtIG0zMCAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzEwXzMyID0gbTEwICogbTMyIC0gbTMwICogbTEyO1xuICAgICAgICBjb25zdCBkZXRfMTBfMzEgPSBtMTAgKiBtMzEgLSBtMzAgKiBtMTE7XG4gICAgICAgIGNvbnN0IGRldF8xMl8yMyA9IG0xMiAqIG0yMyAtIG0yMiAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzExXzIzID0gbTExICogbTIzIC0gbTIxICogbTEzO1xuICAgICAgICBjb25zdCBkZXRfMTFfMjIgPSBtMTEgKiBtMjIgLSBtMjEgKiBtMTI7XG4gICAgICAgIGNvbnN0IGRldF8xMF8yMyA9IG0xMCAqIG0yMyAtIG0yMCAqIG0xMztcbiAgICAgICAgY29uc3QgZGV0XzEwXzIyID0gbTEwICogbTIyIC0gbTIwICogbTEyO1xuICAgICAgICBjb25zdCBkZXRfMTBfMjEgPSBtMTAgKiBtMjEgLSBtMjAgKiBtMTE7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8xMCA9IC0obTAxICogZGV0XzIyXzMzIC0gbTAyICogZGV0XzIxXzMzICsgbTAzICogZGV0XzIxXzMyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzExID0gKyhtMDAgKiBkZXRfMjJfMzMgLSBtMDIgKiBkZXRfMjBfMzMgKyBtMDMgKiBkZXRfMjBfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMTIgPSAtKG0wMCAqIGRldF8yMV8zMyAtIG0wMSAqIGRldF8yMF8zMyArIG0wMyAqIGRldF8yMF8zMSk7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8xMyA9ICsobTAwICogZGV0XzIxXzMyIC0gbTAxICogZGV0XzIwXzMyICsgbTAyICogZGV0XzIwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzIwID0gKyhtMDEgKiBkZXRfMTJfMzMgLSBtMDIgKiBkZXRfMTFfMzMgKyBtMDMgKiBkZXRfMTFfMzIpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMjEgPSAtKG0wMCAqIGRldF8xMl8zMyAtIG0wMiAqIGRldF8xMF8zMyArIG0wMyAqIGRldF8xMF8zMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8yMiA9ICsobTAwICogZGV0XzExXzMzIC0gbTAxICogZGV0XzEwXzMzICsgbTAzICogZGV0XzEwXzMxKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzIzID0gLShtMDAgKiBkZXRfMTFfMzIgLSBtMDEgKiBkZXRfMTBfMzIgKyBtMDIgKiBkZXRfMTBfMzEpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMzAgPSAtKG0wMSAqIGRldF8xMl8yMyAtIG0wMiAqIGRldF8xMV8yMyArIG0wMyAqIGRldF8xMV8yMik7XG4gICAgICAgIGNvbnN0IGNvZmFjdF8zMSA9ICsobTAwICogZGV0XzEyXzIzIC0gbTAyICogZGV0XzEwXzIzICsgbTAzICogZGV0XzEwXzIyKTtcbiAgICAgICAgY29uc3QgY29mYWN0XzMyID0gLShtMDAgKiBkZXRfMTFfMjMgLSBtMDEgKiBkZXRfMTBfMjMgKyBtMDMgKiBkZXRfMTBfMjEpO1xuICAgICAgICBjb25zdCBjb2ZhY3RfMzMgPSArKG0wMCAqIGRldF8xMV8yMiAtIG0wMSAqIGRldF8xMF8yMiArIG0wMiAqIGRldF8xMF8yMSk7XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoY29mYWN0XzAwICogZGV0SW52LCBjb2ZhY3RfMTAgKiBkZXRJbnYsIGNvZmFjdF8yMCAqIGRldEludiwgY29mYWN0XzMwICogZGV0SW52LCBjb2ZhY3RfMDEgKiBkZXRJbnYsIGNvZmFjdF8xMSAqIGRldEludiwgY29mYWN0XzIxICogZGV0SW52LCBjb2ZhY3RfMzEgKiBkZXRJbnYsIGNvZmFjdF8wMiAqIGRldEludiwgY29mYWN0XzEyICogZGV0SW52LCBjb2ZhY3RfMjIgKiBkZXRJbnYsIGNvZmFjdF8zMiAqIGRldEludiwgY29mYWN0XzAzICogZGV0SW52LCBjb2ZhY3RfMTMgKiBkZXRJbnYsIGNvZmFjdF8yMyAqIGRldEludiwgY29mYWN0XzMzICogZGV0SW52LCBvdGhlcik7XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogYWRkIGEgdmFsdWUgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgY3VycmVudCBNYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5kZXggLSB0aGUgaW5kZXggb2YgdGhlIHZhbHVlIHdpdGhpbiB0aGUgbWF0cml4LiBiZXR3ZWVuIDAgYW5kIDE1LlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBiZSBhZGRlZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgYWRkQXRJbmRleChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbVtpbmRleF0gKz0gdmFsdWU7XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIG11dGlwbHkgdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgY3VycmVudCBNYXRyaXggYnkgYSB2YWx1ZVxuICAgICAqIEBwYXJhbSBpbmRleCAtIHRoZSBpbmRleCBvZiB0aGUgdmFsdWUgd2l0aGluIHRoZSBtYXRyaXguIGJldHdlZW4gMCBhbmQgMTUuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIHZhbHVlIHRvIGJlIGFkZGVkXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICBtdWx0aXBseUF0SW5kZXgoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX21baW5kZXhdICo9IHZhbHVlO1xuICAgICAgICB0aGlzLl9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgKHVzaW5nIDMgZmxvYXRzKSBpbiB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIDFzdCBjb21wb25lbnQgb2YgdGhlIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSAybmQgY29tcG9uZW50IG9mIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgM3JkIGNvbXBvbmVudCBvZiB0aGUgdHJhbnNsYXRpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIG1hdHJpeFxuICAgICAqL1xuICAgIHNldFRyYW5zbGF0aW9uRnJvbUZsb2F0cyh4LCB5LCB6KSB7XG4gICAgICAgIHRoaXMuX21bMTJdID0geDtcbiAgICAgICAgdGhpcy5fbVsxM10gPSB5O1xuICAgICAgICB0aGlzLl9tWzE0XSA9IHo7XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc2VydHMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBpbiB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdmVjdG9yMyAtIGRlZmluZXMgdGhlIHRyYW5zbGF0aW9uIHRvIGluc2VydFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgbWF0cml4XG4gICAgICovXG4gICAgc2V0VHJhbnNsYXRpb24odmVjdG9yMykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRUcmFuc2xhdGlvbkZyb21GbG9hdHModmVjdG9yMy54LCB2ZWN0b3IzLnksIHZlY3RvcjMueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRyYW5zbGF0aW9uIHZhbHVlIG9mIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjMgYXMgdGhlIGV4dHJhY3RlZCB0cmFuc2xhdGlvbiBmcm9tIHRoZSBtYXRyaXhcbiAgICAgKi9cbiAgICBnZXRUcmFuc2xhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzXzEuVmVjdG9yMyh0aGlzLl9tWzEyXSwgdGhpcy5fbVsxM10sIHRoaXMuX21bMTRdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlsbCBhIFZlY3RvcjMgd2l0aCB0aGUgZXh0cmFjdGVkIHRyYW5zbGF0aW9uIGZyb20gdGhlIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSB0cmFuc2xhdGlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGdldFRyYW5zbGF0aW9uVG9SZWYocmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gdGhpcy5fbVsxMl07XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy5fbVsxM107XG4gICAgICAgIHJlc3VsdC56ID0gdGhpcy5fbVsxNF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcm90YXRpb24gYW5kIHNjYWxpbmcgcGFydCBmcm9tIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICByZW1vdmVSb3RhdGlvbkFuZFNjYWxpbmcoKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLm07XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYoMS4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgbVsxMl0sIG1bMTNdLCBtWzE0XSwgbVsxNV0sIHRoaXMpO1xuICAgICAgICB0aGlzLl91cGRhdGVJZGVudGl0eVN0YXR1cyhtWzEyXSA9PT0gMCAmJiBtWzEzXSA9PT0gMCAmJiBtWzE0XSA9PT0gMCAmJiBtWzE1XSA9PT0gMSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbWF0cmljZXNcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeCBzZXQgd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IE1hdHJpeCBhbmQgdGhlIGdpdmVuIG9uZVxuICAgICAqL1xuICAgIG11bHRpcGx5KG90aGVyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgdGhpcy5tdWx0aXBseVRvUmVmKG90aGVyLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjdXJyZW50IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBtYXRyaXhcbiAgICAgKi9cbiAgICBjb3B5RnJvbShvdGhlcikge1xuICAgICAgICBvdGhlci5jb3B5VG9BcnJheSh0aGlzLl9tKTtcbiAgICAgICAgY29uc3QgbyA9IG90aGVyO1xuICAgICAgICB0aGlzLl91cGRhdGVJZGVudGl0eVN0YXR1cyhvLl9pc0lkZW50aXR5LCBvLl9pc0lkZW50aXR5RGlydHksIG8uX2lzSWRlbnRpdHkzeDIsIG8uX2lzSWRlbnRpdHkzeDJEaXJ0eSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgdGhlIGdpdmVuIGFycmF5IGZyb20gdGhlIHN0YXJ0aW5nIGluZGV4IHdpdGggdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHRhcmdldCBhcnJheVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHRhcmdldCBhcnJheSB3aGVyZSB0byBzdGFydCBzdG9yaW5nIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIGNvcHlUb0FycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAxNjsgaW5kZXgrKykge1xuICAgICAgICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdGhpcy5fbVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIG1hdHJpeCBcInJlc3VsdFwiIHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBNYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBtYXRyaXggd2hlcmUgdG8gc3RvcmUgdGhlIG11bHRpcGxpY2F0aW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgbXVsdGlwbHlUb1JlZihvdGhlciwgcmVzdWx0KSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0lkZW50aXR5KSB7XG4gICAgICAgICAgICByZXN1bHQuY29weUZyb20ob3RoZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyLl9pc0lkZW50aXR5KSB7XG4gICAgICAgICAgICByZXN1bHQuY29weUZyb20odGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm11bHRpcGx5VG9BcnJheShvdGhlciwgcmVzdWx0Ll9tLCAwKTtcbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBGbG9hdEFycmF5IFwicmVzdWx0XCIgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggXCJvZmZzZXRcIiB3aXRoIHRoZSBtdWx0aXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBtYXRyaXggYW5kIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBhcnJheSB3aGVyZSB0byBzdG9yZSB0aGUgbXVsdGlwbGljYXRpb25cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSB0YXJnZXQgYXJyYXkgd2hlcmUgdG8gc3RhcnQgc3RvcmluZyB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBtdWx0aXBseVRvQXJyYXkob3RoZXIsIHJlc3VsdCwgb2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLl9tO1xuICAgICAgICBjb25zdCBvdGhlck0gPSBvdGhlci5tO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IHRtMCA9IG1bMF0sIHRtMSA9IG1bMV0sIHRtMiA9IG1bMl0sIHRtMyA9IG1bM107XG4gICAgICAgIGNvbnN0IHRtNCA9IG1bNF0sIHRtNSA9IG1bNV0sIHRtNiA9IG1bNl0sIHRtNyA9IG1bN107XG4gICAgICAgIGNvbnN0IHRtOCA9IG1bOF0sIHRtOSA9IG1bOV0sIHRtMTAgPSBtWzEwXSwgdG0xMSA9IG1bMTFdO1xuICAgICAgICBjb25zdCB0bTEyID0gbVsxMl0sIHRtMTMgPSBtWzEzXSwgdG0xNCA9IG1bMTRdLCB0bTE1ID0gbVsxNV07XG4gICAgICAgIGNvbnN0IG9tMCA9IG90aGVyTVswXSwgb20xID0gb3RoZXJNWzFdLCBvbTIgPSBvdGhlck1bMl0sIG9tMyA9IG90aGVyTVszXTtcbiAgICAgICAgY29uc3Qgb200ID0gb3RoZXJNWzRdLCBvbTUgPSBvdGhlck1bNV0sIG9tNiA9IG90aGVyTVs2XSwgb203ID0gb3RoZXJNWzddO1xuICAgICAgICBjb25zdCBvbTggPSBvdGhlck1bOF0sIG9tOSA9IG90aGVyTVs5XSwgb20xMCA9IG90aGVyTVsxMF0sIG9tMTEgPSBvdGhlck1bMTFdO1xuICAgICAgICBjb25zdCBvbTEyID0gb3RoZXJNWzEyXSwgb20xMyA9IG90aGVyTVsxM10sIG9tMTQgPSBvdGhlck1bMTRdLCBvbTE1ID0gb3RoZXJNWzE1XTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIHJlc3VsdFtvZmZzZXRdID0gdG0wICogb20wICsgdG0xICogb200ICsgdG0yICogb204ICsgdG0zICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDFdID0gdG0wICogb20xICsgdG0xICogb201ICsgdG0yICogb205ICsgdG0zICogb20xMztcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDJdID0gdG0wICogb20yICsgdG0xICogb202ICsgdG0yICogb20xMCArIHRtMyAqIG9tMTQ7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyAzXSA9IHRtMCAqIG9tMyArIHRtMSAqIG9tNyArIHRtMiAqIG9tMTEgKyB0bTMgKiBvbTE1O1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNF0gPSB0bTQgKiBvbTAgKyB0bTUgKiBvbTQgKyB0bTYgKiBvbTggKyB0bTcgKiBvbTEyO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNV0gPSB0bTQgKiBvbTEgKyB0bTUgKiBvbTUgKyB0bTYgKiBvbTkgKyB0bTcgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgNl0gPSB0bTQgKiBvbTIgKyB0bTUgKiBvbTYgKyB0bTYgKiBvbTEwICsgdG03ICogb20xNDtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDddID0gdG00ICogb20zICsgdG01ICogb203ICsgdG02ICogb20xMSArIHRtNyAqIG9tMTU7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyA4XSA9IHRtOCAqIG9tMCArIHRtOSAqIG9tNCArIHRtMTAgKiBvbTggKyB0bTExICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDldID0gdG04ICogb20xICsgdG05ICogb201ICsgdG0xMCAqIG9tOSArIHRtMTEgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTBdID0gdG04ICogb20yICsgdG05ICogb202ICsgdG0xMCAqIG9tMTAgKyB0bTExICogb20xNDtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDExXSA9IHRtOCAqIG9tMyArIHRtOSAqIG9tNyArIHRtMTAgKiBvbTExICsgdG0xMSAqIG9tMTU7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyAxMl0gPSB0bTEyICogb20wICsgdG0xMyAqIG9tNCArIHRtMTQgKiBvbTggKyB0bTE1ICogb20xMjtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIDEzXSA9IHRtMTIgKiBvbTEgKyB0bTEzICogb201ICsgdG0xNCAqIG9tOSArIHRtMTUgKiBvbTEzO1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTRdID0gdG0xMiAqIG9tMiArIHRtMTMgKiBvbTYgKyB0bTE0ICogb20xMCArIHRtMTUgKiBvbTE0O1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgMTVdID0gdG0xMiAqIG9tMyArIHRtMTMgKiBvbTcgKyB0bTE0ICogb20xMSArIHRtMTUgKiBvbTE1O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgZXF1YWxpdHkgYmV0d2VlbiB0aGlzIG1hdHJpeCBhbmQgYSBzZWNvbmQgb25lXG4gICAgICogQHBhcmFtIHZhbHVlIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG1hdHJpeCB0byBjb21wYXJlXG4gICAgICogQHJldHVybnMgdHJ1ZSBpcyB0aGUgY3VycmVudCBtYXRyaXggYW5kIHRoZSBnaXZlbiBvbmUgdmFsdWVzIGFyZSBzdHJpY3RseSBlcXVhbFxuICAgICAqL1xuICAgIGVxdWFscyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvdGhlciA9IHZhbHVlO1xuICAgICAgICBpZiAoIW90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzSWRlbnRpdHkgfHwgb3RoZXIuX2lzSWRlbnRpdHkpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNJZGVudGl0eURpcnR5ICYmICFvdGhlci5faXNJZGVudGl0eURpcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzSWRlbnRpdHkgJiYgb3RoZXIuX2lzSWRlbnRpdHk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHRoaXMubTtcbiAgICAgICAgY29uc3Qgb20gPSBvdGhlci5tO1xuICAgICAgICByZXR1cm4gKG1bMF0gPT09IG9tWzBdICYmXG4gICAgICAgICAgICBtWzFdID09PSBvbVsxXSAmJlxuICAgICAgICAgICAgbVsyXSA9PT0gb21bMl0gJiZcbiAgICAgICAgICAgIG1bM10gPT09IG9tWzNdICYmXG4gICAgICAgICAgICBtWzRdID09PSBvbVs0XSAmJlxuICAgICAgICAgICAgbVs1XSA9PT0gb21bNV0gJiZcbiAgICAgICAgICAgIG1bNl0gPT09IG9tWzZdICYmXG4gICAgICAgICAgICBtWzddID09PSBvbVs3XSAmJlxuICAgICAgICAgICAgbVs4XSA9PT0gb21bOF0gJiZcbiAgICAgICAgICAgIG1bOV0gPT09IG9tWzldICYmXG4gICAgICAgICAgICBtWzEwXSA9PT0gb21bMTBdICYmXG4gICAgICAgICAgICBtWzExXSA9PT0gb21bMTFdICYmXG4gICAgICAgICAgICBtWzEyXSA9PT0gb21bMTJdICYmXG4gICAgICAgICAgICBtWzEzXSA9PT0gb21bMTNdICYmXG4gICAgICAgICAgICBtWzE0XSA9PT0gb21bMTRdICYmXG4gICAgICAgICAgICBtWzE1XSA9PT0gb21bMTVdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IGZyb20gdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgbWF0cml4LmNvcHlGcm9tKHRoaXMpO1xuICAgICAgICByZXR1cm4gbWF0cml4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IG1hdHJpeCBjbGFzc1xuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJNYXRyaXhcIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNYXRyaXgnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIGNvZGUgb2YgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGhhc2ggY29kZVxuICAgICAqL1xuICAgIGdldEhhc2hDb2RlKCkge1xuICAgICAgICBsZXQgaGFzaCA9IHRoaXMuX21bMF0gfHwgMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuX21baV0gfHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29tcG9zZXMgdGhlIGN1cnJlbnQgTWF0cml4IGludG8gYSB0cmFuc2xhdGlvbiwgcm90YXRpb24gYW5kIHNjYWxpbmcgY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIHZlY3RvcjMgZ2l2ZW4gYXMgYSByZWZlcmVuY2UgdG8gdXBkYXRlXG4gICAgICogQHBhcmFtIHJvdGF0aW9uIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gcXVhdGVybmlvbiBnaXZlbiBhcyBhIHJlZmVyZW5jZSB0byB1cGRhdGVcbiAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb24gLSBkZWZpbmVzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IzIGdpdmVuIGFzIGEgcmVmZXJlbmNlIHRvIHVwZGF0ZVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgb3BlcmF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgZGVjb21wb3NlKHNjYWxlLCByb3RhdGlvbiwgdHJhbnNsYXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzSWRlbnRpdHkpIHtcbiAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uLnNldEFsbCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY2FsZSkge1xuICAgICAgICAgICAgICAgIHNjYWxlLnNldEFsbCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uLmNvcHlGcm9tRmxvYXRzKDAsIDAsIDAsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIGlmICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgdHJhbnNsYXRpb24uY29weUZyb21GbG9hdHMobVsxMl0sIG1bMTNdLCBtWzE0XSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXNlZFNjYWxlID0gc2NhbGUgfHwgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzBdO1xuICAgICAgICB1c2VkU2NhbGUueCA9IE1hdGguc3FydChtWzBdICogbVswXSArIG1bMV0gKiBtWzFdICsgbVsyXSAqIG1bMl0pO1xuICAgICAgICB1c2VkU2NhbGUueSA9IE1hdGguc3FydChtWzRdICogbVs0XSArIG1bNV0gKiBtWzVdICsgbVs2XSAqIG1bNl0pO1xuICAgICAgICB1c2VkU2NhbGUueiA9IE1hdGguc3FydChtWzhdICogbVs4XSArIG1bOV0gKiBtWzldICsgbVsxMF0gKiBtWzEwXSk7XG4gICAgICAgIGlmICh0aGlzLmRldGVybWluYW50KCkgPD0gMCkge1xuICAgICAgICAgICAgdXNlZFNjYWxlLnkgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZWRTY2FsZS54ID09PSAwIHx8IHVzZWRTY2FsZS55ID09PSAwIHx8IHVzZWRTY2FsZS56ID09PSAwKSB7XG4gICAgICAgICAgICBpZiAocm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICByb3RhdGlvbi5jb3B5RnJvbUZsb2F0cygwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3RhdGlvbikge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgICAgIGNvbnN0IHN4ID0gMSAvIHVzZWRTY2FsZS54LCBzeSA9IDEgLyB1c2VkU2NhbGUueSwgc3ogPSAxIC8gdXNlZFNjYWxlLno7XG4gICAgICAgICAgICBNYXRyaXguRnJvbVZhbHVlc1RvUmVmKG1bMF0gKiBzeCwgbVsxXSAqIHN4LCBtWzJdICogc3gsIDAuMCwgbVs0XSAqIHN5LCBtWzVdICogc3ksIG1bNl0gKiBzeSwgMC4wLCBtWzhdICogc3osIG1bOV0gKiBzeiwgbVsxMF0gKiBzeiwgMC4wLCAwLjAsIDAuMCwgMC4wLCAxLjAsIHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdKTtcbiAgICAgICAgICAgIFF1YXRlcm5pb25fMS5RdWF0ZXJuaW9uLkZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdLCByb3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgc3BlY2lmaWMgcm93IG9mIHRoZSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBudW1iZXIgb2YgdGhlIHJvdyB0byBnZXRcbiAgICAgKiBAcmV0dXJucyB0aGUgaW5kZXgtdGggcm93IG9mIHRoZSBjdXJyZW50IG1hdHJpeCBhcyBhIG5ldyBWZWN0b3I0XG4gICAgICovXG4gICAgZ2V0Um93KGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiAzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpID0gaW5kZXggKiA0O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjRfMS5WZWN0b3I0KHRoaXMuX21baSArIDBdLCB0aGlzLl9tW2kgKyAxXSwgdGhpcy5fbVtpICsgMl0sIHRoaXMuX21baSArIDNdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5kZXgtdGggcm93IG9mIHRoZSBjdXJyZW50IG1hdHJpeCB0byB0aGUgdmVjdG9yNCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBudW1iZXIgb2YgdGhlIHJvdyB0byBzZXRcbiAgICAgKiBAcGFyYW0gcm93IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvcjRcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIHNldFJvdyhpbmRleCwgcm93KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFJvd0Zyb21GbG9hdHMoaW5kZXgsIHJvdy54LCByb3cueSwgcm93LnosIHJvdy53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIHRoZSBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHRyYW5zcG9zZWQgbWF0cml4XG4gICAgICovXG4gICAgdHJhbnNwb3NlKCkge1xuICAgICAgICByZXR1cm4gTWF0cml4LlRyYW5zcG9zZSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgdHJhbnNwb3NlIG9mIHRoZSBtYXRyaXggYW5kIHN0b3JlIGl0IGluIGEgZ2l2ZW4gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBtYXRyaXhcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICB0cmFuc3Bvc2VUb1JlZihyZXN1bHQpIHtcbiAgICAgICAgTWF0cml4LlRyYW5zcG9zZVRvUmVmKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbmRleC10aCByb3cgb2YgdGhlIGN1cnJlbnQgbWF0cml4IHdpdGggdGhlIGdpdmVuIDQgeCBmbG9hdCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSByb3cgaW5kZXhcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29tcG9uZW50IHRvIHNldFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb21wb25lbnQgdG8gc2V0XG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvbXBvbmVudCB0byBzZXRcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIHcgY29tcG9uZW50IHRvIHNldFxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIGN1cnJlbnQgbWF0cml4XG4gICAgICovXG4gICAgc2V0Um93RnJvbUZsb2F0cyhpbmRleCwgeCwgeSwgeiwgdykge1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gMykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaSA9IGluZGV4ICogNDtcbiAgICAgICAgdGhpcy5fbVtpICsgMF0gPSB4O1xuICAgICAgICB0aGlzLl9tW2kgKyAxXSA9IHk7XG4gICAgICAgIHRoaXMuX21baSArIDJdID0gejtcbiAgICAgICAgdGhpcy5fbVtpICsgM10gPSB3O1xuICAgICAgICB0aGlzLl9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIGEgbmV3IG1hdHJpeCBzZXQgd2l0aCB0aGUgY3VycmVudCBtYXRyaXggdmFsdWVzIG11bHRpcGxpZWQgYnkgc2NhbGUgKGZsb2F0KVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIHNjYWxlKHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgdGhpcy5zY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBtYXRyaXggdmFsdWVzIGJ5IGEgZmFjdG9yIHRvIGEgZ2l2ZW4gcmVzdWx0IG1hdHJpeFxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBtYXRyaXggdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IG1hdHJpeFxuICAgICAqL1xuICAgIHNjYWxlVG9SZWYoc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgMTY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5fbVtpbmRleF0gPSB0aGlzLl9tW2luZGV4XSAqIHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5fbWFya0FzVXBkYXRlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgbWF0cml4IHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgTWF0cml4IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDE2OyBpbmRleCsrKSB7XG4gICAgICAgICAgICByZXN1bHQuX21baW5kZXhdICs9IHRoaXMuX21baW5kZXhdICogc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Ll9tYXJrQXNVcGRhdGVkKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgdG8gdGhlIGdpdmVuIG1hdHJpeCBhIG5vcm1hbCBtYXRyaXgsIGNvbXB1dGVkIGZyb20gdGhpcyBvbmUgKHVzaW5nIHZhbHVlcyBmcm9tIGlkZW50aXR5IG1hdHJpeCBmb3IgZm91cnRoIHJvdyBhbmQgY29sdW1uKS5cbiAgICAgKiBAcGFyYW0gcmVmIC0gbWF0cml4IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICB0b05vcm1hbE1hdHJpeChyZWYpIHtcbiAgICAgICAgY29uc3QgdG1wID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5NYXRyaXhbMF07XG4gICAgICAgIHRoaXMuaW52ZXJ0VG9SZWYodG1wKTtcbiAgICAgICAgdG1wLnRyYW5zcG9zZVRvUmVmKHJlZik7XG4gICAgICAgIGNvbnN0IG0gPSByZWYuX207XG4gICAgICAgIE1hdHJpeC5Gcm9tVmFsdWVzVG9SZWYobVswXSwgbVsxXSwgbVsyXSwgMC4wLCBtWzRdLCBtWzVdLCBtWzZdLCAwLjAsIG1bOF0sIG1bOV0sIG1bMTBdLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDEuMCwgcmVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBvbmx5IHJvdGF0aW9uIHBhcnQgb2YgdGhlIGN1cnJlbnQgbWF0cml4XG4gICAgICogQHJldHVybnMgYSBuZXcgbWF0cml4IHNldHMgdG8gdGhlIGV4dHJhY3RlZCByb3RhdGlvbiBtYXRyaXggZnJvbSB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBnZXRSb3RhdGlvbk1hdHJpeCgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICB0aGlzLmdldFJvdGF0aW9uTWF0cml4VG9SZWYocmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHJvdGF0aW9uIG1hdHJpeCBmcm9tIHRoZSBjdXJyZW50IG9uZSBhbmQgc2V0cyBpdCBhcyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4IHRvIHN0b3JlIGRhdGEgdG9cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBtYXRyaXhcbiAgICAgKi9cbiAgICBnZXRSb3RhdGlvbk1hdHJpeFRvUmVmKHJlc3VsdCkge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1swXTtcbiAgICAgICAgaWYgKCF0aGlzLmRlY29tcG9zZShzY2FsZSkpIHtcbiAgICAgICAgICAgIE1hdHJpeC5JZGVudGl0eVRvUmVmKHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtID0gdGhpcy5fbTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm9uZS12YXJpYWJsZS1wZXItZGVjbGFyYXRpb25cbiAgICAgICAgY29uc3Qgc3ggPSAxIC8gc2NhbGUueCwgc3kgPSAxIC8gc2NhbGUueSwgc3ogPSAxIC8gc2NhbGUuejtcbiAgICAgICAgTWF0cml4LkZyb21WYWx1ZXNUb1JlZihtWzBdICogc3gsIG1bMV0gKiBzeCwgbVsyXSAqIHN4LCAwLjAsIG1bNF0gKiBzeSwgbVs1XSAqIHN5LCBtWzZdICogc3ksIDAuMCwgbVs4XSAqIHN6LCBtWzldICogc3osIG1bMTBdICogc3osIDAuMCwgMC4wLCAwLjAsIDAuMCwgMS4wLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBtb2RlbCBtYXRyaXggZnJvbSBiZWluZyByaWdodCBoYW5kZWQgdG8gbGVmdCBoYW5kZWQgaW4gcGxhY2UgYW5kIHZpY2UgdmVyc2FcbiAgICAgKi9cbiAgICB0b2dnbGVNb2RlbE1hdHJpeEhhbmRJblBsYWNlKCkge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5fbTtcbiAgICAgICAgbVsyXSAqPSAtMTtcbiAgICAgICAgbVs2XSAqPSAtMTtcbiAgICAgICAgbVs4XSAqPSAtMTtcbiAgICAgICAgbVs5XSAqPSAtMTtcbiAgICAgICAgbVsxNF0gKj0gLTE7XG4gICAgICAgIHRoaXMuX21hcmtBc1VwZGF0ZWQoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBwcm9qZWN0aW9uIG1hdHJpeCBmcm9tIGJlaW5nIHJpZ2h0IGhhbmRlZCB0byBsZWZ0IGhhbmRlZCBpbiBwbGFjZSBhbmQgdmljZSB2ZXJzYVxuICAgICAqL1xuICAgIHRvZ2dsZVByb2plY3Rpb25NYXRyaXhIYW5kSW5QbGFjZSgpIHtcbiAgICAgICAgY29uc3QgbSA9IHRoaXMuX207XG4gICAgICAgIG1bOF0gKj0gLTE7XG4gICAgICAgIG1bOV0gKj0gLTE7XG4gICAgICAgIG1bMTBdICo9IC0xO1xuICAgICAgICBtWzExXSAqPSAtMTtcbiAgICAgICAgdGhpcy5fbWFya0FzVXBkYXRlZCgpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3VwZGF0ZUlkZW50aXR5U3RhdHVzKGlzSWRlbnRpdHksIGlzSWRlbnRpdHlEaXJ0eSA9IGZhbHNlLCBpc0lkZW50aXR5M3gyID0gZmFsc2UsIGlzSWRlbnRpdHkzeDJEaXJ0eSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVGbGFnID0gTWF0cml4Ll91cGRhdGVGbGFnU2VlZCsrO1xuICAgICAgICB0aGlzLl9pc0lkZW50aXR5ID0gaXNJZGVudGl0eTtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eTN4MiA9IGlzSWRlbnRpdHkgfHwgaXNJZGVudGl0eTN4MjtcbiAgICAgICAgdGhpcy5faXNJZGVudGl0eURpcnR5ID0gdGhpcy5faXNJZGVudGl0eSA/IGZhbHNlIDogaXNJZGVudGl0eURpcnR5O1xuICAgICAgICB0aGlzLl9pc0lkZW50aXR5M3gyRGlydHkgPSB0aGlzLl9pc0lkZW50aXR5M3gyID8gZmFsc2UgOiBpc0lkZW50aXR5M3gyRGlydHk7XG4gICAgfVxufVxuZXhwb3J0cy5NYXRyaXggPSBNYXRyaXg7XG5NYXRyaXguX3VwZGF0ZUZsYWdTZWVkID0gMDtcbk1hdHJpeC5faWRlbnRpdHlSZWFkT25seSA9IE1hdHJpeC5JZGVudGl0eSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWF0cml4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWF0ZXJuaW9uID0gdm9pZCAwO1xuY29uc3QgTWF0cml4XzEgPSByZXF1aXJlKFwiLi9NYXRyaXhcIik7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuY29uc3QgcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEgPSByZXF1aXJlKFwiLi9wcmVhbGxvY2F0ZWRWYXJpYWJsZXNcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBTY2FsYXJfMSA9IHJlcXVpcmUoXCIuL1NjYWxhclwiKTtcbi8qKlxuICogQ2xhc3MgdXNlZCB0byBzdG9yZSBxdWF0ZXJuaW9uIGRhdGFcbiAqIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9RdWF0ZXJuaW9uIH1cbiAqIHtAbGluayBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vZmVhdHVyZXMvcG9zaXRpb24sX3JvdGF0aW9uLF9zY2FsaW5nIH1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUXVhdGVybmlvbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBRdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGZsb2F0c1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29tcG9uZW50ICgwIGJ5IGRlZmF1bHQpXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB0aGlyZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdClcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIGZvdXJ0aCBjb21wb25lbnQgKDEuMCBieSBkZWZhdWx0KVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBkZWZpbmVzIHRoZSBmaXJzdCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB4ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgc2Vjb25kIGNvbXBvbmVudCAoMCBieSBkZWZhdWx0KSAqL1xuICAgIHkgPSAwLjAsIFxuICAgIC8qKiBkZWZpbmVzIHRoZSB0aGlyZCBjb21wb25lbnQgKDAgYnkgZGVmYXVsdCkgKi9cbiAgICB6ID0gMC4wLCBcbiAgICAvKiogZGVmaW5lcyB0aGUgZm91cnRoIGNvbXBvbmVudCAoMS4wIGJ5IGRlZmF1bHQpICovXG4gICAgdyA9IDEuMCkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB0aGlzLncgPSB3O1xuICAgIH1cbiAgICAvLyBTdGF0aWNzXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0ZXJuaW9uIGZyb20gYSByb3RhdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgc291cmNlIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gY3JlYXRlZCBmcm9tIHRoZSBnaXZlbiByb3RhdGlvbiBtYXRyaXggdmFsdWVzXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICAgICAgUXVhdGVybmlvbi5Gcm9tUm90YXRpb25NYXRyaXhUb1JlZihtYXRyaXgsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGdpdmVuIHF1YXRlcm5pb24gd2l0aCB0aGUgZ2l2ZW4gcm90YXRpb24gbWF0cml4IHZhbHVlc1xuICAgICAqIEBwYXJhbSBtYXRyaXggLSBkZWZpbmVzIHRoZSBzb3VyY2UgbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtYXRyaXgubTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b25lLXZhcmlhYmxlLXBlci1kZWNsYXJhdGlvblxuICAgICAgICBjb25zdCBtMTEgPSBkYXRhWzBdLCBtMTIgPSBkYXRhWzRdLCBtMTMgPSBkYXRhWzhdO1xuICAgICAgICBjb25zdCBtMjEgPSBkYXRhWzFdLCBtMjIgPSBkYXRhWzVdLCBtMjMgPSBkYXRhWzldO1xuICAgICAgICBjb25zdCBtMzEgPSBkYXRhWzJdLCBtMzIgPSBkYXRhWzZdLCBtMzMgPSBkYXRhWzEwXTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvbmUtdmFyaWFibGUtcGVyLWRlY2xhcmF0aW9uXG4gICAgICAgIGNvbnN0IHRyYWNlID0gbTExICsgbTIyICsgbTMzO1xuICAgICAgICBsZXQgcztcbiAgICAgICAgaWYgKHRyYWNlID4gMCkge1xuICAgICAgICAgICAgcyA9IDAuNSAvIE1hdGguc3FydCh0cmFjZSArIDEuMCk7XG4gICAgICAgICAgICByZXN1bHQudyA9IDAuMjUgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAobTMyIC0gbTIzKSAqIHM7XG4gICAgICAgICAgICByZXN1bHQueSA9IChtMTMgLSBtMzEpICogcztcbiAgICAgICAgICAgIHJlc3VsdC56ID0gKG0yMSAtIG0xMikgKiBzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMpIHtcbiAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTExIC0gbTIyIC0gbTMzKTtcbiAgICAgICAgICAgIHJlc3VsdC53ID0gKG0zMiAtIG0yMykgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnggPSAwLjI1ICogcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAobTEzICsgbTMxKSAvIHM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobTIyID4gbTMzKSB7XG4gICAgICAgICAgICBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0yMiAtIG0xMSAtIG0zMyk7XG4gICAgICAgICAgICByZXN1bHQudyA9IChtMTMgLSBtMzEpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC54ID0gKG0xMiArIG0yMSkgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnkgPSAwLjI1ICogcztcbiAgICAgICAgICAgIHJlc3VsdC56ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMzMgLSBtMTEgLSBtMjIpO1xuICAgICAgICAgICAgcmVzdWx0LncgPSAobTIxIC0gbTEyKSAvIHM7XG4gICAgICAgICAgICByZXN1bHQueCA9IChtMTMgKyBtMzEpIC8gcztcbiAgICAgICAgICAgIHJlc3VsdC55ID0gKG0yMyArIG0zMikgLyBzO1xuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjI1ICogcztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCAoZmxvYXQpIGJldHdlZW4gdGhlIHF1YXRlcm5pb25zIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZG90IHByb2R1Y3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiAobGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgdHdvIHF1YXRlcm5pb25zIGFyZSBjbG9zZSB0byBlYWNoIG90aGVyXG4gICAgICogQHBhcmFtIHF1YXQwIC0gZGVmaW5lcyB0aGUgZmlyc3QgcXVhdGVybmlvbiB0byBjaGVja1xuICAgICAqIEBwYXJhbSBxdWF0MSAtIGRlZmluZXMgdGhlIHNlY29uZCBxdWF0ZXJuaW9uIHRvIGNoZWNrXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgdHdvIHF1YXRlcm5pb25zIGFyZSBjbG9zZSB0byBlYWNoIG90aGVyXG4gICAgICovXG4gICAgc3RhdGljIEFyZUNsb3NlKHF1YXQwLCBxdWF0MSkge1xuICAgICAgICBjb25zdCBkb3QgPSBRdWF0ZXJuaW9uLkRvdChxdWF0MCwgcXVhdDEpO1xuICAgICAgICByZXR1cm4gZG90ID49IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW1wdHkgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gc2V0IHRvICgwLjAsIDAuMCwgMC4wKVxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52ZXJzZSBhIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcSAtIGRlZmluZXMgdGhlIHNvdXJjZSBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBhcyB0aGUgaW52ZXJ0ZWQgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEludmVyc2UocSkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oLXEueCwgLXEueSwgLXEueiwgcS53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgZ2l2ZW4gcXVhdGVybmlvbiBpcyBpZGVudGl0eVxuICAgICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHF1YXRlcm5pb24gaXMgaWRlbnRpdHlcbiAgICAgKi9cbiAgICBzdGF0aWMgSXNJZGVudGl0eShxdWF0ZXJuaW9uKSB7XG4gICAgICAgIHJldHVybiAocXVhdGVybmlvbiAmJlxuICAgICAgICAgICAgcXVhdGVybmlvbi54ID09PSAwICYmXG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnkgPT09IDAgJiZcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9PT0gMCAmJlxuICAgICAgICAgICAgcXVhdGVybmlvbi53ID09PSAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSBhIHJvdGF0aW9uIGFyb3VuZCBhbiBheGlzXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIHRvIHVzZSAoaW4gRXVsZXIgZGVncmVlcylcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIGNyZWF0ZWQgZnJvbSB0aGUgZ2l2ZW4gYXhpcyAoVmVjdG9yMykgYW5kIGFuZ2xlIGluIHJhZGlhbnMgKGZsb2F0KVxuICAgICAqL1xuICAgIHN0YXRpYyBSb3RhdGlvbkF4aXMoYXhpcywgYW5nbGUpIHtcbiAgICAgICAgY29uc3QgYW5nbGVSYWQgPSBhbmdsZSAqIHR5cGVzXzEuREVHMlJBRDtcbiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGVSYWQsIG5ldyBRdWF0ZXJuaW9uKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcm90YXRpb24gYXJvdW5kIGFuIGF4aXMgYW5kIHN0b3JlcyBpdCBpbnRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBhbmdsZSAtIGRlZmluZXMgdGhlIGFuZ2xlIHRvIHVzZSAoaW4gRXVsZXIgZGVncmVlcylcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25BeGlzVG9SZWYoYXhpcywgYW5nbGUsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBhbmdsZVJhZCA9IGFuZ2xlICogdHlwZXNfMS5ERUcyUkFEO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZCAvIDIpO1xuICAgICAgICBheGlzLm5vcm1hbGl6ZSgpO1xuICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKGFuZ2xlUmFkIC8gMik7XG4gICAgICAgIHJlc3VsdC54ID0gYXhpcy54ICogc2luO1xuICAgICAgICByZXN1bHQueSA9IGF4aXMueSAqIHNpbjtcbiAgICAgICAgcmVzdWx0LnogPSBheGlzLnogKiBzaW47XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBmcm9tIGRhdGEgc3RvcmVkIGludG8gYW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBkYXRhIHNvdXJjZVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheSB3aGVyZSB0aGUgZGF0YSBzdGFydHNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24oYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0sIGFycmF5W29mZnNldCArIDJdLCBhcnJheVtvZmZzZXQgKyAzXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBmcm9tIGEgc2V0IG9mIGV1bGVyIGFuZ2xlcyBhbmQgc3RvcmVzIGl0IGluIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRXVsZXJBbmdsZXNSZWYoeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLlJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeSAqIHR5cGVzXzEuREVHMlJBRCwgeCAqIHR5cGVzXzEuREVHMlJBRCwgeiAqIHR5cGVzXzEuREVHMlJBRCwgcmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIEV1bGVyIGZsb2F0IGFuZ2xlcyAoeSwgeCwgeilcbiAgICAgKiBAcGFyYW0geWF3IC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIFkgYXhpc1xuICAgICAqIEBwYXJhbSBwaXRjaCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBYIGF4aXNcbiAgICAgKiBAcGFyYW0gcm9sbCAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBaIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25ZYXdQaXRjaFJvbGwoeWF3LCBwaXRjaCwgcm9sbCkge1xuICAgICAgICBjb25zdCBxID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICAgICAgUXVhdGVybmlvbi5Sb3RhdGlvbllhd1BpdGNoUm9sbFRvUmVmKHlhdywgcGl0Y2gsIHJvbGwsIHEpO1xuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3RhdGlvbiBmcm9tIHRoZSBnaXZlbiBFdWxlciBmbG9hdCBhbmdsZXMgKHksIHgsIHopIGFuZCBzdG9yZXMgaXQgaW4gdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHlhdyAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBZIGF4aXNcbiAgICAgKiBAcGFyYW0gcGl0Y2ggLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgWCBheGlzXG4gICAgICogQHBhcmFtIHJvbGwgLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgWiBheGlzXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uWWF3UGl0Y2hSb2xsVG9SZWYoeWF3LCBwaXRjaCwgcm9sbCwgcmVzdWx0KSB7XG4gICAgICAgIC8vIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgICAgY29uc3QgaGFsZlBpdGNoID0gcGl0Y2ggKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZZYXcgPSB5YXcgKiAwLjU7XG4gICAgICAgIGNvbnN0IGhhbGZSb2xsID0gcm9sbCAqIDAuNTtcbiAgICAgICAgY29uc3QgYzEgPSBNYXRoLmNvcyhoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBjMiA9IE1hdGguY29zKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBjMyA9IE1hdGguY29zKGhhbGZSb2xsKTtcbiAgICAgICAgY29uc3QgczEgPSBNYXRoLnNpbihoYWxmUGl0Y2gpO1xuICAgICAgICBjb25zdCBzMiA9IE1hdGguc2luKGhhbGZZYXcpO1xuICAgICAgICBjb25zdCBzMyA9IE1hdGguc2luKGhhbGZSb2xsKTtcbiAgICAgICAgcmVzdWx0LnggPSBjMiAqIHMxICogYzMgKyBzMiAqIGMxICogczM7XG4gICAgICAgIHJlc3VsdC55ID0gczIgKiBjMSAqIGMzIC0gYzIgKiBzMSAqIHMzO1xuICAgICAgICByZXN1bHQueiA9IGMyICogYzEgKiBzMyAtIHMyICogczEgKiBjMztcbiAgICAgICAgcmVzdWx0LncgPSBjMiAqIGMxICogYzMgKyBzMiAqIHMxICogczM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBFdWxlciBmbG9hdCBhbmdsZXMgZXhwcmVzc2VkIGluIHoteC16IG9yaWVudGF0aW9uXG4gICAgICogQHBhcmFtIGFscGhhIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYmV0YSAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBnYW1tYSAtIGRlZmluZXMgdGhlIHJvdGF0aW9uIGFyb3VuZCB0aGlyZCBheGlzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uQWxwaGFCZXRhR2FtbWEoYWxwaGEsIGJldGEsIGdhbW1hKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG4gICAgICAgIFF1YXRlcm5pb24uUm90YXRpb25BbHBoYUJldGFHYW1tYVRvUmVmKGFscGhhLCBiZXRhLCBnYW1tYSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIEV1bGVyIGZsb2F0IGFuZ2xlcyBleHByZXNzZWQgaW4gei14LXogb3JpZW50YXRpb24gYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gYWxwaGEgLSBkZWZpbmVzIHRoZSByb3RhdGlvbiBhcm91bmQgZmlyc3QgYXhpc1xuICAgICAqIEBwYXJhbSBiZXRhIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIHNlY29uZCBheGlzXG4gICAgICogQHBhcmFtIGdhbW1hIC0gZGVmaW5lcyB0aGUgcm90YXRpb24gYXJvdW5kIHRoaXJkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25BbHBoYUJldGFHYW1tYVRvUmVmKGFscGhhLCBiZXRhLCBnYW1tYSwgcmVzdWx0KSB7XG4gICAgICAgIC8vIFByb2R1Y2VzIGEgcXVhdGVybmlvbiBmcm9tIEV1bGVyIGFuZ2xlcyBpbiB0aGUgei14LXogb3JpZW50YXRpb25cbiAgICAgICAgY29uc3QgaGFsZkdhbW1hUGx1c0FscGhhID0gKGdhbW1hICsgYWxwaGEpICogMC41O1xuICAgICAgICBjb25zdCBoYWxmR2FtbWFNaW51c0FscGhhID0gKGdhbW1hIC0gYWxwaGEpICogMC41O1xuICAgICAgICBjb25zdCBoYWxmQmV0YSA9IGJldGEgKiAwLjU7XG4gICAgICAgIHJlc3VsdC54ID0gTWF0aC5jb3MoaGFsZkdhbW1hTWludXNBbHBoYSkgKiBNYXRoLnNpbihoYWxmQmV0YSk7XG4gICAgICAgIHJlc3VsdC55ID0gTWF0aC5zaW4oaGFsZkdhbW1hTWludXNBbHBoYSkgKiBNYXRoLnNpbihoYWxmQmV0YSk7XG4gICAgICAgIHJlc3VsdC56ID0gTWF0aC5zaW4oaGFsZkdhbW1hUGx1c0FscGhhKSAqIE1hdGguY29zKGhhbGZCZXRhKTtcbiAgICAgICAgcmVzdWx0LncgPSBNYXRoLmNvcyhoYWxmR2FtbWFQbHVzQWxwaGEpICogTWF0aC5jb3MoaGFsZkJldGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHF1YXRlcm5pb24gY29udGFpbmluZyB0aGUgcm90YXRpb24gdmFsdWUgdG8gcmVhY2ggdGhlIHRhcmdldCAoYXhpczEsIGF4aXMyLCBheGlzMykgb3JpZW50YXRpb24gYXMgYSByb3RhdGVkIFhZWiBzeXN0ZW0gKGF4aXMxLCBheGlzMiBhbmQgYXhpczMgYXJlIG5vcm1hbGl6ZWQgZHVyaW5nIHRoaXMgb3BlcmF0aW9uKVxuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRpb25RdWF0ZXJuaW9uRnJvbUF4aXMoYXhpczEsIGF4aXMyLCBheGlzMykge1xuICAgICAgICBjb25zdCBxdWF0ID0gbmV3IFF1YXRlcm5pb24oMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgUXVhdGVybmlvbi5Sb3RhdGlvblF1YXRlcm5pb25Gcm9tQXhpc1RvUmVmKGF4aXMxLCBheGlzMiwgYXhpczMsIHF1YXQpO1xuICAgICAgICByZXR1cm4gcXVhdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHZhbHVlIHRvIHJlYWNoIHRoZSB0YXJnZXQgKGF4aXMxLCBheGlzMiwgYXhpczMpIG9yaWVudGF0aW9uIGFzIGEgcm90YXRlZCBYWVogc3lzdGVtIChheGlzMSwgYXhpczIgYW5kIGF4aXMzIGFyZSBub3JtYWxpemVkIGR1cmluZyB0aGlzIG9wZXJhdGlvbikgYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGFyZ2V0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gYXhpczEgLSBkZWZpbmVzIHRoZSBmaXJzdCBheGlzXG4gICAgICogQHBhcmFtIGF4aXMyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczMgLSBkZWZpbmVzIHRoZSB0aGlyZCBheGlzXG4gICAgICogQHBhcmFtIHJlZiAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uUXVhdGVybmlvbkZyb21BeGlzVG9SZWYoYXhpczEsIGF4aXMyLCBheGlzMywgcmVmKSB7XG4gICAgICAgIGNvbnN0IHJvdE1hdCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuTWF0cml4WzBdO1xuICAgICAgICBNYXRyaXhfMS5NYXRyaXguRnJvbVhZWkF4ZXNUb1JlZihheGlzMS5ub3JtYWxpemUoKSwgYXhpczIubm9ybWFsaXplKCksIGF4aXMzLm5vcm1hbGl6ZSgpLCByb3RNYXQpO1xuICAgICAgICBRdWF0ZXJuaW9uLkZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHJvdE1hdCwgcmVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJwb2xhdGVzIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IHRvIHVzZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgaW50ZXJwb2xhdGVkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgU2xlcnAobGVmdCwgcmlnaHQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBRdWF0ZXJuaW9uLklkZW50aXR5O1xuICAgICAgICBRdWF0ZXJuaW9uLlNsZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJwb2xhdGVzIGJldHdlZW4gdHdvIHF1YXRlcm5pb25zIGFuZCBzdG9yZXMgaXQgaW50byBhIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGdyYWRpZW50IHRvIHVzZVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHN0YXRpYyBTbGVycFRvUmVmKGxlZnQsIHJpZ2h0LCBhbW91bnQsIHJlc3VsdCkge1xuICAgICAgICBsZXQgbnVtMjtcbiAgICAgICAgbGV0IG51bTM7XG4gICAgICAgIGxldCBudW00ID0gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0LnkgKyBsZWZ0LnogKiByaWdodC56ICsgbGVmdC53ICogcmlnaHQudztcbiAgICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgICAgICAgaWYgKG51bTQgPCAwKSB7XG4gICAgICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIG51bTQgPSAtbnVtNDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtNCA+IDAuOTk5OTk5KSB7XG4gICAgICAgICAgICBudW0zID0gMSAtIGFtb3VudDtcbiAgICAgICAgICAgIG51bTIgPSBmbGFnID8gLWFtb3VudCA6IGFtb3VudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTUgPSBNYXRoLmFjb3MobnVtNCk7XG4gICAgICAgICAgICBjb25zdCBudW02ID0gMS4wIC8gTWF0aC5zaW4obnVtNSk7XG4gICAgICAgICAgICBudW0zID0gTWF0aC5zaW4oKDEuMCAtIGFtb3VudCkgKiBudW01KSAqIG51bTY7XG4gICAgICAgICAgICBudW0yID0gZmxhZ1xuICAgICAgICAgICAgICAgID8gLU1hdGguc2luKGFtb3VudCAqIG51bTUpICogbnVtNlxuICAgICAgICAgICAgICAgIDogTWF0aC5zaW4oYW1vdW50ICogbnVtNSkgKiBudW02O1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC54ID0gbnVtMyAqIGxlZnQueCArIG51bTIgKiByaWdodC54O1xuICAgICAgICByZXN1bHQueSA9IG51bTMgKiBsZWZ0LnkgKyBudW0yICogcmlnaHQueTtcbiAgICAgICAgcmVzdWx0LnogPSBudW0zICogbGVmdC56ICsgbnVtMiAqIHJpZ2h0Lno7XG4gICAgICAgIHJlc3VsdC53ID0gbnVtMyAqIGxlZnQudyArIG51bTIgKiByaWdodC53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnRlcnBvbGF0ZSBiZXR3ZWVuIHR3byBxdWF0ZXJuaW9ucyB1c2luZyBIZXJtaXRlIGludGVycG9sYXRpb25cbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRhbmdlbnQxIC0gZGVmaW5lcyB0aGUgaW5jb21pbmcgdGFuZ2VudFxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRhbmdlbnQyIC0gZGVmaW5lcyB0aGUgb3V0Z29pbmcgdGFuZ2VudFxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgaW50ZXJwb2xhdGVkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzdGF0aWMgSGVybWl0ZSh2YWx1ZTEsIHRhbmdlbnQxLCB2YWx1ZTIsIHRhbmdlbnQyLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MSA9IDIuMCAqIGN1YmVkIC0gMy4wICogc3F1YXJlZCArIDEuMDtcbiAgICAgICAgY29uc3QgcGFydDIgPSAtMi4wICogY3ViZWQgKyAzLjAgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCBwYXJ0MyA9IGN1YmVkIC0gMi4wICogc3F1YXJlZCArIGFtb3VudDtcbiAgICAgICAgY29uc3QgcGFydDQgPSBjdWJlZCAtIHNxdWFyZWQ7XG4gICAgICAgIGNvbnN0IHggPSB2YWx1ZTEueCAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi54ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEueCAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLnggKiBwYXJ0NDtcbiAgICAgICAgY29uc3QgeSA9IHZhbHVlMS55ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnkgKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS55ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueSAqIHBhcnQ0O1xuICAgICAgICBjb25zdCB6ID0gdmFsdWUxLnogKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueiAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnogKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi56ICogcGFydDQ7XG4gICAgICAgIGNvbnN0IHcgPSB2YWx1ZTEudyAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi53ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEudyAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLncgKiBwYXJ0NDtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKHgsIHksIHosIHcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGlkZW50aXR5IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyAtIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIGdldCBJZGVudGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKDAuMCwgMC4wLCAwLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFuZ2xlIGluIGRlZ3JlZXMgYmV0d2VlbiB0d28gcm90YXRpb25zIGEgYW5kIGIuXG4gICAgICogQHBhcmFtIHF1YXQxIC0gZGVmaW5lcyB0aGUgZmlyc3QgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSBxdWF0MiAtIGRlZmluZXMgdGhlIHNlY29uZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc3RhdGljIEFuZ2xlKHF1YXQxLCBxdWF0Mikge1xuICAgICAgICBjb25zdCBkb3QgPSBRdWF0ZXJuaW9uLkRvdChxdWF0MSwgcXVhdDIpO1xuICAgICAgICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGguYWJzKGRvdCksIDEpKSAqIDIgKiB0eXBlc18xLlJBRDJERUc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByb3RhdGlvbiB0aGF0IHJvdGF0ZXMgeiBkZWdyZWVzIGFyb3VuZCB0aGUgeiBheGlzLCB4IGRlZ3JlZXMgYXJvdW5kIHRoZSB4IGF4aXMsIGFuZCB5IGRlZ3JlZXMgYXJvdW5kIHRoZSB5IGF4aXMuXG4gICAgICogQHBhcmFtIHggLSB0aGUgcm90YXRpb24gb24gdGhlIHggYXhpcyBpbiBldWxlciBkZWdyZWVzXG4gICAgICogQHBhcmFtIHkgLSB0aGUgcm90YXRpb24gb24gdGhlIHkgYXhpcyBpbiBldWxlciBkZWdyZWVzXG4gICAgICogQHBhcmFtIHogLSB0aGUgcm90YXRpb24gb24gdGhlIHogYXhpcyBpbiBldWxlciBkZWdyZWVzXG4gICAgICovXG4gICAgc3RhdGljIEV1bGVyKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb24uUm90YXRpb25ZYXdQaXRjaFJvbGwoeSAqIHR5cGVzXzEuREVHMlJBRCwgeCAqIHR5cGVzXzEuREVHMlJBRCwgeiAqIHR5cGVzXzEuREVHMlJBRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByb3RhdGlvbiB3aXRoIHRoZSBzcGVjaWZpZWQgZm9yd2FyZCBhbmQgdXB3YXJkcyBkaXJlY3Rpb25zLlxuICAgICAqIEBwYXJhbSBmb3J3YXJkIC0gdGhlIGRpcmVjdGlvbiB0byBsb29rIGluXG4gICAgICogQHBhcmFtIHVwIC0gdGhlIHZlY3RvciB0aGF0IGRlZmluZXMgaW4gd2hpY2ggZGlyZWN0aW9uIHVwIGlzXG4gICAgICovXG4gICAgc3RhdGljIExvb2tSb3RhdGlvbihmb3J3YXJkLCB1cCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuc3RhdGljVXApIHtcbiAgICAgICAgY29uc3QgZm9yd2FyZE5ldyA9IFZlY3RvcjNfMS5WZWN0b3IzLk5vcm1hbGl6ZShmb3J3YXJkKTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBWZWN0b3IzXzEuVmVjdG9yMy5Ob3JtYWxpemUoVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3ModXAsIGZvcndhcmROZXcpKTtcbiAgICAgICAgY29uc3QgdXBOZXcgPSBWZWN0b3IzXzEuVmVjdG9yMy5Dcm9zcyhmb3J3YXJkTmV3LCByaWdodCk7XG4gICAgICAgIGNvbnN0IG0wMCA9IHJpZ2h0Lng7XG4gICAgICAgIGNvbnN0IG0wMSA9IHJpZ2h0Lnk7XG4gICAgICAgIGNvbnN0IG0wMiA9IHJpZ2h0Lno7XG4gICAgICAgIGNvbnN0IG0xMCA9IHVwTmV3Lng7XG4gICAgICAgIGNvbnN0IG0xMSA9IHVwTmV3Lnk7XG4gICAgICAgIGNvbnN0IG0xMiA9IHVwTmV3Lno7XG4gICAgICAgIGNvbnN0IG0yMCA9IGZvcndhcmROZXcueDtcbiAgICAgICAgY29uc3QgbTIxID0gZm9yd2FyZE5ldy55O1xuICAgICAgICBjb25zdCBtMjIgPSBmb3J3YXJkTmV3Lno7XG4gICAgICAgIGNvbnN0IG51bTggPSBtMDAgKyBtMTEgKyBtMjI7XG4gICAgICAgIGNvbnN0IHF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuICAgICAgICBpZiAobnVtOCA+IDApIHtcbiAgICAgICAgICAgIGxldCBudW0gPSBNYXRoLnNxcnQobnVtOCArIDEpO1xuICAgICAgICAgICAgcXVhdGVybmlvbi53ID0gbnVtICogMC41O1xuICAgICAgICAgICAgbnVtID0gMC41IC8gbnVtO1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gKG0xMiAtIG0yMSkgKiBudW07XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIwIC0gbTAyKSAqIG51bTtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDEgLSBtMTApICogbnVtO1xuICAgICAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0wMCA+PSBtMTEgJiYgbTAwID49IG0yMikge1xuICAgICAgICAgICAgY29uc3QgbnVtNyA9IE1hdGguc3FydCgxICsgbTAwIC0gbTExIC0gbTIyKTtcbiAgICAgICAgICAgIGNvbnN0IG51bTQgPSAwLjUgLyBudW03O1xuICAgICAgICAgICAgcXVhdGVybmlvbi54ID0gMC41ICogbnVtNztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IChtMDEgKyBtMTApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueiA9IChtMDIgKyBtMjApICogbnVtNDtcbiAgICAgICAgICAgIHF1YXRlcm5pb24udyA9IChtMTIgLSBtMjEpICogbnVtNDtcbiAgICAgICAgICAgIHJldHVybiBxdWF0ZXJuaW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtMTEgPiBtMjIpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bTYgPSBNYXRoLnNxcnQoMSArIG0xMSAtIG0wMCAtIG0yMik7XG4gICAgICAgICAgICBjb25zdCBudW0zID0gMC41IC8gbnVtNjtcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueCA9IChtMTAgKyBtMDEpICogbnVtMztcbiAgICAgICAgICAgIHF1YXRlcm5pb24ueSA9IDAuNSAqIG51bTY7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLnogPSAobTIxICsgbTEyKSAqIG51bTM7XG4gICAgICAgICAgICBxdWF0ZXJuaW9uLncgPSAobTIwIC0gbTAyKSAqIG51bTM7XG4gICAgICAgICAgICByZXR1cm4gcXVhdGVybmlvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBudW01ID0gTWF0aC5zcXJ0KDEgKyBtMjIgLSBtMDAgLSBtMTEpO1xuICAgICAgICBjb25zdCBudW0yID0gMC41IC8gbnVtNTtcbiAgICAgICAgcXVhdGVybmlvbi54ID0gKG0yMCArIG0wMikgKiBudW0yO1xuICAgICAgICBxdWF0ZXJuaW9uLnkgPSAobTIxICsgbTEyKSAqIG51bTI7XG4gICAgICAgIHF1YXRlcm5pb24ueiA9IDAuNSAqIG51bTU7XG4gICAgICAgIHF1YXRlcm5pb24udyA9IChtMDEgLSBtMTApICogbnVtMjtcbiAgICAgICAgcmV0dXJuIHF1YXRlcm5pb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBmcm9tIHF1YXRlcm5pb24gaXMgcm90YXRlZCB0b3dhcmRzIHRvIGJ5IGFuIGFuZ3VsYXIgc3RlcCBvZiBtYXhEZWdyZWVzRGVsdGEuXG4gICAgICogQHBhcmFtIGZyb20gLSBkZWZpbmVzIHRoZSBmaXJzdCBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHRvIC0gZGVmaW5lcyB0aGUgc2Vjb25kIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gbWF4RGVncmVlc0RlbHRhIC0gdGhlIGludGVydmFsIHN0ZXBcbiAgICAgKi9cbiAgICBzdGF0aWMgUm90YXRlVG93YXJkcyhmcm9tLCB0bywgbWF4RGVncmVlc0RlbHRhKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IFF1YXRlcm5pb24uQW5nbGUoZnJvbSwgdG8pO1xuICAgICAgICBpZiAobnVtID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdCA9IE1hdGgubWluKDEsIG1heERlZ3JlZXNEZWx0YSAvIG51bSk7XG4gICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLlNsZXJwKGZyb20sIHRvLCB0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdoaWNoIHJvdGF0ZXMgZnJvbSBmcm9tRGlyZWN0aW9uIHRvIHRvRGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgZGlyZWN0aW9uIFZlY3RvclxuICAgICAqIEBwYXJhbSB0byAtIGRlZmluZXMgdGhlIHRhcmdldCBkaXJlY3Rpb24gVmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Ub1JvdGF0aW9uKGZyb20sIHRvLCB1cCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuc3RhdGljVXApIHtcbiAgICAgICAgLy8gVW5pdHktYmFzZWQgY2FsY3VsYXRpb25zIGltcGxlbWVudGVkIGZyb20gaHR0cHM6Ly9mb3J1bS51bml0eS5jb20vdGhyZWFkcy9xdWF0ZXJuaW9uLWxvb2tyb3RhdGlvbi1hcm91bmQtYW4tYXhpcy42MDg0NzAvI3Bvc3QtNDA2OTg4OFxuICAgICAgICBjb25zdCB2MCA9IGZyb20ubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IHYxID0gdG8ubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IGEgPSBWZWN0b3IzXzEuVmVjdG9yMy5Dcm9zcyh2MCwgdjEpO1xuICAgICAgICBjb25zdCB3ID0gTWF0aC5zcXJ0KHYwLmxlbmd0aFNxdWFyZWQoKSAqIHYxLmxlbmd0aFNxdWFyZWQoKSkgKyBWZWN0b3IzXzEuVmVjdG9yMy5Eb3QodjAsIHYxKTtcbiAgICAgICAgaWYgKGEubGVuZ3RoU3F1YXJlZCgpIDwgMC4wMDAxKSB7XG4gICAgICAgICAgICAvLyB0aGUgdmVjdG9ycyBhcmUgcGFyYWxsZWwsIGNoZWNrIHcgdG8gZmluZCBkaXJlY3Rpb25cbiAgICAgICAgICAgIC8vIGlmIHcgaXMgMCB0aGVuIHZhbHVlcyBhcmUgb3Bwb3NpdGUsIGFuZCB3ZSBzb3VsZCByb3RhdGUgMTgwIGRlZ3JlZXMgYXJvdW5kIHRoZSBzdXBwbGllZCBheGlzXG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgdGhlIHZlY3RvcnMgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFuZCBubyByb3RhdGlvbiBzaG91bGQgb2NjdXJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh3KSA8IDAuMDAwMVxuICAgICAgICAgICAgICAgID8gbmV3IFF1YXRlcm5pb24odXAueCwgdXAueSwgdXAueiwgMCkubm9ybWFsaXplZFxuICAgICAgICAgICAgICAgIDogUXVhdGVybmlvbi5JZGVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbihhLngsIGEueSwgYS56LCB3KS5ub3JtYWxpemVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgcXVhdGVybmlvbiB0byBvbmUgd2l0aCB0aGUgc2FtZSBvcmllbnRhdGlvbiBidXQgd2l0aCBhIG1hZ25pdHVkZSBvZiAxLlxuICAgICAqL1xuICAgIGdldCBub3JtYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJvdGF0aW9uIHdoaWNoIHJvdGF0ZXMgZnJvbSBmcm9tRGlyZWN0aW9uIHRvIHRvRGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBmcm9tIC0gZGVmaW5lcyB0aGUgZmlyc3QgVmVjdG9yXG4gICAgICogQHBhcmFtIHRvIC0gZGVmaW5lcyB0aGUgc2Vjb25kIFZlY3RvclxuICAgICAqIEBwYXJhbSB1cCAtIGRlZmluZXMgdGhlIGRpcmVjdGlvblxuICAgICAqL1xuICAgIHNldEZyb21Ub1JvdGF0aW9uKGZyb20sIHRvLCB1cCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuc3RhdGljVXApIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gUXVhdGVybmlvbi5Gcm9tVG9Sb3RhdGlvbihmcm9tLCB0bywgdXApO1xuICAgICAgICB0aGlzLnggPSByZXN1bHQueDtcbiAgICAgICAgdGhpcy55ID0gcmVzdWx0Lnk7XG4gICAgICAgIHRoaXMueiA9IHJlc3VsdC56O1xuICAgICAgICB0aGlzLncgPSByZXN1bHQudztcbiAgICB9XG4gICAgc2V0IGV1bGVyQW5nbGVzKGV1bGVyKSB7XG4gICAgICAgIHRoaXMuc2V0RXVsZXIoZXVsZXIueCwgZXVsZXIueSwgZXVsZXIueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgb3Igc2V0cyB0aGUgZXVsZXIgYW5nbGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJvdGF0aW9uLlxuICAgICAqIEltcGxlbWVudGVkIHVuaXR5LWJhc2VkIGNhbGN1bGF0aW9ucyBmcm9tOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTYwNTU4MTNcbiAgICAgKi9cbiAgICBnZXQgZXVsZXJBbmdsZXMoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygpO1xuICAgICAgICAvLyBpZiB0aGUgaW5wdXQgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGlzIGV4YWN0bHkgb25lLiBPdGhlcndpc2UsIHRoaXMgYWN0cyBhcyBhIGNvcnJlY3Rpb24gZmFjdG9yIGZvciB0aGUgcXVhdGVybmlvbidzIG5vdC1ub3JtYWxpemVkbmVzc1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuICAgICAgICAvLyB0aGlzIHdpbGwgaGF2ZSBhIG1hZ25pdHVkZSBvZiAwLjUgb3IgZ3JlYXRlciBpZiBhbmQgb25seSBpZiB0aGlzIGlzIGEgc2luZ3VsYXJpdHkgY2FzZVxuICAgICAgICBjb25zdCB0ZXN0ID0gdGhpcy54ICogdGhpcy53IC0gdGhpcy55ICogdGhpcy56O1xuICAgICAgICBpZiAodGVzdCA+IDAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IG5vcnRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICBvdXQueSA9IDIgKiBNYXRoLmF0YW4yKHRoaXMueSwgdGhpcy54KTtcbiAgICAgICAgICAgIG91dC56ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ZXN0IDwgLTAuNDk5NSAqIHVuaXQpIHtcbiAgICAgICAgICAgIC8vIHNpbmd1bGFyaXR5IGF0IHNvdXRoIHBvbGVcbiAgICAgICAgICAgIG91dC54ID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgICAgb3V0LnkgPSAtMiAqIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpO1xuICAgICAgICAgICAgb3V0LnogPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gc2luZ3VsYXJpdHkgLSB0aGlzIGlzIHRoZSBtYWpvcml0eSBvZiBjYXNlc1xuICAgICAgICAgICAgb3V0LnggPSBNYXRoLmFzaW4oMiAqICh0aGlzLncgKiB0aGlzLnggLSB0aGlzLnkgKiB0aGlzLnopKTtcbiAgICAgICAgICAgIG91dC55ID0gTWF0aC5hdGFuMigyICogdGhpcy53ICogdGhpcy55ICsgMiAqIHRoaXMueiAqIHRoaXMueCwgMSAtIDIgKiAodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KSk7XG4gICAgICAgICAgICBvdXQueiA9IE1hdGguYXRhbjIoMiAqIHRoaXMudyAqIHRoaXMueiArIDIgKiB0aGlzLnggKiB0aGlzLnksIDEgLSAyICogKHRoaXMueiAqIHRoaXMueiArIHRoaXMueCAqIHRoaXMueCkpO1xuICAgICAgICB9XG4gICAgICAgIG91dC54ICo9IHR5cGVzXzEuUkFEMkRFRztcbiAgICAgICAgb3V0LnkgKj0gdHlwZXNfMS5SQUQyREVHO1xuICAgICAgICBvdXQueiAqPSB0eXBlc18xLlJBRDJERUc7XG4gICAgICAgIC8vIGVuc3VyZSB0aGUgZGVncmVlIHZhbHVlcyBhcmUgYmV0d2VlbiAwIGFuZCAzNjBcbiAgICAgICAgb3V0LnggPSBTY2FsYXJfMS5TY2FsYXIuUmVwZWF0KG91dC54LCAzNjApO1xuICAgICAgICBvdXQueSA9IFNjYWxhcl8xLlNjYWxhci5SZXBlYXQob3V0LnksIDM2MCk7XG4gICAgICAgIG91dC56ID0gU2NhbGFyXzEuU2NhbGFyLlJlcGVhdChvdXQueiwgMzYwKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIFF1YXRlcm5pb24gY29vcmRpbmF0ZXNcbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSwgJHt0aGlzLnd9KWA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgbGVuZ3RoIG9mIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBxdWF0ZXJuaW9uIGxlbmd0aCAoZmxvYXQpXG4gICAgICovXG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbmd0aFNxdWFyZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGxlbmd0aCBvZiBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgcXVhdGVybmlvbiBsZW5ndGggKGZsb2F0KVxuICAgICAqL1xuICAgIGdldCBsZW5ndGhTcXVhcmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjbGFzcyBuYW1lIG9mIHRoZSBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyBcIlF1YXRlcm5pb25cIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdRdWF0ZXJuaW9uJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIGhhc2ggY29kZSBmb3IgdGhpcyBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIHF1YXRlcm5pb24gaGFzaCBjb2RlXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy54IHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy55IHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMueiB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLncgfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBxdWF0ZXJuaW9uIHRvIGFuIGFycmF5XG4gICAgICogQHJldHVybnMgYSBuZXcgYXJyYXkgcG9wdWxhdGVkIHdpdGggNCBlbGVtZW50cyBmcm9tIHRoZSBxdWF0ZXJuaW9uIGNvb3JkaW5hdGVzXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLnddO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0d28gcXVhdGVybmlvbnMgYXJlIGVxdWFsc1xuICAgICAqIEBwYXJhbSBvdGhlclF1YXRlcm5pb24gLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBhbmQgdGhlIGdpdmVuIG9uZSBjb29yZGluYXRlcyBhcmUgc3RyaWN0bHkgZXF1YWxzXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyUXVhdGVybmlvbikge1xuICAgICAgICByZXR1cm4gKG90aGVyUXVhdGVybmlvbiAmJlxuICAgICAgICAgICAgdGhpcy54ID09PSBvdGhlclF1YXRlcm5pb24ueCAmJlxuICAgICAgICAgICAgdGhpcy55ID09PSBvdGhlclF1YXRlcm5pb24ueSAmJlxuICAgICAgICAgICAgdGhpcy56ID09PSBvdGhlclF1YXRlcm5pb24ueiAmJlxuICAgICAgICAgICAgdGhpcy53ID09PSBvdGhlclF1YXRlcm5pb24udyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lIHRoZSBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IG9uZVxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29weSBhIHF1YXRlcm5pb24gdG8gdGhlIGN1cnJlbnQgb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgb3RoZXIgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvcHlGcm9tKG90aGVyKSB7XG4gICAgICAgIHRoaXMueCA9IG90aGVyLng7XG4gICAgICAgIHRoaXMueSA9IG90aGVyLnk7XG4gICAgICAgIHRoaXMueiA9IG90aGVyLno7XG4gICAgICAgIHRoaXMudyA9IG90aGVyLnc7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gd2l0aCB0aGUgZ2l2ZW4gZmxvYXQgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gdyAtIGRlZmluZXMgdGhlIHcgY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvcHlGcm9tRmxvYXRzKHgsIHksIHosIHcpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy56ID0gejtcbiAgICAgICAgdGhpcy53ID0gdztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBmbG9hdCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB3IC0gZGVmaW5lcyB0aGUgdyBjb29yZGluYXRlXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgc2V0KHgsIHksIHosIHcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weUZyb21GbG9hdHMoeCwgeSwgeiwgdyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBldWxlciBhbmdsZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzZXRFdWxlcih4LCB5LCB6KSB7XG4gICAgICAgIFF1YXRlcm5pb24uUm90YXRpb25ZYXdQaXRjaFJvbGxUb1JlZih5ICogdHlwZXNfMS5ERUcyUkFELCB4ICogdHlwZXNfMS5ERUcyUkFELCB6ICogdHlwZXNfMS5ERUcyUkFELCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEFkZHMgdHdvIHF1YXRlcm5pb25zXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uIGFzIHRoZSBhZGRpdGlvbiByZXN1bHQgb2YgdGhlIGdpdmVuIG9uZSBhbmQgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGFkZChvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54ICsgb3RoZXIueCwgdGhpcy55ICsgb3RoZXIueSwgdGhpcy56ICsgb3RoZXIueiwgdGhpcy53ICsgb3RoZXIudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEFkZCBhIHF1YXRlcm5pb24gdG8gdGhlIGN1cnJlbnQgb25lXG4gICAgICogQHBhcmFtIG90aGVyIC0gZGVmaW5lcyB0aGUgcXVhdGVybmlvbiB0byBhZGRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgYWRkSW5QbGFjZShvdGhlcikge1xuICAgICAgICB0aGlzLnggKz0gb3RoZXIueDtcbiAgICAgICAgdGhpcy55ICs9IG90aGVyLnk7XG4gICAgICAgIHRoaXMueiArPSBvdGhlci56O1xuICAgICAgICB0aGlzLncgKz0gb3RoZXIudztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBxdWF0ZXJuaW9uc1xuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBhcyB0aGUgc3VidHJhY3Rpb24gcmVzdWx0IG9mIHRoZSBnaXZlbiBvbmUgZnJvbSB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBzdWJ0cmFjdChvdGhlcikge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54IC0gb3RoZXIueCwgdGhpcy55IC0gb3RoZXIueSwgdGhpcy56IC0gb3RoZXIueiwgdGhpcy53IC0gb3RoZXIudyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgcXVhdGVybmlvbiBieSBhIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IHF1YXRlcm5pb24gc2V0IGJ5IG11bHRpcGx5aW5nIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gY29vcmRpbmF0ZXMgYnkgdGhlIGZsb2F0IFwic2NhbGVcIlxuICAgICAqL1xuICAgIHNjYWxlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbih0aGlzLnggKiB2YWx1ZSwgdGhpcy55ICogdmFsdWUsIHRoaXMueiAqIHZhbHVlLCB0aGlzLncgKiB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gdmFsdWVzIGJ5IGEgZmFjdG9yIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCB0byBhIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgUXVhdGVybmlvbiBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHNjYWxlVG9SZWYoc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiA9IHRoaXMueiAqIHNjYWxlO1xuICAgICAgICByZXN1bHQudyA9IHRoaXMudyAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBpbiBwbGFjZSB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIGJ5IGEgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHZhbHVlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgbW9kaWZpZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIHNjYWxlSW5QbGFjZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnggKj0gdmFsdWU7XG4gICAgICAgIHRoaXMueSAqPSB2YWx1ZTtcbiAgICAgICAgdGhpcy56ICo9IHZhbHVlO1xuICAgICAgICB0aGlzLncgKj0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIHZhbHVlcyBieSBhIGZhY3RvciBhbmQgYWRkIHRoZSByZXN1bHQgdG8gYSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFF1YXRlcm5pb24gb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggKz0gdGhpcy54ICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC55ICs9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueiArPSB0aGlzLnogKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LncgKz0gdGhpcy53ICogc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHR3byBxdWF0ZXJuaW9uc1xuICAgICAqIEBwYXJhbSBxMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgcXVhdGVybmlvbiBzZXQgYXMgdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBvbmUgd2l0aCB0aGUgZ2l2ZW4gb25lIFwicTFcIlxuICAgICAqL1xuICAgIG11bHRpcGx5KHExKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBRdWF0ZXJuaW9uKDAsIDAsIDAsIDEuMCk7XG4gICAgICAgIHRoaXMubXVsdGlwbHlUb1JlZihxMSwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gXCJyZXN1bHRcIiBhcyB0aGUgdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBvbmUgd2l0aCB0aGUgZ2l2ZW4gb25lIFwicTFcIlxuICAgICAqIEBwYXJhbSBxMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIG11bHRpcGx5VG9SZWYocTEsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4ID0gdGhpcy54ICogcTEudyArIHRoaXMueSAqIHExLnogLSB0aGlzLnogKiBxMS55ICsgdGhpcy53ICogcTEueDtcbiAgICAgICAgY29uc3QgeSA9IC10aGlzLnggKiBxMS56ICsgdGhpcy55ICogcTEudyArIHRoaXMueiAqIHExLnggKyB0aGlzLncgKiBxMS55O1xuICAgICAgICBjb25zdCB6ID0gdGhpcy54ICogcTEueSAtIHRoaXMueSAqIHExLnggKyB0aGlzLnogKiBxMS53ICsgdGhpcy53ICogcTEuejtcbiAgICAgICAgY29uc3QgdyA9IC10aGlzLnggKiBxMS54IC0gdGhpcy55ICogcTEueSAtIHRoaXMueiAqIHExLnogKyB0aGlzLncgKiBxMS53O1xuICAgICAgICByZXN1bHQuY29weUZyb21GbG9hdHMoeCwgeSwgeiwgdyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gb2YgaXRzZWxmIHdpdGggdGhlIGdpdmVuIG9uZSBcInExXCJcbiAgICAgKiBAcGFyYW0gcTEgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50dXBkYXRlZCBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgbXVsdGlwbHlJblBsYWNlKHExKSB7XG4gICAgICAgIHRoaXMubXVsdGlwbHlUb1JlZihxMSwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25qdWdhdGVzICgxLXEpIHRoZSBjdXJyZW50IHF1YXRlcm5pb24gYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJlZiAtIGRlZmluZXMgdGhlIHRhcmdldCBxdWF0ZXJuaW9uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvbmp1Z2F0ZVRvUmVmKHJlZikge1xuICAgICAgICByZWYuY29weUZyb21GbG9hdHMoLXRoaXMueCwgLXRoaXMueSwgLXRoaXMueiwgdGhpcy53KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmp1Z2F0ZXMgaW4gcGxhY2UgKDEtcSkgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGNvbmp1Z2F0ZUluUGxhY2UoKSB7XG4gICAgICAgIHRoaXMueCAqPSAtMTtcbiAgICAgICAgdGhpcy55ICo9IC0xO1xuICAgICAgICB0aGlzLnogKj0gLTE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25qdWdhdGVzIGluIHBsYWNlICgxLXEpIHRoZSBjdXJyZW50IHF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyBhIG5ldyBxdWF0ZXJuaW9uXG4gICAgICovXG4gICAgY29uanVnYXRlKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUXVhdGVybmlvbigtdGhpcy54LCAtdGhpcy55LCAtdGhpcy56LCB0aGlzLncpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgaW4gcGxhY2UgdGhlIGN1cnJlbnQgcXVhdGVybmlvblxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gMS4wIC8gdGhpcy5sZW5ndGg7XG4gICAgICAgIHRoaXMueCAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueSAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMueiAqPSBsZW5ndGg7XG4gICAgICAgIHRoaXMudyAqPSBsZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhbmdsZUF4aXMoZGVncmVzcywgYXhpcykge1xuICAgICAgICBpZiAoYXhpcy5sZW5ndGhTcXVhcmVkKCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBRdWF0ZXJuaW9uLklkZW50aXR5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFF1YXRlcm5pb24uSWRlbnRpdHk7XG4gICAgICAgIGxldCByYWRpYW5zID0gZGVncmVzcyAqIHR5cGVzXzEuREVHMlJBRDtcbiAgICAgICAgcmFkaWFucyAqPSAwLjU7XG4gICAgICAgIGxldCBhMiA9IGF4aXMubm9ybWFsaXplKCk7XG4gICAgICAgIGEyID0gYXhpcy5zY2FsZUluUGxhY2UoTWF0aC5zaW4ocmFkaWFucykpO1xuICAgICAgICByZXN1bHQueCA9IGEyLng7XG4gICAgICAgIHJlc3VsdC55ID0gYTIueTtcbiAgICAgICAgcmVzdWx0LnogPSBhMi56O1xuICAgICAgICByZXN1bHQudyA9IE1hdGguY29zKHJhZGlhbnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBnaXZlbiByb3RhdGlvbiBtYXRyaXggd2l0aCB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIHZhbHVlc1xuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdW5jaGFuZ2VkIHF1YXRlcm5pb25cbiAgICAgKi9cbiAgICB0b1JvdGF0aW9uTWF0cml4KHJlc3VsdCkge1xuICAgICAgICBNYXRyaXhfMS5NYXRyaXguRnJvbVF1YXRlcm5pb25Ub1JlZih0aGlzLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIHJvdGF0aW9uIG1hdHJpeCB2YWx1ZXNcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gZGVmaW5lcyB0aGUgc291cmNlIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgcXVhdGVybmlvblxuICAgICAqL1xuICAgIGZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXgpIHtcbiAgICAgICAgUXVhdGVybmlvbi5Gcm9tUm90YXRpb25NYXRyaXhUb1JlZihtYXRyaXgsIHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlF1YXRlcm5pb24gPSBRdWF0ZXJuaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UXVhdGVybmlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmVjdG9yMyA9IHZvaWQgMDtcbmNvbnN0IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xID0gcmVxdWlyZShcIi4vcHJlYWxsb2NhdGVkVmFyaWFibGVzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgUXVhdGVybmlvbl8xID0gcmVxdWlyZShcIi4vUXVhdGVybmlvblwiKTtcbmNvbnN0IFNjYWxhcl8xID0gcmVxdWlyZShcIi4vU2NhbGFyXCIpO1xuLyoqXG4gKiBDbGFzc2VkIHVzZWQgdG8gc3RvcmUgKHgseSx6KSB2ZWN0b3IgcmVwcmVzZW50YXRpb25cbiAqIEEgVmVjdG9yMyBpcyB0aGUgbWFpbiBvYmplY3QgdXNlZCBpbiAzRCBnZW9tZXRyeVxuICogSXQgY2FuIHJlcHJlc2VudCBldGloZXIgdGhlIGNvb3JkaW5hdGVzIG9mIGEgcG9pbnQgdGhlIHNwYWNlLCBlaXRoZXIgYSBkaXJlY3Rpb25cbiAqIFJlbWluZGVyOiBCYWJ5bG9uLmpzIHVzZXMgYSBsZWZ0IGhhbmRlZCBmb3J3YXJkIGZhY2luZyBzeXN0ZW1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVmVjdG9yMyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IzIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB4LCB5LCB6IChmbG9hdHMpIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgZmlyc3QgY29vcmRpbmF0ZXMgKG9uIFggYXhpcylcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlcyAob24gWSBheGlzKVxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgdGhpcmQgY29vcmRpbmF0ZXMgKG9uIFogYXhpcylcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBmaXJzdCBjb29yZGluYXRlcyAob24gWCBheGlzKVxuICAgICAqL1xuICAgIHggPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZXMgKG9uIFkgYXhpcylcbiAgICAgKi9cbiAgICB5ID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgdGhpcmQgY29vcmRpbmF0ZXMgKG9uIFogYXhpcylcbiAgICAgKi9cbiAgICB6ID0gMCkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHRoYXQgdGhlIHZlY3RvciBpcyBub24gdW5pZm9ybSBtZWFuaW5nIHgsIHkgb3IgeiBhcmUgbm90IGFsbCB0aGUgc2FtZVxuICAgICAqL1xuICAgIGdldCBpc05vblVuaWZvcm0oKSB7XG4gICAgICAgIGNvbnN0IGFic1ggPSBNYXRoLmFicyh0aGlzLngpO1xuICAgICAgICBjb25zdCBhYnNZID0gTWF0aC5hYnModGhpcy55KTtcbiAgICAgICAgaWYgKGFic1ggIT09IGFic1kpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFic1ogPSBNYXRoLmFicyh0aGlzLnopO1xuICAgICAgICBpZiAoYWJzWCAhPT0gYWJzWikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFic1kgIT09IGFic1opIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gU3RhdGljc1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSB0aGUgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvcjIgLSB0aGUgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEFkZCh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh2ZWN0b3IxLngsIHZlY3RvcjEueSwgdmVjdG9yMS56KS5hZGRJblBsYWNlKHZlY3RvcjIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNsaXAgZmFjdG9yIGJldHdlZW4gdHdvIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gdmVjdG9yMCAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmVjdG9yMSAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIGF4aXMgLSBkZWZpbmVzIHRoZSBheGlzIHRvIHVzZVxuICAgICAqIEBwYXJhbSBzaXplIC0gZGVmaW5lcyB0aGUgc2l6ZSBhbG9uZyB0aGUgYXhpc1xuICAgICAqIEByZXR1cm5zIHRoZSBjbGlwIGZhY3RvclxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRDbGlwRmFjdG9yKHZlY3RvcjAsIHZlY3RvcjEsIGF4aXMsIHNpemUpIHtcbiAgICAgICAgY29uc3QgZDAgPSBWZWN0b3IzLkRvdCh2ZWN0b3IwLCBheGlzKSAtIHNpemU7XG4gICAgICAgIGNvbnN0IGQxID0gVmVjdG9yMy5Eb3QodmVjdG9yMSwgYXhpcykgLSBzaXplO1xuICAgICAgICBjb25zdCBzID0gZDAgLyAoZDAgLSBkMSk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW5nbGUgYmV0d2VlbiB0d28gdmVjdG9yc1xuICAgICAqIEBwYXJhbSB2ZWN0b3IwIC0gYW5nbGUgYmV0d2VlbiB2ZWN0b3IwIGFuZCB2ZWN0b3IxXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSBhbmdsZSBiZXR3ZWVuIHZlY3RvcjAgYW5kIHZlY3RvcjFcbiAgICAgKiBAcGFyYW0gbm9ybWFsIC0gZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcbiAgICAgKiBAcmV0dXJucyB0aGUgYW5nbGUgYmV0d2VlbiB2ZWN0b3IwIGFuZCB2ZWN0b3IxXG4gICAgICovXG4gICAgc3RhdGljIEdldEFuZ2xlQmV0d2VlblZlY3RvcnModmVjdG9yMCwgdmVjdG9yMSwgbm9ybWFsKSB7XG4gICAgICAgIGNvbnN0IHYwID0gdmVjdG9yMC5ub3JtYWxpemVUb1JlZihwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMS5NYXRoVG1wLlZlY3RvcjNbMV0pO1xuICAgICAgICBjb25zdCB2MSA9IHZlY3RvcjEubm9ybWFsaXplVG9SZWYocHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5WZWN0b3IzWzJdKTtcbiAgICAgICAgY29uc3QgZG90ID0gVmVjdG9yMy5Eb3QodjAsIHYxKTtcbiAgICAgICAgY29uc3QgbiA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuVmVjdG9yM1szXTtcbiAgICAgICAgVmVjdG9yMy5Dcm9zc1RvUmVmKHYwLCB2MSwgbik7XG4gICAgICAgIGlmIChWZWN0b3IzLkRvdChuLCBub3JtYWwpID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhkb3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtTWF0aC5hY29zKGRvdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgZnJvbSB0aGUgaW5kZXggXCJvZmZzZXRcIiBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhhcnJheVtvZmZzZXRdLCBhcnJheVtvZmZzZXQgKyAxXSwgYXJyYXlbb2Zmc2V0ICsgMl0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIEZsb2F0QXJyYXlcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQuICBVc2UgRnJvbUFycmF5IGluc3RlYWRcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUZsb2F0QXJyYXkoYXJyYXksIG9mZnNldCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yMy5Gcm9tQXJyYXkoYXJyYXksIG9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGVsZW1lbnQgdmFsdWVzIGZyb20gdGhlIGluZGV4IFwib2Zmc2V0XCIgb2YgdGhlIGdpdmVuIGFycmF5XG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBhcnJheVtvZmZzZXRdO1xuICAgICAgICByZXN1bHQueSA9IGFycmF5W29mZnNldCArIDFdO1xuICAgICAgICByZXN1bHQueiA9IGFycmF5W29mZnNldCArIDJdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBlbGVtZW50IHZhbHVlcyBmcm9tIHRoZSBpbmRleCBcIm9mZnNldFwiIG9mIHRoZSBnaXZlbiBGbG9hdEFycmF5XG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLiAgVXNlIEZyb21BcnJheVRvUmVmIGluc3RlYWQuXG4gICAgICogQHBhcmFtIGFycmF5IC0gZGVmaW5lcyB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgc291cmNlIGFycmF5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRBcnJheVRvUmVmKGFycmF5LCBvZmZzZXQsIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gVmVjdG9yMy5Gcm9tQXJyYXlUb1JlZihhcnJheSwgb2Zmc2V0LCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBnaXZlbiBmbG9hdHMuXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZVxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2VcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh4LCB5LCB6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBlbXB0eSBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIFplcm8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygwLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMS4wLCAxLjAsIDEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyB1bml0IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgT25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoMS4wLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDAuMCwgMS4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgdXAgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBVcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgMS4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgwLjAsIC0xLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBkb3duIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRG93bigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgLTEuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB0byAoMC4wLCAwLjAsIDEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgRm9yd2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAuMCwgMC4wLCAxLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgwLjAsIDAuMCwgLTEuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBmb3J3YXJkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgQmFja3dhcmQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygwLjAsIDAuMCwgLTEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgdG8gKDEuMCwgMC4wLCAwLjApXG4gICAgICogQHJldHVybnMgYSBuZXcgcmlnaHQgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBSaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDEuMCwgMC4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHRvICgtMS4wLCAwLjAsIDAuMClcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBsZWZ0IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVmdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKC0xLjAsIDAuMCwgMC4wKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIHZlY3Rvci5cbiAgICAgKiBUaGlzIG1ldGhvZCBjb21wdXRlcyB0cmFuZm9ybWVkIGNvb3JkaW5hdGVzIG9ubHksIG5vdCB0cmFuc2Zvcm1lZCBkaXJlY3Rpb24gdmVjdG9ycyAoaWUuIGl0IHRha2VzIHRyYW5zbGF0aW9uIGluIGFjY291bnQpXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHJldHVybnMgdGhlIHRyYW5zZm9ybWVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgVHJhbnNmb3JtQ29vcmRpbmF0ZXModmVjdG9yLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3IzLlplcm8oKTtcbiAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Db29yZGluYXRlc1RvUmVmKHZlY3RvciwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogVGhpcyBtZXRob2QgY29tcHV0ZXMgdHJhbmZvcm1lZCBjb29yZGluYXRlcyBvbmx5LCBub3QgdHJhbnNmb3JtZWQgZGlyZWN0aW9uIHZlY3RvcnMgKGllLiBpdCB0YWtlcyB0cmFuc2xhdGlvbiBpbiBhY2NvdW50KVxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKi9cbiAgICBzdGF0aWMgVHJhbnNmb3JtQ29vcmRpbmF0ZXNUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjMuVHJhbnNmb3JtQ29vcmRpbmF0ZXNGcm9tRmxvYXRzVG9SZWYodmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gZmxvYXRzICh4LCB5LCB6KVxuICAgICAqIFRoaXMgbWV0aG9kIGNvbXB1dGVzIHRyYW5mb3JtZWQgY29vcmRpbmF0ZXMgb25seSwgbm90IHRyYW5zZm9ybWVkIGRpcmVjdGlvbiB2ZWN0b3JzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmUgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZSB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Db29yZGluYXRlc0Zyb21GbG9hdHNUb1JlZih4LCB5LCB6LCB0cmFuc2Zvcm1hdGlvbiwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm1hdGlvbi5tO1xuICAgICAgICBjb25zdCByeCA9IHggKiBtWzBdICsgeSAqIG1bNF0gKyB6ICogbVs4XSArIG1bMTJdO1xuICAgICAgICBjb25zdCByeSA9IHggKiBtWzFdICsgeSAqIG1bNV0gKyB6ICogbVs5XSArIG1bMTNdO1xuICAgICAgICBjb25zdCByeiA9IHggKiBtWzJdICsgeSAqIG1bNl0gKyB6ICogbVsxMF0gKyBtWzE0XTtcbiAgICAgICAgY29uc3QgcncgPSAxIC8gKHggKiBtWzNdICsgeSAqIG1bN10gKyB6ICogbVsxMV0gKyBtWzE1XSk7XG4gICAgICAgIHJlc3VsdC54ID0gcnggKiBydztcbiAgICAgICAgcmVzdWx0LnkgPSByeSAqIHJ3O1xuICAgICAgICByZXN1bHQueiA9IHJ6ICogcnc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBub3JtYWwgdHJhbnNmb3JtYXRpb24gYnkgdGhlIGdpdmVuIG1hdHJpeCBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogVGhpcyBtZXRob2RzIGNvbXB1dGVzIHRyYW5zZm9ybWVkIG5vcm1hbGl6ZWQgZGlyZWN0aW9uIHZlY3RvcnMgb25seSAoaWUuIGl0IGRvZXMgbm90IGFwcGx5IHRyYW5zbGF0aW9uKVxuICAgICAqIEBwYXJhbSB2ZWN0b3IgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWwodmVjdG9yLCB0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBWZWN0b3IzLlplcm8oKTtcbiAgICAgICAgVmVjdG9yMy5UcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG5vcm1hbCB0cmFuc2Zvcm1hdGlvbiBieSB0aGUgZ2l2ZW4gbWF0cml4IG9mIHRoZSBnaXZlbiB2ZWN0b3JcbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxUb1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByZXN1bHQpIHtcbiAgICAgICAgdGhpcy5UcmFuc2Zvcm1Ob3JtYWxGcm9tRmxvYXRzVG9SZWYodmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbm9ybWFsIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBnaXZlbiBtYXRyaXggb2YgdGhlIGdpdmVuIGZsb2F0cyAoeCwgeSwgeilcbiAgICAgKiBUaGlzIG1ldGhvZHMgY29tcHV0ZXMgdHJhbnNmb3JtZWQgbm9ybWFsaXplZCBkaXJlY3Rpb24gdmVjdG9ycyBvbmx5IChpZS4gaXQgZG9lcyBub3QgYXBwbHkgdHJhbnNsYXRpb24pXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmUgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgc291cmNlIHZlY3RvclxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHNvdXJjZSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZSB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybWF0aW9uIC0gZGVmaW5lcyB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBUcmFuc2Zvcm1Ob3JtYWxGcm9tRmxvYXRzVG9SZWYoeCwgeSwgeiwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtYXRpb24ubTtcbiAgICAgICAgcmVzdWx0LnggPSB4ICogbVswXSArIHkgKiBtWzRdICsgeiAqIG1bOF07XG4gICAgICAgIHJlc3VsdC55ID0geCAqIG1bMV0gKyB5ICogbVs1XSArIHogKiBtWzldO1xuICAgICAgICByZXN1bHQueiA9IHggKiBtWzJdICsgeSAqIG1bNl0gKyB6ICogbVsxMF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIG9uIHRoZSBDYXRtdWxsUm9tIGludGVycG9sYXRpb24gc3BsaW5lIGRlZmluZWQgYnkgdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiwgXCJ2YWx1ZTJcIiwgXCJ2YWx1ZTNcIiwgXCJ2YWx1ZTRcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIHZhbHVlMiAtIGRlZmluZXMgdGhlIHNlY29uZCBjb250cm9sIHBvaW50XG4gICAgICogQHBhcmFtIHZhbHVlMyAtIGRlZmluZXMgdGhlIHRoaXJkIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdmFsdWU0IC0gZGVmaW5lcyB0aGUgZm91cnRoIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgYW1vdW50IG9uIHRoZSBzcGxpbmUgdG8gdXNlXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIENhdG11bGxSb20odmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgdmFsdWU0LCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueCArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueCArIHZhbHVlMy54KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS54IC0gNS4wICogdmFsdWUyLnggKyA0LjAgKiB2YWx1ZTMueCAtIHZhbHVlNC54KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnggKyAzLjAgKiB2YWx1ZTIueCAtIDMuMCAqIHZhbHVlMy54ICsgdmFsdWU0LngpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB5ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueSArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueSArIHZhbHVlMy55KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS55IC0gNS4wICogdmFsdWUyLnkgKyA0LjAgKiB2YWx1ZTMueSAtIHZhbHVlNC55KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnkgKyAzLjAgKiB2YWx1ZTIueSAtIDMuMCAqIHZhbHVlMy55ICsgdmFsdWU0LnkpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB6ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueiArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueiArIHZhbHVlMy56KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS56IC0gNS4wICogdmFsdWUyLnogKyA0LjAgKiB2YWx1ZTMueiAtIHZhbHVlNC56KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnogKyAzLjAgKiB2YWx1ZTIueiAtIDMuMCAqIHZhbHVlMy56ICsgdmFsdWU0LnopICogY3ViZWQpO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCwgeSwgeik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgY29vcmRpbmF0ZXMgb2YgXCJ2YWx1ZVwiLCBpZiB0aGUgdmVjdG9yIFwidmFsdWVcIiBpcyBpbiB0aGUgY3ViZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwibWluXCIgYW5kIFwibWF4XCJcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGxvd2VyIHRoYW4gb25lIG9mIHRoZSBcIm1pblwiIGNvb3JkaW5hdGUsIHRoZW4gdGhpcyBcInZhbHVlXCIgY29vcmRpbmF0ZSBpcyBzZXQgd2l0aCB0aGUgXCJtaW5cIiBvbmVcbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgdmFsdWUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBvbmUgb2YgdGhlIFwibWF4XCIgY29vcmRpbmF0ZSwgdGhlbiB0aGlzIFwidmFsdWVcIiBjb29yZGluYXRlIGlzIHNldCB3aXRoIHRoZSBcIm1heFwiIG9uZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWluIC0gZGVmaW5lcyB0aGUgbG93ZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyB0aGUgdXBwZXIgcmFuZ2UgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICAgIGNvbnN0IHYgPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICBWZWN0b3IzLkNsYW1wVG9SZWYodmFsdWUsIG1pbiwgbWF4LCB2KTtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNvb3JkaW5hdGVzIG9mIFwidmFsdWVcIiwgaWYgdGhlIHZlY3RvciBcInZhbHVlXCIgaXMgaW4gdGhlIGN1YmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcIm1pblwiIGFuZCBcIm1heFwiXG4gICAgICogSWYgYSBjb29yZGluYXRlIHZhbHVlIG9mIFwidmFsdWVcIiBpcyBsb3dlciB0aGFuIG9uZSBvZiB0aGUgXCJtaW5cIiBjb29yZGluYXRlLCB0aGVuIHRoaXMgXCJ2YWx1ZVwiIGNvb3JkaW5hdGUgaXMgc2V0IHdpdGggdGhlIFwibWluXCIgb25lXG4gICAgICogSWYgYSBjb29yZGluYXRlIHZhbHVlIG9mIFwidmFsdWVcIiBpcyBncmVhdGVyIHRoYW4gb25lIG9mIHRoZSBcIm1heFwiIGNvb3JkaW5hdGUsIHRoZW4gdGhpcyBcInZhbHVlXCIgY29vcmRpbmF0ZSBpcyBzZXQgd2l0aCB0aGUgXCJtYXhcIiBvbmVcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBkZWZpbmVzIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICogQHBhcmFtIG1pbiAtIGRlZmluZXMgdGhlIGxvd2VyIHJhbmdlIHZhbHVlXG4gICAgICogQHBhcmFtIG1heCAtIGRlZmluZXMgdGhlIHVwcGVyIHJhbmdlIHZhbHVlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBDbGFtcFRvUmVmKHZhbHVlLCBtaW4sIG1heCwgcmVzdWx0KSB7XG4gICAgICAgIGxldCB4ID0gdmFsdWUueDtcbiAgICAgICAgeCA9IHggPiBtYXgueCA/IG1heC54IDogeDtcbiAgICAgICAgeCA9IHggPCBtaW4ueCA/IG1pbi54IDogeDtcbiAgICAgICAgbGV0IHkgPSB2YWx1ZS55O1xuICAgICAgICB5ID0geSA+IG1heC55ID8gbWF4LnkgOiB5O1xuICAgICAgICB5ID0geSA8IG1pbi55ID8gbWluLnkgOiB5O1xuICAgICAgICBsZXQgeiA9IHZhbHVlLno7XG4gICAgICAgIHogPSB6ID4gbWF4LnogPyBtYXgueiA6IHo7XG4gICAgICAgIHogPSB6IDwgbWluLnogPyBtaW4ueiA6IHo7XG4gICAgICAgIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh4LCB5LCB6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIHNwbGluZSBkZWZpbmVkIGJ5IHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIsIFwidGFuZ2VudDFcIiwgXCJ2YWx1ZTJcIiwgXCJ0YW5nZW50MlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDEgLSBkZWZpbmVzIHRoZSBmaXJzdCB0YW5nZW50IHZlY3RvclxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB0YW5nZW50MiAtIGRlZmluZXMgdGhlIHNlY29uZCB0YW5nZW50IHZlY3RvclxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBhbW91bnQgb24gdGhlIGludGVycG9sYXRpb24gc3BsaW5lIChiZXR3ZWVuIDAgYW5kIDEpXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIEhlcm1pdGUodmFsdWUxLCB0YW5nZW50MSwgdmFsdWUyLCB0YW5nZW50MiwgYW1vdW50KSB7XG4gICAgICAgIGNvbnN0IHNxdWFyZWQgPSBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIGNvbnN0IGN1YmVkID0gYW1vdW50ICogc3F1YXJlZDtcbiAgICAgICAgY29uc3QgcGFydDEgPSAyLjAgKiBjdWJlZCAtIDMuMCAqIHNxdWFyZWQgKyAxLjA7XG4gICAgICAgIGNvbnN0IHBhcnQyID0gLTIuMCAqIGN1YmVkICsgMy4wICogc3F1YXJlZDtcbiAgICAgICAgY29uc3QgcGFydDMgPSBjdWJlZCAtIDIuMCAqIHNxdWFyZWQgKyBhbW91bnQ7XG4gICAgICAgIGNvbnN0IHBhcnQ0ID0gY3ViZWQgLSBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueCAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnggKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi54ICogcGFydDQ7XG4gICAgICAgIGNvbnN0IHkgPSB2YWx1ZTEueSAqIHBhcnQxICtcbiAgICAgICAgICAgIHZhbHVlMi55ICogcGFydDIgK1xuICAgICAgICAgICAgdGFuZ2VudDEueSAqIHBhcnQzICtcbiAgICAgICAgICAgIHRhbmdlbnQyLnkgKiBwYXJ0NDtcbiAgICAgICAgY29uc3QgeiA9IHZhbHVlMS56ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnogKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS56ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueiAqIHBhcnQ0O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCwgeSwgeik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGZvciBcImFtb3VudFwiIChmbG9hdCkgb24gdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gZW5kIC0gZGVmaW5lcyB0aGUgZW5kIHZhbHVlXG4gICAgICogQHBhcmFtIGFtb3VudCAtIG1heCBkZWZpbmVzIGFtb3VudCBiZXR3ZWVuIGJvdGggKGJldHdlZW4gMCBhbmQgMSlcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycChzdGFydCwgZW5kLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgIFZlY3RvcjMuTGVycFRvUmVmKHN0YXJ0LCBlbmQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBmcm9tIHRoZSB2ZWN0b3IgXCJzdGFydFwiIGZvciBcImFtb3VudFwiIHRvIHRoZSB2ZWN0b3IgXCJlbmRcIlxuICAgICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBtYXggZGVmaW5lcyBhbW91bnQgYmV0d2VlbiBib3RoIChiZXR3ZWVuIDAgYW5kIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwVG9SZWYoc3RhcnQsIGVuZCwgYW1vdW50LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSBzdGFydC54ICsgKGVuZC54IC0gc3RhcnQueCkgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC55ID0gc3RhcnQueSArIChlbmQueSAtIHN0YXJ0LnkpICogYW1vdW50O1xuICAgICAgICByZXN1bHQueiA9IHN0YXJ0LnogKyAoZW5kLnogLSBzdGFydC56KSAqIGFtb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZG90IHByb2R1Y3QgKGZsb2F0KSBiZXR3ZWVuIHRoZSB2ZWN0b3JzIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZG90IHByb2R1Y3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRG90KGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHJldHVybiBsZWZ0LnggKiByaWdodC54ICsgbGVmdC55ICogcmlnaHQueSArIGxlZnQueiAqIHJpZ2h0Lno7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgdmVjdG9ycyBcImxlZnRcIiBhbmQgXCJyaWdodFwiXG4gICAgICogVGhlIGNyb3NzIHByb2R1Y3QgaXMgdGhlbiBvcnRob2dvbmFsIHRvIGJvdGggXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgbGVmdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgcmlnaHQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjcm9zcyBwcm9kdWN0XG4gICAgICovXG4gICAgc3RhdGljIENyb3NzKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBWZWN0b3IzLkNyb3NzVG9SZWYobGVmdCwgcmlnaHQsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhlIGNyb3NzIHByb2R1Y3Qgb2YgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIlxuICAgICAqIFRoZSBjcm9zcyBwcm9kdWN0IGlzIHRoZW4gb3J0aG9nb25hbCB0byBib3RoIFwibGVmdFwiIGFuZCBcInJpZ2h0XCJcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHJpZ2h0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIENyb3NzVG9SZWYobGVmdCwgcmlnaHQsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB4ID0gbGVmdC55ICogcmlnaHQueiAtIGxlZnQueiAqIHJpZ2h0Lnk7XG4gICAgICAgIGNvbnN0IHkgPSBsZWZ0LnogKiByaWdodC54IC0gbGVmdC54ICogcmlnaHQuejtcbiAgICAgICAgY29uc3QgeiA9IGxlZnQueCAqIHJpZ2h0LnkgLSBsZWZ0LnkgKiByaWdodC54O1xuICAgICAgICByZXN1bHQuY29weUZyb21GbG9hdHMoeCwgeSwgeik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBhcyB0aGUgbm9ybWFsaXphdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIFZlY3RvcjMgdG8gbm9ybWFsaXplXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZSh2ZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gVmVjdG9yMy5aZXJvKCk7XG4gICAgICAgIFZlY3RvcjMuTm9ybWFsaXplVG9SZWYodmVjdG9yLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIiB3aXRoIHRoZSBub3JtYWxpemF0aW9uIG9mIHRoZSBnaXZlbiBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB0byBub3JtYWxpemVcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIE5vcm1hbGl6ZVRvUmVmKHZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHZlY3Rvci5ub3JtYWxpemVUb1JlZihyZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdHdvIFZlY3RvcjNcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIHN0YXRpYyBNaW5pbWl6ZShsZWZ0LCByaWdodCkge1xuICAgICAgICBjb25zdCBtaW4gPSBuZXcgVmVjdG9yMyhsZWZ0LngsIGxlZnQueSwgbGVmdC56KTtcbiAgICAgICAgbWluLm1pbmltaXplSW5QbGFjZShyaWdodCk7XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1heGltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0d28gVmVjdG9yM1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIE1heGltaXplKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IG1heCA9IG5ldyBWZWN0b3IzKGxlZnQueCwgbGVmdC55LCBsZWZ0LnopO1xuICAgICAgICBtYXgubWF4aW1pemVJblBsYWNlKHJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgdmVjdG9ycyBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2UodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3IzLkRpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHZhbHVlMiAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2VTcXVhcmVkKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IHggPSB2YWx1ZTEueCAtIHZhbHVlMi54O1xuICAgICAgICBjb25zdCB5ID0gdmFsdWUxLnkgLSB2YWx1ZTIueTtcbiAgICAgICAgY29uc3QgeiA9IHZhbHVlMS56IC0gdmFsdWUyLno7XG4gICAgICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBsb2NhdGVkIGF0IHRoZSBjZW50ZXIgYmV0d2VlbiBcInZhbHVlMVwiIGFuZCBcInZhbHVlMlwiXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2VudGVyKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IFZlY3RvcjMuQWRkKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgY2VudGVyLnNjYWxlSW5QbGFjZSgwLjUpO1xuICAgICAgICByZXR1cm4gY2VudGVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aHJlZSBvcnRob2dvbmFsIG5vcm1hbGl6ZWQgbGVmdC1oYW5kZWQgb3JpZW50ZWQgVmVjdG9yMyBheGlzIGluIHNwYWNlICh0YXJnZXQgc3lzdGVtKSxcbiAgICAgKiBSb3RhdGlvbkZyb21BeGlzKCkgcmV0dXJucyB0aGUgcm90YXRpb24gRXVsZXIgYW5nbGVzIChleCA6IHJvdGF0aW9uLngsIHJvdGF0aW9uLnksIHJvdGF0aW9uLnopIHRvIGFwcGx5XG4gICAgICogdG8gc29tZXRoaW5nIGluIG9yZGVyIHRvIHJvdGF0ZSBpdCBmcm9tIGl0cyBsb2NhbCBzeXN0ZW0gdG8gdGhlIGdpdmVuIHRhcmdldCBzeXN0ZW1cbiAgICAgKiBOb3RlOiBheGlzMSwgYXhpczIgYW5kIGF4aXMzIGFyZSBub3JtYWxpemVkIGR1cmluZyB0aGlzIG9wZXJhdGlvblxuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uRnJvbUF4aXMoYXhpczEsIGF4aXMyLCBheGlzMykge1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IFZlY3RvcjMuWmVybygpO1xuICAgICAgICBWZWN0b3IzLlJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCByb3RhdGlvbik7XG4gICAgICAgIHJldHVybiByb3RhdGlvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHNhbWUgdGhhbiBSb3RhdGlvbkZyb21BeGlzIGJ1dCB1cGRhdGVzIHRoZSBnaXZlbiByZWYgVmVjdG9yMyBwYXJhbWV0ZXIgaW5zdGVhZCBvZiByZXR1cm5pbmcgYSBuZXcgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBheGlzMSAtIGRlZmluZXMgdGhlIGZpcnN0IGF4aXNcbiAgICAgKiBAcGFyYW0gYXhpczIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgYXhpc1xuICAgICAqIEBwYXJhbSBheGlzMyAtIGRlZmluZXMgdGhlIHRoaXJkIGF4aXNcbiAgICAgKiBAcGFyYW0gcmVmIC0gZGVmaW5lcyB0aGUgVmVjdG9yMyB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICovXG4gICAgc3RhdGljIFJvdGF0aW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCByZWYpIHtcbiAgICAgICAgY29uc3QgcXVhdCA9IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xLk1hdGhUbXAuUXVhdGVybmlvblswXTtcbiAgICAgICAgUXVhdGVybmlvbl8xLlF1YXRlcm5pb24uUm90YXRpb25RdWF0ZXJuaW9uRnJvbUF4aXNUb1JlZihheGlzMSwgYXhpczIsIGF4aXMzLCBxdWF0KTtcbiAgICAgICAgcmVmLmNvcHlGcm9tKHF1YXQuZXVsZXJBbmdsZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBWZWN0b3IzXG4gICAgICogQHJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgVmVjdG9yMyBjb29yZGluYXRlcy5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLnh9LCAke3RoaXMueX0sICR7dGhpcy56fSlgO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjbGFzcyBuYW1lXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyBcIlZlY3RvcjNcIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdWZWN0b3IzJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgVmVjdG9yMyBoYXNoIGNvZGVcbiAgICAgKiBAcmV0dXJucyBhIG51bWJlciB3aGljaCB0ZW5kcyB0byBiZSB1bmlxdWUgYmV0d2VlbiBWZWN0b3IzIGluc3RhbmNlc1xuICAgICAqL1xuICAgIGdldEhhc2hDb2RlKCkge1xuICAgICAgICBsZXQgaGFzaCA9IHRoaXMueCB8fCAwO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMueSB8fCAwKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLnogfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICAvLyBPcGVyYXRvcnNcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhyZWUgZWxlbWVudHMgOiB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBhcnJheSBvZiBudW1iZXJzXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIHRoaXMudG9BcnJheShyZXN1bHQsIDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb3B1bGF0ZXMgdGhlIGdpdmVuIGFycmF5IG9yIEZsb2F0QXJyYXkgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggd2l0aCB0aGUgc3VjY2Vzc2l2ZSBjb29yZGluYXRlcyBvZiB0aGUgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGRlc3RpbmF0aW9uIGFycmF5XG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBkZXN0aW5hdGlvbiBhcnJheVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICB0b0FycmF5KGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGhpcy54O1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdGhpcy55O1xuICAgICAgICBhcnJheVtpbmRleCArIDJdID0gdGhpcy56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGN1cnJlbnQgVmVjdG9yMyBpbnRvIGEgcXVhdGVybmlvbiAoY29uc2lkZXJpbmcgdGhhdCB0aGUgVmVjdG9yMyBjb250YWlucyBFdWxlciBhbmdsZXMgcmVwcmVzZW50YXRpb24gb2YgYSByb3RhdGlvbilcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBRdWF0ZXJuaW9uIG9iamVjdCwgY29tcHV0ZWQgZnJvbSB0aGUgVmVjdG9yMyBjb29yZGluYXRlc1xuICAgICAqL1xuICAgIHRvUXVhdGVybmlvbigpIHtcbiAgICAgICAgcmV0dXJuIFF1YXRlcm5pb25fMS5RdWF0ZXJuaW9uLklkZW50aXR5LnNldEV1bGVyKHRoaXMueSwgdGhpcy54LCB0aGlzLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBnaXZlbiB2ZWN0b3IgdG8gdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgYWRkSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRJblBsYWNlRnJvbUZsb2F0cyhvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIGFkZEluUGxhY2VGcm9tRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgdGhpcy54ICs9IHg7XG4gICAgICAgIHRoaXMueSArPSB5O1xuICAgICAgICB0aGlzLnogKz0gejtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMywgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiB0aGUgY3VycmVudCBWZWN0b3IzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0aW5nIFZlY3RvcjNcbiAgICAgKi9cbiAgICBhZGQob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCArIG90aGVyVmVjdG9yLngsIHRoaXMueSArIG90aGVyVmVjdG9yLnksIHRoaXMueiArIG90aGVyVmVjdG9yLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIHRoZSBjdXJyZW50IFZlY3RvcjMgdG8gdGhlIGdpdmVuIG9uZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIHZlY3RvciBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBhZGRUb1JlZihvdGhlclZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuY29weUZyb21GbG9hdHModGhpcy54ICsgb3RoZXJWZWN0b3IueCwgdGhpcy55ICsgb3RoZXJWZWN0b3IueSwgdGhpcy56ICsgb3RoZXJWZWN0b3Iueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHRoZSBnaXZlbiB2ZWN0b3IgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzdWJ0cmFjdEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54IC09IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAtPSBvdGhlclZlY3Rvci55O1xuICAgICAgICB0aGlzLnogLT0gb3RoZXJWZWN0b3IuejtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMywgcmVzdWx0IG9mIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gdmVjdG9yIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyBWZWN0b3IzXG4gICAgICovXG4gICAgc3VidHJhY3Qob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAtIG90aGVyVmVjdG9yLngsIHRoaXMueSAtIG90aGVyVmVjdG9yLnksIHRoaXMueiAtIG90aGVyVmVjdG9yLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIHZlY3RvciBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSB2ZWN0b3IgXCJyZXN1bHRcIi5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIHN1YnRyYWN0VG9SZWYob3RoZXJWZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJ0cmFjdEZyb21GbG9hdHNUb1JlZihvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56LCByZXN1bHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIHN1YnRyYWN0aW9uIG9mIHRoZSBnaXZlbiBmbG9hdHMgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdGluZyBWZWN0b3IzXG4gICAgICovXG4gICAgc3VidHJhY3RGcm9tRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdGhlIGdpdmVuIGZsb2F0cyBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYW5kIHNldCB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCIgd2l0aCB0aGlzIHJlc3VsdFxuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIHN1YnRyYWN0RnJvbUZsb2F0c1RvUmVmKHgsIHksIHosIHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LmNvcHlGcm9tRmxvYXRzKHRoaXMueCAtIHgsIHRoaXMueSAtIHksIHRoaXMueiAtIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoaXMgdmVjdG9yICh3aXRoIGFuIGltcGxpY2l0IDEgaW4gdGhlIDR0aCBkaW1lbnNpb24pIGFuZCBtLCBhbmQgZGl2aWRlcyBieSBwZXJzcGVjdGl2ZVxuICAgICAqIEBwYXJhbSBtYXRyaXggLSBUaGUgdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICovXG4gICAgYXBwbHlNYXRyaXg0KG1hdHJpeCkge1xuICAgICAgICB0aGlzLmFwcGx5TWF0cml4NFRvUmVmKG1hdHJpeCwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhpcyB2ZWN0b3IgKHdpdGggYW4gaW1wbGljaXQgMSBpbiB0aGUgNHRoIGRpbWVuc2lvbikgYW5kIG0sIGFuZCBkaXZpZGVzIGJ5IHBlcnNwZWN0aXZlIGFuZCBzZXQgdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIHdpdGggdGhpcyByZXN1bHRcbiAgICAgKiBAcGFyYW0gbWF0cml4IC0gVGhlIHRyYW5zZm9ybWF0aW9uIG1hdHJpeFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGFwcGx5TWF0cml4NFRvUmVmKG1hdHJpeCwgcmVzdWx0KSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSwgeiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtIH0gPSBtYXRyaXg7XG4gICAgICAgIGNvbnN0IHcgPSAxIC8gKG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XSk7XG4gICAgICAgIHJlc3VsdC54ID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAqIHc7XG4gICAgICAgIHJlc3VsdC55ID0gKG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzldICogeiArIG1bMTNdKSAqIHc7XG4gICAgICAgIHJlc3VsdC56ID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgKiB3O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjMgYmFzZWQgb24gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0gcSAtIGRlZmluZXMgdGhlIFF1YXRlcm5pb25cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICovXG4gICAgcm90YXRlKHEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm90YXRlVG9SZWYocSwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgY3VycmVudCBWZWN0b3IzIGJhc2VkIG9uIHRoZSBnaXZlbiBxdWF0ZXJuaW9uLCBidXQgYXBwbGllcyB0aGUgcm90YXRpb24gdG8gdGFyZ2V0IFZlY3RvcjMuXG4gICAgICogQHBhcmFtIHEgLSBkZWZpbmVzIHRoZSBRdWF0ZXJuaW9uXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIHJvdGF0ZVRvUmVmKHEsIHJlc3VsdCkge1xuICAgICAgICBjb25zdCB7IHgsIHksIHogfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgeDogcXgsIHk6IHF5LCB6OiBxeiwgdzogcXcgfSA9IHE7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjdG9yXG4gICAgICAgIGNvbnN0IGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICAgICAgICBjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgICAgICAgY29uc3QgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG4gICAgICAgIGNvbnN0IGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcbiAgICAgICAgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuICAgICAgICByZXN1bHQueCA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XG4gICAgICAgIHJlc3VsdC55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgICAgICAgcmVzdWx0LnogPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIGN1cnJlbnQgVmVjdG9yMyBuZWdhdGVkIGNvb3JkaW5hdGVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIG5lZ2F0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKC10aGlzLngsIC10aGlzLnksIC10aGlzLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBmbG9hdCBcInNjYWxlXCJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBtdWx0aXBsaWVyIGZhY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIHNjYWxlSW5QbGFjZShzY2FsZSkge1xuICAgICAgICB0aGlzLnggKj0gc2NhbGU7XG4gICAgICAgIHRoaXMueSAqPSBzY2FsZTtcbiAgICAgICAgdGhpcy56ICo9IHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzIHNldCB3aXRoIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgbXVsdGlwbGllZCBieSB0aGUgZmxvYXQgXCJzY2FsZVwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgc2NhbGUoc2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSwgdGhpcy56ICogc2NhbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYnkgdGhlIGZsb2F0IFwic2NhbGVcIiBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIGdpdmVuIHZlY3RvciBcInJlc3VsdFwiIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgbXVsdGlwbGllciBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IFZlY3RvcjNcbiAgICAgKi9cbiAgICBzY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUsIHRoaXMueiAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgVmVjdG9yMyB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gVmVjdG9yM1xuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBWZWN0b3IzXG4gICAgICovXG4gICAgc2NhbGVBbmRBZGRUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuYWRkSW5QbGFjZUZyb21GbG9hdHModGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlLCB0aGlzLnogKiBzY2FsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIGNvb3JkaW5hdGVzIGFyZSBzdHJpY3RseSBlcXVhbFxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBib3RoIHZlY3RvcnMgYXJlIGVxdWFsc1xuICAgICAqL1xuICAgIGVxdWFscyhvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gKG90aGVyVmVjdG9yICYmXG4gICAgICAgICAgICB0aGlzLnggPT09IG90aGVyVmVjdG9yLnggJiZcbiAgICAgICAgICAgIHRoaXMueSA9PT0gb3RoZXJWZWN0b3IueSAmJlxuICAgICAgICAgICAgdGhpcy56ID09PSBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjdXJyZW50IFZlY3RvcjMgYW5kIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgYXJlIGRpc3RhbnQgbGVzcyB0aGFuIGVwc2lsb25cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gZGVmaW5lcyB0aGUgbWluaW1hbCBkaXN0YW5jZSB0byBkZWZpbmUgdmFsdWVzIGFzIGVxdWFsc1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgYm90aCB2ZWN0b3JzIGFyZSBkaXN0YW50IGxlc3MgdGhhbiBlcHNpbG9uXG4gICAgICovXG4gICAgZXF1YWxzV2l0aEVwc2lsb24ob3RoZXJWZWN0b3IsIGVwc2lsb24gPSB0eXBlc18xLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChvdGhlclZlY3RvciAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy54LCBvdGhlclZlY3Rvci54LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy55LCBvdGhlclZlY3Rvci55LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy56LCBvdGhlclZlY3Rvci56LCBlcHNpbG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGVxdWFscyB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBib3RoIHZlY3RvcnMgYXJlIGVxdWFsc1xuICAgICAqL1xuICAgIGVxdWFsc1RvRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0geCAmJiB0aGlzLnkgPT09IHkgJiYgdGhpcy56ID09PSB6O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXMgYnkgdGhlIGdpdmVuIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIG11bHRpcGx5SW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICB0aGlzLnggKj0gb3RoZXJWZWN0b3IueDtcbiAgICAgICAgdGhpcy55ICo9IG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHRoaXMueiAqPSBvdGhlclZlY3Rvci56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IzLCByZXN1bHQgb2YgdGhlIG11bHRpcGxpY2F0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjMgYnkgdGhlIGdpdmVuIHZlY3RvclxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgbXVsdGlwbHkob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlCeUZsb2F0cyhvdGhlclZlY3Rvci54LCBvdGhlclZlY3Rvci55LCBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgY3VycmVudCBWZWN0b3IzIGJ5IHRoZSBnaXZlbiBvbmUgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIHRoZSBnaXZlbiB2ZWN0b3IgXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIFZlY3RvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICovXG4gICAgbXVsdGlwbHlUb1JlZihvdGhlclZlY3RvciwgcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQuY29weUZyb21GbG9hdHModGhpcy54ICogb3RoZXJWZWN0b3IueCwgdGhpcy55ICogb3RoZXJWZWN0b3IueSwgdGhpcy56ICogb3RoZXJWZWN0b3Iueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMyBzZXQgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBtdWxsaXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgbmV3IFZlY3RvcjNcbiAgICAgKi9cbiAgICBtdWx0aXBseUJ5RmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMueCAqIHgsIHRoaXMueSAqIHksIHRoaXMueiAqIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjMgc2V0IHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgZGl2aXNpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gb25lc1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZGl2aWRlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGUgZ2l2ZW4gdmVjdG9yIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yM1xuICAgICAqL1xuICAgIGRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5jb3B5RnJvbUZsb2F0cyh0aGlzLnggLyBvdGhlclZlY3Rvci54LCB0aGlzLnkgLyBvdGhlclZlY3Rvci55LCB0aGlzLnogLyBvdGhlclZlY3Rvci56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgZGl2aWRlSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXZpZGVUb1JlZihvdGhlclZlY3RvciwgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gdmVjdG9yIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXIgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIG1pbmltaXplSW5QbGFjZShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5taW5pbWl6ZUluUGxhY2VGcm9tRmxvYXRzKG90aGVyLngsIG90aGVyLnksIG90aGVyLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFZlY3RvcjMgd2l0aCB0aGUgbWF4aW1hbCBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIGl0cyBhbmQgdGhlIGdpdmVuIHZlY3RvciBvbmVzLlxuICAgICAqIEBwYXJhbSBvdGhlciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbWF4aW1pemVJblBsYWNlKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heGltaXplSW5QbGFjZUZyb21GbG9hdHMob3RoZXIueCwgb3RoZXIueSwgb3RoZXIueik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB5IC0gZGVmaW5lcyB0aGUgeSBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHogLSBkZWZpbmVzIHRoZSB6IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBtaW5pbWl6ZUluUGxhY2VGcm9tRmxvYXRzKHgsIHksIHopIHtcbiAgICAgICAgaWYgKHggPCB0aGlzLngpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHkgPCB0aGlzLnkpIHtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHogPCB0aGlzLnopIHtcbiAgICAgICAgICAgIHRoaXMueiA9IHo7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBtYXhpbWFsIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gaXRzIGFuZCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMuXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbWF4aW1pemVJblBsYWNlRnJvbUZsb2F0cyh4LCB5LCB6KSB7XG4gICAgICAgIGlmICh4ID4gdGhpcy54KSB7XG4gICAgICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB9XG4gICAgICAgIGlmICh5ID4gdGhpcy55KSB7XG4gICAgICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh6ID4gdGhpcy56KSB7XG4gICAgICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjMgZnJvbSBjdXJyZW50IFZlY3RvcjMgZmxvb3JlZCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgZmxvb3IoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhNYXRoLmZsb29yKHRoaXMueCksIE1hdGguZmxvb3IodGhpcy55KSwgTWF0aC5mbG9vcih0aGlzLnopKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IzIGZyb20gY3VycmVudCBWZWN0b3IzIGZsb29yZWQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIGZyYWN0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy54IC0gTWF0aC5mbG9vcih0aGlzLngpLCB0aGlzLnkgLSBNYXRoLmZsb29yKHRoaXMueSksIHRoaXMueiAtIE1hdGguZmxvb3IodGhpcy56KSk7XG4gICAgfVxuICAgIC8vIFByb3BlcnRpZXNcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBWZWN0bzNcbiAgICAgKi9cbiAgICBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhlIFZlY3RvcjNcbiAgICAgKiBAcmV0dXJucyBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgVmVjdG9yM1xuICAgICAqL1xuICAgIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLno7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzLlxuICAgICAqIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBpcyBhbiBpbiBwbGFjZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbm9ybWFsaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVGcm9tTGVuZ3RoKHRoaXMubGVuZ3RoKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgVmVjdG9yMyB3aXRoIHRoZSBnaXZlbiBpbnB1dCBsZW5ndGguXG4gICAgICogUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGlzIGFuIGluIHBsYWNlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gbGVuIC0gdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbm9ybWFsaXplRnJvbUxlbmd0aChsZW4pIHtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEuMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVJblBsYWNlKDEuMCAvIGxlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vcm1hbGl6ZSB0aGUgY3VycmVudCBWZWN0b3IzIHRvIGEgbmV3IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgVmVjdG9yM1xuICAgICAqL1xuICAgIG5vcm1hbGl6ZVRvTmV3KCkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbmV3IFZlY3RvcjMoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMubm9ybWFsaXplVG9SZWYobm9ybWFsaXplZCk7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgVmVjdG9yMyB0byB0aGUgcmVmZXJlbmNlXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSAtIGRlZmluZSB0aGUgVmVjdG9yMyB0byB1cGRhdGVcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgbm9ybWFsaXplVG9SZWYocmVmZXJlbmNlKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMubGVuZ3RoKCk7XG4gICAgICAgIGlmIChsZW4gPT09IDAgfHwgbGVuID09PSAxLjApIHtcbiAgICAgICAgICAgIHJldHVybiByZWZlcmVuY2UuY29weUZyb21GbG9hdHModGhpcy54LCB0aGlzLnksIHRoaXMueik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2NhbGVUb1JlZigxLjAgLyBsZW4sIHJlZmVyZW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yMyBjb3BpZWQgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBWZWN0b3IzXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yMyBvbmVzXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBWZWN0b3IzXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgY29weUZyb20oc291cmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHNvdXJjZS54LCBzb3VyY2UueSwgc291cmNlLnopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0cyB0byB0aGUgY3VycmVudCBWZWN0b3IzIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB6IC0gZGVmaW5lcyB0aGUgeiBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IzXG4gICAgICovXG4gICAgY29weUZyb21GbG9hdHMoeCwgeSwgeikge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnogPSB6O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBmbG9hdHMgdG8gdGhlIGN1cnJlbnQgVmVjdG9yMyBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB4IC0gZGVmaW5lcyB0aGUgeCBjb29yZGluYXRlIG9mIHRoZSBvcGVyYW5kXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0geiAtIGRlZmluZXMgdGhlIHogY29vcmRpbmF0ZSBvZiB0aGUgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yM1xuICAgICAqL1xuICAgIHNldCh4LCB5LCB6KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHgsIHksIHopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHRvIHRoZSBjdXJyZW50IFZlY3RvcjMgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gdiAtIGRlZmluZXMgdGhlIHgsIHkgYW5kIHogY29vcmRpbmF0ZXMgb2YgdGhlIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjNcbiAgICAgKi9cbiAgICBzZXRBbGwodikge1xuICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLlZlY3RvcjMgPSBWZWN0b3IzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VmVjdG9yMy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWF0aFRtcCA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IFZlY3RvcjNfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjNcIik7XG5jb25zdCBRdWF0ZXJuaW9uXzEgPSByZXF1aXJlKFwiLi9RdWF0ZXJuaW9uXCIpO1xuY29uc3QgTWF0cml4XzEgPSByZXF1aXJlKFwiLi9NYXRyaXhcIik7XG4vLyBUZW1wb3JhcnkgcHJlLWFsbG9jYXRlZCBvYmplY3RzIGZvciBlbmdpbmUgaW50ZXJuYWwgdXNlXG4vLyB1c2FnZSBpbiBhbnkgaW50ZXJuYWwgZnVuY3Rpb24gOlxuLy8gdmFyIHRtcCA9IFRtcC5WZWN0b3IzWzBdOyAgIDw9IGdldHMgYWNjZXNzIHRvIHRoZSBmaXJzdCBwcmUtY3JlYXRlZCBWZWN0b3IzXG4vLyBUaGVyZSdzIGEgVG1wIGFycmF5IHBlciBvYmplY3QgdHlwZSA6IGludCwgZmxvYXQsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFF1YXRlcm5pb24sIE1hdHJpeFxuLyoqXG4gKiBAcHVibGljXG4gKiBTYW1lIGFzIFRtcCBidXQgbm90IGV4cG9ydGVkIHRvIGtlZXAgaXQgb25seSBmb3IgbWF0aCBmdW5jdGlvbnMgdG8gYXZvaWQgY29uZmxpY3RzXG4gKi9cbmV4cG9ydHMuTWF0aFRtcCA9IHtcbiAgICBWZWN0b3IzOiAoMCwgdXRpbHNfMS5idWlsZEFycmF5KSg2LCBWZWN0b3IzXzEuVmVjdG9yMy5aZXJvKSxcbiAgICBNYXRyaXg6ICgwLCB1dGlsc18xLmJ1aWxkQXJyYXkpKDIsIE1hdHJpeF8xLk1hdHJpeC5JZGVudGl0eSksXG4gICAgUXVhdGVybmlvbjogKDAsIHV0aWxzXzEuYnVpbGRBcnJheSkoMywgUXVhdGVybmlvbl8xLlF1YXRlcm5pb24uWmVybyksXG4gICAgc3RhdGljVXA6IFZlY3RvcjNfMS5WZWN0b3IzLlVwKCksXG4gICAgdG1wTWF0cml4OiBNYXRyaXhfMS5NYXRyaXguWmVybygpXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWxsb2NhdGVkVmFyaWFibGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbmdsZSA9IHZvaWQgMDtcbi8qKlxuICogRGVmaW5lcyBhbmdsZSByZXByZXNlbnRhdGlvblxuICogQHB1YmxpY1xuICovXG5jbGFzcyBBbmdsZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBBbmdsZSBvYmplY3Qgb2YgXCJyYWRpYW5zXCIgcmFkaWFucyAoZmxvYXQpLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHJhZGlhbnMpIHtcbiAgICAgICAgdGhpcy5fcmFkaWFucyA9IHJhZGlhbnM7XG4gICAgICAgIGlmICh0aGlzLl9yYWRpYW5zIDwgMC4wKSB7XG4gICAgICAgICAgICB0aGlzLl9yYWRpYW5zICs9IDIuMCAqIE1hdGguUEk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBBbmdsZSBvYmplY3QgdmFsdWVkIHdpdGggdGhlIGFuZ2xlIHZhbHVlIGluIHJhZGlhbnMgYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBBbmdsZVxuICAgICAqL1xuICAgIHN0YXRpYyBCZXR3ZWVuVHdvUG9pbnRzKGEsIGIpIHtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBiLnN1YnRyYWN0KGEpO1xuICAgICAgICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbjIoZGVsdGEueSwgZGVsdGEueCk7XG4gICAgICAgIHJldHVybiBuZXcgQW5nbGUodGhldGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiByYWRpYW5zXG4gICAgICogQHBhcmFtIHJhZGlhbnMgLSBkZWZpbmVzIHRoZSBhbmdsZSB2YWx1ZSBpbiByYWRpYW5zXG4gICAgICogQHJldHVybnMgYSBuZXcgQW5nbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbVJhZGlhbnMocmFkaWFucykge1xuICAgICAgICByZXR1cm4gbmV3IEFuZ2xlKHJhZGlhbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IEFuZ2xlIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBmbG9hdCBpbiBkZWdyZWVzXG4gICAgICogQHBhcmFtIGRlZ3JlZXMgLSBkZWZpbmVzIHRoZSBhbmdsZSB2YWx1ZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgQW5nbGVcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbURlZ3JlZXMoZGVncmVlcykge1xuICAgICAgICByZXR1cm4gbmV3IEFuZ2xlKChkZWdyZWVzICogTWF0aC5QSSkgLyAxODAuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB2YWx1ZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybnMgdGhlIEFuZ2xlIHZhbHVlIGluIGRlZ3JlZXMgKGZsb2F0KVxuICAgICAqL1xuICAgIGRlZ3JlZXMoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcmFkaWFucyAqIDE4MC4wKSAvIE1hdGguUEk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB2YWx1ZSBpbiByYWRpYW5zXG4gICAgICogQHJldHVybnMgdGhlIEFuZ2xlIHZhbHVlIGluIHJhZGlhbnMgKGZsb2F0KVxuICAgICAqL1xuICAgIHJhZGlhbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpYW5zO1xuICAgIH1cbn1cbmV4cG9ydHMuQW5nbGUgPSBBbmdsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFuZ2xlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WZWN0b3IyID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHZlY3RvciBjb250YWluaW5nIDIgY29vcmRpbmF0ZXNcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgVmVjdG9yMiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZWN0b3IyIGZyb20gdGhlIGdpdmVuIHggYW5kIHkgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGUgKi9cbiAgICB4ID0gMCwgXG4gICAgLyoqIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlICovXG4gICAgeSA9IDApIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyKDAsIDApXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMCwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMigxLCAxKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdGF0aWMgT25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBhcyB0aGUgcmVzdWx0IG9mIHRoZSBhZGRpdGlvbiBvZiB0aGUgdHdvIGdpdmVuIHZlY3RvcnMuXG4gICAgICogQHBhcmFtIHZlY3RvcjEgLSB0aGUgZmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHZlY3RvcjIgLSB0aGUgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSByZXN1bHRpbmcgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIEFkZCh2ZWN0b3IxLCB2ZWN0b3IyKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih2ZWN0b3IxLngsIHZlY3RvcjEueSkuYWRkSW5QbGFjZSh2ZWN0b3IyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIHNldCBmcm9tIHRoZSBnaXZlbiBpbmRleCBlbGVtZW50IG9mIHRoZSBnaXZlbiBhcnJheVxuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGRhdGEgc291cmNlXG4gICAgICogQHBhcmFtIG9mZnNldCAtIGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgZGF0YSBzb3VyY2VcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoYXJyYXlbb2Zmc2V0XSwgYXJyYXlbb2Zmc2V0ICsgMV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIFwicmVzdWx0XCIgZnJvbSB0aGUgZ2l2ZW4gaW5kZXggZWxlbWVudCBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBkYXRhIHNvdXJjZVxuICAgICAqIEBwYXJhbSBvZmZzZXQgLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gdGhlIGRhdGEgc291cmNlXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3JcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUFycmF5VG9SZWYoYXJyYXksIG9mZnNldCwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICAgICAgcmVzdWx0LnkgPSBhcnJheVtvZmZzZXQgKyAxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgQ2F0bXVsbFJvbSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgZ2l2ZW4gZm91ciBWZWN0b3IyXG4gICAgICogQHBhcmFtIHZhbHVlMSAtIGRlZmluZXMgMXN0IHBvaW50IG9mIGNvbnRyb2xcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyAybmQgcG9pbnQgb2YgY29udHJvbFxuICAgICAqIEBwYXJhbSB2YWx1ZTMgLSBkZWZpbmVzIDNyZCBwb2ludCBvZiBjb250cm9sXG4gICAgICogQHBhcmFtIHZhbHVlNCAtIGRlZmluZXMgNHRoIHBvaW50IG9mIGNvbnRyb2xcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgaW50ZXJwb2xhdGlvbiBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIENhdG11bGxSb20odmFsdWUxLCB2YWx1ZTIsIHZhbHVlMywgdmFsdWU0LCBhbW91bnQpIHtcbiAgICAgICAgY29uc3Qgc3F1YXJlZCA9IGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgY3ViZWQgPSBhbW91bnQgKiBzcXVhcmVkO1xuICAgICAgICBjb25zdCB4ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueCArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueCArIHZhbHVlMy54KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS54IC0gNS4wICogdmFsdWUyLnggKyA0LjAgKiB2YWx1ZTMueCAtIHZhbHVlNC54KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnggKyAzLjAgKiB2YWx1ZTIueCAtIDMuMCAqIHZhbHVlMy54ICsgdmFsdWU0LngpICogY3ViZWQpO1xuICAgICAgICBjb25zdCB5ID0gMC41ICpcbiAgICAgICAgICAgICgyLjAgKiB2YWx1ZTIueSArXG4gICAgICAgICAgICAgICAgKC12YWx1ZTEueSArIHZhbHVlMy55KSAqIGFtb3VudCArXG4gICAgICAgICAgICAgICAgKDIuMCAqIHZhbHVlMS55IC0gNS4wICogdmFsdWUyLnkgKyA0LjAgKiB2YWx1ZTMueSAtIHZhbHVlNC55KSAqXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZWQgK1xuICAgICAgICAgICAgICAgICgtdmFsdWUxLnkgKyAzLjAgKiB2YWx1ZTIueSAtIDMuMCAqIHZhbHVlMy55ICsgdmFsdWU0LnkpICogY3ViZWQpO1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCBzYW1lIHRoZSBjb29yZGluYXRlcyB0aGFuIFwidmFsdWVcIiBvbmVzIGlmIHRoZSB2ZWN0b3IgXCJ2YWx1ZVwiIGlzIGluIHRoZSBzcXVhcmUgZGVmaW5lZCBieSBcIm1pblwiIGFuZCBcIm1heFwiLlxuICAgICAqIElmIGEgY29vcmRpbmF0ZSBvZiBcInZhbHVlXCIgaXMgbG93ZXIgdGhhbiBcIm1pblwiIGNvb3JkaW5hdGVzLCB0aGUgcmV0dXJuZWQgVmVjdG9yMiBpcyBnaXZlbiB0aGlzIFwibWluXCIgY29vcmRpbmF0ZS5cbiAgICAgKiBJZiBhIGNvb3JkaW5hdGUgb2YgXCJ2YWx1ZVwiIGlzIGdyZWF0ZXIgdGhhbiBcIm1heFwiIGNvb3JkaW5hdGVzLCB0aGUgcmV0dXJuZWQgVmVjdG9yMiBpcyBnaXZlbiB0aGlzIFwibWF4XCIgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIGRlZmluZXMgdGhlIHZhbHVlIHRvIGNsYW1wXG4gICAgICogQHBhcmFtIG1pbiAtIGRlZmluZXMgdGhlIGxvd2VyIGxpbWl0XG4gICAgICogQHBhcmFtIG1heCAtIGRlZmluZXMgdGhlIHVwcGVyIGxpbWl0XG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBDbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICAgICAgbGV0IHggPSB2YWx1ZS54O1xuICAgICAgICB4ID0geCA+IG1heC54ID8gbWF4LnggOiB4O1xuICAgICAgICB4ID0geCA8IG1pbi54ID8gbWluLnggOiB4O1xuICAgICAgICBsZXQgeSA9IHZhbHVlLnk7XG4gICAgICAgIHkgPSB5ID4gbWF4LnkgPyBtYXgueSA6IHk7XG4gICAgICAgIHkgPSB5IDwgbWluLnkgPyBtaW4ueSA6IHk7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgSGVybWl0ZSBzcGxpbmUgZGVmaW5lZCBieSB0aGUgdmVjdG9ycyBcInZhbHVlMVwiLCBcInZhbHVlM1wiLCBcInRhbmdlbnQxXCIsIFwidGFuZ2VudDJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIHRoZSAxc3QgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB0YW5nZW50MSAtIGRlZmluZXMgdGhlIG91dGdvaW5nIHRhbmdlbnRcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyB0aGUgMm5kIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdGFuZ2VudDIgLSBkZWZpbmVzIHRoZSBpbmNvbWluZyB0YW5nZW50XG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGludGVycG9sYXRpb24gZmFjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBIZXJtaXRlKHZhbHVlMSwgdGFuZ2VudDEsIHZhbHVlMiwgdGFuZ2VudDIsIGFtb3VudCkge1xuICAgICAgICBjb25zdCBzcXVhcmVkID0gYW1vdW50ICogYW1vdW50O1xuICAgICAgICBjb25zdCBjdWJlZCA9IGFtb3VudCAqIHNxdWFyZWQ7XG4gICAgICAgIGNvbnN0IHBhcnQxID0gMi4wICogY3ViZWQgLSAzLjAgKiBzcXVhcmVkICsgMS4wO1xuICAgICAgICBjb25zdCBwYXJ0MiA9IC0yLjAgKiBjdWJlZCArIDMuMCAqIHNxdWFyZWQ7XG4gICAgICAgIGNvbnN0IHBhcnQzID0gY3ViZWQgLSAyLjAgKiBzcXVhcmVkICsgYW1vdW50O1xuICAgICAgICBjb25zdCBwYXJ0NCA9IGN1YmVkIC0gc3F1YXJlZDtcbiAgICAgICAgY29uc3QgeCA9IHZhbHVlMS54ICogcGFydDEgK1xuICAgICAgICAgICAgdmFsdWUyLnggKiBwYXJ0MiArXG4gICAgICAgICAgICB0YW5nZW50MS54ICogcGFydDMgK1xuICAgICAgICAgICAgdGFuZ2VudDIueCAqIHBhcnQ0O1xuICAgICAgICBjb25zdCB5ID0gdmFsdWUxLnkgKiBwYXJ0MSArXG4gICAgICAgICAgICB2YWx1ZTIueSAqIHBhcnQyICtcbiAgICAgICAgICAgIHRhbmdlbnQxLnkgKiBwYXJ0MyArXG4gICAgICAgICAgICB0YW5nZW50Mi55ICogcGFydDQ7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBWZWN0b3IyIGxvY2F0ZWQgZm9yIFwiYW1vdW50XCIgKGZsb2F0KSBvbiB0aGUgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0aGUgdmVjdG9yIFwic3RhcnRcIiBhZG4gdGhlIHZlY3RvciBcImVuZFwiLlxuICAgICAqIEBwYXJhbSBzdGFydCAtIGRlZmluZXMgdGhlIHN0YXJ0IHZlY3RvclxuICAgICAqIEBwYXJhbSBlbmQgLSBkZWZpbmVzIHRoZSBlbmQgdmVjdG9yXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGRlZmluZXMgdGhlIGludGVycG9sYXRpb24gZmFjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCB4ID0gc3RhcnQueCArIChlbmQueCAtIHN0YXJ0LngpICogYW1vdW50O1xuICAgICAgICBjb25zdCB5ID0gc3RhcnQueSArIChlbmQueSAtIHN0YXJ0LnkpICogYW1vdW50O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRvdCBwcm9kdWN0IG9mIHRoZSB2ZWN0b3IgXCJsZWZ0XCIgYW5kIHRoZSB2ZWN0b3IgXCJyaWdodFwiXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIGZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgc2Vjb25kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCAoZmxvYXQpXG4gICAgICovXG4gICAgc3RhdGljIERvdChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gbGVmdC54ICogcmlnaHQueCArIGxlZnQueSAqIHJpZ2h0Lnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBlcXVhbCB0byB0aGUgbm9ybWFsaXplZCBnaXZlbiB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gZGVmaW5lcyB0aGUgdmVjdG9yIHRvIG5vcm1hbGl6ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdGF0aWMgTm9ybWFsaXplKHZlY3Rvcikge1xuICAgICAgICBjb25zdCBuZXdWZWN0b3IgPSBuZXcgVmVjdG9yMih2ZWN0b3IueCwgdmVjdG9yLnkpO1xuICAgICAgICBuZXdWZWN0b3Iubm9ybWFsaXplKCk7XG4gICAgICAgIHJldHVybiBuZXdWZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCB0aGUgbWluaW1hbCBjb29yZGluYXRlIHZhbHVlcyBmcm9tIHRoZSBcImxlZnRcIiBhbmQgXCJyaWdodFwiIHZlY3RvcnNcbiAgICAgKiBAcGFyYW0gbGVmdCAtIGRlZmluZXMgMXN0IHZlY3RvclxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgMm5kIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdGF0aWMgTWluaW1pemUobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgY29uc3QgeCA9IGxlZnQueCA8IHJpZ2h0LnggPyBsZWZ0LnggOiByaWdodC54O1xuICAgICAgICBjb25zdCB5ID0gbGVmdC55IDwgcmlnaHQueSA/IGxlZnQueSA6IHJpZ2h0Lnk7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0bzIgc2V0IHdpdGggdGhlIG1heGltYWwgY29vcmRpbmF0ZSB2YWx1ZXMgZnJvbSB0aGUgXCJsZWZ0XCIgYW5kIFwicmlnaHRcIiB2ZWN0b3JzXG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIDFzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIDJuZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIE1heGltaXplKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHggPSBsZWZ0LnggPiByaWdodC54ID8gbGVmdC54IDogcmlnaHQueDtcbiAgICAgICAgY29uc3QgeSA9IGxlZnQueSA+IHJpZ2h0LnkgPyBsZWZ0LnkgOiByaWdodC55O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCB0aGUgdHJhbnNmb3JtZWQgY29vcmRpbmF0ZXMgb2YgdGhlIGdpdmVuIHZlY3RvciBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHZlY3RvciAtIGRlZmluZXMgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtYXRpb24gLSBkZWZpbmVzIHRoZSBtYXRyaXggdG8gYXBwbHlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgc3RhdGljIFRyYW5zZm9ybSh2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHIgPSBWZWN0b3IyLlplcm8oKTtcbiAgICAgICAgVmVjdG9yMi5UcmFuc2Zvcm1Ub1JlZih2ZWN0b3IsIHRyYW5zZm9ybWF0aW9uLCByKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgdGhlIGdpdmVuIHZlY3RvciBjb29yZGluYXRlcyBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4IGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiB0aGUgdmVjdG9yIFwicmVzdWx0XCIgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gdmVjdG9yIC0gZGVmaW5lcyB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIGRlZmluZXMgdGhlIG1hdHJpeCB0byBhcHBseVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSB0YXJnZXQgdmVjdG9yXG4gICAgICovXG4gICAgc3RhdGljIFRyYW5zZm9ybVRvUmVmKHZlY3RvciwgdHJhbnNmb3JtYXRpb24sIHJlc3VsdCkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtYXRpb24ubTtcbiAgICAgICAgY29uc3QgeCA9IHZlY3Rvci54ICogbVswXSArIHZlY3Rvci55ICogbVs0XSArIG1bMTJdO1xuICAgICAgICBjb25zdCB5ID0gdmVjdG9yLnggKiBtWzFdICsgdmVjdG9yLnkgKiBtWzVdICsgbVsxM107XG4gICAgICAgIHJlc3VsdC54ID0geDtcbiAgICAgICAgcmVzdWx0LnkgPSB5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gdmVjdG9yIGlzIGluY2x1ZGVkIGluIGEgdHJpYW5nbGVcbiAgICAgKiBAcGFyYW0gcCAtIGRlZmluZXMgdGhlIHZlY3RvciB0byB0ZXN0XG4gICAgICogQHBhcmFtIHAwIC0gZGVmaW5lcyAxc3QgdHJpYW5nbGUgcG9pbnRcbiAgICAgKiBAcGFyYW0gcDEgLSBkZWZpbmVzIDJuZCB0cmlhbmdsZSBwb2ludFxuICAgICAqIEBwYXJhbSBwMiAtIGRlZmluZXMgM3JkIHRyaWFuZ2xlIHBvaW50XG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgcG9pbnQgXCJwXCIgaXMgaW4gdGhlIHRyaWFuZ2xlIGRlZmluZWQgYnkgdGhlIHZlcnRvcnMgXCJwMFwiLCBcInAxXCIsIFwicDJcIlxuICAgICAqL1xuICAgIHN0YXRpYyBQb2ludEluVHJpYW5nbGUocCwgcDAsIHAxLCBwMikge1xuICAgICAgICBjb25zdCBhID0gKDEgLyAyKSAqXG4gICAgICAgICAgICAoLXAxLnkgKiBwMi54ICtcbiAgICAgICAgICAgICAgICBwMC55ICogKC1wMS54ICsgcDIueCkgK1xuICAgICAgICAgICAgICAgIHAwLnggKiAocDEueSAtIHAyLnkpICtcbiAgICAgICAgICAgICAgICBwMS54ICogcDIueSk7XG4gICAgICAgIGNvbnN0IHNpZ24gPSBhIDwgMCA/IC0xIDogMTtcbiAgICAgICAgY29uc3QgcyA9IChwMC55ICogcDIueCAtIHAwLnggKiBwMi55ICsgKHAyLnkgLSBwMC55KSAqIHAueCArIChwMC54IC0gcDIueCkgKiBwLnkpICpcbiAgICAgICAgICAgIHNpZ247XG4gICAgICAgIGNvbnN0IHQgPSAocDAueCAqIHAxLnkgLSBwMC55ICogcDEueCArIChwMC55IC0gcDEueSkgKiBwLnggKyAocDEueCAtIHAwLngpICogcC55KSAqXG4gICAgICAgICAgICBzaWduO1xuICAgICAgICByZXR1cm4gcyA+IDAgJiYgdCA+IDAgJiYgcyArIHQgPCAyICogYSAqIHNpZ247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHZlY3RvcnMgXCJ2YWx1ZTFcIiBhbmQgXCJ2YWx1ZTJcIlxuICAgICAqIEBwYXJhbSB2YWx1ZTEgLSBkZWZpbmVzIGZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB2YWx1ZTIgLSBkZWZpbmVzIHNlY29uZCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiB2ZWN0b3JzXG4gICAgICovXG4gICAgc3RhdGljIERpc3RhbmNlKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoVmVjdG9yMi5EaXN0YW5jZVNxdWFyZWQodmFsdWUxLCB2YWx1ZTIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIgYW5kIFwidmFsdWUyXCJcbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyBzZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiB2ZWN0b3JzXG4gICAgICovXG4gICAgc3RhdGljIERpc3RhbmNlU3F1YXJlZCh2YWx1ZTEsIHZhbHVlMikge1xuICAgICAgICBjb25zdCB4ID0gdmFsdWUxLnggLSB2YWx1ZTIueDtcbiAgICAgICAgY29uc3QgeSA9IHZhbHVlMS55IC0gdmFsdWUyLnk7XG4gICAgICAgIHJldHVybiB4ICogeCArIHkgKiB5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjIgbG9jYXRlZCBhdCB0aGUgY2VudGVyIG9mIHRoZSB2ZWN0b3JzIFwidmFsdWUxXCIgYW5kIFwidmFsdWUyXCJcbiAgICAgKiBAcGFyYW0gdmFsdWUxIC0gZGVmaW5lcyBmaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gdmFsdWUyIC0gZGVmaW5lcyBzZWNvbmQgdmVjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN0YXRpYyBDZW50ZXIodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gVmVjdG9yMi5BZGQodmFsdWUxLCB2YWx1ZTIpO1xuICAgICAgICBjZW50ZXIuc2NhbGVJblBsYWNlKDAuNSk7XG4gICAgICAgIHJldHVybiBjZW50ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNob3J0ZXN0IGRpc3RhbmNlIChmbG9hdCkgYmV0d2VlbiB0aGUgcG9pbnQgXCJwXCIgYW5kIHRoZSBzZWdtZW50IGRlZmluZWQgYnkgdGhlIHR3byBwb2ludHMgXCJzZWdBXCIgYW5kIFwic2VnQlwiLlxuICAgICAqIEBwYXJhbSBwIC0gZGVmaW5lcyB0aGUgbWlkZGxlIHBvaW50XG4gICAgICogQHBhcmFtIHNlZ0EgLSBkZWZpbmVzIG9uZSBwb2ludCBvZiB0aGUgc2VnbWVudFxuICAgICAqIEBwYXJhbSBzZWdCIC0gZGVmaW5lcyB0aGUgb3RoZXIgcG9pbnQgb2YgdGhlIHNlZ21lbnRcbiAgICAgKiBAcmV0dXJucyB0aGUgc2hvcnRlc3QgZGlzdGFuY2VcbiAgICAgKi9cbiAgICBzdGF0aWMgRGlzdGFuY2VPZlBvaW50RnJvbVNlZ21lbnQocCwgc2VnQSwgc2VnQikge1xuICAgICAgICBjb25zdCBsMiA9IFZlY3RvcjIuRGlzdGFuY2VTcXVhcmVkKHNlZ0EsIHNlZ0IpO1xuICAgICAgICBpZiAobDIgPT09IDAuMCkge1xuICAgICAgICAgICAgcmV0dXJuIFZlY3RvcjIuRGlzdGFuY2UocCwgc2VnQSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdiA9IHNlZ0Iuc3VidHJhY3Qoc2VnQSk7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBWZWN0b3IyLkRvdChwLnN1YnRyYWN0KHNlZ0EpLCB2KSAvIGwyKSk7XG4gICAgICAgIGNvbnN0IHByb2ogPSBzZWdBLmFkZCh2Lm11bHRpcGx5QnlGbG9hdHModCwgdCkpO1xuICAgICAgICByZXR1cm4gVmVjdG9yMi5EaXN0YW5jZShwLCBwcm9qKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIHN0cmluZyB3aXRoIHRoZSBWZWN0b3IyIGNvb3JkaW5hdGVzXG4gICAgICogQHJldHVybnMgYSBzdHJpbmcgd2l0aCB0aGUgVmVjdG9yMiBjb29yZGluYXRlc1xuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJ3tYOiAnICsgdGhpcy54ICsgJyBZOicgKyB0aGlzLnkgKyAnfSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgY2xhc3MgbmFtZVxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJWZWN0b3IyXCJcbiAgICAgKi9cbiAgICBnZXRDbGFzc05hbWUoKSB7XG4gICAgICAgIHJldHVybiAnVmVjdG9yMic7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgY3VycmVudCB2ZWN0b3IgaGFzaCBjb2RlXG4gICAgICogQHJldHVybnMgdGhlIFZlY3RvcjIgaGFzaCBjb2RlIGFzIGEgbnVtYmVyXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy54IHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy55IHx8IDApO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgLy8gT3BlcmF0b3JzXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVmVjdG9yMiBjb29yZGluYXRlcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgb3IgRmxvYXRBcnJheSBmcm9tIHRoZSBnaXZlbiBpbmRleC5cbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBkZWZpbmVzIHRoZSBvZmZzZXQgaW4gc291cmNlIGFycmF5XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIHRvQXJyYXkoYXJyYXksIGluZGV4ID0gMCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSB0aGlzLng7XG4gICAgICAgIGFycmF5W2luZGV4ICsgMV0gPSB0aGlzLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3B5IHRoZSBjdXJyZW50IHZlY3RvciB0byBhbiBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IGFycmF5IHdpdGggMiBlbGVtZW50czogdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMuXG4gICAgICovXG4gICAgYXNBcnJheSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMudG9BcnJheShyZXN1bHQsIDApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBWZWN0b3IyIGNvb3JkaW5hdGVzIHdpdGggdGhlIGdpdmVuIFZlY3RvcjIgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gc291cmNlIC0gZGVmaW5lcyB0aGUgc291cmNlIFZlY3RvcjJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBjb3B5RnJvbShzb3VyY2UpIHtcbiAgICAgICAgdGhpcy54ID0gc291cmNlLng7XG4gICAgICAgIHRoaXMueSA9IHNvdXJjZS55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVmVjdG9yMiBjb29yZGluYXRlcyB3aXRoIHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgY29weUZyb21GbG9hdHMoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgVmVjdG9yMiBjb29yZGluYXRlcyB3aXRoIHRoZSBnaXZlbiBmbG9hdHNcbiAgICAgKiBAcGFyYW0geCAtIGRlZmluZXMgdGhlIGZpcnN0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0geSAtIGRlZmluZXMgdGhlIHNlY29uZCBjb29yZGluYXRlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgc2V0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29weUZyb21GbG9hdHMoeCwgeSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhbm90aGVyIHZlY3RvciB3aXRoIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2V0IHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjIgYW5kIHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKi9cbiAgICBhZGQob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCArIG90aGVyVmVjdG9yLngsIHRoaXMueSArIG90aGVyVmVjdG9yLnkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBcInJlc3VsdFwiIGNvb3JkaW5hdGVzIHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IFZlY3RvcjIgYW5kIHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIGFkZFRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggKyBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSArIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMgYnkgYWRkaW5nIHRoZSBnaXZlbiBWZWN0b3IyIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgYWRkSW5QbGFjZShvdGhlclZlY3Rvcikge1xuICAgICAgICB0aGlzLnggKz0gb3RoZXJWZWN0b3IueDtcbiAgICAgICAgdGhpcy55ICs9IG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjIgYnkgYWRkaW5nIHRoZSBjdXJyZW50IFZlY3RvcjIgY29vcmRpbmF0ZXMgdG8gdGhlIGdpdmVuIFZlY3RvcjMgeCwgeSBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBhZGRWZWN0b3IzKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnggKyBvdGhlclZlY3Rvci54LCB0aGlzLnkgKyBvdGhlclZlY3Rvci55KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIGNvb3JkaW5hdGVzIG9mIHRoZSBnaXZlbiBvbmUgZnJvbSB0aGUgY3VycmVudCBWZWN0b3IyXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIHN1YnRyYWN0KG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnggLSBvdGhlclZlY3Rvci54LCB0aGlzLnkgLSBvdGhlclZlY3Rvci55KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgXCJyZXN1bHRcIiBjb29yZGluYXRlcyB3aXRoIHRoZSBzdWJ0cmFjdGlvbiBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgVmVjdG9yMiBjb29yZGluYXRlcy5cbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIHN1YnRyYWN0VG9SZWYob3RoZXJWZWN0b3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCAtIG90aGVyVmVjdG9yLng7XG4gICAgICAgIHJlc3VsdC55ID0gdGhpcy55IC0gb3RoZXJWZWN0b3IueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgVmVjdG9yMiBjb29yZGluYXRlcyBieSBzdWJ0cmFjdGluZyBmcm9tIGl0IHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBzdWJ0cmFjdEluUGxhY2Uob3RoZXJWZWN0b3IpIHtcbiAgICAgICAgdGhpcy54IC09IG90aGVyVmVjdG9yLng7XG4gICAgICAgIHRoaXMueSAtPSBvdGhlclZlY3Rvci55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBpbiBwbGFjZSB0aGUgY3VycmVudCBWZWN0b3IyIGNvb3JkaW5hdGVzIGJ5IHRoZSBnaXZlbiBvbmVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBWZWN0b3IyXG4gICAgICovXG4gICAgbXVsdGlwbHlJblBsYWNlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHRoaXMueCAqPSBvdGhlclZlY3Rvci54O1xuICAgICAgICB0aGlzLnkgKj0gb3RoZXJWZWN0b3IueTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgVmVjdG9yMiBzZXQgd2l0aCB0aGUgbXVsdGlwbGljYXRpb24gb2YgdGhlIGN1cnJlbnQgVmVjdG9yMiBhbmQgdGhlIGdpdmVuIG9uZSBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBtdWx0aXBseShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54ICogb3RoZXJWZWN0b3IueCwgdGhpcy55ICogb3RoZXJWZWN0b3IueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgXCJyZXN1bHRcIiBjb29yZGluYXRlcyB3aXRoIHRoZSBtdWx0aXBsaWNhdGlvbiBvZiB0aGUgY3VycmVudCBWZWN0b3IyIGFuZCB0aGUgZ2l2ZW4gb25lIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIHRhcmdldCB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBjdXJyZW50IFZlY3RvcjJcbiAgICAgKi9cbiAgICBtdWx0aXBseVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggKiBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmV3IFZlY3RvcjIgc2V0IHdpdGggdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMgbXVsdGlwbGllZCBieSB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHggLSBkZWZpbmVzIHRoZSBmaXJzdCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHkgLSBkZWZpbmVzIHRoZSBzZWNvbmQgY29vcmRpbmF0ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBtdWx0aXBseUJ5RmxvYXRzKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMueCAqIHgsIHRoaXMueSAqIHkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2V0IHdpdGggdGhlIFZlY3RvcjIgY29vcmRpbmF0ZXMgZGl2aWRlZCBieSB0aGUgZ2l2ZW4gb25lIGNvb3JkaW5hdGVzXG4gICAgICogQHBhcmFtIG90aGVyVmVjdG9yIC0gZGVmaW5lcyB0aGUgb3RoZXIgdmVjdG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIGRpdmlkZShvdGhlclZlY3Rvcikge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54IC8gb3RoZXJWZWN0b3IueCwgdGhpcy55IC8gb3RoZXJWZWN0b3IueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIFwicmVzdWx0XCIgY29vcmRpbmF0ZXMgd2l0aCB0aGUgVmVjdG9yMiBkaXZpZGVkIGJ5IHRoZSBnaXZlbiBvbmUgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgdGFyZ2V0IHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIGRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnggPSB0aGlzLnggLyBvdGhlclZlY3Rvci54O1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAvIG90aGVyVmVjdG9yLnk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIHRoZSBjdXJyZW50IFZlY3RvcjIgY29vcmRpbmF0ZXMgYnkgdGhlIGdpdmVuIG9uZXNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBkaXZpZGVJblBsYWNlKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpdmlkZVRvUmVmKG90aGVyVmVjdG9yLCB0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIHdpdGggY3VycmVudCBWZWN0b3IyIG5lZ2F0ZWQgY29vcmRpbmF0ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBWZWN0b3IyXG4gICAgICovXG4gICAgbmVnYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoLXRoaXMueCwgLXRoaXMueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHRoZSBWZWN0b3IyIGNvb3JkaW5hdGVzIGJ5IHNjYWxlXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIFZlY3RvcjJcbiAgICAgKi9cbiAgICBzY2FsZUluUGxhY2Uoc2NhbGUpIHtcbiAgICAgICAgdGhpcy54ICo9IHNjYWxlO1xuICAgICAgICB0aGlzLnkgKj0gc2NhbGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IFZlY3RvcjIgc2NhbGVkIGJ5IFwic2NhbGVcIiBmcm9tIHRoZSBjdXJyZW50IFZlY3RvcjJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsaW5nIGZhY3RvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBzY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgVmVjdG9yMigwLCAwKTtcbiAgICAgICAgdGhpcy5zY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgY3VycmVudCBWZWN0b3IyIHZhbHVlcyBieSBhIGZhY3RvciB0byBhIGdpdmVuIFZlY3RvcjJcbiAgICAgKiBAcGFyYW0gc2NhbGUgLSBkZWZpbmVzIHRoZSBzY2FsZSBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgVmVjdG9yMiBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgVmVjdG9yMlxuICAgICAqL1xuICAgIHNjYWxlVG9SZWYoc2NhbGUsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQueCA9IHRoaXMueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSA9IHRoaXMueSAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgdGhlIGN1cnJlbnQgVmVjdG9yMiB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gVmVjdG9yMlxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxlIGZhY3RvclxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBWZWN0b3IyIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBWZWN0b3IyXG4gICAgICovXG4gICAgc2NhbGVBbmRBZGRUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC54ICs9IHRoaXMueCAqIHNjYWxlO1xuICAgICAgICByZXN1bHQueSArPSB0aGlzLnkgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBib29sZWFuIGlmIHR3byB2ZWN0b3JzIGFyZSBlcXVhbHNcbiAgICAgKiBAcGFyYW0gb3RoZXJWZWN0b3IgLSBkZWZpbmVzIHRoZSBvdGhlciB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2ZWN0b3IgY29vcmRpbmF0ZXMgc3RyaWN0bHkgZXF1YWwgdGhlIGN1cnJlbnQgVmVjdG9yMiBvbmVzXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBvdGhlclZlY3RvciAmJiB0aGlzLnggPT09IG90aGVyVmVjdG9yLnggJiYgdGhpcy55ID09PSBvdGhlclZlY3Rvci55O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgYm9vbGVhbiBpZiB0d28gdmVjdG9ycyBhcmUgZXF1YWxzICh1c2luZyBhbiBlcHNpbG9uIHZhbHVlKVxuICAgICAqIEBwYXJhbSBvdGhlclZlY3RvciAtIGRlZmluZXMgdGhlIG90aGVyIHZlY3RvclxuICAgICAqIEBwYXJhbSBlcHNpbG9uIC0gZGVmaW5lcyB0aGUgbWluaW1hbCBkaXN0YW5jZSB0byBjb25zaWRlciBlcXVhbGl0eVxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZlY3RvciBjb29yZGluYXRlcyBhcmUgY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lcyBieSBhIGRpc3RhbmNlIG9mIGVwc2lsb24uXG4gICAgICovXG4gICAgZXF1YWxzV2l0aEVwc2lsb24ob3RoZXJWZWN0b3IsIGVwc2lsb24gPSB0eXBlc18xLkVwc2lsb24pIHtcbiAgICAgICAgcmV0dXJuIChvdGhlclZlY3RvciAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy54LCBvdGhlclZlY3Rvci54LCBlcHNpbG9uKSAmJlxuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24odGhpcy55LCBvdGhlclZlY3Rvci55LCBlcHNpbG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuZXcgVmVjdG9yMiBmcm9tIGN1cnJlbnQgVmVjdG9yMiBmbG9vcmVkIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjJcbiAgICAgKi9cbiAgICBmbG9vcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKE1hdGguZmxvb3IodGhpcy54KSwgTWF0aC5mbG9vcih0aGlzLnkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIGZyb20gY3VycmVudCBWZWN0b3IyIGZsb29yZWQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIGZyYWN0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54IC0gTWF0aC5mbG9vcih0aGlzLngpLCB0aGlzLnkgLSBNYXRoLmZsb29yKHRoaXMueSkpO1xuICAgIH1cbiAgICAvLyBQcm9wZXJ0aWVzXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGVuZ3RoIG9mIHRoZSB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdmVjdG9yIGxlbmd0aCAoZmxvYXQpXG4gICAgICovXG4gICAgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZlY3RvciBzcXVhcmVkIGxlbmd0aFxuICAgICAqIEByZXR1cm5zIHRoZSB2ZWN0b3Igc3F1YXJlZCBsZW5ndGggKGZsb2F0KVxuICAgICAqL1xuICAgIGxlbmd0aFNxdWFyZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG4gICAgfVxuICAgIC8vIE1ldGhvZHNcbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgVmVjdG9yMlxuICAgICAqL1xuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbnVtID0gMS4wIC8gbGVuO1xuICAgICAgICB0aGlzLnggKj0gbnVtO1xuICAgICAgICB0aGlzLnkgKj0gbnVtO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5ldyBWZWN0b3IyIGNvcGllZCBmcm9tIHRoZSBWZWN0b3IyXG4gICAgICogQHJldHVybnMgYSBuZXcgVmVjdG9yMlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbn1cbmV4cG9ydHMuVmVjdG9yMiA9IFZlY3RvcjI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WZWN0b3IyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BcmMyID0gdm9pZCAwO1xuY29uc3QgQW5nbGVfMSA9IHJlcXVpcmUoXCIuL0FuZ2xlXCIpO1xuY29uc3QgVmVjdG9yMl8xID0gcmVxdWlyZShcIi4vVmVjdG9yMlwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogVGhpcyByZXByZXNlbnRzIGFuIGFyYyBpbiBhIDJkIHNwYWNlLlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBBcmMyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIEFyYyBvYmplY3QgZnJvbSB0aGUgdGhyZWUgZ2l2ZW4gcG9pbnRzIDogc3RhcnQsIG1pZGRsZSBhbmQgZW5kLlxuICAgICAqIEBwYXJhbSBzdGFydFBvaW50IC0gRGVmaW5lcyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyY1xuICAgICAqIEBwYXJhbSBtaWRQb2ludCAtIERlZmluZXMgdGhlIG1pZGxsZSBwb2ludCBvZiB0aGUgYXJjXG4gICAgICogQHBhcmFtIGVuZFBvaW50IC0gRGVmaW5lcyB0aGUgZW5kIHBvaW50IG9mIHRoZSBhcmNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKiogRGVmaW5lcyB0aGUgc3RhcnQgcG9pbnQgb2YgdGhlIGFyYyAqL1xuICAgIHN0YXJ0UG9pbnQsIFxuICAgIC8qKiBEZWZpbmVzIHRoZSBtaWQgcG9pbnQgb2YgdGhlIGFyYyAqL1xuICAgIG1pZFBvaW50LCBcbiAgICAvKiogRGVmaW5lcyB0aGUgZW5kIHBvaW50IG9mIHRoZSBhcmMgKi9cbiAgICBlbmRQb2ludCkge1xuICAgICAgICB0aGlzLnN0YXJ0UG9pbnQgPSBzdGFydFBvaW50O1xuICAgICAgICB0aGlzLm1pZFBvaW50ID0gbWlkUG9pbnQ7XG4gICAgICAgIHRoaXMuZW5kUG9pbnQgPSBlbmRQb2ludDtcbiAgICAgICAgY29uc3QgdGVtcCA9IE1hdGgucG93KG1pZFBvaW50LngsIDIpICsgTWF0aC5wb3cobWlkUG9pbnQueSwgMik7XG4gICAgICAgIGNvbnN0IHN0YXJ0VG9NaWQgPSAoTWF0aC5wb3coc3RhcnRQb2ludC54LCAyKSArIE1hdGgucG93KHN0YXJ0UG9pbnQueSwgMikgLSB0ZW1wKSAvIDI7XG4gICAgICAgIGNvbnN0IG1pZFRvRW5kID0gKHRlbXAgLSBNYXRoLnBvdyhlbmRQb2ludC54LCAyKSAtIE1hdGgucG93KGVuZFBvaW50LnksIDIpKSAvIDI7XG4gICAgICAgIGNvbnN0IGRldCA9IChzdGFydFBvaW50LnggLSBtaWRQb2ludC54KSAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLVxuICAgICAgICAgICAgKG1pZFBvaW50LnggLSBlbmRQb2ludC54KSAqIChzdGFydFBvaW50LnkgLSBtaWRQb2ludC55KTtcbiAgICAgICAgdGhpcy5jZW50ZXJQb2ludCA9IG5ldyBWZWN0b3IyXzEuVmVjdG9yMigoc3RhcnRUb01pZCAqIChtaWRQb2ludC55IC0gZW5kUG9pbnQueSkgLVxuICAgICAgICAgICAgbWlkVG9FbmQgKiAoc3RhcnRQb2ludC55IC0gbWlkUG9pbnQueSkpIC9cbiAgICAgICAgICAgIGRldCwgKChzdGFydFBvaW50LnggLSBtaWRQb2ludC54KSAqIG1pZFRvRW5kIC1cbiAgICAgICAgICAgIChtaWRQb2ludC54IC0gZW5kUG9pbnQueCkgKiBzdGFydFRvTWlkKSAvXG4gICAgICAgICAgICBkZXQpO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHRoaXMuY2VudGVyUG9pbnQuc3VidHJhY3QodGhpcy5zdGFydFBvaW50KS5sZW5ndGgoKTtcbiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gQW5nbGVfMS5BbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMuc3RhcnRQb2ludCk7XG4gICAgICAgIGNvbnN0IGExID0gdGhpcy5zdGFydEFuZ2xlLmRlZ3JlZXMoKTtcbiAgICAgICAgbGV0IGEyID0gQW5nbGVfMS5BbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMubWlkUG9pbnQpLmRlZ3JlZXMoKTtcbiAgICAgICAgbGV0IGEzID0gQW5nbGVfMS5BbmdsZS5CZXR3ZWVuVHdvUG9pbnRzKHRoaXMuY2VudGVyUG9pbnQsIHRoaXMuZW5kUG9pbnQpLmRlZ3JlZXMoKTtcbiAgICAgICAgLy8gYW5nbGVzIGNvcnJlY3Rpb25cbiAgICAgICAgaWYgKGEyIC0gYTEgPiArMTgwLjApIHtcbiAgICAgICAgICAgIGEyIC09IDM2MC4wO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhMiAtIGExIDwgLTE4MC4wKSB7XG4gICAgICAgICAgICBhMiArPSAzNjAuMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYTMgLSBhMiA+ICsxODAuMCkge1xuICAgICAgICAgICAgYTMgLT0gMzYwLjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEzIC0gYTIgPCAtMTgwLjApIHtcbiAgICAgICAgICAgIGEzICs9IDM2MC4wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3JpZW50YXRpb24gPSBhMiAtIGExIDwgMCA/IHR5cGVzXzEuT3JpZW50YXRpb24uQ1cgOiB0eXBlc18xLk9yaWVudGF0aW9uLkNDVztcbiAgICAgICAgdGhpcy5hbmdsZSA9IEFuZ2xlXzEuQW5nbGUuRnJvbURlZ3JlZXModGhpcy5vcmllbnRhdGlvbiA9PT0gdHlwZXNfMS5PcmllbnRhdGlvbi5DVyA/IGExIC0gYTMgOiBhMyAtIGExKTtcbiAgICB9XG59XG5leHBvcnRzLkFyYzIgPSBBcmMyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXJjMi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXhpcyA9IHZvaWQgMDtcbmNvbnN0IFZlY3RvcjNfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjNcIik7XG4vKipcbiAqIERlZmluZXMgdGhlIDMgbWFpbiBheGVzXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEF4aXMge1xufVxuZXhwb3J0cy5BeGlzID0gQXhpcztcbi8qKiBYIGF4aXMgKi9cbkF4aXMuWCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygxLjAsIDAuMCwgMC4wKTtcbi8qKiBZIGF4aXMgKi9cbkF4aXMuWSA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIDEuMCwgMC4wKTtcbi8qKiBaIGF4aXMgKi9cbkF4aXMuWiA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUF4aXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJlemllckN1cnZlID0gdm9pZCAwO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIHJlcHJlc2VudCBhIEJlemllciBjdXJ2ZVxuICogQHB1YmxpY1xuICovXG5jbGFzcyBCZXppZXJDdXJ2ZSB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3ViaWMgQmV6aWVyIGludGVycG9sYXRlZCB2YWx1ZSAoZmxvYXQpIGF0IFwidFwiIChmbG9hdCkgZnJvbSB0aGUgZ2l2ZW4geDEsIHkxLCB4MiwgeTIgZmxvYXRzXG4gICAgICogQHBhcmFtIHQgLSBkZWZpbmVzIHRoZSB0aW1lXG4gICAgICogQHBhcmFtIHgxIC0gZGVmaW5lcyB0aGUgbGVmdCBjb29yZGluYXRlIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5MSAtIGRlZmluZXMgdGhlIGxlZnQgY29vcmRpbmF0ZSBvbiBZIGF4aXNcbiAgICAgKiBAcGFyYW0geDIgLSBkZWZpbmVzIHRoZSByaWdodCBjb29yZGluYXRlIG9uIFggYXhpc1xuICAgICAqIEBwYXJhbSB5MiAtIGRlZmluZXMgdGhlIHJpZ2h0IGNvb3JkaW5hdGUgb24gWSBheGlzXG4gICAgICogQHJldHVybnMgdGhlIGludGVycG9sYXRlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBJbnRlcnBvbGF0ZSh0LCB4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICAvLyBFeHRyYWN0IFggKHdoaWNoIGlzIGVxdWFsIHRvIHRpbWUgaGVyZSlcbiAgICAgICAgY29uc3QgZjAgPSAxIC0gMyAqIHgyICsgMyAqIHgxO1xuICAgICAgICBjb25zdCBmMSA9IDMgKiB4MiAtIDYgKiB4MTtcbiAgICAgICAgY29uc3QgZjIgPSAzICogeDE7XG4gICAgICAgIGxldCByZWZpbmVkVCA9IHQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZWZpbmVkVDIgPSByZWZpbmVkVCAqIHJlZmluZWRUO1xuICAgICAgICAgICAgY29uc3QgcmVmaW5lZFQzID0gcmVmaW5lZFQyICogcmVmaW5lZFQ7XG4gICAgICAgICAgICBjb25zdCB4ID0gZjAgKiByZWZpbmVkVDMgKyBmMSAqIHJlZmluZWRUMiArIGYyICogcmVmaW5lZFQ7XG4gICAgICAgICAgICBjb25zdCBzbG9wZSA9IDEuMCAvICgzLjAgKiBmMCAqIHJlZmluZWRUMiArIDIuMCAqIGYxICogcmVmaW5lZFQgKyBmMik7XG4gICAgICAgICAgICByZWZpbmVkVCAtPSAoeCAtIHQpICogc2xvcGU7XG4gICAgICAgICAgICByZWZpbmVkVCA9IE1hdGgubWluKDEsIE1hdGgubWF4KDAsIHJlZmluZWRUKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzb2x2ZSBjdWJpYyBiZXppZXIgZm9yIHRoZSBnaXZlbiB4XG4gICAgICAgIHJldHVybiAoMyAqIE1hdGgucG93KDEgLSByZWZpbmVkVCwgMikgKiByZWZpbmVkVCAqIHkxICtcbiAgICAgICAgICAgIDMgKiAoMSAtIHJlZmluZWRUKSAqIE1hdGgucG93KHJlZmluZWRULCAyKSAqIHkyICtcbiAgICAgICAgICAgIE1hdGgucG93KHJlZmluZWRULCAzKSk7XG4gICAgfVxufVxuZXhwb3J0cy5CZXppZXJDdXJ2ZSA9IEJlemllckN1cnZlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmV6aWVyQ3VydmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbG9yNCA9IHZvaWQgMDtcbmNvbnN0IFNjYWxhcl8xID0gcmVxdWlyZShcIi4vU2NhbGFyXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIGhvbGQgYSBSQkdBIGNvbG9yXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIENvbG9yNCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjQgb2JqZWN0IGZyb20gcmVkLCBncmVlbiwgYmx1ZSB2YWx1ZXMsIGFsbCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDEpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgciA9IDAsIFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgZyA9IDAsIFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMClcbiAgICAgKi9cbiAgICBiID0gMCwgXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IChiZXR3ZWVuIDAgYW5kIDEsIGRlZmF1bHQgaXMgMSlcbiAgICAgKi9cbiAgICBhID0gMSkge1xuICAgICAgICB0aGlzLnIgPSByO1xuICAgICAgICB0aGlzLmcgPSBnO1xuICAgICAgICB0aGlzLmIgPSBiO1xuICAgICAgICB0aGlzLmEgPSBhO1xuICAgIH1cbiAgICAvLyBTdGF0aWNzXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjQgZnJvbSB0aGUgc3RyaW5nIGNvbnRhaW5pbmcgdmFsaWQgaGV4YWRlY2ltYWwgdmFsdWVzXG4gICAgICogQHBhcmFtIGhleCAtIGRlZmluZXMgYSBzdHJpbmcgY29udGFpbmluZyB2YWxpZCBoZXhhZGVjaW1hbCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEZyb21IZXhTdHJpbmcoaGV4KSB7XG4gICAgICAgIGlmIChoZXguc3Vic3RyaW5nKDAsIDEpICE9PSAnIycgfHwgaGV4Lmxlbmd0aCAhPT0gOSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygxLCAzKSwgMTYpO1xuICAgICAgICBjb25zdCBnID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygzLCA1KSwgMTYpO1xuICAgICAgICBjb25zdCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg1LCA3KSwgMTYpO1xuICAgICAgICBjb25zdCBhID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg3LCA5KSwgMTYpO1xuICAgICAgICByZXR1cm4gQ29sb3I0LkZyb21JbnRzKHIsIGcsIGIsIGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCBvYmplY3Qgc2V0IHdpdGggdGhlIGxpbmVhcmx5IGludGVycG9sYXRlZCB2YWx1ZXMgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBsZWZ0IENvbG9yNCBvYmplY3QgYW5kIHRoZSByaWdodCBDb2xvcjQgb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIExlcnAobGVmdCwgcmlnaHQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQ29sb3I0KDAuMCwgMC4wLCAwLjAsIDAuMCk7XG4gICAgICAgIENvbG9yNC5MZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBnaXZlbiBcInJlc3VsdFwiIHdpdGggdGhlIGxpbmVhcmx5IGludGVycG9sYXRlZCB2YWx1ZXMgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBsZWZ0IENvbG9yNCBvYmplY3QgYW5kIHRoZSByaWdodCBDb2xvcjQgb2JqZWN0XG4gICAgICogQHBhcmFtIGxlZnQgLSBkZWZpbmVzIHRoZSBzdGFydCB2YWx1ZVxuICAgICAqIEBwYXJhbSByaWdodCAtIGRlZmluZXMgdGhlIGVuZCB2YWx1ZVxuICAgICAqIEBwYXJhbSBhbW91bnQgLSBkZWZpbmVzIHRoZSBncmFkaWVudCBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSBkYXRhXG4gICAgICovXG4gICAgc3RhdGljIExlcnBUb1JlZihsZWZ0LCByaWdodCwgYW1vdW50LCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSBsZWZ0LnIgKyAocmlnaHQuciAtIGxlZnQucikgKiBhbW91bnQ7XG4gICAgICAgIHJlc3VsdC5nID0gbGVmdC5nICsgKHJpZ2h0LmcgLSBsZWZ0LmcpICogYW1vdW50O1xuICAgICAgICByZXN1bHQuYiA9IGxlZnQuYiArIChyaWdodC5iIC0gbGVmdC5iKSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LmEgPSBsZWZ0LmEgKyAocmlnaHQuYSAtIGxlZnQuYSkgKiBhbW91bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHJlZCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUmVkKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNCgxLjAsIDAsIDAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGdyZWVuIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBHcmVlbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMCwgMS4wLCAwLCAxLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSBibHVlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBCbHVlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNCgwLCAwLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGJsYWNrIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBCbGFjaygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMCwgMCwgMCwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHdoaXRlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBXaGl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMSwgMSwgMSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHB1cnBsZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUHVycGxlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNCgwLjUsIDAsIDAuNSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIG1hZ2VudGEgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIE1hZ2VudGEoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDEsIDAsIDEsIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSB5ZWxsb3cgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIFllbGxvdygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoMSwgMSwgMCwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIGdyYXkgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEdyYXkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDAuNSwgMC41LCAwLjUsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjQgdmFsdWUgY29udGFpbmluZyBhIHRlYWwgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIFRlYWwoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDAsIDEuMCwgMS4wLCAxLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3I0IHZhbHVlIGNvbnRhaW5pbmcgYSB0cmFuc3BhcmVudCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgQ2xlYXIoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KDAsIDAsIDAsIDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCBmcm9tIGEgQ29sb3IzIGFuZCBhbiBhbHBoYSB2YWx1ZVxuICAgICAqIEBwYXJhbSBjb2xvcjMgLSBkZWZpbmVzIHRoZSBzb3VyY2UgQ29sb3IzIHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBhbHBoYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCAoMS4wIGJ5IGRlZmF1bHQpXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQ29sb3IzKGNvbG9yMywgYWxwaGEgPSAxLjApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQoY29sb3IzLnIsIGNvbG9yMy5nLCBjb2xvcjMuYiwgYWxwaGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBlbGVtZW50IG9mIHRoZSBnaXZlbiBhcnJheVxuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIHNvdXJjZSBhcnJheSB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEZyb21BcnJheShhcnJheSwgb2Zmc2V0ID0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNChhcnJheVtvZmZzZXRdLCBhcnJheVtvZmZzZXQgKyAxXSwgYXJyYXlbb2Zmc2V0ICsgMl0sIGFycmF5W29mZnNldCArIDNdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgZnJvbSBpbnRlZ2VyIHZhbHVlcyAobGVzcyB0aGFuIDI1NilcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCB0byByZWFkIGZyb20gKHZhbHVlIGJldHdlZW4gMCBhbmQgMjU1KVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUludHMociwgZywgYiwgYSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yNChyIC8gMjU1LjAsIGcgLyAyNTUuMCwgYiAvIDI1NS4wLCBhIC8gMjU1LjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGUgY29udGVudCBvZiBhIGdpdmVuIGFycmF5IGFuZCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IGNvbnRhaW5pbmcgUkdCQSBkYXRhXG4gICAgICogSWYgdGhlIG9yaWdpbmFsIGFycmF5IHdhcyBhbHJlYWR5IGNvbnRhaW5pbmcgY291bnQgKiA0IHZhbHVlcyB0aGVuIGl0IGlzIHJldHVybmVkIGRpcmVjdGx5XG4gICAgICogQHBhcmFtIGNvbG9ycyAtIGRlZmluZXMgdGhlIGFycmF5IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIGNvdW50IC0gZGVmaW5lcyB0aGUgbnVtYmVyIG9mIFJHQkEgZGF0YSB0byBleHBlY3RcbiAgICAgKiBAcmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIGNvdW50ICogNCB2YWx1ZXMgKFJHQkEpXG4gICAgICovXG4gICAgc3RhdGljIENoZWNrQ29sb3JzNChjb2xvcnMsIGNvdW50KSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGNvbG9yMyB3YXMgdXNlZFxuICAgICAgICBpZiAoY29sb3JzLmxlbmd0aCA9PT0gY291bnQgKiAzKSB7XG4gICAgICAgICAgICBjb25zdCBjb2xvcnM0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY29sb3JzLmxlbmd0aDsgaW5kZXggKz0gMykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gKGluZGV4IC8gMykgKiA0O1xuICAgICAgICAgICAgICAgIGNvbG9yczRbbmV3SW5kZXhdID0gY29sb3JzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb2xvcnM0W25ld0luZGV4ICsgMV0gPSBjb2xvcnNbaW5kZXggKyAxXTtcbiAgICAgICAgICAgICAgICBjb2xvcnM0W25ld0luZGV4ICsgMl0gPSBjb2xvcnNbaW5kZXggKyAyXTtcbiAgICAgICAgICAgICAgICBjb2xvcnM0W25ld0luZGV4ICsgM10gPSAxLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29sb3JzNDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3JzO1xuICAgIH1cbiAgICAvLyBPcGVyYXRvcnNcbiAgICAvKipcbiAgICAgKiBBZGRzIGluIHBsYWNlIHRoZSBnaXZlbiBDb2xvcjQgdmFsdWVzIHRvIHRoZSBjdXJyZW50IENvbG9yNCBvYmplY3RcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIGFkZEluUGxhY2UocmlnaHQpIHtcbiAgICAgICAgdGhpcy5yICs9IHJpZ2h0LnI7XG4gICAgICAgIHRoaXMuZyArPSByaWdodC5nO1xuICAgICAgICB0aGlzLmIgKz0gcmlnaHQuYjtcbiAgICAgICAgdGhpcy5hICs9IHJpZ2h0LmE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IHBvcHVsYXRlZCB3aXRoIDQgbnVtZXJpYyBlbGVtZW50cyA6IHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgYXJyYXlcbiAgICAgKi9cbiAgICBhc0FycmF5KCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy50b0FycmF5KHJlc3VsdCwgMCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBpbiB0aGUgZ2l2ZW4gYXJyYXkgdGhlIENvbG9yNCBzdWNjZXNzaXZlIHZhbHVlc1xuICAgICAqIEBwYXJhbSBhcnJheSAtIGRlZmluZXMgdGhlIGFycmF5IHdoZXJlIHRvIHN0b3JlIHRoZSByLGcsYiBjb21wb25lbnRzXG4gICAgICogQHBhcmFtIGluZGV4IC0gZGVmaW5lcyBhbiBvcHRpb25hbCBpbmRleCBpbiB0aGUgdGFyZ2V0IGFycmF5IHRvIGRlZmluZSB3aGVyZSB0byBzdGFydCBzdG9yaW5nIHZhbHVlc1xuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICB0b0FycmF5KGFycmF5LCBpbmRleCA9IDApIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdGhpcy5yO1xuICAgICAgICBhcnJheVtpbmRleCArIDFdID0gdGhpcy5nO1xuICAgICAgICBhcnJheVtpbmRleCArIDJdID0gdGhpcy5iO1xuICAgICAgICBhcnJheVtpbmRleCArIDNdID0gdGhpcy5hO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjQgc2V0IHdpdGggdGhlIGFkZGVkIHZhbHVlcyBvZiB0aGUgY3VycmVudCBDb2xvcjQgYW5kIG9mIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBhZGQocmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yICsgcmlnaHQuciwgdGhpcy5nICsgcmlnaHQuZywgdGhpcy5iICsgcmlnaHQuYiwgdGhpcy5hICsgcmlnaHQuYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3I0IHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgQ29sb3I0XG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgc3VidHJhY3QocmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yIC0gcmlnaHQuciwgdGhpcy5nIC0gcmlnaHQuZywgdGhpcy5iIC0gcmlnaHQuYiwgdGhpcy5hIC0gcmlnaHQuYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgZ2l2ZW4gb25lcyBmcm9tIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0cyBpbiBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHJpZ2h0IC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHN1YnRyYWN0VG9SZWYocmlnaHQsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHRoaXMuciAtIHJpZ2h0LnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nIC0gcmlnaHQuZztcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgLSByaWdodC5iO1xuICAgICAgICByZXN1bHQuYSA9IHRoaXMuYSAtIHJpZ2h0LmE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yNCB3aXRoIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgbXVsdGlwbGllZCBieSBzY2FsZVxuICAgICAqIEBwYXJhbSBzY2FsZSAtIGRlZmluZXMgdGhlIHNjYWxpbmcgZmFjdG9yIHRvIGFwcGx5XG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHNjYWxlKHNjYWxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3I0KHRoaXMuciAqIHNjYWxlLCB0aGlzLmcgKiBzY2FsZSwgdGhpcy5iICogc2NhbGUsIHRoaXMuYSAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgY3VycmVudCBDb2xvcjQgdmFsdWVzIGJ5IHNjYWxlIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3IgdG8gYXBwbHlcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdW5tb2RpZmllZCBDb2xvcjRcbiAgICAgKi9cbiAgICBzY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmcgPSB0aGlzLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmEgPSB0aGlzLmEgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBjdXJyZW50IENvbG9yNCB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gQ29sb3I0XG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yNCBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgQ29sb3I0XG4gICAgICovXG4gICAgc2NhbGVBbmRBZGRUb1JlZihzY2FsZSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yICs9IHRoaXMuciAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuZyArPSB0aGlzLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgKz0gdGhpcy5iICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5hICs9IHRoaXMuYSAqIHNjYWxlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xhbXBzIHRoZSByZ2IgdmFsdWVzIGJ5IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGludG8gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBtaW4gLSBkZWZpbmVzIG1pbmltdW0gY2xhbXBpbmcgdmFsdWUgKGRlZmF1bHQgaXMgMClcbiAgICAgKiBAcGFyYW0gbWF4IC0gZGVmaW5lcyBtYXhpbXVtIGNsYW1waW5nIHZhbHVlIChkZWZhdWx0IGlzIDEpXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgY29sb3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvLlxuICAgICAqIEByZXR1cm5zIHRoZSBjdXVyZW50IENvbG9yNFxuICAgICAqL1xuICAgIGNsYW1wVG9SZWYobWluID0gMCwgbWF4ID0gMSwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gU2NhbGFyXzEuU2NhbGFyLkNsYW1wKHRoaXMuciwgbWluLCBtYXgpO1xuICAgICAgICByZXN1bHQuZyA9IFNjYWxhcl8xLlNjYWxhci5DbGFtcCh0aGlzLmcsIG1pbiwgbWF4KTtcbiAgICAgICAgcmVzdWx0LmIgPSBTY2FsYXJfMS5TY2FsYXIuQ2xhbXAodGhpcy5iLCBtaW4sIG1heCk7XG4gICAgICAgIHJlc3VsdC5hID0gU2NhbGFyXzEuU2NhbGFyLkNsYW1wKHRoaXMuYSwgbWluLCBtYXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlweSBhbiBDb2xvcjQgdmFsdWUgYnkgYW5vdGhlciBhbmQgcmV0dXJuIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKiBAcGFyYW0gY29sb3IgLSBkZWZpbmVzIHRoZSBDb2xvcjQgdmFsdWUgdG8gbXVsdGlwbHkgYnlcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgbXVsdGlwbHkoY29sb3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yICogY29sb3IuciwgdGhpcy5nICogY29sb3IuZywgdGhpcy5iICogY29sb3IuYiwgdGhpcy5hICogY29sb3IuYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcHkgYSBDb2xvcjQgdmFsdWUgYnkgYW5vdGhlciBhbmQgcHVzaCB0aGUgcmVzdWx0IGluIGEgcmVmZXJlbmNlIHZhbHVlXG4gICAgICogQHBhcmFtIGNvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IHZhbHVlIHRvIG11bHRpcGx5IGJ5XG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yNCB0byBmaWxsIHRoZSByZXN1bHQgaW5cbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzdWx0IENvbG9yNFxuICAgICAqL1xuICAgIG11bHRpcGx5VG9SZWYoY29sb3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHRoaXMuciAqIGNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nICogY29sb3IuZztcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgKiBjb2xvci5iO1xuICAgICAgICByZXN1bHQuYSA9IHRoaXMuYSAqIGNvbG9yLmE7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdHJpbmcgd2l0aCB0aGUgQ29sb3I0IGN1cnJlbnQgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKCd7UjogJyArIHRoaXMuciArICcgRzonICsgdGhpcy5nICsgJyBCOicgKyB0aGlzLmIgKyAnIEE6JyArIHRoaXMuYSArICd9Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0cmluZyBcIkNvbG9yNFwiXG4gICAgICogQHJldHVybnMgXCJDb2xvcjRcIlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdDb2xvcjQnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBDb2xvcjQgaGFzaCBjb2RlXG4gICAgICogQHJldHVybnMgYW4gdW5pcXVlIG51bWJlciB0aGF0IGNhbiBiZSB1c2VkIHRvIGhhc2ggQ29sb3I0IG9iamVjdHNcbiAgICAgKi9cbiAgICBnZXRIYXNoQ29kZSgpIHtcbiAgICAgICAgbGV0IGhhc2ggPSB0aGlzLnIgfHwgMDtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLmcgfHwgMCk7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy5iIHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuYSB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3I0IGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjQodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgdGhpcy5hKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBDb2xvcjQgdmFsdWVzIGludG8gdGhlIGN1cnJlbnQgb25lXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBDb2xvcjQgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgdXBkYXRlZCBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgY29weUZyb20oc291cmNlKSB7XG4gICAgICAgIHRoaXMuciA9IHNvdXJjZS5yO1xuICAgICAgICB0aGlzLmcgPSBzb3VyY2UuZztcbiAgICAgICAgdGhpcy5iID0gc291cmNlLmI7XG4gICAgICAgIHRoaXMuYSA9IHNvdXJjZS5hO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSBnaXZlbiBmbG9hdCB2YWx1ZXMgaW50byB0aGUgY3VycmVudCBvbmVcbiAgICAgKiBAcGFyYW0gciAtIGRlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYSAtIGRlZmluZXMgdGhlIGFscGhhIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCB1cGRhdGVkIENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICBjb3B5RnJvbUZsb2F0cyhyLCBnLCBiLCBhKSB7XG4gICAgICAgIHRoaXMuciA9IHI7XG4gICAgICAgIHRoaXMuZyA9IGc7XG4gICAgICAgIHRoaXMuYiA9IGI7XG4gICAgICAgIHRoaXMuYSA9IGE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIGZsb2F0IHZhbHVlcyBpbnRvIHRoZSBjdXJyZW50IG9uZVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBhIC0gZGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHVwZGF0ZWQgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHNldChyLCBnLCBiLCBhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcHlGcm9tRmxvYXRzKHIsIGcsIGIsIGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBDb2xvcjQgaGV4YWRlY2ltYWwgY29kZSBhcyBhIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb2xvcjQgb2JqZWN0XG4gICAgICovXG4gICAgdG9IZXhTdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGludFIgPSAodGhpcy5yICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEcgPSAodGhpcy5nICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEIgPSAodGhpcy5iICogMjU1KSB8IDA7XG4gICAgICAgIGNvbnN0IGludEEgPSAodGhpcy5hICogMjU1KSB8IDA7XG4gICAgICAgIHJldHVybiAoJyMnICtcbiAgICAgICAgICAgIFNjYWxhcl8xLlNjYWxhci5Ub0hleChpbnRSKSArXG4gICAgICAgICAgICBTY2FsYXJfMS5TY2FsYXIuVG9IZXgoaW50RykgK1xuICAgICAgICAgICAgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludEIpICtcbiAgICAgICAgICAgIFNjYWxhcl8xLlNjYWxhci5Ub0hleChpbnRBKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGEgbmV3IENvbG9yNCBjb252ZXJ0ZWQgZnJvbSB0aGUgY3VycmVudCBvbmUgdG8gbGluZWFyIHNwYWNlXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdFxuICAgICAqL1xuICAgIHRvTGluZWFyU3BhY2UoKSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZENvbG9yID0gbmV3IENvbG9yNCgpO1xuICAgICAgICB0aGlzLnRvTGluZWFyU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcik7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRDb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIENvbG9yNCB2YWx1ZXMgdG8gbGluZWFyIHNwYWNlIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiBcImNvbnZlcnRlZENvbG9yXCJcbiAgICAgKiBAcGFyYW0gY29udmVydGVkQ29sb3IgLSBkZWZpbmVzIHRoZSBDb2xvcjQgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSBsaW5lYXIgc3BhY2UgdmVyc2lvblxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIENvbG9yNFxuICAgICAqL1xuICAgIHRvTGluZWFyU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcikge1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5yID0gTWF0aC5wb3codGhpcy5yLCB0eXBlc18xLlRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5nID0gTWF0aC5wb3codGhpcy5nLCB0eXBlc18xLlRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5iID0gTWF0aC5wb3codGhpcy5iLCB0eXBlc18xLlRvTGluZWFyU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5hID0gdGhpcy5hO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYSBuZXcgQ29sb3I0IGNvbnZlcnRlZCBmcm9tIHRoZSBjdXJyZW50IG9uZSB0byBnYW1tYSBzcGFjZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICB0b0dhbW1hU3BhY2UoKSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZENvbG9yID0gbmV3IENvbG9yNCgpO1xuICAgICAgICB0aGlzLnRvR2FtbWFTcGFjZVRvUmVmKGNvbnZlcnRlZENvbG9yKTtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRlZENvbG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgQ29sb3I0IHZhbHVlcyB0byBnYW1tYSBzcGFjZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gXCJjb252ZXJ0ZWRDb2xvclwiXG4gICAgICogQHBhcmFtIGNvbnZlcnRlZENvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3I0IG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgZ2FtbWEgc3BhY2UgdmVyc2lvblxuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIENvbG9yNFxuICAgICAqL1xuICAgIHRvR2FtbWFTcGFjZVRvUmVmKGNvbnZlcnRlZENvbG9yKSB7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLnIgPSBNYXRoLnBvdyh0aGlzLnIsIHR5cGVzXzEuVG9HYW1tYVNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuZyA9IE1hdGgucG93KHRoaXMuZywgdHlwZXNfMS5Ub0dhbW1hU3BhY2UpO1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5iID0gTWF0aC5wb3codGhpcy5iLCB0eXBlc18xLlRvR2FtbWFTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmEgPSB0aGlzLmE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sb3I0ID0gQ29sb3I0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29sb3I0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvcjMgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBDb2xvcjRfMSA9IHJlcXVpcmUoXCIuL0NvbG9yNFwiKTtcbmNvbnN0IFNjYWxhcl8xID0gcmVxdWlyZShcIi4vU2NhbGFyXCIpO1xuLyoqXG4gKiBDbGFzcyB1c2VkIHRvIGhvbGQgYSBSQkcgY29sb3JcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgQ29sb3IzIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yMyBvYmplY3QgZnJvbSByZWQsIGdyZWVuLCBibHVlIHZhbHVlcywgYWxsIGJldHdlZW4gMCBhbmQgMVxuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHJlZCBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIHIgPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgKGJldHdlZW4gMCBhbmQgMSwgZGVmYXVsdCBpcyAwKVxuICAgICAqL1xuICAgIGcgPSAwLCBcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCAoYmV0d2VlbiAwIGFuZCAxLCBkZWZhdWx0IGlzIDApXG4gICAgICovXG4gICAgYiA9IDApIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5nID0gZztcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICB9XG4gICAgLy8gU3RhdGljc1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3IzIGZyb20gdGhlIHN0cmluZyBjb250YWluaW5nIHZhbGlkIGhleGFkZWNpbWFsIHZhbHVlc1xuICAgICAqIEBwYXJhbSBoZXggLSBkZWZpbmVzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsaWQgaGV4YWRlY2ltYWwgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tSGV4U3RyaW5nKGhleCkge1xuICAgICAgICBpZiAoaGV4LnN1YnN0cmluZygwLCAxKSAhPT0gJyMnIHx8IGhleC5sZW5ndGggIT09IDcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sb3IzKDAsIDAsIDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDEsIDMpLCAxNik7XG4gICAgICAgIGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDMsIDUpLCAxNik7XG4gICAgICAgIGNvbnN0IGIgPSBwYXJzZUludChoZXguc3Vic3RyaW5nKDUsIDcpLCAxNik7XG4gICAgICAgIHJldHVybiBDb2xvcjMuRnJvbUludHMociwgZywgYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yMyBmcm9tIHRoZSBzdGFydGluZyBpbmRleCBvZiB0aGUgZ2l2ZW4gYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBzb3VyY2UgYXJyYXlcbiAgICAgKiBAcGFyYW0gb2Zmc2V0IC0gZGVmaW5lcyBhbiBvZmZzZXQgaW4gdGhlIHNvdXJjZSBhcnJheVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbUFycmF5KGFycmF5LCBvZmZzZXQgPSAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKGFycmF5W29mZnNldF0sIGFycmF5W29mZnNldCArIDFdLCBhcnJheVtvZmZzZXQgKyAyXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3IzIGZyb20gaW50ZWdlciB2YWx1ZXMgKGxlc3MgdGhhbiAyNTYpXG4gICAgICogQHBhcmFtIHIgLSBkZWZpbmVzIHRoZSByZWQgY29tcG9uZW50IHRvIHJlYWQgZnJvbSAodmFsdWUgYmV0d2VlbiAwIGFuZCAyNTUpXG4gICAgICogQHBhcmFtIGcgLSBkZWZpbmVzIHRoZSBncmVlbiBjb21wb25lbnQgdG8gcmVhZCBmcm9tICh2YWx1ZSBiZXR3ZWVuIDAgYW5kIDI1NSlcbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbSAodmFsdWUgYmV0d2VlbiAwIGFuZCAyNTUpXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tSW50cyhyLCBnLCBiKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKHIgLyAyNTUuMCwgZyAvIDI1NS4wLCBiIC8gMjU1LjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9yMyB3aXRoIHZhbHVlcyBsaW5lYXJseSBpbnRlcnBvbGF0ZWQgb2YgXCJhbW91bnRcIiBiZXR3ZWVuIHRoZSBzdGFydCBDb2xvcjMgYW5kIHRoZSBlbmQgQ29sb3IzXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgQ29sb3IzIHZhbHVlXG4gICAgICogQHBhcmFtIGVuZCAtIGRlZmluZXMgdGhlIGVuZCBDb2xvcjMgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgdmFsdWUgYmV0d2VlbiBzdGFydCBhbmQgZW5kXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwKHN0YXJ0LCBlbmQsIGFtb3VudCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQ29sb3IzKDAuMCwgMC4wLCAwLjApO1xuICAgICAgICBDb2xvcjMuTGVycFRvUmVmKHN0YXJ0LCBlbmQsIGFtb3VudCwgcmVzdWx0KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgd2l0aCB2YWx1ZXMgbGluZWFybHkgaW50ZXJwb2xhdGVkIG9mIFwiYW1vdW50XCIgYmV0d2VlbiB0aGUgc3RhcnQgQ29sb3IzIGFuZCB0aGUgZW5kIENvbG9yM1xuICAgICAqIEBwYXJhbSBsZWZ0IC0gZGVmaW5lcyB0aGUgc3RhcnQgdmFsdWVcbiAgICAgKiBAcGFyYW0gcmlnaHQgLSBkZWZpbmVzIHRoZSBlbmQgdmFsdWVcbiAgICAgKiBAcGFyYW0gYW1vdW50IC0gZGVmaW5lcyB0aGUgZ3JhZGllbnQgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgdGhlIENvbG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICAgICAqL1xuICAgIHN0YXRpYyBMZXJwVG9SZWYobGVmdCwgcmlnaHQsIGFtb3VudCwgcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdC5yID0gbGVmdC5yICsgKHJpZ2h0LnIgLSBsZWZ0LnIpICogYW1vdW50O1xuICAgICAgICByZXN1bHQuZyA9IGxlZnQuZyArIChyaWdodC5nIC0gbGVmdC5nKSAqIGFtb3VudDtcbiAgICAgICAgcmVzdWx0LmIgPSBsZWZ0LmIgKyAocmlnaHQuYiAtIGxlZnQuYikgKiBhbW91bnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHJlZCBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUmVkKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygxLCAwLCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgZ3JlZW4gY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEdyZWVuKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygwLCAxLCAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIENvbG9yMyB2YWx1ZSBjb250YWluaW5nIGEgYmx1ZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgQmx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMCwgMCwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIGJsYWNrIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBCbGFjaygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMCwgMCwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHdoaXRlIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBXaGl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMSwgMSwgMSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHB1cnBsZSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUHVycGxlKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygwLjUsIDAsIDAuNSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIG1hZ2VudGEgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIE1hZ2VudGEoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKDEsIDAsIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSB5ZWxsb3cgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIFllbGxvdygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjMoMSwgMSwgMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIGdyYXkgY29sb3JcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgc3RhdGljIEdyYXkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IzKDAuNSwgMC41LCAwLjUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ29sb3IzIHZhbHVlIGNvbnRhaW5pbmcgYSB0ZWFsIGNvbG9yXG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHN0YXRpYyBUZWFsKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMygwLCAxLjAsIDEuMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDb2xvcjMgdmFsdWUgY29udGFpbmluZyBhIHJhbmRvbSBjb2xvclxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzdGF0aWMgUmFuZG9tKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyhNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpLCBNYXRoLnJhbmRvbSgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0cmluZyB3aXRoIHRoZSBDb2xvcjMgY3VycmVudCB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAne1I6ICcgKyB0aGlzLnIgKyAnIEc6JyArIHRoaXMuZyArICcgQjonICsgdGhpcy5iICsgJ30nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgXCJDb2xvcjNcIlxuICAgICAqIEByZXR1cm5zIFwiQ29sb3IzXCJcbiAgICAgKi9cbiAgICBnZXRDbGFzc05hbWUoKSB7XG4gICAgICAgIHJldHVybiAnQ29sb3IzJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgQ29sb3IzIGhhc2ggY29kZVxuICAgICAqIEByZXR1cm5zIGFuIHVuaXF1ZSBudW1iZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBoYXNoIENvbG9yMyBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy5yIHx8IDA7XG4gICAgICAgIGhhc2ggPSAoaGFzaCAqIDM5NykgXiAodGhpcy5nIHx8IDApO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuYiB8fCAwKTtcbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIC8vIE9wZXJhdG9yc1xuICAgIC8qKlxuICAgICAqIFN0b3JlcyBpbiB0aGUgZ2l2ZW4gYXJyYXkgZnJvbSB0aGUgZ2l2ZW4gc3RhcnRpbmcgaW5kZXggdGhlIHJlZCwgZ3JlZW4sIGJsdWUgdmFsdWVzIGFzIHN1Y2Nlc3NpdmUgZWxlbWVudHNcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSBkZWZpbmVzIHRoZSBhcnJheSB3aGVyZSB0byBzdG9yZSB0aGUgcixnLGIgY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSBpbmRleCAtIGRlZmluZXMgYW4gb3B0aW9uYWwgaW5kZXggaW4gdGhlIHRhcmdldCBhcnJheSB0byBkZWZpbmUgd2hlcmUgdG8gc3RhcnQgc3RvcmluZyB2YWx1ZXNcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgdG9BcnJheShhcnJheSwgaW5kZXggPSAwKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHRoaXMucjtcbiAgICAgICAgYXJyYXlbaW5kZXggKyAxXSA9IHRoaXMuZztcbiAgICAgICAgYXJyYXlbaW5kZXggKyAyXSA9IHRoaXMuYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgQ29sb3I0IG9iamVjdCBmcm9tIHRoZSBjdXJyZW50IENvbG9yMyBhbmQgdGhlIGdpdmVuIGFscGhhXG4gICAgICogQHBhcmFtIGFscGhhIC0gZGVmaW5lcyB0aGUgYWxwaGEgY29tcG9uZW50IG9uIHRoZSBuZXcgQ29sb3I0IG9iamVjdCAoZGVmYXVsdCBpcyAxKVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yNCBvYmplY3RcbiAgICAgKi9cbiAgICB0b0NvbG9yNChhbHBoYSA9IDEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjRfMS5Db2xvcjQodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgYWxwaGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IGFycmF5IHBvcHVsYXRlZCB3aXRoIDMgbnVtZXJpYyBlbGVtZW50cyA6IHJlZCwgZ3JlZW4gYW5kIGJsdWUgdmFsdWVzXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBhcnJheVxuICAgICAqL1xuICAgIGFzQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLnRvQXJyYXkocmVzdWx0LCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbHVtaW5hbmNlIHZhbHVlXG4gICAgICogQHJldHVybnMgYSBmbG9hdCB2YWx1ZVxuICAgICAqL1xuICAgIHRvTHVtaW5hbmNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yICogMC4zICsgdGhpcy5nICogMC41OSArIHRoaXMuYiAqIDAuMTE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IGVhY2ggQ29sb3IzIHJnYiB2YWx1ZXMgYnkgdGhlIGdpdmVuIENvbG9yMyByZ2IgdmFsdWVzIGluIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgbXVsdGlwbHkob3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgKiBvdGhlckNvbG9yLnIsIHRoaXMuZyAqIG90aGVyQ29sb3IuZywgdGhpcy5iICogb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdGhlIHJnYiB2YWx1ZXMgb2YgdGhlIENvbG9yMyBhbmQgdGhlIGdpdmVuIENvbG9yMyBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gdGhlIG9iamVjdCBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIHRoZSBDb2xvcjMgb2JqZWN0IHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBtdWx0aXBseVRvUmVmKG90aGVyQ29sb3IsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IHRoaXMuciAqIG90aGVyQ29sb3IucjtcbiAgICAgICAgcmVzdWx0LmcgPSB0aGlzLmcgKiBvdGhlckNvbG9yLmc7XG4gICAgICAgIHJlc3VsdC5iID0gdGhpcy5iICogb3RoZXJDb2xvci5iO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBlcXVhbGl0eSBiZXR3ZWVuIENvbG9yMyBvYmplY3RzXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJnYiB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuIChvdGhlckNvbG9yICYmXG4gICAgICAgICAgICB0aGlzLnIgPT09IG90aGVyQ29sb3IuciAmJlxuICAgICAgICAgICAgdGhpcy5nID09PSBvdGhlckNvbG9yLmcgJiZcbiAgICAgICAgICAgIHRoaXMuYiA9PT0gb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBlcXVhbGl0eSBiZXR3ZWVuIHRoZSBjdXJyZW50IENvbG9yMyBvYmplY3QgYW5kIGEgc2V0IG9mIHIsYixnIHZhbHVlc1xuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byBjaGVja1xuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIGIgLSBkZWZpbmVzIHRoZSBibHVlIGNvbXBvbmVudCB0byBjaGVja1xuICAgICAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJnYiB2YWx1ZXMgYXJlIGVxdWFsIHRvIHRoZSBnaXZlbiBvbmVzXG4gICAgICovXG4gICAgZXF1YWxzRmxvYXRzKHIsIGcsIGIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuciA9PT0gciAmJiB0aGlzLmcgPT09IGcgJiYgdGhpcy5iID09PSBiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIGluIHBsYWNlIGVhY2ggcmdiIHZhbHVlIGJ5IHNjYWxlXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBDb2xvcjNcbiAgICAgKi9cbiAgICBzY2FsZShzY2FsZSkge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgKiBzY2FsZSwgdGhpcy5nICogc2NhbGUsIHRoaXMuYiAqIHNjYWxlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgcmdiIHZhbHVlcyBieSBzY2FsZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGluZyBmYWN0b3JcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyB0aGUgQ29sb3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgcmVzdWx0XG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBzY2FsZVRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmcgPSB0aGlzLmcgKiBzY2FsZTtcbiAgICAgICAgcmVzdWx0LmIgPSB0aGlzLmIgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNjYWxlIHRoZSBjdXJyZW50IENvbG9yMyB2YWx1ZXMgYnkgYSBmYWN0b3IgYW5kIGFkZCB0aGUgcmVzdWx0IHRvIGEgZ2l2ZW4gQ29sb3IzXG4gICAgICogQHBhcmFtIHNjYWxlIC0gZGVmaW5lcyB0aGUgc2NhbGUgZmFjdG9yXG4gICAgICogQHBhcmFtIHJlc3VsdCAtIGRlZmluZXMgY29sb3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBzY2FsZUFuZEFkZFRvUmVmKHNjYWxlLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgKz0gdGhpcy5yICogc2NhbGU7XG4gICAgICAgIHJlc3VsdC5nICs9IHRoaXMuZyAqIHNjYWxlO1xuICAgICAgICByZXN1bHQuYiArPSB0aGlzLmIgKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsYW1wcyB0aGUgcmdiIHZhbHVlcyBieSB0aGUgbWluIGFuZCBtYXggdmFsdWVzIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbnRvIFwicmVzdWx0XCJcbiAgICAgKiBAcGFyYW0gbWluIC0gZGVmaW5lcyBtaW5pbXVtIGNsYW1waW5nIHZhbHVlIChkZWZhdWx0IGlzIDApXG4gICAgICogQHBhcmFtIG1heCAtIGRlZmluZXMgbWF4aW11bSBjbGFtcGluZyB2YWx1ZSAoZGVmYXVsdCBpcyAxKVxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIGNvbG9yIHRvIHN0b3JlIHRoZSByZXN1bHQgaW50b1xuICAgICAqIEByZXR1cm5zIHRoZSBvcmlnaW5hbCBDb2xvcjNcbiAgICAgKi9cbiAgICBjbGFtcFRvUmVmKG1pbiA9IDAsIG1heCA9IDEsIHJlc3VsdCkge1xuICAgICAgICByZXN1bHQuciA9IFNjYWxhcl8xLlNjYWxhci5DbGFtcCh0aGlzLnIsIG1pbiwgbWF4KTtcbiAgICAgICAgcmVzdWx0LmcgPSBTY2FsYXJfMS5TY2FsYXIuQ2xhbXAodGhpcy5nLCBtaW4sIG1heCk7XG4gICAgICAgIHJlc3VsdC5iID0gU2NhbGFyXzEuU2NhbGFyLkNsYW1wKHRoaXMuYiwgbWluLCBtYXgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvcjMgc2V0IHdpdGggdGhlIGFkZGVkIHZhbHVlcyBvZiB0aGUgY3VycmVudCBDb2xvcjMgYW5kIG9mIHRoZSBnaXZlbiBvbmVcbiAgICAgKiBAcGFyYW0gb3RoZXJDb2xvciAtIGRlZmluZXMgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHJldHVybnMgdGhlIG5ldyBDb2xvcjNcbiAgICAgKi9cbiAgICBhZGQob3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgKyBvdGhlckNvbG9yLnIsIHRoaXMuZyArIG90aGVyQ29sb3IuZywgdGhpcy5iICsgb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSByZXN1bHQgb2YgdGhlIGFkZGl0aW9uIG9mIHRoZSBjdXJyZW50IENvbG9yMyBhbmQgZ2l2ZW4gb25lIHJnYiB2YWx1ZXMgaW50byBcInJlc3VsdFwiXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSByZXN1bHQgLSBkZWZpbmVzIENvbG9yMyBvYmplY3QgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbnRvXG4gICAgICogQHJldHVybnMgdGhlIHVubW9kaWZpZWQgY3VycmVudCBDb2xvcjNcbiAgICAgKi9cbiAgICBhZGRUb1JlZihvdGhlckNvbG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgKyBvdGhlckNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nICsgb3RoZXJDb2xvci5nO1xuICAgICAgICByZXN1bHQuYiA9IHRoaXMuYiArIG90aGVyQ29sb3IuYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgQ29sb3IzIHNldCB3aXRoIHRoZSBzdWJ0cmFjdGVkIHZhbHVlcyBvZiB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgQ29sb3IzXG4gICAgICogQHBhcmFtIG90aGVyQ29sb3IgLSBkZWZpbmVzIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEByZXR1cm5zIHRoZSBuZXcgQ29sb3IzXG4gICAgICovXG4gICAgc3VidHJhY3Qob3RoZXJDb2xvcikge1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yMyh0aGlzLnIgLSBvdGhlckNvbG9yLnIsIHRoaXMuZyAtIG90aGVyQ29sb3IuZywgdGhpcy5iIC0gb3RoZXJDb2xvci5iKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RvcmVzIHRoZSByZXN1bHQgb2YgdGhlIHN1YnRyYWN0aW9uIG9mIGdpdmVuIG9uZSBmcm9tIHRoZSBjdXJyZW50IENvbG9yMyByZ2IgdmFsdWVzIGludG8gXCJyZXN1bHRcIlxuICAgICAqIEBwYXJhbSBvdGhlckNvbG9yIC0gZGVmaW5lcyB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0gcmVzdWx0IC0gZGVmaW5lcyBDb2xvcjMgb2JqZWN0IHRvIHN0b3JlIHRoZSByZXN1bHQgaW50b1xuICAgICAqIEByZXR1cm5zIHRoZSB1bm1vZGlmaWVkIGN1cnJlbnQgQ29sb3IzXG4gICAgICovXG4gICAgc3VidHJhY3RUb1JlZihvdGhlckNvbG9yLCByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0LnIgPSB0aGlzLnIgLSBvdGhlckNvbG9yLnI7XG4gICAgICAgIHJlc3VsdC5nID0gdGhpcy5nIC0gb3RoZXJDb2xvci5nO1xuICAgICAgICByZXN1bHQuYiA9IHRoaXMuYiAtIG90aGVyQ29sb3IuYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIGN1cnJlbnQgb2JqZWN0XG4gICAgICogQHJldHVybnMgYSBuZXcgQ29sb3IzIGNvcGllZCB0aGUgY3VycmVudCBvbmVcbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcjModGhpcy5yLCB0aGlzLmcsIHRoaXMuYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgcmdiIHZhbHVlcyBmcm9tIHRoZSBzb3VyY2UgaW4gdGhlIGN1cnJlbnQgQ29sb3IzXG4gICAgICogQHBhcmFtIHNvdXJjZSAtIGRlZmluZXMgdGhlIHNvdXJjZSBDb2xvcjMgb2JqZWN0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIGNvcHlGcm9tKHNvdXJjZSkge1xuICAgICAgICB0aGlzLnIgPSBzb3VyY2UucjtcbiAgICAgICAgdGhpcy5nID0gc291cmNlLmc7XG4gICAgICAgIHRoaXMuYiA9IHNvdXJjZS5iO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgQ29sb3IzIHJnYiB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzXG4gICAgICogQHBhcmFtIHIgLSBkZWZpbmVzIHRoZSByZWQgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBnIC0gZGVmaW5lcyB0aGUgZ3JlZW4gY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEBwYXJhbSBiIC0gZGVmaW5lcyB0aGUgYmx1ZSBjb21wb25lbnQgdG8gcmVhZCBmcm9tXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIGNvcHlGcm9tRmxvYXRzKHIsIGcsIGIpIHtcbiAgICAgICAgdGhpcy5yID0gcjtcbiAgICAgICAgdGhpcy5nID0gZztcbiAgICAgICAgdGhpcy5iID0gYjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIENvbG9yMyByZ2IgdmFsdWVzIGZyb20gdGhlIGdpdmVuIGZsb2F0c1xuICAgICAqIEBwYXJhbSByIC0gZGVmaW5lcyB0aGUgcmVkIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gZyAtIGRlZmluZXMgdGhlIGdyZWVuIGNvbXBvbmVudCB0byByZWFkIGZyb21cbiAgICAgKiBAcGFyYW0gYiAtIGRlZmluZXMgdGhlIGJsdWUgY29tcG9uZW50IHRvIHJlYWQgZnJvbVxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICBzZXQociwgZywgYikge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5RnJvbUZsb2F0cyhyLCBnLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgQ29sb3IzIGhleGFkZWNpbWFsIGNvZGUgYXMgYSBzdHJpbmdcbiAgICAgKiBAcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgQ29sb3IzIG9iamVjdFxuICAgICAqL1xuICAgIHRvSGV4U3RyaW5nKCkge1xuICAgICAgICBjb25zdCBpbnRSID0gKHRoaXMuciAqIDI1NSkgfCAwO1xuICAgICAgICBjb25zdCBpbnRHID0gKHRoaXMuZyAqIDI1NSkgfCAwO1xuICAgICAgICBjb25zdCBpbnRCID0gKHRoaXMuYiAqIDI1NSkgfCAwO1xuICAgICAgICByZXR1cm4gJyMnICsgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludFIpICsgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludEcpICsgU2NhbGFyXzEuU2NhbGFyLlRvSGV4KGludEIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBhIG5ldyBDb2xvcjMgY29udmVydGVkIGZyb20gdGhlIGN1cnJlbnQgb25lIHRvIGxpbmVhciBzcGFjZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IENvbG9yMyBvYmplY3RcbiAgICAgKi9cbiAgICB0b0xpbmVhclNwYWNlKCkge1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb2xvciA9IG5ldyBDb2xvcjMoKTtcbiAgICAgICAgdGhpcy50b0xpbmVhclNwYWNlVG9SZWYoY29udmVydGVkQ29sb3IpO1xuICAgICAgICByZXR1cm4gY29udmVydGVkQ29sb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBDb2xvcjMgdmFsdWVzIHRvIGxpbmVhciBzcGFjZSBhbmQgc3RvcmVzIHRoZSByZXN1bHQgaW4gXCJjb252ZXJ0ZWRDb2xvclwiXG4gICAgICogQHBhcmFtIGNvbnZlcnRlZENvbG9yIC0gZGVmaW5lcyB0aGUgQ29sb3IzIG9iamVjdCB3aGVyZSB0byBzdG9yZSB0aGUgbGluZWFyIHNwYWNlIHZlcnNpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBDb2xvcjNcbiAgICAgKi9cbiAgICB0b0xpbmVhclNwYWNlVG9SZWYoY29udmVydGVkQ29sb3IpIHtcbiAgICAgICAgY29udmVydGVkQ29sb3IuciA9IE1hdGgucG93KHRoaXMuciwgdHlwZXNfMS5Ub0xpbmVhclNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuZyA9IE1hdGgucG93KHRoaXMuZywgdHlwZXNfMS5Ub0xpbmVhclNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuYiA9IE1hdGgucG93KHRoaXMuYiwgdHlwZXNfMS5Ub0xpbmVhclNwYWNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGEgbmV3IENvbG9yMyBjb252ZXJ0ZWQgZnJvbSB0aGUgY3VycmVudCBvbmUgdG8gZ2FtbWEgc3BhY2VcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBDb2xvcjMgb2JqZWN0XG4gICAgICovXG4gICAgdG9HYW1tYVNwYWNlKCkge1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRDb2xvciA9IG5ldyBDb2xvcjMoKTtcbiAgICAgICAgdGhpcy50b0dhbW1hU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcik7XG4gICAgICAgIHJldHVybiBjb252ZXJ0ZWRDb2xvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIENvbG9yMyB2YWx1ZXMgdG8gZ2FtbWEgc3BhY2UgYW5kIHN0b3JlcyB0aGUgcmVzdWx0IGluIFwiY29udmVydGVkQ29sb3JcIlxuICAgICAqIEBwYXJhbSBjb252ZXJ0ZWRDb2xvciAtIGRlZmluZXMgdGhlIENvbG9yMyBvYmplY3Qgd2hlcmUgdG8gc3RvcmUgdGhlIGdhbW1hIHNwYWNlIHZlcnNpb25cbiAgICAgKiBAcmV0dXJucyB0aGUgdW5tb2RpZmllZCBDb2xvcjNcbiAgICAgKi9cbiAgICB0b0dhbW1hU3BhY2VUb1JlZihjb252ZXJ0ZWRDb2xvcikge1xuICAgICAgICBjb252ZXJ0ZWRDb2xvci5yID0gTWF0aC5wb3codGhpcy5yLCB0eXBlc18xLlRvR2FtbWFTcGFjZSk7XG4gICAgICAgIGNvbnZlcnRlZENvbG9yLmcgPSBNYXRoLnBvdyh0aGlzLmcsIHR5cGVzXzEuVG9HYW1tYVNwYWNlKTtcbiAgICAgICAgY29udmVydGVkQ29sb3IuYiA9IE1hdGgucG93KHRoaXMuYiwgdHlwZXNfMS5Ub0dhbW1hU3BhY2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyBDb2xvcjNcbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiB0aGlzLnIsXG4gICAgICAgICAgICBnOiB0aGlzLmcsXG4gICAgICAgICAgICBiOiB0aGlzLmJcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLkNvbG9yMyA9IENvbG9yMztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbG9yMy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3VydmUzID0gdm9pZCAwO1xuY29uc3QgVmVjdG9yM18xID0gcmVxdWlyZShcIi4vVmVjdG9yM1wiKTtcbi8qKlxuICogQSBDdXJ2ZTMgb2JqZWN0IGlzIGEgbG9naWNhbCBvYmplY3QsIHNvIG5vdCBhIG1lc2gsIHRvIGhhbmRsZSBjdXJ2ZXMgaW4gdGhlIDNEIGdlb21ldHJpYyBzcGFjZS5cbiAqIEEgQ3VydmUzIGlzIGRlc2lnbmVkIGZyb20gYSBzZXJpZXMgb2Ygc3VjY2Vzc2l2ZSBWZWN0b3IzLlxuICoge0BsaW5rIGh0dHBzOi8vZG9jLmJhYnlsb25qcy5jb20vaG93X3RvL2hvd190b191c2VfY3VydmUzIH1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgQ3VydmUzIHtcbiAgICAvKipcbiAgICAgKiBBIEN1cnZlMyBvYmplY3QgaXMgYSBsb2dpY2FsIG9iamVjdCwgc28gbm90IGEgbWVzaCwgdG8gaGFuZGxlIGN1cnZlcyBpbiB0aGUgM0QgZ2VvbWV0cmljIHNwYWNlLlxuICAgICAqIEEgQ3VydmUzIGlzIGRlc2lnbmVkIGZyb20gYSBzZXJpZXMgb2Ygc3VjY2Vzc2l2ZSBWZWN0b3IzLlxuICAgICAqIHtAbGluayBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vdHV0b3JpYWxzL0hvd190b191c2VfQ3VydmUzI2N1cnZlMy1vYmplY3QgfCBUdXRvcmlhbCB9XG4gICAgICogQHBhcmFtIHBvaW50cyAtIHBvaW50cyB3aGljaCBtYWtlIHVwIHRoZSBjdXJ2ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBvaW50cykge1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwLjA7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gdGhpcy5fY29tcHV0ZUxlbmd0aChwb2ludHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ3VydmUzIG9iamVjdCBhbG9uZyBhIFF1YWRyYXRpYyBCZXppZXIgY3VydmUgOiBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vdHV0b3JpYWxzL0hvd190b191c2VfQ3VydmUzI3F1YWRyYXRpYy1iZXppZXItY3VydmVcbiAgICAgKiBAcGFyYW0gdjAgLSAoVmVjdG9yMykgdGhlIG9yaWdpbiBwb2ludCBvZiB0aGUgUXVhZHJhdGljIEJlemllclxuICAgICAqIEBwYXJhbSB2MSAtIChWZWN0b3IzKSB0aGUgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB2MiAtIChWZWN0b3IzKSB0aGUgZW5kIHBvaW50IG9mIHRoZSBRdWFkcmF0aWMgQmV6aWVyXG4gICAgICogQHBhcmFtIG5iUG9pbnRzIC0gKGludGVnZXIpIHRoZSB3YW50ZWQgbnVtYmVyIG9mIHBvaW50cyBpbiB0aGUgY3VydmVcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlZCBDdXJ2ZTNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ3JlYXRlUXVhZHJhdGljQmV6aWVyKHYwLCB2MSwgdjIsIG5iUG9pbnRzKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1wYXJhbWV0ZXItcmVhc3NpZ25tZW50XG4gICAgICAgIG5iUG9pbnRzID0gbmJQb2ludHMgPiAyID8gbmJQb2ludHMgOiAzO1xuICAgICAgICBjb25zdCBiZXogPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgY29uc3QgZXF1YXRpb24gPSAodCwgdmFsMCwgdmFsMSwgdmFsMikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gKDEuMCAtIHQpICogKDEuMCAtIHQpICogdmFsMCArIDIuMCAqIHQgKiAoMS4wIC0gdCkgKiB2YWwxICsgdCAqIHQgKiB2YWwyO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbmJQb2ludHM7IGkrKykge1xuICAgICAgICAgICAgYmV6LnB1c2gobmV3IFZlY3RvcjNfMS5WZWN0b3IzKGVxdWF0aW9uKGkgLyBuYlBvaW50cywgdjAueCwgdjEueCwgdjIueCksIGVxdWF0aW9uKGkgLyBuYlBvaW50cywgdjAueSwgdjEueSwgdjIueSksIGVxdWF0aW9uKGkgLyBuYlBvaW50cywgdjAueiwgdjEueiwgdjIueikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEN1cnZlMyhiZXopO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQ3VydmUzIG9iamVjdCBhbG9uZyBhIEN1YmljIEJlemllciBjdXJ2ZSA6IGh0dHA6Ly9kb2MuYmFieWxvbmpzLmNvbS90dXRvcmlhbHMvSG93X3RvX3VzZV9DdXJ2ZTMjY3ViaWMtYmV6aWVyLWN1cnZlXG4gICAgICogQHBhcmFtIHYwIC0gKFZlY3RvcjMpIHRoZSBvcmlnaW4gcG9pbnQgb2YgdGhlIEN1YmljIEJlemllclxuICAgICAqIEBwYXJhbSB2MSAtIChWZWN0b3IzKSB0aGUgZmlyc3QgY29udHJvbCBwb2ludFxuICAgICAqIEBwYXJhbSB2MiAtIChWZWN0b3IzKSB0aGUgc2Vjb25kIGNvbnRyb2wgcG9pbnRcbiAgICAgKiBAcGFyYW0gdjMgLSAoVmVjdG9yMykgdGhlIGVuZCBwb2ludCBvZiB0aGUgQ3ViaWMgQmV6aWVyXG4gICAgICogQHBhcmFtIG5iUG9pbnRzIC0gKGludGVnZXIpIHRoZSB3YW50ZWQgbnVtYmVyIG9mIHBvaW50cyBpbiB0aGUgY3VydmVcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlZCBDdXJ2ZTNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ3JlYXRlQ3ViaWNCZXppZXIodjAsIHYxLCB2MiwgdjMsIG5iUG9pbnRzKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1wYXJhbWV0ZXItcmVhc3NpZ25tZW50XG4gICAgICAgIG5iUG9pbnRzID0gbmJQb2ludHMgPiAzID8gbmJQb2ludHMgOiA0O1xuICAgICAgICBjb25zdCBiZXogPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgY29uc3QgZXF1YXRpb24gPSAodCwgdmFsMCwgdmFsMSwgdmFsMiwgdmFsMykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gKDEuMCAtIHQpICogKDEuMCAtIHQpICogKDEuMCAtIHQpICogdmFsMCArXG4gICAgICAgICAgICAgICAgMy4wICogdCAqICgxLjAgLSB0KSAqICgxLjAgLSB0KSAqIHZhbDEgK1xuICAgICAgICAgICAgICAgIDMuMCAqIHQgKiB0ICogKDEuMCAtIHQpICogdmFsMiArXG4gICAgICAgICAgICAgICAgdCAqIHQgKiB0ICogdmFsMztcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG5iUG9pbnRzOyBpKyspIHtcbiAgICAgICAgICAgIGJlei5wdXNoKG5ldyBWZWN0b3IzXzEuVmVjdG9yMyhlcXVhdGlvbihpIC8gbmJQb2ludHMsIHYwLngsIHYxLngsIHYyLngsIHYzLngpLCBlcXVhdGlvbihpIC8gbmJQb2ludHMsIHYwLnksIHYxLnksIHYyLnksIHYzLnkpLCBlcXVhdGlvbihpIC8gbmJQb2ludHMsIHYwLnosIHYxLnosIHYyLnosIHYzLnopKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDdXJ2ZTMoYmV6KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEN1cnZlMyBvYmplY3QgYWxvbmcgYSBIZXJtaXRlIFNwbGluZSBjdXJ2ZSA6IGh0dHA6Ly9kb2MuYmFieWxvbmpzLmNvbS90dXRvcmlhbHMvSG93X3RvX3VzZV9DdXJ2ZTMjaGVybWl0ZS1zcGxpbmVcbiAgICAgKiBAcGFyYW0gcDEgLSAoVmVjdG9yMykgdGhlIG9yaWdpbiBwb2ludCBvZiB0aGUgSGVybWl0ZSBTcGxpbmVcbiAgICAgKiBAcGFyYW0gdDEgLSAoVmVjdG9yMykgdGhlIHRhbmdlbnQgdmVjdG9yIGF0IHRoZSBvcmlnaW4gcG9pbnRcbiAgICAgKiBAcGFyYW0gcDIgLSAoVmVjdG9yMykgdGhlIGVuZCBwb2ludCBvZiB0aGUgSGVybWl0ZSBTcGxpbmVcbiAgICAgKiBAcGFyYW0gdDIgLSAoVmVjdG9yMykgdGhlIHRhbmdlbnQgdmVjdG9yIGF0IHRoZSBlbmQgcG9pbnRcbiAgICAgKiBAcGFyYW0gbmJQb2ludHMgLSAoaW50ZWdlcikgdGhlIHdhbnRlZCBudW1iZXIgb2YgcG9pbnRzIGluIHRoZSBjdXJ2ZVxuICAgICAqIEByZXR1cm5zIHRoZSBjcmVhdGVkIEN1cnZlM1xuICAgICAqL1xuICAgIHN0YXRpYyBDcmVhdGVIZXJtaXRlU3BsaW5lKHAxLCB0MSwgcDIsIHQyLCBuYlBvaW50cykge1xuICAgICAgICBjb25zdCBoZXJtaXRlID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSAxLjAgLyBuYlBvaW50cztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbmJQb2ludHM7IGkrKykge1xuICAgICAgICAgICAgaGVybWl0ZS5wdXNoKFZlY3RvcjNfMS5WZWN0b3IzLkhlcm1pdGUocDEsIHQxLCBwMiwgdDIsIGkgKiBzdGVwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDdXJ2ZTMoaGVybWl0ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBDdXJ2ZTMgb2JqZWN0IGFsb25nIGEgQ2F0bXVsbFJvbSBTcGxpbmUgY3VydmUgOlxuICAgICAqIEBwYXJhbSBwb2ludHMgLSAoYXJyYXkgb2YgVmVjdG9yMykgdGhlIHBvaW50cyB0aGUgc3BsaW5lIG11c3QgcGFzcyB0aHJvdWdoLiBBdCBsZWFzdCwgZm91ciBwb2ludHMgcmVxdWlyZWRcbiAgICAgKiBAcGFyYW0gbmJQb2ludHMgLSAoaW50ZWdlcikgdGhlIHdhbnRlZCBudW1iZXIgb2YgcG9pbnRzIGJldHdlZW4gZWFjaCBjdXJ2ZSBjb250cm9sIHBvaW50c1xuICAgICAqIEBwYXJhbSBjbG9zZWQgLSAoYm9vbGVhbikgb3B0aW9uYWwgd2l0aCBkZWZhdWx0IGZhbHNlLCB3aGVuIHRydWUgZm9ybXMgYSBjbG9zZWQgbG9vcCBmcm9tIHRoZSBwb2ludHNcbiAgICAgKiBAcmV0dXJucyB0aGUgY3JlYXRlZCBDdXJ2ZTNcbiAgICAgKi9cbiAgICBzdGF0aWMgQ3JlYXRlQ2F0bXVsbFJvbVNwbGluZShwb2ludHMsIG5iUG9pbnRzLCBjbG9zZWQpIHtcbiAgICAgICAgY29uc3QgY2F0bXVsbFJvbSA9IG5ldyBBcnJheSgpO1xuICAgICAgICBjb25zdCBzdGVwID0gMS4wIC8gbmJQb2ludHM7XG4gICAgICAgIGxldCBhbW91bnQgPSAwLjA7XG4gICAgICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50c0NvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGFtb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBuYlBvaW50czsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhdG11bGxSb20ucHVzaChWZWN0b3IzXzEuVmVjdG9yMy5DYXRtdWxsUm9tKHBvaW50c1tpICUgcG9pbnRzQ291bnRdLCBwb2ludHNbKGkgKyAxKSAlIHBvaW50c0NvdW50XSwgcG9pbnRzWyhpICsgMikgJSBwb2ludHNDb3VudF0sIHBvaW50c1soaSArIDMpICUgcG9pbnRzQ291bnRdLCBhbW91bnQpKTtcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50ICs9IHN0ZXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0bXVsbFJvbS5wdXNoKGNhdG11bGxSb21bMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdG90YWxQb2ludHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgICAgIHRvdGFsUG9pbnRzLnB1c2gocG9pbnRzWzBdLmNsb25lKCkpO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodG90YWxQb2ludHMsIHBvaW50cyk7XG4gICAgICAgICAgICB0b3RhbFBvaW50cy5wdXNoKHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0uY2xvbmUoKSk7XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG90YWxQb2ludHMubGVuZ3RoIC0gMzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYW1vdW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjID0gMDsgYyA8IG5iUG9pbnRzOyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0bXVsbFJvbS5wdXNoKFZlY3RvcjNfMS5WZWN0b3IzLkNhdG11bGxSb20odG90YWxQb2ludHNbaV0sIHRvdGFsUG9pbnRzW2kgKyAxXSwgdG90YWxQb2ludHNbaSArIDJdLCB0b3RhbFBvaW50c1tpICsgM10sIGFtb3VudCkpO1xuICAgICAgICAgICAgICAgICAgICBhbW91bnQgKz0gc3RlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgICBjYXRtdWxsUm9tLnB1c2goVmVjdG9yM18xLlZlY3RvcjMuQ2F0bXVsbFJvbSh0b3RhbFBvaW50c1tpXSwgdG90YWxQb2ludHNbaSArIDFdLCB0b3RhbFBvaW50c1tpICsgMl0sIHRvdGFsUG9pbnRzW2kgKyAzXSwgYW1vdW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDdXJ2ZTMoY2F0bXVsbFJvbSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBDdXJ2ZTMgc3RvcmVkIGFycmF5IG9mIHN1Y2Nlc3NpdmUgVmVjdG9yM1xuICAgICAqL1xuICAgIGdldFBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIGNvbXB1dGVkIGxlbmd0aCAoZmxvYXQpIG9mIHRoZSBjdXJ2ZS5cbiAgICAgKi9cbiAgICBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgQ3VydmUzIG9iamVjdCA6IHZhciBjdXJ2ZSA9IGN1cnZlQS5jb250aW51ZShjdXJ2ZUIpO1xuICAgICAqIFRoaXMgbmV3IEN1cnZlMyBpcyBidWlsdCBieSB0cmFuc2xhdGluZyBhbmQgc3RpY2tpbmcgdGhlIGN1cnZlQiBhdCB0aGUgZW5kIG9mIHRoZSBjdXJ2ZUEuXG4gICAgICogY3VydmVBIGFuZCBjdXJ2ZUIga2VlcCB1bmNoYW5nZWQuXG4gICAgICogQHBhcmFtIGN1cnZlIC0gdGhlIGN1cnZlIHRvIGNvbnRpbnVlIGZyb20gdGhpcyBjdXJ2ZVxuICAgICAqIEByZXR1cm5zIHRoZSBuZXdseSBjb25zdHJ1Y3RlZCBjdXJ2ZVxuICAgICAqL1xuICAgIGNvbnRpbnVlKGN1cnZlKSB7XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IHRoaXMuX3BvaW50c1t0aGlzLl9wb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGNvbnRpbnVlZFBvaW50cyA9IHRoaXMuX3BvaW50cy5zbGljZSgpO1xuICAgICAgICBjb25zdCBjdXJ2ZVBvaW50cyA9IGN1cnZlLmdldFBvaW50cygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGN1cnZlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb250aW51ZWRQb2ludHMucHVzaChjdXJ2ZVBvaW50c1tpXS5zdWJ0cmFjdChjdXJ2ZVBvaW50c1swXSkuYWRkKGxhc3RQb2ludCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRpbnVlZEN1cnZlID0gbmV3IEN1cnZlMyhjb250aW51ZWRQb2ludHMpO1xuICAgICAgICByZXR1cm4gY29udGludWVkQ3VydmU7XG4gICAgfVxuICAgIF9jb21wdXRlTGVuZ3RoKHBhdGgpIHtcbiAgICAgICAgbGV0IGwgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGwgKz0gcGF0aFtpXS5zdWJ0cmFjdChwYXRoW2kgLSAxXSkubGVuZ3RoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGw7XG4gICAgfVxufVxuZXhwb3J0cy5DdXJ2ZTMgPSBDdXJ2ZTM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXJ2ZTNkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbGFuZSA9IHZvaWQgMDtcbmNvbnN0IFZlY3RvcjNfMSA9IHJlcXVpcmUoXCIuL1ZlY3RvcjNcIik7XG5jb25zdCBNYXRyaXhfMSA9IHJlcXVpcmUoXCIuL01hdHJpeFwiKTtcbmNvbnN0IHByZWFsbG9jYXRlZFZhcmlhYmxlc18xID0gcmVxdWlyZShcIi4vcHJlYWxsb2NhdGVkVmFyaWFibGVzXCIpO1xuLyoqXG4gKiBSZXByZXNlbnMgYSBwbGFuZSBieSB0aGUgZXF1YXRpb24gYXggKyBieSArIGN6ICsgZCA9IDBcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUGxhbmUge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQbGFuZSBvYmplY3QgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBmbG9hdHMgYSwgYiwgYywgZCBhbmQgdGhlIHBsYW5lIGVxdWF0aW9uIDogYXggKyBieSArIGN6ICsgZCA9IDBcbiAgICAgKiBAcGFyYW0gYSAtIGEgY29tcG9uZW50IG9mIHRoZSBwbGFuZVxuICAgICAqIEBwYXJhbSBiIC0gYiBjb21wb25lbnQgb2YgdGhlIHBsYW5lXG4gICAgICogQHBhcmFtIGMgLSBjIGNvbXBvbmVudCBvZiB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gZCAtIGQgY29tcG9uZW50IG9mIHRoZSBwbGFuZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgdGhpcy5ub3JtYWwgPSBuZXcgVmVjdG9yM18xLlZlY3RvcjMoYSwgYiwgYyk7XG4gICAgICAgIHRoaXMuZCA9IGQ7XG4gICAgfVxuICAgIC8vIFN0YXRpY3NcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGxhbmUgZnJvbSBhbiAgYXJyYXlcbiAgICAgKiBAcGFyYW0gYXJyYXkgLSB0aGUgYXJyYXkgdG8gY3JlYXRlIGEgcGxhbmUgZnJvbVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFBsYW5lIGZyb20gdGhlIGdpdmVuIGFycmF5LlxuICAgICAqL1xuICAgIHN0YXRpYyBGcm9tQXJyYXkoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQbGFuZShhcnJheVswXSwgYXJyYXlbMV0sIGFycmF5WzJdLCBhcnJheVszXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFuZSBmcm9tIHRocmVlIHBvaW50c1xuICAgICAqIEBwYXJhbSBwb2ludDEgLSBwb2ludCB1c2VkIHRvIGNyZWF0ZSB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQyIC0gcG9pbnQgdXNlZCB0byBjcmVhdGUgdGhlIHBsYW5lXG4gICAgICogQHBhcmFtIHBvaW50MyAtIHBvaW50IHVzZWQgdG8gY3JlYXRlIHRoZSBwbGFuZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFBsYW5lIGRlZmluZWQgYnkgdGhlIHRocmVlIGdpdmVuIHBvaW50cy5cbiAgICAgKi9cbiAgICBzdGF0aWMgRnJvbVBvaW50cyhwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQbGFuZSgwLjAsIDAuMCwgMC4wLCAwLjApO1xuICAgICAgICByZXN1bHQuY29weUZyb21Qb2ludHMocG9pbnQxLCBwb2ludDIsIHBvaW50Myk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFuZSBmcm9tIGFuIG9yaWdpbiBwb2ludCBhbmQgYSBub3JtYWxcbiAgICAgKiBAcGFyYW0gb3JpZ2luIC0gb3JpZ2luIG9mIHRoZSBwbGFuZSB0byBiZSBjb25zdHJ1Y3RlZFxuICAgICAqIEBwYXJhbSBub3JtYWwgLSBub3JtYWwgb2YgdGhlIHBsYW5lIHRvIGJlIGNvbnN0cnVjdGVkXG4gICAgICogQHJldHVybnMgYSBuZXcgUGxhbmUgdGhlIG5vcm1hbCB2ZWN0b3IgdG8gdGhpcyBwbGFuZSBhdCB0aGUgZ2l2ZW4gb3JpZ2luIHBvaW50LlxuICAgICAqIE5vdGUgOiB0aGUgdmVjdG9yIFwibm9ybWFsXCIgaXMgdXBkYXRlZCBiZWNhdXNlIG5vcm1hbGl6ZWQuXG4gICAgICovXG4gICAgc3RhdGljIEZyb21Qb3NpdGlvbkFuZE5vcm1hbChvcmlnaW4sIG5vcm1hbCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUGxhbmUoMC4wLCAwLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgbm9ybWFsLm5vcm1hbGl6ZSgpO1xuICAgICAgICByZXN1bHQubm9ybWFsID0gbm9ybWFsO1xuICAgICAgICByZXN1bHQuZCA9IC0obm9ybWFsLnggKiBvcmlnaW4ueCArXG4gICAgICAgICAgICBub3JtYWwueSAqIG9yaWdpbi55ICtcbiAgICAgICAgICAgIG5vcm1hbC56ICogb3JpZ2luLnopO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSBmcm9tIGEgcGxhbmUgYW5kIGEgcG9pbnRcbiAgICAgKiBAcGFyYW0gb3JpZ2luIC0gb3JpZ2luIG9mIHRoZSBwbGFuZSB0byBiZSBjb25zdHJ1Y3RlZFxuICAgICAqIEBwYXJhbSBub3JtYWwgLSBub3JtYWwgb2YgdGhlIHBsYW5lIHRvIGJlIGNvbnN0cnVjdGVkXG4gICAgICogQHBhcmFtIHBvaW50IC0gcG9pbnQgdG8gY2FsY3VsYXRlIGRpc3RhbmNlIHRvXG4gICAgICogQHJldHVybnMgdGhlIHNpZ25lZCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBwbGFuZSBkZWZpbmVkIGJ5IHRoZSBub3JtYWwgdmVjdG9yIGF0IHRoZSBcIm9yaWdpblwiXCIgcG9pbnQgYW5kIHRoZSBnaXZlbiBvdGhlciBwb2ludC5cbiAgICAgKi9cbiAgICBzdGF0aWMgU2lnbmVkRGlzdGFuY2VUb1BsYW5lRnJvbVBvc2l0aW9uQW5kTm9ybWFsKG9yaWdpbiwgbm9ybWFsLCBwb2ludCkge1xuICAgICAgICBjb25zdCBkID0gLShub3JtYWwueCAqIG9yaWdpbi54ICsgbm9ybWFsLnkgKiBvcmlnaW4ueSArIG5vcm1hbC56ICogb3JpZ2luLnopO1xuICAgICAgICByZXR1cm4gVmVjdG9yM18xLlZlY3RvcjMuRG90KHBvaW50LCBub3JtYWwpICsgZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIHBsYW5lIGNvb3JkaW5hdGVzIGFzIGEgbmV3IGFycmF5IG9mIDQgZWxlbWVudHMgW2EsIGIsIGMsIGRdLlxuICAgICAqL1xuICAgIGFzQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBbdGhpcy5ub3JtYWwueCwgdGhpcy5ub3JtYWwueSwgdGhpcy5ub3JtYWwueiwgdGhpcy5kXTtcbiAgICB9XG4gICAgLy8gTWV0aG9kc1xuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIGEgbmV3IHBsYW5lIGNvcGllZCBmcm9tIHRoZSBjdXJyZW50IFBsYW5lLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFBsYW5lKHRoaXMubm9ybWFsLngsIHRoaXMubm9ybWFsLnksIHRoaXMubm9ybWFsLnosIHRoaXMuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJQbGFuZVwiLlxuICAgICAqL1xuICAgIGdldENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdQbGFuZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBQbGFuZSBoYXNoIGNvZGUuXG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy5ub3JtYWwuZ2V0SGFzaENvZGUoKTtcbiAgICAgICAgaGFzaCA9IChoYXNoICogMzk3KSBeICh0aGlzLmQgfHwgMCk7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpemUgdGhlIGN1cnJlbnQgUGxhbmUgaW4gcGxhY2UuXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgUGxhbmUuXG4gICAgICovXG4gICAgbm9ybWFsaXplKCkge1xuICAgICAgICBjb25zdCBub3JtID0gTWF0aC5zcXJ0KHRoaXMubm9ybWFsLnggKiB0aGlzLm5vcm1hbC54ICtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnkgKiB0aGlzLm5vcm1hbC55ICtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnogKiB0aGlzLm5vcm1hbC56KTtcbiAgICAgICAgbGV0IG1hZ25pdHVkZSA9IDAuMDtcbiAgICAgICAgaWYgKG5vcm0gIT09IDApIHtcbiAgICAgICAgICAgIG1hZ25pdHVkZSA9IDEuMCAvIG5vcm07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3JtYWwueCAqPSBtYWduaXR1ZGU7XG4gICAgICAgIHRoaXMubm9ybWFsLnkgKj0gbWFnbml0dWRlO1xuICAgICAgICB0aGlzLm5vcm1hbC56ICo9IG1hZ25pdHVkZTtcbiAgICAgICAgdGhpcy5kICo9IG1hZ25pdHVkZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiB0aGUgcGxhbmUgYW5kIHJldHVybnMgdGhlIHJlc3VsdFxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm1hdGlvbiAtIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcGxhbmVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBQbGFuZSBhcyB0aGUgcmVzdWx0IG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiB0aGUgY3VycmVudCBQbGFuZSBieSB0aGUgZ2l2ZW4gbWF0cml4LlxuICAgICAqL1xuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1hdGlvbikge1xuICAgICAgICBjb25zdCB0cmFuc3Bvc2VkTWF0cml4ID0gcHJlYWxsb2NhdGVkVmFyaWFibGVzXzEuTWF0aFRtcC5NYXRyaXhbMF07XG4gICAgICAgIE1hdHJpeF8xLk1hdHJpeC5UcmFuc3Bvc2VUb1JlZih0cmFuc2Zvcm1hdGlvbiwgdHJhbnNwb3NlZE1hdHJpeCk7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc3Bvc2VkTWF0cml4Lm07XG4gICAgICAgIGNvbnN0IHggPSB0aGlzLm5vcm1hbC54O1xuICAgICAgICBjb25zdCB5ID0gdGhpcy5ub3JtYWwueTtcbiAgICAgICAgY29uc3QgeiA9IHRoaXMubm9ybWFsLno7XG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmQ7XG4gICAgICAgIGNvbnN0IG5vcm1hbFggPSB4ICogbVswXSArIHkgKiBtWzFdICsgeiAqIG1bMl0gKyBkICogbVszXTtcbiAgICAgICAgY29uc3Qgbm9ybWFsWSA9IHggKiBtWzRdICsgeSAqIG1bNV0gKyB6ICogbVs2XSArIGQgKiBtWzddO1xuICAgICAgICBjb25zdCBub3JtYWxaID0geCAqIG1bOF0gKyB5ICogbVs5XSArIHogKiBtWzEwXSArIGQgKiBtWzExXTtcbiAgICAgICAgY29uc3QgZmluYWxEID0geCAqIG1bMTJdICsgeSAqIG1bMTNdICsgeiAqIG1bMTRdICsgZCAqIG1bMTVdO1xuICAgICAgICByZXR1cm4gbmV3IFBsYW5lKG5vcm1hbFgsIG5vcm1hbFksIG5vcm1hbFosIGZpbmFsRCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1YWx0dGUgdGhlIGRvdCBwcm9kdWN0IGJldHdlZW4gdGhlIHBvaW50IGFuZCB0aGUgcGxhbmUgbm9ybWFsXG4gICAgICogQHBhcmFtIHBvaW50IC0gcG9pbnQgdG8gY2FsY3VsYXRlIHRoZSBkb3QgcHJvZHVjdCB3aXRoXG4gICAgICogQHJldHVybnMgdGhlIGRvdCBwcm9kdWN0IChmbG9hdCkgb2YgdGhlIHBvaW50IGNvb3JkaW5hdGVzIGFuZCB0aGUgcGxhbmUgbm9ybWFsLlxuICAgICAqL1xuICAgIGRvdENvb3JkaW5hdGUocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm5vcm1hbC54ICogcG9pbnQueCArXG4gICAgICAgICAgICB0aGlzLm5vcm1hbC55ICogcG9pbnQueSArXG4gICAgICAgICAgICB0aGlzLm5vcm1hbC56ICogcG9pbnQueiArXG4gICAgICAgICAgICB0aGlzLmQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjdXJyZW50IFBsYW5lIGZyb20gdGhlIHBsYW5lIGRlZmluZWQgYnkgdGhlIHRocmVlIGdpdmVuIHBvaW50cy5cbiAgICAgKiBAcGFyYW0gcG9pbnQxIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQyIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcGFyYW0gcG9pbnQzIC0gb25lIG9mIHRoZSBwb2ludHMgdXNlZCB0byBjb250cnVjdCB0aGUgcGxhbmVcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBQbGFuZS5cbiAgICAgKi9cbiAgICBjb3B5RnJvbVBvaW50cyhwb2ludDEsIHBvaW50MiwgcG9pbnQzKSB7XG4gICAgICAgIGNvbnN0IHgxID0gcG9pbnQyLnggLSBwb2ludDEueDtcbiAgICAgICAgY29uc3QgeTEgPSBwb2ludDIueSAtIHBvaW50MS55O1xuICAgICAgICBjb25zdCB6MSA9IHBvaW50Mi56IC0gcG9pbnQxLno7XG4gICAgICAgIGNvbnN0IHgyID0gcG9pbnQzLnggLSBwb2ludDEueDtcbiAgICAgICAgY29uc3QgeTIgPSBwb2ludDMueSAtIHBvaW50MS55O1xuICAgICAgICBjb25zdCB6MiA9IHBvaW50My56IC0gcG9pbnQxLno7XG4gICAgICAgIGNvbnN0IHl6ID0geTEgKiB6MiAtIHoxICogeTI7XG4gICAgICAgIGNvbnN0IHh6ID0gejEgKiB4MiAtIHgxICogejI7XG4gICAgICAgIGNvbnN0IHh5ID0geDEgKiB5MiAtIHkxICogeDI7XG4gICAgICAgIGNvbnN0IHB5dGggPSBNYXRoLnNxcnQoeXogKiB5eiArIHh6ICogeHogKyB4eSAqIHh5KTtcbiAgICAgICAgbGV0IGludlB5dGg7XG4gICAgICAgIGlmIChweXRoICE9PSAwKSB7XG4gICAgICAgICAgICBpbnZQeXRoID0gMS4wIC8gcHl0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludlB5dGggPSAwLjA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3JtYWwueCA9IHl6ICogaW52UHl0aDtcbiAgICAgICAgdGhpcy5ub3JtYWwueSA9IHh6ICogaW52UHl0aDtcbiAgICAgICAgdGhpcy5ub3JtYWwueiA9IHh5ICogaW52UHl0aDtcbiAgICAgICAgdGhpcy5kID0gLSh0aGlzLm5vcm1hbC54ICogcG9pbnQxLnggK1xuICAgICAgICAgICAgdGhpcy5ub3JtYWwueSAqIHBvaW50MS55ICtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsLnogKiBwb2ludDEueik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIHBsYW5lIGlzIGZhY2luZyBhIGdpdmVuIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gLSB0aGUgZGlyZWN0aW9uIHRvIGNoZWNrIGlmIHRoZSBwbGFuZSBpcyBmYWNpbmdcbiAgICAgKiBAcGFyYW0gZXBzaWxvbiAtIHZhbHVlIHRoZSBkb3QgcHJvZHVjdCBpcyBjb21wYXJlZCBhZ2FpbnN0IChyZXR1cm5zIHRydWUgaWYgZG90ICZsdDs9IGVwc2lsb24pXG4gICAgICogQHJldHVybnMgVHJ1ZSBpcyB0aGUgdmVjdG9yIFwiZGlyZWN0aW9uXCIgIGlzIHRoZSBzYW1lIHNpZGUgdGhhbiB0aGUgcGxhbmUgbm9ybWFsLlxuICAgICAqL1xuICAgIGlzRnJvbnRGYWNpbmdUbyhkaXJlY3Rpb24sIGVwc2lsb24pIHtcbiAgICAgICAgY29uc3QgZG90ID0gVmVjdG9yM18xLlZlY3RvcjMuRG90KHRoaXMubm9ybWFsLCBkaXJlY3Rpb24pO1xuICAgICAgICByZXR1cm4gZG90IDw9IGVwc2lsb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIHRvIGEgcG9pbnRcbiAgICAgKiBAcGFyYW0gcG9pbnQgLSBwb2ludCB0byBjYWxjdWxhdGUgZGlzdGFuY2UgdG9cbiAgICAgKiBAcmV0dXJucyB0aGUgc2lnbmVkIGRpc3RhbmNlIChmbG9hdCkgZnJvbSB0aGUgZ2l2ZW4gcG9pbnQgdG8gdGhlIFBsYW5lLlxuICAgICAqL1xuICAgIHNpZ25lZERpc3RhbmNlVG8ocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjNfMS5WZWN0b3IzLkRvdChwb2ludCwgdGhpcy5ub3JtYWwpICsgdGhpcy5kO1xuICAgIH1cbn1cbmV4cG9ydHMuUGxhbmUgPSBQbGFuZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBsYW5lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GcnVzdHVtID0gdm9pZCAwO1xuY29uc3QgUGxhbmVfMSA9IHJlcXVpcmUoXCIuL1BsYW5lXCIpO1xuLyoqXG4gKiBSZXByYXNlbnRzIGEgY2FtZXJhIGZydXN0dW1cbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgRnJ1c3R1bSB7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGxhbmVzIHJlcHJlc2VudGluZyB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmV0dXJuZWQgcGxhbmVzXG4gICAgICogQHJldHVybnMgYSBuZXcgYXJyYXkgb2YgNiBGcnVzdHVtIHBsYW5lcyBjb21wdXRlZCBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRQbGFuZXModHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IGZydXN0dW1QbGFuZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDY7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGZydXN0dW1QbGFuZXMucHVzaChuZXcgUGxhbmVfMS5QbGFuZSgwLjAsIDAuMCwgMC4wLCAwLjApKTtcbiAgICAgICAgfVxuICAgICAgICBGcnVzdHVtLkdldFBsYW5lc1RvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lcyk7XG4gICAgICAgIHJldHVybiBmcnVzdHVtUGxhbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZWFyIGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICovXG4gICAgc3RhdGljIEdldE5lYXJQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSArIG1bMl07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gKyBtWzZdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSArIG1bMTBdO1xuICAgICAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdICsgbVsxNF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmFyIGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICovXG4gICAgc3RhdGljIEdldEZhclBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmUpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnggPSBtWzNdIC0gbVsyXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC55ID0gbVs3XSAtIG1bNl07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdIC0gbVsxMF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gLSBtWzE0XTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsZWZ0IGZydXN0dW0gcGxhbmUgdHJhbnNmb3JtZWQgYnkgdGhlIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIC0gdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGJlIGFwcGxpZWQgdG8gdGhlIHJlc3VsdGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZSAtIHRoZSByZXN1bGluZyBmcnVzdHVtIHBsYW5lXG4gICAgICovXG4gICAgc3RhdGljIEdldExlZnRQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSArIG1bMF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gKyBtWzRdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSArIG1bOF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gKyBtWzEyXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByaWdodCBmcnVzdHVtIHBsYW5lIHRyYW5zZm9ybWVkIGJ5IHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRSaWdodFBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmUpIHtcbiAgICAgICAgY29uc3QgbSA9IHRyYW5zZm9ybS5tO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnggPSBtWzNdIC0gbVswXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC55ID0gbVs3XSAtIG1bNF07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueiA9IG1bMTFdIC0gbVs4XTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLmQgPSBtWzE1XSAtIG1bMTJdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsaXplKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRvcCBmcnVzdHVtIHBsYW5lIHRyYW5zZm9ybWVkIGJ5IHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSAtIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB0byBiZSBhcHBsaWVkIHRvIHRoZSByZXN1bHRpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqIEBwYXJhbSBmcnVzdHVtUGxhbmUgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZVxuICAgICAqL1xuICAgIHN0YXRpYyBHZXRUb3BQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG0gPSB0cmFuc2Zvcm0ubTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC54ID0gbVszXSAtIG1bMV07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueSA9IG1bN10gLSBtWzVdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnogPSBtWzExXSAtIG1bOV07XG4gICAgICAgIGZydXN0dW1QbGFuZS5kID0gbVsxNV0gLSBtWzEzXTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbGl6ZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBib3R0b20gZnJ1c3R1bSBwbGFuZSB0cmFuc2Zvcm1lZCBieSB0aGUgdHJhbnNmb3JtIG1hdHJpeFxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmVzdWx0aW5nIGZydXN0dW0gcGxhbmVcbiAgICAgKiBAcGFyYW0gZnJ1c3R1bVBsYW5lIC0gdGhlIHJlc3VsaW5nIGZydXN0dW0gcGxhbmVcbiAgICAgKi9cbiAgICBzdGF0aWMgR2V0Qm90dG9tUGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZSkge1xuICAgICAgICBjb25zdCBtID0gdHJhbnNmb3JtLm07XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWwueCA9IG1bM10gKyBtWzFdO1xuICAgICAgICBmcnVzdHVtUGxhbmUubm9ybWFsLnkgPSBtWzddICsgbVs1XTtcbiAgICAgICAgZnJ1c3R1bVBsYW5lLm5vcm1hbC56ID0gbVsxMV0gKyBtWzldO1xuICAgICAgICBmcnVzdHVtUGxhbmUuZCA9IG1bMTVdICsgbVsxM107XG4gICAgICAgIGZydXN0dW1QbGFuZS5ub3JtYWxpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2l2ZW4gYXJyYXkgXCJmcnVzdHVtUGxhbmVzXCIgd2l0aCB0aGUgNiBGcnVzdHVtIHBsYW5lcyBjb21wdXRlZCBieSB0aGUgZ2l2ZW4gdHJhbnNmb3JtYXRpb24gbWF0cml4LlxuICAgICAqIEBwYXJhbSB0cmFuc2Zvcm0gLSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdG8gYmUgYXBwbGllZCB0byB0aGUgcmVzdWx0aW5nIGZydXN0dW0gcGxhbmVzXG4gICAgICogQHBhcmFtIGZydXN0dW1QbGFuZXMgLSB0aGUgcmVzdWxpbmcgZnJ1c3R1bSBwbGFuZXNcbiAgICAgKi9cbiAgICBzdGF0aWMgR2V0UGxhbmVzVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzKSB7XG4gICAgICAgIC8vIE5lYXJcbiAgICAgICAgRnJ1c3R1bS5HZXROZWFyUGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbMF0pO1xuICAgICAgICAvLyBGYXJcbiAgICAgICAgRnJ1c3R1bS5HZXRGYXJQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lc1sxXSk7XG4gICAgICAgIC8vIExlZnRcbiAgICAgICAgRnJ1c3R1bS5HZXRMZWZ0UGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbMl0pO1xuICAgICAgICAvLyBSaWdodFxuICAgICAgICBGcnVzdHVtLkdldFJpZ2h0UGxhbmVUb1JlZih0cmFuc2Zvcm0sIGZydXN0dW1QbGFuZXNbM10pO1xuICAgICAgICAvLyBUb3BcbiAgICAgICAgRnJ1c3R1bS5HZXRUb3BQbGFuZVRvUmVmKHRyYW5zZm9ybSwgZnJ1c3R1bVBsYW5lc1s0XSk7XG4gICAgICAgIC8vIEJvdHRvbVxuICAgICAgICBGcnVzdHVtLkdldEJvdHRvbVBsYW5lVG9SZWYodHJhbnNmb3JtLCBmcnVzdHVtUGxhbmVzWzVdKTtcbiAgICB9XG59XG5leHBvcnRzLkZydXN0dW0gPSBGcnVzdHVtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RnVyc3R1bS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGF0aDIgPSB2b2lkIDA7XG5jb25zdCBWZWN0b3IyXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IyXCIpO1xuY29uc3QgQXJjMl8xID0gcmVxdWlyZShcIi4vQXJjMlwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIDJEIHBhdGggbWFkZSB1cCBvZiBtdWx0aXBsZSAyRCBwb2ludHNcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUGF0aDIge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBQYXRoMiBvYmplY3QgZnJvbSB0aGUgc3RhcnRpbmcgMkQgY29vcmRpbmF0ZXMgeCBhbmQgeS5cbiAgICAgKiBAcGFyYW0geCAtIHRoZSBzdGFydGluZyBwb2ludHMgeCB2YWx1ZVxuICAgICAqIEBwYXJhbSB5IC0gdGhlIHN0YXJ0aW5nIHBvaW50cyB5IHZhbHVlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIHBhdGggc3RhcnQgYW5kIGVuZCBwb2ludCBhcmUgdGhlIHNhbWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IG5ldyBBcnJheSgpO1xuICAgICAgICB0aGlzLl9sZW5ndGggPSAwLjA7XG4gICAgICAgIHRoaXMuX3BvaW50cy5wdXNoKG5ldyBWZWN0b3IyXzEuVmVjdG9yMih4LCB5KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGF0aCBzdGFydGluZyBmcm9tIGFuIHggYW5kIHkgcG9zaXRpb25cbiAgICAgKiBAcGFyYW0geCAtIHN0YXJ0aW5nIHggdmFsdWVcbiAgICAgKiBAcGFyYW0geSAtIHN0YXJ0aW5nIHkgdmFsdWVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBQYXRoMiBzdGFydGluZyBhdCB0aGUgY29vcmRpbmF0ZXMgKHgsIHkpLlxuICAgICAqL1xuICAgIHN0YXRpYyBTdGFydGluZ0F0KHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoMih4LCB5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBzZWdtZW50IHVudGlsIHRoZSBnaXZlbiBjb29yZGluYXRlcyAoeCwgeSkgdG8gdGhlIGN1cnJlbnQgUGF0aDIuXG4gICAgICogQHBhcmFtIHggLSB0aGUgYWRkZWQgcG9pbnRzIHggdmFsdWVcbiAgICAgKiBAcGFyYW0geSAtIHRoZSBhZGRlZCBwb2ludHMgeSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHRoZSB1cGRhdGVkIFBhdGgyLlxuICAgICAqL1xuICAgIGFkZExpbmVUbyh4LCB5KSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3UG9pbnQgPSBuZXcgVmVjdG9yMl8xLlZlY3RvcjIoeCwgeSk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzUG9pbnQgPSB0aGlzLl9wb2ludHNbdGhpcy5fcG9pbnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICB0aGlzLl9wb2ludHMucHVzaChuZXdQb2ludCk7XG4gICAgICAgIHRoaXMuX2xlbmd0aCArPSBuZXdQb2ludC5zdWJ0cmFjdChwcmV2aW91c1BvaW50KS5sZW5ndGgoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgX251bWJlck9mU2VnbWVudHNfIHNlZ21lbnRzIGFjY29yZGluZyB0byB0aGUgYXJjIGRlZmluaXRpb24gKG1pZGRsZSBwb2ludCBjb29yZGluYXRlcywgZW5kIHBvaW50IGNvb3JkaW5hdGVzLCB0aGUgYXJjIHN0YXJ0IHBvaW50IGJlaW5nIHRoZSBjdXJyZW50IFBhdGgyIGxhc3QgcG9pbnQpIHRvIHRoZSBjdXJyZW50IFBhdGgyLlxuICAgICAqIEBwYXJhbSBtaWRYIC0gbWlkZGxlIHBvaW50IHggdmFsdWVcbiAgICAgKiBAcGFyYW0gbWlkWSAtIG1pZGRsZSBwb2ludCB5IHZhbHVlXG4gICAgICogQHBhcmFtIGVuZFggLSBlbmQgcG9pbnQgeCB2YWx1ZVxuICAgICAqIEBwYXJhbSBlbmRZIC0gZW5kIHBvaW50IHkgdmFsdWVcbiAgICAgKiBAcGFyYW0gbnVtYmVyT2ZTZWdtZW50cyAtIChkZWZhdWx0OiAzNilcbiAgICAgKiBAcmV0dXJucyB0aGUgdXBkYXRlZCBQYXRoMi5cbiAgICAgKi9cbiAgICBhZGRBcmNUbyhtaWRYLCBtaWRZLCBlbmRYLCBlbmRZLCBudW1iZXJPZlNlZ21lbnRzID0gMzYpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFBvaW50ID0gdGhpcy5fcG9pbnRzW3RoaXMuX3BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgY29uc3QgbWlkUG9pbnQgPSBuZXcgVmVjdG9yMl8xLlZlY3RvcjIobWlkWCwgbWlkWSk7XG4gICAgICAgIGNvbnN0IGVuZFBvaW50ID0gbmV3IFZlY3RvcjJfMS5WZWN0b3IyKGVuZFgsIGVuZFkpO1xuICAgICAgICBjb25zdCBhcmMgPSBuZXcgQXJjMl8xLkFyYzIoc3RhcnRQb2ludCwgbWlkUG9pbnQsIGVuZFBvaW50KTtcbiAgICAgICAgbGV0IGluY3JlbWVudCA9IGFyYy5hbmdsZS5yYWRpYW5zKCkgLyBudW1iZXJPZlNlZ21lbnRzO1xuICAgICAgICBpZiAoYXJjLm9yaWVudGF0aW9uID09PSB0eXBlc18xLk9yaWVudGF0aW9uLkNXKSB7XG4gICAgICAgICAgICBpbmNyZW1lbnQgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1cnJlbnRBbmdsZSA9IGFyYy5zdGFydEFuZ2xlLnJhZGlhbnMoKSArIGluY3JlbWVudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZlNlZ21lbnRzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBNYXRoLmNvcyhjdXJyZW50QW5nbGUpICogYXJjLnJhZGl1cyArIGFyYy5jZW50ZXJQb2ludC54O1xuICAgICAgICAgICAgY29uc3QgeSA9IE1hdGguc2luKGN1cnJlbnRBbmdsZSkgKiBhcmMucmFkaXVzICsgYXJjLmNlbnRlclBvaW50Lnk7XG4gICAgICAgICAgICB0aGlzLmFkZExpbmVUbyh4LCB5KTtcbiAgICAgICAgICAgIGN1cnJlbnRBbmdsZSArPSBpbmNyZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgUGF0aDIuXG4gICAgICogQHJldHVybnMgdGhlIFBhdGgyLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdW0gb2YgdGhlIGRpc3RhbmNlIGJldHdlZW4gZWFjaCBzZXF1ZW50aWFsIHBvaW50IGluIHRoZSBwYXRoXG4gICAgICogQHJldHVybnMgdGhlIFBhdGgyIHRvdGFsIGxlbmd0aCAoZmxvYXQpLlxuICAgICAqL1xuICAgIGxlbmd0aCgpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2xlbmd0aDtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gdGhpcy5fcG9pbnRzW3RoaXMuX3BvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSB0aGlzLl9wb2ludHNbMF07XG4gICAgICAgICAgICByZXN1bHQgKz0gZmlyc3RQb2ludC5zdWJ0cmFjdChsYXN0UG9pbnQpLmxlbmd0aCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBvaW50cyB3aGljaCBjb25zdHJ1Y3QgdGhlIHBhdGhcbiAgICAgKiBAcmV0dXJucyB0aGUgUGF0aDIgaW50ZXJuYWwgYXJyYXkgb2YgcG9pbnRzLlxuICAgICAqL1xuICAgIGdldFBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmVpdmVzIHRoZSBwb2ludCBhdCB0aGUgZGlzdGFuY2UgYXdheXMgZnJvbSB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZExlbmd0aFBvc2l0aW9uIC0gdGhlIGxlbmd0aCBhbG9uZyB0aGUgcGF0aCB0byByZXRyZWl2ZSB0aGUgcG9pbnQgZnJvbVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFZlY3RvcjIgbG9jYXRlZCBhdCBhIHBlcmNlbnRhZ2Ugb2YgdGhlIFBhdGgyIHRvdGFsIGxlbmd0aCBvbiB0aGlzIHBhdGguXG4gICAgICovXG4gICAgZ2V0UG9pbnRBdExlbmd0aFBvc2l0aW9uKG5vcm1hbGl6ZWRMZW5ndGhQb3NpdGlvbikge1xuICAgICAgICBpZiAobm9ybWFsaXplZExlbmd0aFBvc2l0aW9uIDwgMCB8fCBub3JtYWxpemVkTGVuZ3RoUG9zaXRpb24gPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMl8xLlZlY3RvcjIuWmVybygpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbmd0aFBvc2l0aW9uID0gbm9ybWFsaXplZExlbmd0aFBvc2l0aW9uICogdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgbGV0IHByZXZpb3VzT2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGogPSAoaSArIDEpICUgdGhpcy5fcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGEgPSB0aGlzLl9wb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBiID0gdGhpcy5fcG9pbnRzW2pdO1xuICAgICAgICAgICAgY29uc3QgYlRvQSA9IGIuc3VidHJhY3QoYSk7XG4gICAgICAgICAgICBjb25zdCBuZXh0T2Zmc2V0ID0gYlRvQS5sZW5ndGgoKSArIHByZXZpb3VzT2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGxlbmd0aFBvc2l0aW9uID49IHByZXZpb3VzT2Zmc2V0ICYmIGxlbmd0aFBvc2l0aW9uIDw9IG5leHRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXIgPSBiVG9BLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsT2Zmc2V0ID0gbGVuZ3RoUG9zaXRpb24gLSBwcmV2aW91c09mZnNldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJfMS5WZWN0b3IyKGEueCArIGRpci54ICogbG9jYWxPZmZzZXQsIGEueSArIGRpci55ICogbG9jYWxPZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldmlvdXNPZmZzZXQgPSBuZXh0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWZWN0b3IyXzEuVmVjdG9yMi5aZXJvKCk7XG4gICAgfVxufVxuZXhwb3J0cy5QYXRoMiA9IFBhdGgyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGF0aDJkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXRoM0QgPSB2b2lkIDA7XG5jb25zdCBWZWN0b3IzXzEgPSByZXF1aXJlKFwiLi9WZWN0b3IzXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuY29uc3QgU2NhbGFyXzEgPSByZXF1aXJlKFwiLi9TY2FsYXJcIik7XG4vKipcbiAqIFJlcHJlc2VudHMgYSAzRCBwYXRoIG1hZGUgdXAgb2YgbXVsdGlwbGUgM0QgcG9pbnRzXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFBhdGgzRCB7XG4gICAgLyoqXG4gICAgICogbmV3IFBhdGgzRChwYXRoLCBub3JtYWwsIHJhdylcbiAgICAgKiBDcmVhdGVzIGEgUGF0aDNELiBBIFBhdGgzRCBpcyBhIGxvZ2ljYWwgbWF0aCBvYmplY3QsIHNvIG5vdCBhIG1lc2guXG4gICAgICogcGxlYXNlIHJlYWQgdGhlIGRlc2NyaXB0aW9uIGluIHRoZSB0dXRvcmlhbCA6ICBodHRwOi8vZG9jLmJhYnlsb25qcy5jb20vdHV0b3JpYWxzL0hvd190b191c2VfUGF0aDNEXG4gICAgICogQHBhcmFtIHBhdGggLSBhbiBhcnJheSBvZiBWZWN0b3IzLCB0aGUgY3VydmUgYXhpcyBvZiB0aGUgUGF0aDNEXG4gICAgICogQHBhcmFtIG5vcm1hbCAtIChvcHRpb25zKSBWZWN0b3IzLCB0aGUgZmlyc3Qgd2FudGVkIG5vcm1hbCB0byB0aGUgY3VydmUuIEV4ICgwLCAxLCAwKSBmb3IgYSB2ZXJ0aWNhbCBub3JtYWwuXG4gICAgICogQHBhcmFtIHJhdyAtIChvcHRpb25hbCwgZGVmYXVsdCBmYWxzZSkgOiBib29sZWFuLCBpZiB0cnVlIHRoZSByZXR1cm5lZCBQYXRoM0QgaXNuJ3Qgbm9ybWFsaXplZC4gVXNlZnVsIHRvIGRlcGljdCBwYXRoIGFjY2VsZXJhdGlvbiBvciBzcGVlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBhbiBhcnJheSBvZiBWZWN0b3IzLCB0aGUgY3VydmUgYXhpcyBvZiB0aGUgUGF0aDNEXG4gICAgICovXG4gICAgcGF0aCwgZmlyc3ROb3JtYWwgPSBudWxsLCByYXcpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5fY3VydmUgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5fZGlzdGFuY2VzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMuX3RhbmdlbnRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHRoaXMuX25vcm1hbHMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdGhpcy5fYmlub3JtYWxzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGF0aC5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgdGhpcy5fY3VydmVbcF0gPSBwYXRoW3BdLmNsb25lKCk7IC8vIGhhcmQgY29weVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JhdyA9IHJhdyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5fY29tcHV0ZShmaXJzdE5vcm1hbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFBhdGgzRCBhcnJheSBvZiBzdWNjZXNzaXZlIFZlY3RvcjMgZGVzaWduaW5nIGl0cyBjdXJ2ZS5cbiAgICAgKiBAcmV0dXJucyB0aGUgUGF0aDNEIGFycmF5IG9mIHN1Y2Nlc3NpdmUgVmVjdG9yMyBkZXNpZ25pbmcgaXRzIGN1cnZlLlxuICAgICAqL1xuICAgIGdldEN1cnZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VydmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggdGFuZ2VudCB2ZWN0b3JzIG9uIGVhY2ggUGF0aDNEIGN1cnZlIHBvaW50LlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIHRhbmdlbnQgdmVjdG9ycyBvbiBlYWNoIFBhdGgzRCBjdXJ2ZSBwb2ludC5cbiAgICAgKi9cbiAgICBnZXRUYW5nZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhbmdlbnRzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIG5vcm1hbCB2ZWN0b3JzIG9uIGVhY2ggUGF0aDNEIGN1cnZlIHBvaW50LlxuICAgICAqIEByZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIG5vcm1hbCB2ZWN0b3JzIG9uIGVhY2ggUGF0aDNEIGN1cnZlIHBvaW50LlxuICAgICAqL1xuICAgIGdldE5vcm1hbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWxzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IHBvcHVsYXRlZCB3aXRoIGJpbm9ybWFsIHZlY3RvcnMgb24gZWFjaCBQYXRoM0QgY3VydmUgcG9pbnQuXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggYmlub3JtYWwgdmVjdG9ycyBvbiBlYWNoIFBhdGgzRCBjdXJ2ZSBwb2ludC5cbiAgICAgKi9cbiAgICBnZXRCaW5vcm1hbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5vcm1hbHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggZGlzdGFuY2VzIChmbG9hdCkgb2YgdGhlIGktdGggcG9pbnQgZnJvbSB0aGUgZmlyc3QgY3VydmUgcG9pbnQuXG4gICAgICogQHJldHVybnMgYW4gYXJyYXkgcG9wdWxhdGVkIHdpdGggZGlzdGFuY2VzIChmbG9hdCkgb2YgdGhlIGktdGggcG9pbnQgZnJvbSB0aGUgZmlyc3QgY3VydmUgcG9pbnQuXG4gICAgICovXG4gICAgZ2V0RGlzdGFuY2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGlzdGFuY2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3JjZXMgdGhlIFBhdGgzRCB0YW5nZW50LCBub3JtYWwsIGJpbm9ybWFsIGFuZCBkaXN0YW5jZSByZWNvbXB1dGF0aW9uLlxuICAgICAqIEBwYXJhbSBwYXRoIC0gcGF0aCB3aGljaCBhbGwgdmFsdWVzIGFyZSBjb3BpZWQgaW50byB0aGUgY3VydmVzIHBvaW50c1xuICAgICAqIEBwYXJhbSBmaXJzdE5vcm1hbCAtIHdoaWNoIHNob3VsZCBiZSBwcm9qZWN0ZWQgb250byB0aGUgY3VydmVcbiAgICAgKiBAcmV0dXJucyB0aGUgc2FtZSBvYmplY3QgdXBkYXRlZC5cbiAgICAgKi9cbiAgICB1cGRhdGUocGF0aCwgZmlyc3ROb3JtYWwgPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGF0aC5sZW5ndGg7IHArKykge1xuICAgICAgICAgICAgdGhpcy5fY3VydmVbcF0ueCA9IHBhdGhbcF0ueDtcbiAgICAgICAgICAgIHRoaXMuX2N1cnZlW3BdLnkgPSBwYXRoW3BdLnk7XG4gICAgICAgICAgICB0aGlzLl9jdXJ2ZVtwXS56ID0gcGF0aFtwXS56O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbXB1dGUoZmlyc3ROb3JtYWwpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gcHJpdmF0ZSBmdW5jdGlvbiBjb21wdXRlKCkgOiBjb21wdXRlcyB0YW5nZW50cywgbm9ybWFscyBhbmQgYmlub3JtYWxzXG4gICAgX2NvbXB1dGUoZmlyc3ROb3JtYWwpIHtcbiAgICAgICAgY29uc3QgbCA9IHRoaXMuX2N1cnZlLmxlbmd0aDtcbiAgICAgICAgLy8gZmlyc3QgYW5kIGxhc3QgdGFuZ2VudHNcbiAgICAgICAgdGhpcy5fdGFuZ2VudHNbMF0gPSB0aGlzLl9nZXRGaXJzdE5vbk51bGxWZWN0b3IoMCk7XG4gICAgICAgIGlmICghdGhpcy5fcmF3KSB7XG4gICAgICAgICAgICB0aGlzLl90YW5nZW50c1swXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90YW5nZW50c1tsIC0gMV0gPSB0aGlzLl9jdXJ2ZVtsIC0gMV0uc3VidHJhY3QodGhpcy5fY3VydmVbbCAtIDJdKTtcbiAgICAgICAgaWYgKCF0aGlzLl9yYXcpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhbmdlbnRzW2wgLSAxXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBub3JtYWxzIGFuZCBiaW5vcm1hbHMgYXQgZmlyc3QgcG9pbnQgOiBhcmJpdHJhcnkgdmVjdG9yIHdpdGggX25vcm1hbFZlY3RvcigpXG4gICAgICAgIGNvbnN0IHRnMCA9IHRoaXMuX3RhbmdlbnRzWzBdO1xuICAgICAgICBjb25zdCBwcDAgPSB0aGlzLl9ub3JtYWxWZWN0b3IodGhpcy5fY3VydmVbMF0sIHRnMCwgZmlyc3ROb3JtYWwpO1xuICAgICAgICB0aGlzLl9ub3JtYWxzWzBdID0gcHAwO1xuICAgICAgICBpZiAoIXRoaXMuX3Jhdykge1xuICAgICAgICAgICAgdGhpcy5fbm9ybWFsc1swXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9iaW5vcm1hbHNbMF0gPSBWZWN0b3IzXzEuVmVjdG9yMy5Dcm9zcyh0ZzAsIHRoaXMuX25vcm1hbHNbMF0pO1xuICAgICAgICBpZiAoIXRoaXMuX3Jhdykge1xuICAgICAgICAgICAgdGhpcy5fYmlub3JtYWxzWzBdLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Rpc3RhbmNlc1swXSA9IDAuMDtcbiAgICAgICAgLy8gbm9ybWFscyBhbmQgYmlub3JtYWxzIDogbmV4dCBwb2ludHNcbiAgICAgICAgbGV0IHByZXY7IC8vIHByZXZpb3VzIHZlY3RvciAoc2VnbWVudClcbiAgICAgICAgbGV0IGN1cjsgLy8gY3VycmVudCB2ZWN0b3IgKHNlZ21lbnQpXG4gICAgICAgIGxldCBjdXJUYW5nOyAvLyBjdXJyZW50IHRhbmdlbnRcbiAgICAgICAgLy8gcHJldmlvdXMgbm9ybWFsXG4gICAgICAgIGxldCBwcmV2Qmlub3I7IC8vIHByZXZpb3VzIGJpbm9ybWFsXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAvLyB0YW5nZW50c1xuICAgICAgICAgICAgcHJldiA9IHRoaXMuX2dldExhc3ROb25OdWxsVmVjdG9yKGkpO1xuICAgICAgICAgICAgaWYgKGkgPCBsIC0gMSkge1xuICAgICAgICAgICAgICAgIGN1ciA9IHRoaXMuX2dldEZpcnN0Tm9uTnVsbFZlY3RvcihpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90YW5nZW50c1tpXSA9IHByZXYuYWRkKGN1cik7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGFuZ2VudHNbaV0ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kaXN0YW5jZXNbaV0gPSB0aGlzLl9kaXN0YW5jZXNbaSAtIDFdICsgcHJldi5sZW5ndGgoKTtcbiAgICAgICAgICAgIC8vIG5vcm1hbHMgYW5kIGJpbm9ybWFsc1xuICAgICAgICAgICAgLy8gaHR0cDovL3d3dy5jcy5jbXUuZWR1L2Fmcy9hbmRyZXcvc2NzL2NzLzE1LTQ2Mi93ZWIvb2xkL2Fzc3QyY2FtZXJhLmh0bWxcbiAgICAgICAgICAgIGN1clRhbmcgPSB0aGlzLl90YW5nZW50c1tpXTtcbiAgICAgICAgICAgIHByZXZCaW5vciA9IHRoaXMuX2Jpbm9ybWFsc1tpIC0gMV07XG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxzW2ldID0gVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3MocHJldkJpbm9yLCBjdXJUYW5nKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fcmF3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm9ybWFsc1tpXS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Jpbm9ybWFsc1tpXSA9IFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzKGN1clRhbmcsIHRoaXMuX25vcm1hbHNbaV0pO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9yYXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5vcm1hbHNbaV0ubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmV0dXJucyB0aGUgZmlyc3Qgbm9uIG51bGwgdmVjdG9yIGZyb20gaW5kZXggOiBjdXJ2ZVtpbmRleCArIE5dLnN1YnRyYWN0KGN1cnZlW2luZGV4XSlcbiAgICBfZ2V0Rmlyc3ROb25OdWxsVmVjdG9yKGluZGV4KSB7XG4gICAgICAgIGxldCBpID0gMTtcbiAgICAgICAgbGV0IG5OVmVjdG9yID0gdGhpcy5fY3VydmVbaW5kZXggKyBpXS5zdWJ0cmFjdCh0aGlzLl9jdXJ2ZVtpbmRleF0pO1xuICAgICAgICB3aGlsZSAobk5WZWN0b3IubGVuZ3RoKCkgPT09IDAgJiYgaW5kZXggKyBpICsgMSA8IHRoaXMuX2N1cnZlLmxlbmd0aCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgbk5WZWN0b3IgPSB0aGlzLl9jdXJ2ZVtpbmRleCArIGldLnN1YnRyYWN0KHRoaXMuX2N1cnZlW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5OVmVjdG9yO1xuICAgIH1cbiAgICAvLyByZXR1cm5zIHRoZSBsYXN0IG5vbiBudWxsIHZlY3RvciBmcm9tIGluZGV4IDogY3VydmVbaW5kZXhdLnN1YnRyYWN0KGN1cnZlW2luZGV4IC0gTl0pXG4gICAgX2dldExhc3ROb25OdWxsVmVjdG9yKGluZGV4KSB7XG4gICAgICAgIGxldCBpID0gMTtcbiAgICAgICAgbGV0IG5MVmVjdG9yID0gdGhpcy5fY3VydmVbaW5kZXhdLnN1YnRyYWN0KHRoaXMuX2N1cnZlW2luZGV4IC0gaV0pO1xuICAgICAgICB3aGlsZSAobkxWZWN0b3IubGVuZ3RoKCkgPT09IDAgJiYgaW5kZXggPiBpICsgMSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgbkxWZWN0b3IgPSB0aGlzLl9jdXJ2ZVtpbmRleF0uc3VidHJhY3QodGhpcy5fY3VydmVbaW5kZXggLSBpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5MVmVjdG9yO1xuICAgIH1cbiAgICAvLyBwcml2YXRlIGZ1bmN0aW9uIG5vcm1hbFZlY3Rvcih2MCwgdnQsIHZhKSA6XG4gICAgLy8gcmV0dXJucyBhbiBhcmJpdHJhcnkgcG9pbnQgaW4gdGhlIHBsYW5lIGRlZmluZWQgYnkgdGhlIHBvaW50IHYwIGFuZCB0aGUgdmVjdG9yIHZ0IG9ydGhvZ29uYWwgdG8gdGhpcyBwbGFuZVxuICAgIC8vIGlmIHZhIGlzIHBhc3NlZCwgaXQgcmV0dXJucyB0aGUgdmEgcHJvamVjdGlvbiBvbiB0aGUgcGxhbmUgb3J0aG9nb25hbCB0byB2dCBhdCB0aGUgcG9pbnQgdjBcbiAgICBfbm9ybWFsVmVjdG9yKHYwLCB2dCwgdmEpIHtcbiAgICAgICAgbGV0IG5vcm1hbDA7XG4gICAgICAgIGxldCB0Z2wgPSB2dC5sZW5ndGgoKTtcbiAgICAgICAgaWYgKHRnbCA9PT0gMC4wKSB7XG4gICAgICAgICAgICB0Z2wgPSAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhID09PSB1bmRlZmluZWQgfHwgdmEgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBwb2ludDtcbiAgICAgICAgICAgIGlmICghU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24oTWF0aC5hYnModnQueSkgLyB0Z2wsIDEuMCwgdHlwZXNfMS5FcHNpbG9uKSkge1xuICAgICAgICAgICAgICAgIC8vIHNlYXJjaCBmb3IgYSBwb2ludCBpbiB0aGUgcGxhbmVcbiAgICAgICAgICAgICAgICBwb2ludCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIC0xLjAsIDAuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghU2NhbGFyXzEuU2NhbGFyLldpdGhpbkVwc2lsb24oTWF0aC5hYnModnQueCkgLyB0Z2wsIDEuMCwgdHlwZXNfMS5FcHNpbG9uKSkge1xuICAgICAgICAgICAgICAgIHBvaW50ID0gbmV3IFZlY3RvcjNfMS5WZWN0b3IzKDEuMCwgMC4wLCAwLjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIVNjYWxhcl8xLlNjYWxhci5XaXRoaW5FcHNpbG9uKE1hdGguYWJzKHZ0LnopIC8gdGdsLCAxLjAsIHR5cGVzXzEuRXBzaWxvbikpIHtcbiAgICAgICAgICAgICAgICBwb2ludCA9IG5ldyBWZWN0b3IzXzEuVmVjdG9yMygwLjAsIDAuMCwgMS4wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvaW50ID0gVmVjdG9yM18xLlZlY3RvcjMuWmVybygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9ybWFsMCA9IFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzKHZ0LCBwb2ludCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub3JtYWwwID0gVmVjdG9yM18xLlZlY3RvcjMuQ3Jvc3ModnQsIHZhKTtcbiAgICAgICAgICAgIFZlY3RvcjNfMS5WZWN0b3IzLkNyb3NzVG9SZWYobm9ybWFsMCwgdnQsIG5vcm1hbDApO1xuICAgICAgICB9XG4gICAgICAgIG5vcm1hbDAubm9ybWFsaXplKCk7XG4gICAgICAgIHJldHVybiBub3JtYWwwO1xuICAgIH1cbn1cbmV4cG9ydHMuUGF0aDNEID0gUGF0aDNEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGF0aDNkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaXplID0gdm9pZCAwO1xuLyoqXG4gKiBTaXplIGNvbnRhaW5pbmcgd2lkaHQgYW5kIGhlaWdodFxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTaXplIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgU2l6ZSBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gd2lkdGggYW5kIGhlaWdodCAoZmxvYXRzKS5cbiAgICAgKiBAcGFyYW0gd2lkdGggLSB3aWR0aCBvZiB0aGUgbmV3IHNpemVcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gaGVpZ2h0IG9mIHRoZSBuZXcgc2l6ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHN1cmZhY2Ugb2YgdGhlIFNpemUgOiB3aWR0aCAqIGhlaWdodCAoZmxvYXQpLlxuICAgICAqL1xuICAgIGdldCBzdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgc2l6ZSBvZiB6ZXJvXG4gICAgICogQHJldHVybnMgYSBuZXcgU2l6ZSBzZXQgdG8gKDAuMCwgMC4wKVxuICAgICAqL1xuICAgIHN0YXRpYyBaZXJvKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpemUoMC4wLCAwLjApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNpemUgc2V0IGF0IHRoZSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBcImFtb3VudFwiIGJldHdlZW4gXCJzdGFydFwiIGFuZCBcImVuZFwiXG4gICAgICogQHBhcmFtIHN0YXJ0IC0gc3RhcnRpbmcgc2l6ZSB0byBsZXJwIGJldHdlZW5cbiAgICAgKiBAcGFyYW0gZW5kIC0gZW5kIHNpemUgdG8gbGVycCBiZXR3ZWVuXG4gICAgICogQHBhcmFtIGFtb3VudCAtIGFtb3VudCB0byBsZXJwIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzXG4gICAgICogQHJldHVybnMgYSBuZXcgU2l6ZSBzZXQgYXQgdGhlIGxpbmVhciBpbnRlcnBvbGF0aW9uIFwiYW1vdW50XCIgYmV0d2VlbiBcInN0YXJ0XCIgYW5kIFwiZW5kXCJcbiAgICAgKi9cbiAgICBzdGF0aWMgTGVycChzdGFydCwgZW5kLCBhbW91bnQpIHtcbiAgICAgICAgY29uc3QgdyA9IHN0YXJ0LndpZHRoICsgKGVuZC53aWR0aCAtIHN0YXJ0LndpZHRoKSAqIGFtb3VudDtcbiAgICAgICAgY29uc3QgaCA9IHN0YXJ0LmhlaWdodCArIChlbmQuaGVpZ2h0IC0gc3RhcnQuaGVpZ2h0KSAqIGFtb3VudDtcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKHcsIGgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIFNpemUgd2lkdGggYW5kIGhlaWdodFxuICAgICAqIEByZXR1cm5zIGEgc3RyaW5nIHdpdGggdGhlIFNpemUgd2lkdGggYW5kIGhlaWdodFxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYHtXOiAke3RoaXMud2lkdGh9LCBIOiAke3RoaXMuaGVpZ2h0fX1gO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIlNpemVcIlxuICAgICAqIEByZXR1cm5zIHRoZSBzdHJpbmcgXCJTaXplXCJcbiAgICAgKi9cbiAgICBnZXRDbGFzc05hbWUoKSB7XG4gICAgICAgIHJldHVybiAnU2l6ZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFNpemUgaGFzaCBjb2RlLlxuICAgICAqIEByZXR1cm5zIGEgaGFzaCBjb2RlIGZvciBhIHVuaXF1ZSB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICovXG4gICAgZ2V0SGFzaENvZGUoKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy53aWR0aCB8fCAwO1xuICAgICAgICBoYXNoID0gKGhhc2ggKiAzOTcpIF4gKHRoaXMuaGVpZ2h0IHx8IDApO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgY3VycmVudCBzaXplIGZyb20gdGhlIGdpdmVuIG9uZS5cbiAgICAgKiBAcGFyYW0gc3JjIC0gdGhlIGdpdmVuIHNpemVcbiAgICAgKi9cbiAgICBjb3B5RnJvbShzcmMpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHNyYy53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBzcmMuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGluIHBsYWNlIHRoZSBjdXJyZW50IFNpemUgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB3aWR0aCAtIHdpZHRoIG9mIHRoZSBuZXcgc2l6ZVxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBoZWlnaHQgb2YgdGhlIG5ldyBzaXplXG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgU2l6ZS5cbiAgICAgKi9cbiAgICBjb3B5RnJvbUZsb2F0cyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGluIHBsYWNlIHRoZSBjdXJyZW50IFNpemUgZnJvbSB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqIEBwYXJhbSB3aWR0aCAtIHdpZHRoIHRvIHNldFxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBoZWlnaHQgdG8gc2V0XG4gICAgICogQHJldHVybnMgdGhlIHVwZGF0ZWQgU2l6ZS5cbiAgICAgKi9cbiAgICBzZXQod2lkdGgsIGhlaWdodCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5RnJvbUZsb2F0cyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgd2lkdGggYW5kIGhlaWdodCBieSBudW1iZXJzXG4gICAgICogQHBhcmFtIHcgLSBmYWN0b3IgdG8gbXVsdGlwbGUgdGhlIHdpZHRoIGJ5XG4gICAgICogQHBhcmFtIGggLSBmYWN0b3IgdG8gbXVsdGlwbGUgdGhlIGhlaWdodCBieVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFNpemUgc2V0IHdpdGggdGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdCBvZiB0aGUgY3VycmVudCBTaXplIGFuZCB0aGUgZ2l2ZW4gZmxvYXRzLlxuICAgICAqL1xuICAgIG11bHRpcGx5QnlGbG9hdHModywgaCkge1xuICAgICAgICByZXR1cm4gbmV3IFNpemUodGhpcy53aWR0aCAqIHcsIHRoaXMuaGVpZ2h0ICogaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lcyB0aGUgc2l6ZVxuICAgICAqIEByZXR1cm5zIGEgbmV3IFNpemUgY29waWVkIGZyb20gdGhlIGdpdmVuIG9uZS5cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGUgY3VycmVudCBTaXplIGFuZCB0aGUgZ2l2ZW4gb25lIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHN0cmljdGx5IGVxdWFsLlxuICAgICAqIEBwYXJhbSBvdGhlciAtIHRoZSBvdGhlciBzaXplIHRvIGNvbXBhcmUgYWdhaW5zdFxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGN1cnJlbnQgU2l6ZSBhbmQgdGhlIGdpdmVuIG9uZSB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBzdHJpY3RseSBlcXVhbC5cbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXIpIHtcbiAgICAgICAgaWYgKCFvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoID09PSBvdGhlci53aWR0aCAmJiB0aGlzLmhlaWdodCA9PT0gb3RoZXIuaGVpZ2h0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdW1zIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHR3byBzaXplc1xuICAgICAqIEBwYXJhbSBvdGhlclNpemUgLSBzaXplIHRvIGFkZCB0byB0aGlzIHNpemVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBTaXplIHNldCBhcyB0aGUgYWRkaXRpb24gcmVzdWx0IG9mIHRoZSBjdXJyZW50IFNpemUgYW5kIHRoZSBnaXZlbiBvbmUuXG4gICAgICovXG4gICAgYWRkKG90aGVyU2l6ZSkge1xuICAgICAgICBjb25zdCByID0gbmV3IFNpemUodGhpcy53aWR0aCArIG90aGVyU2l6ZS53aWR0aCwgdGhpcy5oZWlnaHQgKyBvdGhlclNpemUuaGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0d29cbiAgICAgKiBAcGFyYW0gb3RoZXJTaXplIC0gc2l6ZSB0byBzdWJ0cmFjdCB0byB0aGlzIHNpemVcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBTaXplIHNldCBhcyB0aGUgc3VidHJhY3Rpb24gcmVzdWx0IG9mICB0aGUgZ2l2ZW4gb25lIGZyb20gdGhlIGN1cnJlbnQgU2l6ZS5cbiAgICAgKi9cbiAgICBzdWJ0cmFjdChvdGhlclNpemUpIHtcbiAgICAgICAgY29uc3QgciA9IG5ldyBTaXplKHRoaXMud2lkdGggLSBvdGhlclNpemUud2lkdGgsIHRoaXMuaGVpZ2h0IC0gb3RoZXJTaXplLmhlaWdodCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbn1cbmV4cG9ydHMuU2l6ZSA9IFNpemU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TaXplLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3ByZWFsbG9jYXRlZFZhcmlhYmxlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQW5nbGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0FyYzJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0F4aXNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0JlemllckN1cnZlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db2xvcjNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvbG9yNFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vQ3VydmUzZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRnVyc3R1bVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vTWF0cml4XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9QYXRoMmRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BhdGgzZFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUGxhbmVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1F1YXRlcm5pb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1NjYWxhclwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU2l6ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmVjdG9yMlwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmVjdG9yM1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVmVjdG9yNFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW5kZXhcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBuZXdJZCB9IGZyb20gJy4uL2Vjcy9oZWxwZXJzJ1xuaW1wb3J0IHsgQW5pbWF0b3IgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBBbmltYXRpb25QYXJhbXMgPSB7XG4gIGxvb3Bpbmc/OiBib29sZWFuXG4gIHNwZWVkPzogbnVtYmVyXG4gIHdlaWdodD86IG51bWJlclxuICBsYXllcj86IG51bWJlclxufVxuXG5jb25zdCBkZWZhdWx0UGFyYW1zOiBSZXF1aXJlZDxcbiAgUGljazxBbmltYXRpb25QYXJhbXMsICdsb29waW5nJyB8ICdzcGVlZCcgfCAnd2VpZ2h0JyB8ICdsYXllcic+XG4+ID0ge1xuICBsb29waW5nOiB0cnVlLFxuICBzcGVlZDogMS4wLFxuICB3ZWlnaHQ6IDEuMCxcbiAgbGF5ZXI6IDBcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmltYXRpb25TdGF0ZSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvLyBAaW50ZXJuYWxcbiAgcHVibGljIGlzQW5pbWF0aW9uQ2xpcDogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgYW5pbWF0aW9uIGluIHRoZSBtb2RlbFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcHVibGljIHJlYWRvbmx5IGNsaXA6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBEb2VzIHRoZSBhbmltYXRpb24gbG9vcD8sIGRlZmF1bHQ6IHRydWVcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBsb29waW5nOiBib29sZWFuID0gZGVmYXVsdFBhcmFtcy5sb29waW5nXG5cbiAgLyoqXG4gICAqIFdlaWdodCBvZiB0aGUgYW5pbWF0aW9uLCB2YWx1ZXMgZnJvbSAwIHRvIDEsIHVzZWQgdG8gYmxlbmQgc2V2ZXJhbCBhbmltYXRpb25zLiBkZWZhdWx0OiAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwdWJsaWMgd2VpZ2h0OiBudW1iZXIgPSBkZWZhdWx0UGFyYW1zLndlaWdodFxuXG4gIC8qKlxuICAgKiBJcyB0aGUgYW5pbWF0aW9uIHBsYXlpbmc/IGRlZmF1bHQ6IHRydWVcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHB1YmxpYyBwbGF5aW5nOiBib29sZWFuID0gZmFsc2VcblxuICAvKipcbiAgICogRG9lcyBhbnkgYW55b25lIGFza2VkIHRvIHJlc2V0IHRoZSBhbmltYXRpb24/IGRlZmF1bHQ6IGZhbHNlXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwdWJsaWMgc2hvdWxkUmVzZXQ6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBUaGUgYW5pbWF0aW9uIHNwZWVkXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwdWJsaWMgc3BlZWQ6IG51bWJlciA9IGRlZmF1bHRQYXJhbXMuc3BlZWRcblxuICAvLyBAaW50ZXJuYWxcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gbmV3SWQoJ0FuaW1DbGlwJylcblxuICAvKipcbiAgICogTGF5ZXJpbmcgYWxsb3dzIHlvdSB0byBoYXZlIHR3byBvciBtb3JlIGxldmVscyBvZiBhbmltYXRpb24gb24gYW4gb2JqZWN0J3MgcGFyYW1ldGVycyBhdCB0aGUgc2FtZSB0aW1lXG4gICAqL1xuICBwdWJsaWMgbGF5ZXI6IG51bWJlciA9IGRlZmF1bHRQYXJhbXMubGF5ZXJcblxuICAvLyBAaW50ZXJuYWxcbiAgcHVibGljIG93bmVyPzogQW5pbWF0b3JcblxuICBjb25zdHJ1Y3RvcihjbGlwOiBzdHJpbmcsIHBhcmFtczogQW5pbWF0aW9uUGFyYW1zID0gZGVmYXVsdFBhcmFtcykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmNsaXAgPSBjbGlwXG4gICAgdGhpcy5zZXRQYXJhbXMoeyAuLi5wYXJhbXMgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjbGlwIHBhcmFtZXRlcnNcbiAgICovXG4gIHNldFBhcmFtcyhwYXJhbXM6IEFuaW1hdGlvblBhcmFtcykge1xuICAgIHRoaXMubG9vcGluZyA9IHBhcmFtcy5sb29waW5nICE9PSB1bmRlZmluZWQgPyBwYXJhbXMubG9vcGluZyA6IHRoaXMubG9vcGluZ1xuICAgIHRoaXMuc3BlZWQgPSBwYXJhbXMuc3BlZWQgfHwgdGhpcy5zcGVlZFxuICAgIHRoaXMud2VpZ2h0ID0gcGFyYW1zLndlaWdodCB8fCB0aGlzLndlaWdodFxuICAgIHRoaXMubGF5ZXIgPSBwYXJhbXMubGF5ZXIgfHwgdGhpcy5sYXllclxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QgcmV0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdXBlci50b0pTT04oKSkpXG4gICAgaWYgKHRoaXMuc2hvdWxkUmVzZXQpIHtcbiAgICAgIHRoaXMuc2hvdWxkUmVzZXQgPSBmYWxzZVxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBhbmltYXRpb25cbiAgICovXG4gIHBsYXkocmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMub3duZXI/LnBsYXkodGhpcywgcmVzZXQpXG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSBhbmltYXRpb25cbiAgICovXG4gIHBhdXNlKCkge1xuICAgIHRoaXMub3duZXI/LnBhdXNlKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBhbmltYXRpb24gc3RhdGUgdG8gdGhlIGZyYW1lIDBcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2hvdWxkUmVzZXQgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIGFuZCBwYXVzZXMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLm93bmVyPy5zdG9wKHRoaXMpXG4gIH1cbn1cbiIsImltcG9ydCB7IFJlYWRPbmx5Q29sb3I0IH0gZnJvbSAnQGRjbC9lY3MtbWF0aCdcblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIElucHV0RXZlbnRUeXBlIHtcbiAgRE9XTixcbiAgVVBcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIENhbWVyYU1vZGUge1xuICBGaXJzdFBlcnNvbiA9IDAsXG4gIFRoaXJkUGVyc29uID0gMSxcbiAgLy8gQGludGVybmFsXG4gIEJ1aWxkaW5nVG9vbEdvZE1vZGUgPSAyXG59XG5cbi8vIEBpbnRlcm5hbFxuZXhwb3J0IGNvbnN0IEFWQVRBUl9PQlNFUlZBQkxFID0gJ0FWQVRBUl9PQlNFUlZBQkxFJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgV2VhcmFibGVJZCA9IHN0cmluZ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgQXZhdGFyRm9yUmVuZGVyZXIgPSB7XG4gIGJvZHlTaGFwZTogV2VhcmFibGVJZFxuICBza2luQ29sb3I6IFJlYWRPbmx5Q29sb3I0XG4gIGhhaXJDb2xvcjogUmVhZE9ubHlDb2xvcjRcbiAgZXllQ29sb3I6IFJlYWRPbmx5Q29sb3I0XG4gIHdlYXJhYmxlczogV2VhcmFibGVJZFtdXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBXZWFyYWJsZSA9IHtcbiAgaWQ6IFdlYXJhYmxlSWRcbiAgdHlwZTogJ3dlYXJhYmxlJ1xuICBjYXRlZ29yeTogc3RyaW5nXG4gIGJhc2VVcmw6IHN0cmluZ1xuICB0YWdzOiBzdHJpbmdbXVxuICByZXByZXNlbnRhdGlvbnM6IEJvZHlTaGFwZVJlc3ByZXNlbnRhdGlvbltdXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBCb2R5U2hhcGVSZXNwcmVzZW50YXRpb24gPSB7XG4gIGJvZHlTaGFwZXM6IHN0cmluZ1tdXG4gIG1haW5GaWxlOiBzdHJpbmdcbiAgY29udGVudHM6IEZpbGVBbmRIYXNoW11cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEZpbGVBbmRIYXNoID0ge1xuICBmaWxlOiBzdHJpbmdcbiAgaGFzaDogc3RyaW5nXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBQcm9maWxlRm9yUmVuZGVyZXIgPSB7XG4gIHVzZXJJZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIGVtYWlsOiBzdHJpbmdcbiAgYXZhdGFyOiBBdmF0YXJGb3JSZW5kZXJlclxuICBzbmFwc2hvdHM6IHtcbiAgICBmYWNlMjU2OiBzdHJpbmdcbiAgICBib2R5OiBzdHJpbmdcbiAgfVxuICB2ZXJzaW9uOiBudW1iZXJcbiAgaGFzQ29ubmVjdGVkV2ViMzogYm9vbGVhblxuICB1cGRhdGVkQXQ/OiBudW1iZXJcbiAgY3JlYXRlZEF0PzogbnVtYmVyXG4gIHBhcmNlbHNXaXRoQWNjZXNzPzogUGFyY2Vsc1dpdGhBY2Nlc3Ncbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIFBhcmNlbHNXaXRoQWNjZXNzID0gQXJyYXk8e1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG4gIHJvbGU6IExhbmRSb2xlXG59PlxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGVudW0gTGFuZFJvbGUge1xuICBPV05FUiA9ICdvd25lcicsXG4gIE9QRVJBVE9SID0gJ29wZXJhdG9yJ1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgTWluaW1hcFNjZW5lSW5mbyA9IHtcbiAgbmFtZTogc3RyaW5nXG4gIG93bmVyOiBzdHJpbmdcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xuICBwcmV2aWV3SW1hZ2VVcmw6IHN0cmluZyB8IHVuZGVmaW5lZFxuICB0eXBlOiBudW1iZXJcbiAgcGFyY2VsczogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9W11cbiAgaXNQT0k6IGJvb2xlYW5cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tICdAZGNsL2Vjcy1tYXRoJ1xuXG5pbXBvcnQgeyBJbnB1dEV2ZW50VHlwZSB9IGZyb20gJy4vVHlwZXMnXG5pbXBvcnQgeyBDb21wb25lbnQsIERpc3Bvc2FibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSW5wdXRFdmVudEtpbmQgPSAnQlVUVE9OX0RPV04nIHwgJ0JVVFRPTl9VUCdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbkJ1dHRvbiB7XG4gIFBPSU5URVIgPSAnUE9JTlRFUicsXG4gIFBSSU1BUlkgPSAnUFJJTUFSWScsXG4gIFNFQ09OREFSWSA9ICdTRUNPTkRBUlknLFxuICBBTlkgPSAnQU5ZJyxcbiAgRk9SV0FSRCA9ICdGT1JXQVJEJyxcbiAgQkFDS1dBUkQgPSAnQkFDS1dBUkQnLFxuICBSSUdIVCA9ICdSSUdIVCcsXG4gIExFRlQgPSAnTEVGVCcsXG4gIEpVTVAgPSAnSlVNUCcsXG4gIFdBTEsgPSAnV0FMSycsXG4gIEFDVElPTl8zID0gJ0FDVElPTl8zJyxcbiAgQUNUSU9OXzQgPSAnQUNUSU9OXzQnLFxuICBBQ1RJT05fNSA9ICdBQ1RJT05fNScsXG4gIEFDVElPTl82ID0gJ0FDVElPTl82J1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgSW5wdXRTdGF0ZSA9IFJlY29yZDxcbiAgQWN0aW9uQnV0dG9uLFxuICB7XG4gICAgQlVUVE9OX0RPV046IGJvb2xlYW5cbiAgfVxuPlxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgTG9jYWxBY3Rpb25CdXR0b25FdmVudCA9IEdsb2JhbElucHV0RXZlbnRSZXN1bHQgJiB7XG4gIG9yaWdpbjogVmVjdG9yM1xuICBkaXJlY3Rpb246IFZlY3RvcjNcbiAgYnV0dG9uOiBBY3Rpb25CdXR0b25cbiAgaGl0PzogR2xvYmFsSW5wdXRFdmVudFJlc3VsdFsnaGl0J10gJiB7XG4gICAgaGl0UG9pbnQ6IFZlY3RvcjNcbiAgICBub3JtYWw6IFZlY3RvcjNcbiAgICB3b3JsZE5vcm1hbDogVmVjdG9yM1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUG9pbnRlckV2ZW50Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbGxiYWNrOiAoZXZlbnQ6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWRcbiAgKSB7XG4gICAgaWYgKCFjYWxsYmFjayB8fCAhKCdhcHBseScgaW4gY2FsbGJhY2spIHx8ICEoJ2NhbGwnIGluIGNhbGxiYWNrKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbicpXG4gICAgfVxuICAgIElucHV0LmVuc3VyZUluc3RhbmNlKClcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgncG9pbnRlckRvd24nKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFBvaW50ZXJEb3duIGV4dGVuZHMgUG9pbnRlckV2ZW50Q29tcG9uZW50IHt9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdwb2ludGVyVXAnKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFBvaW50ZXJVcCBleHRlbmRzIFBvaW50ZXJFdmVudENvbXBvbmVudCB7fVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvbiB7XG4gIHB1YmxpYyBmbjogKGU6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWRcbiAgcHVibGljIHVzZVJheWNhc3Q6IGJvb2xlYW5cblxuICBjb25zdHJ1Y3RvcihmbjogKGU6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWQsIHVzZVJheWNhc3Q6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmZuID0gZm5cbiAgICB0aGlzLnVzZVJheWNhc3QgPSB1c2VSYXljYXN0XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dCB7XG4gIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogSW5wdXRcblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBidXR0b25JZE1hcHBpbmc6IEFjdGlvbkJ1dHRvbltdID0gW1xuICAgIEFjdGlvbkJ1dHRvbi5QT0lOVEVSLFxuICAgIEFjdGlvbkJ1dHRvbi5QUklNQVJZLFxuICAgIEFjdGlvbkJ1dHRvbi5TRUNPTkRBUlksXG4gICAgQWN0aW9uQnV0dG9uLkFOWSxcbiAgICBBY3Rpb25CdXR0b24uRk9SV0FSRCxcbiAgICBBY3Rpb25CdXR0b24uQkFDS1dBUkQsXG4gICAgQWN0aW9uQnV0dG9uLlJJR0hULFxuICAgIEFjdGlvbkJ1dHRvbi5MRUZULFxuICAgIEFjdGlvbkJ1dHRvbi5KVU1QLFxuICAgIEFjdGlvbkJ1dHRvbi5XQUxLLFxuICAgIEFjdGlvbkJ1dHRvbi5BQ1RJT05fMyxcbiAgICBBY3Rpb25CdXR0b24uQUNUSU9OXzQsXG4gICAgQWN0aW9uQnV0dG9uLkFDVElPTl81LFxuICAgIEFjdGlvbkJ1dHRvbi5BQ1RJT05fNlxuICBdXG5cbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBJbnB1dCB7XG4gICAgSW5wdXQuZW5zdXJlSW5zdGFuY2UoKVxuICAgIHJldHVybiBJbnB1dC5faW5zdGFuY2VcbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFJlY29yZDxcbiAgICBBY3Rpb25CdXR0b24sXG4gICAgUmVjb3JkPElucHV0RXZlbnRLaW5kLCBBcnJheTxTdWJzY3JpcHRpb24+PlxuICA+ID0gdGhpcy5idXR0b25JZE1hcHBpbmcucmVkdWNlKFxuICAgIChhY2MsIGspID0+ICh7IC4uLmFjYywgW2tdOiB7IEJVVFRPTl9ET1dOOiBbXSwgQlVUVE9OX1VQOiBbXSB9IH0pLFxuICAgIHt9IGFzIFJlY29yZDxBY3Rpb25CdXR0b24sIFJlY29yZDxJbnB1dEV2ZW50S2luZCwgQXJyYXk8U3Vic2NyaXB0aW9uPj4+XG4gIClcblxuICBwcml2YXRlIGludGVybmFsU3RhdGU6IElucHV0U3RhdGUgPSB0aGlzLmJ1dHRvbklkTWFwcGluZy5yZWR1Y2UoXG4gICAgKGFjYywgaykgPT4gKHsgLi4uYWNjLCBba106IHsgQlVUVE9OX0RPV046IGZhbHNlIH0gfSksXG4gICAge30gYXMgSW5wdXRTdGF0ZVxuICApXG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgc3RhdGljIGVuc3VyZUluc3RhbmNlKCk6IGFueSB7XG4gICAgaWYgKCFJbnB1dC5faW5zdGFuY2UpIHtcbiAgICAgIElucHV0Ll9pbnN0YW5jZSA9IG5ldyBJbnB1dCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyB0byBrbm93IGlmIGEgYnV0dG9uIGlzIHByZXNzZWRcbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBidXR0b24gaXMgcHJlc3NlZFxuICAgKiBAcGFyYW0gYnV0dG9uSWQgLSBUaGUgaWQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIHB1YmxpYyBpc0J1dHRvblByZXNzZWQoYnV0dG9uSWQ6IEFjdGlvbkJ1dHRvbikge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsU3RhdGVbYnV0dG9uSWRdXG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyB0byBhbiBpbnB1dCBldmVudCBhbmQgdHJpZ2dlcnMgdGhlIHByb3ZpZGVkIGNhbGxiYWNrLlxuICAgKlxuICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uLlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IChzZWUgSW5wdXRFdmVudEtpbmQpLlxuICAgKiBAcGFyYW0gYnV0dG9uSWQgLSBUaGUgaWQgb2YgdGhlIGJ1dHRvbi5cbiAgICogQHBhcmFtIHVzZVJheWNhc3QgLSBFbmFibGVzIGdldHRpbmcgcmF5Y2FzdCBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIGZuIC0gQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgcHVibGljIHN1YnNjcmliZShcbiAgICBldmVudE5hbWU6IElucHV0RXZlbnRLaW5kLFxuICAgIGJ1dHRvbklkOiBBY3Rpb25CdXR0b24sXG4gICAgdXNlUmF5Y2FzdDogYm9vbGVhbixcbiAgICBmbjogKGU6IExvY2FsQWN0aW9uQnV0dG9uRXZlbnQpID0+IHZvaWRcbiAgKTogKCkgPT4gdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdLnB1c2goXG4gICAgICBuZXcgU3Vic2NyaXB0aW9uKGZuLCB1c2VSYXljYXN0KVxuICAgIClcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy51bnN1YnNjcmliZShldmVudE5hbWUsIGJ1dHRvbklkLCBmbilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBleGlzdGluZyBpbnB1dCBldmVudCBzdWJzY3JpcHRpb24uXG4gICAqIEBwYXJhbSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgKHNlZSBJbnB1dEV2ZW50S2luZCkuXG4gICAqIEBwYXJhbSBidXR0b25JZCAtIFRoZSBpZCBvZiB0aGUgYnV0dG9uLlxuICAgKiBAcGFyYW0gZm4gLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdXNlZCB3aGVuIHN1YnNjcmliaW5nIHRvIHRoZSBldmVudC5cbiAgICovXG4gIHB1YmxpYyB1bnN1YnNjcmliZShcbiAgICBldmVudE5hbWU6IElucHV0RXZlbnRLaW5kLFxuICAgIGJ1dHRvbklkOiBBY3Rpb25CdXR0b24sXG4gICAgZm46IChlOiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50KSA9PiB2b2lkXG4gICkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRTdWJzY3JpcHRpb25JZChldmVudE5hbWUsIGJ1dHRvbklkLCBmbilcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25JZF1bZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVBvaW50ZXJFdmVudChkYXRhOiBHbG9iYWxJbnB1dEV2ZW50UmVzdWx0KSB7XG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5nZXRQb2ludGVyQnlJZChkYXRhLmJ1dHRvbklkKVxuXG4gICAgaWYgKCFidXR0b24pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGV2ZW50UmVzdWx0OiBMb2NhbEFjdGlvbkJ1dHRvbkV2ZW50ID0ge1xuICAgICAgLi4uZGF0YSxcbiAgICAgIGJ1dHRvbixcbiAgICAgIGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKS5jb3B5RnJvbShkYXRhLmRpcmVjdGlvbiksXG4gICAgICBvcmlnaW46IG5ldyBWZWN0b3IzKCkuY29weUZyb20oZGF0YS5vcmlnaW4pLFxuICAgICAgaGl0OiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBoaXQgPSBkYXRhLmhpdFxuICAgICAgPyB7XG4gICAgICAgICAgLi4uZGF0YS5oaXQsXG4gICAgICAgICAgaGl0UG9pbnQ6IG5ldyBWZWN0b3IzKCkuY29weUZyb20oZGF0YS5oaXQuaGl0UG9pbnQpLFxuICAgICAgICAgIG5vcm1hbDogbmV3IFZlY3RvcjMoKS5jb3B5RnJvbShkYXRhLmhpdC5ub3JtYWwpLFxuICAgICAgICAgIHdvcmxkTm9ybWFsOiBuZXcgVmVjdG9yMygpLmNvcHlGcm9tKGRhdGEuaGl0LndvcmxkTm9ybWFsKVxuICAgICAgICB9XG4gICAgICA6IHVuZGVmaW5lZFxuXG4gICAgaWYgKGRhdGEudHlwZSA9PT0gSW5wdXRFdmVudFR5cGUuRE9XTikge1xuICAgICAgdGhpcy5pbnRlcm5hbFN0YXRlW2J1dHRvbl0uQlVUVE9OX0RPV04gPSB0cnVlXG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgaSA8IHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25dWydCVVRUT05fRE9XTiddLmxlbmd0aDtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbl1bJ0JVVFRPTl9ET1dOJ11baV1cblxuICAgICAgICAvLyByZW1vdmUgaGl0IGluZm9ybWF0aW9uIHdoZW4gcmF5Y2FzdCBpcyBkaXNhYmxlZFxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uLnVzZVJheWNhc3QpIHtcbiAgICAgICAgICBldmVudFJlc3VsdC5oaXQgPSBoaXRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudFJlc3VsdC5oaXQgPSB1bmRlZmluZWRcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmlwdGlvbi5mbihldmVudFJlc3VsdClcbiAgICAgIH1cblxuICAgICAgaWYgKGhpdCAmJiBoaXQuZW50aXR5SWQgJiYgRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUpIHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUuZW50aXRpZXNbaGl0LmVudGl0eUlkXVxuICAgICAgICBjb25zdCBoYW5kbGVyID0gZW50aXR5ICYmIGVudGl0eS5nZXRDb21wb25lbnRPck51bGwoR2xvYmFsUG9pbnRlckRvd24pXG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRSZXN1bHQuaGl0ID0gaGl0XG4gICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhldmVudFJlc3VsdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmludGVybmFsU3RhdGVbYnV0dG9uXS5CVVRUT05fRE9XTiA9IGZhbHNlXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbl1bJ0JVVFRPTl9VUCddLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaXB0aW9uc1tidXR0b25dWydCVVRUT05fVVAnXVtpXVxuXG4gICAgICAgIC8vIHJlbW92ZSBoaXQgaW5mb3JtYXRpb24gd2hlbiByYXljYXN0IGlzIGRpc2FibGVkXG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24udXNlUmF5Y2FzdCkge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IGhpdFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50UmVzdWx0LmhpdCA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLmZuKGV2ZW50UmVzdWx0KVxuICAgICAgfVxuXG4gICAgICBpZiAoaGl0ICYmIGhpdC5lbnRpdHlJZCAmJiBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZSkge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSBEaXNwb3NhYmxlQ29tcG9uZW50LmVuZ2luZS5lbnRpdGllc1toaXQuZW50aXR5SWRdXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBlbnRpdHkgJiYgZW50aXR5LmdldENvbXBvbmVudE9yTnVsbChHbG9iYWxQb2ludGVyVXApXG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRSZXN1bHQuaGl0ID0gaGl0XG4gICAgICAgICAgaGFuZGxlci5jYWxsYmFjayhldmVudFJlc3VsdClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3Vic2NyaXB0aW9uSWQoXG4gICAgZXZlbnROYW1lOiBJbnB1dEV2ZW50S2luZCxcbiAgICBidXR0b25JZDogQWN0aW9uQnV0dG9uLFxuICAgIGZuOiAoZTogTG9jYWxBY3Rpb25CdXR0b25FdmVudCkgPT4gdm9pZFxuICApOiBudW1iZXIge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zW2J1dHRvbklkXVtldmVudE5hbWVdW2ldLmZuID09PSBmbikge1xuICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRQb2ludGVyQnlJZChpZDogbnVtYmVyKTogQWN0aW9uQnV0dG9uIHwgbnVsbCB7XG4gICAgaWYgKGlkIDwgMCB8fCBpZCA+PSB0aGlzLmJ1dHRvbklkTWFwcGluZy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgYWN0aW9uQnV0dG9uID0gdGhpcy5idXR0b25JZE1hcHBpbmdbaWRdXG5cbiAgICBpZiAoYWN0aW9uQnV0dG9uID09PSBBY3Rpb25CdXR0b24uQU5ZKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb25CdXR0b25cbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgVmVjdG9yMyxcbiAgUXVhdGVybmlvbixcbiAgTWF0cml4LFxuICBNYXRoVG1wLFxuICBDb2xvcjMsXG4gIENvbG9yNFxufSBmcm9tICdAZGNsL2Vjcy1tYXRoJ1xuXG5pbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE9ic2VydmFibGVDb21wb25lbnQsXG4gIERpc3Bvc2FibGVDb21wb25lbnQsXG4gIGdldENvbXBvbmVudElkXG59IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBBbmltYXRpb25TdGF0ZSB9IGZyb20gJy4vQW5pbWF0aW9uU3RhdGUnXG5pbXBvcnQgeyBsb2csIG5ld0lkIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5pbXBvcnQgeyBBY3Rpb25CdXR0b24gfSBmcm9tICcuL0lucHV0J1xuaW1wb3J0IHsgQ2FtZXJhTW9kZSB9IGZyb20gJy4vVHlwZXMnXG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncyA9IFRyYW5zZm9ybUNvbnN0cnVjdG9yQXJnc1xuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgVHJhbnNmb3JtQ29uc3RydWN0b3JBcmdzID0ge1xuICBwb3NpdGlvbj86IFZlY3RvcjNcbiAgcm90YXRpb24/OiBRdWF0ZXJuaW9uXG4gIHNjYWxlPzogVmVjdG9yM1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gQ0xBU1NfSUQge1xuICBUUkFOU0ZPUk0gPSAxLFxuICBVVUlEX0NBTExCQUNLID0gOCxcbiAgQk9YX1NIQVBFID0gMTYsXG4gIFNQSEVSRV9TSEFQRSA9IDE3LFxuICBQTEFORV9TSEFQRSA9IDE4LFxuICBDT05FX1NIQVBFID0gMTksXG4gIENZTElOREVSX1NIQVBFID0gMjAsXG4gIFRFWFRfU0hBUEUgPSAyMSxcblxuICBORlRfU0hBUEUgPSAyMixcbiAgVUlfV09STERfU1BBQ0VfU0hBUEUgPSAyMyxcbiAgVUlfU0NSRUVOX1NQQUNFX1NIQVBFID0gMjQsXG4gIFVJX0NPTlRBSU5FUl9SRUNUID0gMjUsXG4gIFVJX0NPTlRBSU5FUl9TVEFDSyA9IDI2LFxuICBVSV9URVhUX1NIQVBFID0gMjcsXG4gIFVJX0lOUFVUX1RFWFRfU0hBUEUgPSAyOCxcbiAgVUlfSU1BR0VfU0hBUEUgPSAyOSxcbiAgVUlfU0xJREVSX1NIQVBFID0gMzAsXG4gIENJUkNMRV9TSEFQRSA9IDMxLFxuICBCSUxMQk9BUkQgPSAzMixcblxuICBBTklNQVRJT04gPSAzMyxcbiAgRk9OVCA9IDM0LFxuXG4gIFVJX0ZVTExTQ1JFRU5fU0hBUEUgPSA0MCwgLy8gaW50ZXJuYWwgZnVsbHNjcmVlbiBzY2VuZXNcbiAgVUlfQlVUVE9OX1NIQVBFID0gNDEsXG5cbiAgR0xURl9TSEFQRSA9IDU0LFxuICBPQkpfU0hBUEUgPSA1NSxcbiAgQVZBVEFSX1NIQVBFID0gNTYsXG5cbiAgQkFTSUNfTUFURVJJQUwgPSA2NCxcbiAgUEJSX01BVEVSSUFMID0gNjUsXG5cbiAgSElHSExJR0hUX0VOVElUWSA9IDY2LFxuXG4gIC8qKiBAZGVwcmVjYXRlZCBTb3VuZCBoYXMgYmVlbiBkZXByZWNhdGFlZCAqL1xuICBTT1VORCA9IDY3LFxuICBURVhUVVJFID0gNjgsXG5cbiAgVklERU9fQ0xJUCA9IDcwLFxuICBWSURFT19URVhUVVJFID0gNzEsXG5cbiAgQVZBVEFSX1RFWFRVUkUgPSA3MixcblxuICBBVURJT19DTElQID0gMjAwLFxuICBBVURJT19TT1VSQ0UgPSAyMDEsXG4gIEFVRElPX1NUUkVBTSA9IDIwMixcbiAgR0laTU9TID0gMjAzLFxuICBTTUFSVF9JVEVNID0gMjA0LFxuICBBVkFUQVJfTU9ESUZJRVJfQVJFQSA9IDIwNSxcbiAgQVZBVEFSX0FUVEFDSCA9IDIwNixcbiAgQ0FNRVJBX01PREVfQVJFQSA9IDIwNyxcblxuICAvLyBGb3Igc3RhdGUgc3luYyBvbmx5XG4gIE5BTUUgPSAzMDAsXG4gIExPQ0tFRF9PTl9FRElUID0gMzAxLFxuICBWSVNJQkxFX09OX0VESVQgPSAzMDJcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIEF2YXRhck1vZGlmaWVycyB7XG4gIEhJREVfQVZBVEFSUyA9ICdISURFX0FWQVRBUlMnLFxuICBESVNBQkxFX1BBU1NQT1JUUyA9ICdESVNBQkxFX1BBU1NQT1JUUydcbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCB0eXBlIEFyZWEgPSB7IGJveDogVmVjdG9yMyB9XG5cbi8qKlxuICogRGVmaW5lIGFuIGFyZWEgd2hlcmUgYXZhdGFycyBjYW4gYmUgbW9kaWZpZWQgaW4gc29tZSB3YXlcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLmF2YXRhck1vZGlmaWVyQXJlYScsIENMQVNTX0lELkFWQVRBUl9NT0RJRklFUl9BUkVBKVxuZXhwb3J0IGNsYXNzIEF2YXRhck1vZGlmaWVyQXJlYSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhcmVhITogQXJlYVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG1vZGlmaWVycyE6IEF2YXRhck1vZGlmaWVyc1tdXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZXhjbHVkZUlkcz86IHN0cmluZ1tdXG5cbiAgY29uc3RydWN0b3IoYXJnczoge1xuICAgIGFyZWE6IEFyZWFcbiAgICBtb2RpZmllcnM6IEF2YXRhck1vZGlmaWVyc1tdXG4gICAgZXhjbHVkZUlkcz86IHN0cmluZ1tdXG4gIH0pIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5hcmVhID0gYXJncy5hcmVhXG4gICAgdGhpcy5tb2RpZmllcnMgPSBhcmdzLm1vZGlmaWVyc1xuICAgIHRoaXMuZXhjbHVkZUlkcyA9IGFyZ3MuZXhjbHVkZUlkc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUudHJhbnNmb3JtJywgQ0xBU1NfSUQuVFJBTlNGT1JNKVxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwb3NpdGlvbiE6IFZlY3RvcjNcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByb3RhdGlvbiE6IFF1YXRlcm5pb25cblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzY2FsZSE6IFZlY3RvcjNcblxuICBjb25zdHJ1Y3RvcihhcmdzOiBUcmFuc2Zvcm1Db25zdHJ1Y3RvckFyZ3MgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnBvc2l0aW9uID0gYXJncy5wb3NpdGlvbiB8fCBWZWN0b3IzLlplcm8oKVxuICAgIHRoaXMucm90YXRpb24gPSBhcmdzLnJvdGF0aW9uIHx8IFF1YXRlcm5pb24uSWRlbnRpdHlcbiAgICB0aGlzLnNjYWxlID0gYXJncy5zY2FsZSB8fCBuZXcgVmVjdG9yMygxLCAxLCAxKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogVGhlIHJvdGF0aW9uIGFzIEV1bGVyIGFuZ2xlcyBpbiBkZWdyZWVzLlxuICAgKi9cbiAgZ2V0IGV1bGVyQW5nbGVzKCkge1xuICAgIHJldHVybiB0aGlzLnJvdGF0aW9uLmV1bGVyQW5nbGVzXG4gIH1cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBSb3RhdGVzIHRoZSB0cmFuc2Zvcm0gc28gdGhlIGZvcndhcmQgdmVjdG9yIHBvaW50cyBhdCB0YXJnZXQncyBjdXJyZW50IHBvc2l0aW9uLlxuICAgKi9cbiAgbG9va0F0KHRhcmdldDogVmVjdG9yMywgd29ybGRVcDogVmVjdG9yMyA9IE1hdGhUbXAuc3RhdGljVXApIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4KClcbiAgICBNYXRyaXguTG9va0F0TEhUb1JlZih0aGlzLnBvc2l0aW9uLCB0YXJnZXQsIHdvcmxkVXAsIHJlc3VsdClcbiAgICByZXN1bHQuaW52ZXJ0KClcbiAgICBRdWF0ZXJuaW9uLkZyb21Sb3RhdGlvbk1hdHJpeFRvUmVmKHJlc3VsdCwgdGhpcy5yb3RhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQXBwbGllcyBhIHJvdGF0aW9uIG9mIGV1bGVyIGFuZ2xlcyBhcm91bmQgdGhlIHgsIHkgYW5kIHogYXhpcy5cbiAgICovXG4gIHJvdGF0ZShheGlzOiBWZWN0b3IzLCBhbmdsZTogbnVtYmVyKSB7XG4gICAgdGhpcy5yb3RhdGlvbi5tdWx0aXBseUluUGxhY2UodGhpcy5yb3RhdGlvbi5hbmdsZUF4aXMoYW5nbGUsIGF4aXMpKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHB1YmxpY1xuICAgKiBNb3ZlcyB0aGUgdHJhbnNmb3JtIGluIHRoZSBkaXJlY3Rpb24gYW5kIGRpc3RhbmNlIG9mIHRyYW5zbGF0aW9uLlxuICAgKi9cbiAgdHJhbnNsYXRlKHZlYzogVmVjdG9yMykge1xuICAgIHRoaXMucG9zaXRpb24uYWRkSW5QbGFjZSh2ZWMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IGVudW0gQXR0YWNoVG9BdmF0YXJBbmNob3JQb2ludElkIHtcbiAgUG9zaXRpb24gPSAwLFxuICBOYW1lVGFnID0gMSxcbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBMZWZ0SGFuZCA9IDIsXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgUmlnaHRIYW5kID0gM1xufVxuXG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0IHR5cGUgQXR0YWNoVG9BdmF0YXJDb25zdHJ1Y3RvckFyZ3MgPSB7XG4gIGF2YXRhcklkPzogc3RyaW5nXG4gIGFuY2hvclBvaW50SWQ/OiBBdHRhY2hUb0F2YXRhckFuY2hvclBvaW50SWRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS50cmFuc2Zvcm0nLCBDTEFTU19JRC5BVkFUQVJfQVRUQUNIKVxuZXhwb3J0IGNsYXNzIEF0dGFjaFRvQXZhdGFyIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGF2YXRhcklkITogc3RyaW5nXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYW5jaG9yUG9pbnRJZCE6IEF0dGFjaFRvQXZhdGFyQW5jaG9yUG9pbnRJZFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGF2YXRhclNjZW5lSWQhOiAnZGNsLWdzLWF2YXRhcnMnXG5cbiAgY29uc3RydWN0b3IoYXJnczogQXR0YWNoVG9BdmF0YXJDb25zdHJ1Y3RvckFyZ3MgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmF2YXRhcklkID0gYXJncy5hdmF0YXJJZCB8fCAnJ1xuICAgIHRoaXMuYW5jaG9yUG9pbnRJZCA9XG4gICAgICBhcmdzLmFuY2hvclBvaW50SWQgfHwgQXR0YWNoVG9BdmF0YXJBbmNob3JQb2ludElkLlBvc2l0aW9uXG4gIH1cbn1cblxuLyoqXG4gKiBCaWxsYm9hcmQgZGVmaW5lcyBhIGJlaGF2aW9yIHRoYXQgbWFrZXMgdGhlIGVudGl0eSBmYWNlIHRoZSBjYW1lcmEgaW4gYW55IG1vbWVudC5cbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLmJpbGxib2FyZCcsIENMQVNTX0lELkJJTExCT0FSRClcbmV4cG9ydCBjbGFzcyBCaWxsYm9hcmQgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgeDogYm9vbGVhbiA9IHRydWVcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB5OiBib29sZWFuID0gdHJ1ZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHo6IGJvb2xlYW4gPSB0cnVlXG5cbiAgY29uc3RydWN0b3IoeDogYm9vbGVhbiA9IHRydWUsIHk6IGJvb2xlYW4gPSB0cnVlLCB6OiBib29sZWFuID0gdHJ1ZSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnggPSB4XG4gICAgdGhpcy55ID0geVxuICAgIHRoaXMueiA9IHpcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFNoYXBlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB0dXJuIG9uIHRoZSBjb2xsaWRlciBmb3IgdGhlIGVudGl0eS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHdpdGhDb2xsaXNpb25zOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB0dXJuIG9uIHRoZSBQb2ludGVyRXZlbnRzIGJsb2NraW5nIGZvciB0aGUgZW50aXR5LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaXNQb2ludGVyQmxvY2tlcjogYm9vbGVhbiA9IHRydWVcblxuICAvKipcbiAgICogRGVmaW5lcyBpZiB0aGUgZW50aXR5IGFuZCBpdHMgY2hpbGRyZW4gc2hvdWxkIGJlIHJlbmRlcmVkXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELkJPWF9TSEFQRSlcbmV4cG9ydCBjbGFzcyBCb3hTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgLyoqXG4gICAqIFNldHMgdGhlIFVWIGNvb3JkaW5hdGVzIGZvciB0aGUgYm94LlxuICAgKiBVc2VkIHRvIG1hcCBzcGVjaWZpYyBwaWVjZXMgb2YgYSBNYXRlcmlhbCdzIHRleHR1cmUgaW50byB0aGUgYm94J3MgZ2VvbWV0cnkuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB1dnM/OiBudW1iZXJbXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlNQSEVSRV9TSEFQRSlcbmV4cG9ydCBjbGFzcyBTcGhlcmVTaGFwZSBleHRlbmRzIFNoYXBlIHt9XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuQ0lSQ0xFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIENpcmNsZVNoYXBlIGV4dGVuZHMgU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzZWdtZW50cz86IG51bWJlclxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFyYz86IG51bWJlclxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlBMQU5FX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFBsYW5lU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBob3Jpem9udGFsIGxlbmd0aCBvZiB0aGUgcGxhbmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB3aWR0aDogbnVtYmVyID0gMVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2ZXJ0aWNhbCBsZW5ndGggb2YgdGhlIHBsYW5lLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaGVpZ2h0OiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIFVWIGNvb3JkaW5hdGVzIGZvciB0aGUgcGxhbmUuXG4gICAqIFVzZWQgdG8gbWFwIHNwZWNpZmljIHBpZWNlcyBvZiBhIE1hdGVyaWFsJ3MgdGV4dHVyZSBpbnRvIHRoZSBwbGFuZSdzIGdlb21ldHJ5LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdXZzPzogbnVtYmVyW11cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuc2hhcGUnLCBDTEFTU19JRC5DT05FX1NIQVBFKVxuZXhwb3J0IGNsYXNzIENvbmVTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIHRvcCBvZiBhIHRydW5jYXRlZCBjb25lLiBEZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzVG9wOiBudW1iZXIgPSAwXG5cbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIGJhc2Ugb2YgdGhlIGNvbmUuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByYWRpdXNCb3R0b206IG51bWJlciA9IDFcblxuICAvKipcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHJpbmdzIGFsb25nIHRoZSBjb25lIGhlaWdodCAocG9zaXRpdmUgaW50ZWdlcikuIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzZWdtZW50c0hlaWdodDogbnVtYmVyID0gMVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBudW1iZXIgb2YgY29uZSBzaWRlcyAocG9zaXRpdmUgaW50ZWdlcikuIERlZmF1bHRzIHRvIDM2LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VnbWVudHNSYWRpYWw6IG51bWJlciA9IDM2XG5cbiAgLyoqXG4gICAqIEFkZHMgdHdvIGV4dHJhIGZhY2VzIHBlciBzdWJkaXZpc2lvbiB0byBlbmNsb3NlIHRoZSBjb25lIGFyb3VuZCBpdHMgaGVpZ2h0IGF4aXMuXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3BlbkVuZGVkOiBib29sZWFuID0gZmFsc2VcblxuICAvKipcbiAgICogU2V0cyB0aGUgcmFkaXVzIG9mIHRoZSB0b3AgYW5kIGJvdHRvbSBjYXBzIGF0IG9uY2UuXG4gICAqXG4gICAqIFByb3BlcnRpZXMgYHJhZGl1c1RvcGAgYW5kIGByYWRpdXNCb3R0b21gIGFyZSBwcmlvcml0aXplZCBvdmVyIHRoaXMgb25lLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzOiBudW1iZXIgfCBudWxsID0gbnVsbFxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByYXRpbyAobWF4IDEpIHRvIGFwcGx5IHRvIHRoZSBjaXJjdW1mZXJlbmNlIHRvIHNsaWNlIHRoZSBjb25lLiBEZWZhdWx0cyB0byAzNjAuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhcmM6IG51bWJlciA9IDM2MFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELkNZTElOREVSX1NIQVBFKVxuZXhwb3J0IGNsYXNzIEN5bGluZGVyU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIC8qKlxuICAgKiBUaGUgcmFkaXVzIG9mIHRoZSB0b3Agb2YgdGhlIGN5bGluZGVyLiBEZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzVG9wOiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFRoZSByYWRpdXMgb2YgdGhlIGJhc2Ugb2YgdGhlIGN5bGluZGVyLiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcmFkaXVzQm90dG9tOiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG51bWJlciBvZiByaW5ncyBhbG9uZyB0aGUgY3lsaW5kZXIgaGVpZ2h0IChwb3NpdGl2ZSBpbnRlZ2VyKS4gRGVmYXVsdHMgdG8gMS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNlZ21lbnRzSGVpZ2h0OiBudW1iZXIgPSAxXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG51bWJlciBvZiBjeWxpbmRlciBzaWRlcyAocG9zaXRpdmUgaW50ZWdlcikuIERlZmF1bHRzIHRvIDM2LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VnbWVudHNSYWRpYWw6IG51bWJlciA9IDM2XG5cbiAgLyoqXG4gICAqIEFkZHMgdHdvIGV4dHJhIGZhY2VzIHBlciBzdWJkaXZpc2lvbiB0byBlbmNsb3NlIHRoZSBjeWxpbmRlciBhcm91bmQgaXRzIGhlaWdodCBheGlzLlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG9wZW5FbmRlZDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHJhZGl1cyBvZiB0aGUgdG9wIGFuZCBib3R0b20gY2FwcyBhdCBvbmNlLlxuICAgKlxuICAgKiBQcm9wZXJ0aWVzIGByYWRpdXNUb3BgIGFuZCBgcmFkaXVzQm90dG9tYCBhcmUgcHJpb3JpdGl6ZWQgb3ZlciB0aGlzIG9uZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHJhZGl1czogbnVtYmVyIHwgbnVsbCA9IG51bGxcblxuICAvKipcbiAgICogU2V0cyB0aGUgcmF0aW8gKG1heCAxKSB0byBhcHBseSB0byB0aGUgY2lyY3VtZmVyZW5jZSB0byBzbGljZSB0aGUgY3lsaW5kZXIuIERlZmF1bHRzIHRvIDM2MC5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFyYzogbnVtYmVyID0gMzYwXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuR0xURl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBHTFRGU2hhcGUgZXh0ZW5kcyBTaGFwZSB7XG4gIEBTaGFwZS5yZWFkb25seVxuICByZWFkb25seSBzcmMhOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNyYyA9IHNyY1xuICB9XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgZW51bSBQaWN0dXJlRnJhbWVTdHlsZSB7XG4gIENsYXNzaWMgPSAwLFxuICBCYXJvcXVlX09ybmFtZW50ID0gMSxcbiAgRGlhbW9uZF9Pcm5hbWVudCA9IDIsXG4gIE1pbmltYWxfV2lkZSA9IDMsXG4gIE1pbmltYWxfR3JleSA9IDQsXG4gIEJsb2NreSA9IDUsXG4gIEdvbGRfRWRnZXMgPSA2LFxuICBHb2xkX0NhcnZlZCA9IDcsXG4gIEdvbGRfV2lkZSA9IDgsXG4gIEdvbGRfUm91bmRlZCA9IDksXG4gIE1ldGFsX01lZGl1bSA9IDEwLFxuICBNZXRhbF9XaWRlID0gMTEsXG4gIE1ldGFsX1NsaW0gPSAxMixcbiAgTWV0YWxfUm91bmRlZCA9IDEzLFxuICBQaW5zID0gMTQsXG4gIE1pbmltYWxfQmxhY2sgPSAxNSxcbiAgTWluaW1hbF9XaGl0ZSA9IDE2LFxuICBUYXBlID0gMTcsXG4gIFdvb2RfU2xpbSA9IDE4LFxuICBXb29kX1dpZGUgPSAxOSxcbiAgV29vZF9Ud2lncyA9IDIwLFxuICBDYW52YXMgPSAyMSxcbiAgTm9uZSA9IDIyXG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgdHlwZSBORlRTaGFwZUNvbnN0cnVjdG9yQXJncyA9IHtcbiAgY29sb3I/OiBDb2xvcjNcbiAgc3R5bGU/OiBQaWN0dXJlRnJhbWVTdHlsZVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELk5GVF9TSEFQRSlcbmV4cG9ydCBjbGFzcyBORlRTaGFwZSBleHRlbmRzIFNoYXBlIHtcbiAgQFNoYXBlLnJlYWRvbmx5XG4gIHJlYWRvbmx5IHNyYyE6IHN0cmluZ1xuXG4gIEBTaGFwZS5yZWFkb25seVxuICByZWFkb25seSBzdHlsZSE6IFBpY3R1cmVGcmFtZVN0eWxlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY29sb3I6IENvbG9yM1xuXG4gIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nKVxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZywgY29sb3I6IENvbG9yMykgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nLCBhcmdzOiBORlRTaGFwZUNvbnN0cnVjdG9yQXJncylcbiAgY29uc3RydWN0b3Ioc3JjOiBzdHJpbmcsIGFyZ3M6IGFueSA9IHt9KSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuc3JjID0gc3JjXG5cbiAgICBsZXQgY29sb3IgPSBuZXcgQ29sb3IzKDAuNjQwNDkxOCwgMC42MTE0NzIsIDAuODU4NDkwNilcbiAgICBsZXQgc3R5bGUgPSBQaWN0dXJlRnJhbWVTdHlsZS5DbGFzc2ljXG5cbiAgICAvLyBjaGVjayBpZiBhcmdzIGlzIGNvbG9yIChiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSlcbiAgICBpZiAoJ3InIGluIGFyZ3MpIHtcbiAgICAgIGNvbG9yID0gYXJnc1xuICAgIH0gZWxzZSBpZiAoYXJncyAhPT0gbnVsbCkge1xuICAgICAgaWYgKGFyZ3MuY29sb3IpIGNvbG9yID0gYXJncy5jb2xvclxuICAgICAgaWYgKGFyZ3Muc3R5bGUpIHN0eWxlID0gYXJncy5zdHlsZVxuICAgIH1cblxuICAgIHRoaXMuY29sb3IgPSBjb2xvclxuICAgIHRoaXMuc3R5bGUgPSBzdHlsZVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnRleHR1cmUnLCBDTEFTU19JRC5URVhUVVJFKVxuZXhwb3J0IGNsYXNzIFRleHR1cmUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgc3JjITogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgY3Jpc3BlciBpbWFnZXMgYmFzZWQgb24gdGhlIHByb3ZpZGVkIHNhbXBsaW5nIG1vZGUuXG4gICAqIHwgVmFsdWUgfCBUeXBlICAgICAgfFxuICAgKiB8LS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICogfCAgICAgMCB8IE5FQVJFU1QgICB8XG4gICAqIHwgICAgIDEgfCBCSUxJTkVBUiAgfFxuICAgKiB8ICAgICAyIHwgVFJJTElORUFSIHxcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHNhbXBsaW5nTW9kZSE6IG51bWJlclxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHRleHR1cmUgd3JhcHBpbmcgZm9yIHRoaXMgbWF0ZXJpYWwuXG4gICAqIHwgVmFsdWUgfCBUeXBlICAgICAgfFxuICAgKiB8LS0tLS0tLXwtLS0tLS0tLS0tLXxcbiAgICogfCAgICAgMCB8IENMQU1QICAgICB8XG4gICAqIHwgICAgIDEgfCBXUkFQICAgICAgfFxuICAgKiB8ICAgICAyIHwgTUlSUk9SICAgIHxcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHdyYXAhOiBudW1iZXJcblxuICAvKipcbiAgICogRGVmaW5lcyBpZiB0aGlzIHRleHR1cmUgaGFzIGFuIGFscGhhIGNoYW5uZWxcbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IGhhc0FscGhhITogYm9vbGVhblxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNyYzogc3RyaW5nLFxuICAgIG9wdHM/OiBQYXJ0aWFsPFBpY2s8VGV4dHVyZSwgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCcgfCAnaGFzQWxwaGEnPj5cbiAgKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgY29uc3QgYmFzZTY0VGVzdCA9IG5ldyBSZWdFeHAoJ2RhdGE6W2Etei1dKy9bYS16LV0rO2Jhc2U2NCcpXG4gICAgaWYgKHNyYy5sZW5ndGggPiAyMDQ4IHx8IGJhc2U2NFRlc3QudGVzdChzcmMpKSB7XG4gICAgICBsb2coXG4gICAgICAgICfimqDvuI/wn5qoIEJhc2U2NCB0ZXh0dXJlcyB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdmVyc2lvbiA3IG9mIGRlY2VudHJhbGFuZC1lY3MnXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5zcmMgPSBzcmNcblxuICAgIGlmIChvcHRzKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gb3B0cykge1xuICAgICAgICBjb25zdCB0aGF0ID0gdGhpcyBhcyBhbnlcbiAgICAgICAgdGhhdFtpIGFzICdzYW1wbGluZ01vZGUnIHwgJ3dyYXAnIHwgJ2hhc0FscGhhJ10gPSAob3B0cyBhcyBhbnkpW2ldXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuYW5pbWF0b3InLCBDTEFTU19JRC5BTklNQVRJT04pXG5leHBvcnQgY2xhc3MgQW5pbWF0b3IgZXh0ZW5kcyBTaGFwZSB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHByaXZhdGUgc3RhdGVzOiBBbmltYXRpb25TdGF0ZVtdID0gW11cblxuICAvKipcbiAgICogQWRkcyBhbiBBbmltYXRpb25TdGF0ZSB0byB0aGUgYW5pbWF0aW9uIGxpc3RzLlxuICAgKi9cbiAgYWRkQ2xpcChjbGlwOiBBbmltYXRpb25TdGF0ZSkge1xuICAgIHRoaXMuc3RhdGVzLnB1c2goY2xpcClcbiAgICBjbGlwLm9uQ2hhbmdlKCgpID0+IHtcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlXG4gICAgfSlcblxuICAgIGNsaXAub3duZXIgPSB0aGlzXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBhbmltYXRpb24gY2xpcCBpbnN0YW5jZSBmb3IgdGhlIHNwZWNpZmllZCBjbGlwIG5hbWUuXG4gICAqIElmIHRoZSBjbGlwIGRvZXNuJ3QgZXhpc3QgYSBuZXcgb25lIHdpbGwgYmUgY3JlYXRlZC5cbiAgICovXG4gIGdldENsaXAoY2xpcE5hbWU6IHN0cmluZyk6IEFuaW1hdGlvblN0YXRlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjbGlwID0gdGhpcy5zdGF0ZXNbaV1cbiAgICAgIGlmIChjbGlwLmNsaXAgPT09IGNsaXBOYW1lKSB7XG4gICAgICAgIHJldHVybiBjbGlwXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmV3Q2xpcCA9IG5ldyBBbmltYXRpb25TdGF0ZShjbGlwTmFtZSlcbiAgICB0aGlzLmFkZENsaXAobmV3Q2xpcClcbiAgICByZXR1cm4gbmV3Q2xpcFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBhbmQgcGF1c2VzIHRoZSBhbmltYXRpb24gc3RhdGUsIGlmIHRoZSBjbGlwIGlzIG51bGwgaXQgd2lsbCBzdG9wIGFsbCBhbmltYXRpb25zIG9uIHRoaXMgYW5pbWF0b3JcbiAgICovXG4gIHN0b3AoY2xpcD86IEFuaW1hdGlvblN0YXRlKSB7XG4gICAgaWYgKGNsaXApIHtcbiAgICAgIGNsaXAucGxheWluZyA9IGZhbHNlXG4gICAgICBjbGlwLnNob3VsZFJlc2V0ID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvblN0YXRlID0gdGhpcy5zdGF0ZXNbaV1cbiAgICAgICAgdGhpcy5zdG9wKGFuaW1hdGlvblN0YXRlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGFuaW1hdGlvblxuICAgKi9cbiAgcGxheShjbGlwOiBBbmltYXRpb25TdGF0ZSwgcmVzZXQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGFuaW1hdGlvblN0YXRlID0gdGhpcy5zdGF0ZXNbaV1cbiAgICAgIGlmIChhbmltYXRpb25TdGF0ZS5sYXllciA9PT0gY2xpcC5sYXllciAmJiBjbGlwICE9PSBhbmltYXRpb25TdGF0ZSkge1xuICAgICAgICB0aGlzLnBhdXNlKGFuaW1hdGlvblN0YXRlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXNldCkgY2xpcC5zaG91bGRSZXNldCA9IHRydWVcbiAgICBjbGlwLnBsYXlpbmcgPSB0cnVlXG4gICAgY2xpcC5kaXJ0eSA9IHRydWVcbiAgICBjbGlwLmRhdGEubm9uY2UgPSBNYXRoLnJhbmRvbSgpXG4gIH1cblxuICAvKipcbiAgICogUGF1c2VzIHRoZSBhbmltYXRpb24gc3RhdGUsIGlmIHRoZSBjbGlwIGlzIG51bGwgaXQgd2lsbCBwYXVzZSBhbGwgYW5pbWF0aW9ucyBvbiB0aGlzIGFuaW1hdG9yXG4gICAqL1xuICBwYXVzZShjbGlwPzogQW5pbWF0aW9uU3RhdGUpIHtcbiAgICBpZiAoY2xpcCkge1xuICAgICAgY2xpcC5wbGF5aW5nID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhbmltYXRpb25TdGF0ZSA9IHRoaXMuc3RhdGVzW2ldXG4gICAgICAgIHRoaXMucGF1c2UoYW5pbWF0aW9uU3RhdGUpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuT0JKX1NIQVBFKVxuZXhwb3J0IGNsYXNzIE9CSlNoYXBlIGV4dGVuZHMgU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSBzcmMhOiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihzcmM6IHN0cmluZykge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNyYyA9IHNyY1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLmZvbnQnLCBDTEFTU19JRC5GT05UKVxuZXhwb3J0IGNsYXNzIEZvbnQgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgc3JjITogc3RyaW5nXG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNyYzogc3RyaW5nID0gJycpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zcmMgPSBzcmNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gRm9udHMge1xuICAvKiogQGRlcHJlY2F0ZWQgU2FuRnJhbmNpc2NvIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBTYW5zU2VyaWYgaW5zdGVhZC4qL1xuICBTYW5GcmFuY2lzY28gPSAnYnVpbHRpbjpTRi1VSS1UZXh0LVJlZ3VsYXIgU0RGJyxcbiAgLyoqIEBkZXByZWNhdGVkIFNhbkZyYW5jaXNjb19IZWF2eSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgU2Fuc1NlcmlmX0hlYXZ5IGluc3RlYWQuKi9cbiAgU2FuRnJhbmNpc2NvX0hlYXZ5ID0gJ2J1aWx0aW46U0YtVUktVGV4dC1IZWF2eSBTREYnLFxuICAvKiogQGRlcHJlY2F0ZWQgU2FuRnJhbmNpc2NvX1NlbWlib2xkIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBTYW5zU2VyaWZfU2VtaUJvbGQgaW5zdGVhZC4qL1xuICBTYW5GcmFuY2lzY29fU2VtaWJvbGQgPSAnYnVpbHRpbjpTRi1VSS1UZXh0LVNlbWlib2xkIFNERicsXG4gIExpYmVyYXRpb25TYW5zID0gJ2J1aWx0aW46TGliZXJhdGlvblNhbnMgU0RGJyxcbiAgU2Fuc1NlcmlmID0gJ1NhbnNTZXJpZicsXG4gIFNhbnNTZXJpZl9IZWF2eSA9ICdTYW5zU2VyaWZfSGVhdnknLFxuICBTYW5zU2VyaWZfQm9sZCA9ICdTYW5zU2VyaWZfQm9sZCcsXG4gIFNhbnNTZXJpZl9TZW1pQm9sZCA9ICdTYW5zU2VyaWZfU2VtaUJvbGQnXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUudGV4dCcsIENMQVNTX0lELlRFWFRfU0hBUEUpXG5leHBvcnQgY2xhc3MgVGV4dFNoYXBlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVXaWR0aDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVDb2xvcjogQ29sb3IzID0gbmV3IENvbG9yMygxLCAxLCAxKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvbG9yOiBDb2xvcjMgPSBuZXcgQ29sb3IzKDEsIDEsIDEpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZm9udFNpemU6IG51bWJlciA9IDEwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIGZvbnQ/OiBGb250XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3BhY2l0eTogbnVtYmVyID0gMS4wXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdmFsdWU6IHN0cmluZyA9ICcnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbGluZVNwYWNpbmc6IHN0cmluZyA9ICcwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbGluZUNvdW50OiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGV4dFdyYXBwaW5nOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dCbHVyOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd09mZnNldFk6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dDb2xvcjogQ29sb3IzID0gbmV3IENvbG9yMygxLCAxLCAxKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGhUZXh0QWxpZ246IHN0cmluZyA9ICdjZW50ZXInXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdlRleHRBbGlnbjogc3RyaW5nID0gJ2NlbnRlcidcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB3aWR0aDogbnVtYmVyID0gMVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGhlaWdodDogbnVtYmVyID0gMVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdUb3A6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nUmlnaHQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nQm90dG9tOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBiaWxsYm9hcmQ6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHZpc2libGU6IGJvb2xlYW4gPSB0cnVlXG5cbiAgY29uc3RydWN0b3IodmFsdWU/OiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gVHJhbnNwYXJlbmN5TW9kZSB7XG4gIE9QQVFVRSA9IDAsXG4gIEFMUEhBX1RFU1QgPSAxLFxuICBBTFBIQV9CTEVORCA9IDIsXG4gIEFMUEhBX1RFU1RfQU5EX0JMRU5EID0gMyxcbiAgQVVUTyA9IDRcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUubWF0ZXJpYWwnLCBDTEFTU19JRC5QQlJfTUFURVJJQUwpXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWwgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEN1dG9mZiBsZXZlbCBmb3IgQUxQSEFURVNUIG1vZGUuIFJhbmdlIGlzIGJldHdlZW4gMCBhbmQgMS5cbiAgICogRGVmYXVsdHMgdG8gMC41XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhbHBoYVRlc3Q/OiBudW1iZXIgPSAwLjVcblxuICAvKipcbiAgICogQUtBIERpZmZ1c2UgQ29sb3IgaW4gb3RoZXIgbm9tZW5jbGF0dXJlLlxuICAgKiBEZWZhdWx0cyB0byAjQ0NDQ0NDLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYWxiZWRvQ29sb3I/OiBDb2xvcjQgfCBDb2xvcjNcblxuICAvKipcbiAgICogVGhlIGNvbG9yIGVtaXR0ZWQgZnJvbSB0aGUgbWF0ZXJpYWwuXG4gICAqIERlZmF1bHRzIHRvIGJsYWNrLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZW1pc3NpdmVDb2xvcj86IENvbG9yM1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIG1ldGFsbGljIHNjYWxhciBvZiB0aGUgbWV0YWxsaWMvcm91Z2huZXNzIHdvcmtmbG93LlxuICAgKiBDYW4gYWxzbyBiZSB1c2VkIHRvIHNjYWxlIHRoZSBtZXRhbG5lc3MgdmFsdWVzIG9mIHRoZSBtZXRhbGxpYyB0ZXh0dXJlLlxuICAgKiBEZWZhdWx0cyB0byAgMC41LlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbWV0YWxsaWM/OiBudW1iZXJcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSByb3VnaG5lc3Mgc2NhbGFyIG9mIHRoZSBtZXRhbGxpYy9yb3VnaG5lc3Mgd29ya2Zsb3cuXG4gICAqIENhbiBhbHNvIGJlIHVzZWQgdG8gc2NhbGUgdGhlIHJvdWdobmVzcyB2YWx1ZXMgb2YgdGhlIG1ldGFsbGljIHRleHR1cmUuXG4gICAqIERlZmF1bHRzIHRvICAwLjUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByb3VnaG5lc3M/OiBudW1iZXJcblxuICAvKipcbiAgICogQUtBIFNwZWN1bGFyIENvbG9yIGluIG90aGVyIG5vbWVuY2xhdHVyZS5cbiAgICogRGVmYXVsdHMgdG8gd2hpdGUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICByZWZsZWN0aXZpdHlDb2xvcj86IENvbG9yM1xuXG4gIC8qKlxuICAgKiBJbnRlbnNpdHkgb2YgdGhlIGRpcmVjdCBsaWdodHMgZS5nLiB0aGUgZm91ciBsaWdodHMgYXZhaWxhYmxlIGluIHNjZW5lLlxuICAgKiBUaGlzIGltcGFjdHMgYm90aCB0aGUgZGlyZWN0IGRpZmZ1c2UgYW5kIHNwZWN1bGFyIGhpZ2hsaWdodHMuXG4gICAqIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBkaXJlY3RJbnRlbnNpdHk/OiBudW1iZXJcblxuICAvKipcbiAgICogQUtBIEdsb3NzaW5lc3MgaW4gb3RoZXIgbm9tZW5jbGF0dXJlLlxuICAgKiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbWljcm9TdXJmYWNlPzogbnVtYmVyXG5cbiAgLyoqXG4gICAqIEludGVuc2l0eSBvZiB0aGUgZW1pc3NpdmUgcGFydCBvZiB0aGUgbWF0ZXJpYWwuXG4gICAqIFRoaXMgaGVscHMgY29udHJvbGxpbmcgdGhlIGVtaXNzaXZlIGVmZmVjdCB3aXRob3V0IG1vZGlmeWluZyB0aGUgZW1pc3NpdmUgY29sb3IuXG4gICAqIERlZmF1bHRzIHRvIDEuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBlbWlzc2l2ZUludGVuc2l0eT86IG51bWJlclxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBjb250cm9sIGFsbG93aW5nIHRoZSByZWR1Y3Rpb24gb2YgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodHMgY29taW5nIGZyb20gdGhlXG4gICAqIGZvdXIgbGlnaHRzIG9mIHRoZSBzY2VuZS4gVGhvc2UgaGlnaGxpZ2h0cyBtYXkgbm90IGJlIG5lZWRlZCBpbiBmdWxsIGVudmlyb25tZW50IGxpZ2h0aW5nLlxuICAgKiBEZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc3BlY3VsYXJJbnRlbnNpdHk/OiBudW1iZXJcblxuICAvKipcbiAgICogVGV4dHVyZSBhcHBsaWVkIGFzIG1hdGVyaWFsLlxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIGFsYmVkb1RleHR1cmU/OiBUZXh0dXJlIHwgVmlkZW9UZXh0dXJlIHwgQXZhdGFyVGV4dHVyZVxuXG4gIC8qKlxuICAgKiBUZXh0dXJlIGFwcGxpZWQgYXMgb3BhY2l0eS4gRGVmYXVsdDogdGhlIHNhbWUgdGV4dHVyZSB1c2VkIGluIGFsYmVkb1RleHR1cmUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5jb21wb25lbnRcbiAgYWxwaGFUZXh0dXJlPzogVGV4dHVyZSB8IFZpZGVvVGV4dHVyZSB8IEF2YXRhclRleHR1cmVcblxuICAvKipcbiAgICogRW1pc3NpdmUgdGV4dHVyZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmNvbXBvbmVudFxuICBlbWlzc2l2ZVRleHR1cmU/OiBUZXh0dXJlIHwgVmlkZW9UZXh0dXJlIHwgQXZhdGFyVGV4dHVyZVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgc3VyZmFjZSBub3JtYWwgZGF0YSB1c2VkIHRvIGRpc3BsYWNlIGEgbWVzaCBpbiBhIHRleHR1cmUuXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5jb21wb25lbnRcbiAgYnVtcFRleHR1cmU/OiBUZXh0dXJlIHwgQXZhdGFyVGV4dHVyZVxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWF0ZXJpYWwgdG8gY2FzdCBzaGFkb3dzIG92ZXIgb3RoZXIgb2JqZWN0c1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY2FzdFNoYWRvd3M/OiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0cmFuc3BhcmVuY3kgbW9kZSBvZiB0aGUgbWF0ZXJpYWwuXG4gICAqIERlZmF1bHRzIHRvIC0xLlxuICAgKlxuICAgKiB8IFZhbHVlIHwgVHlwZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAgICogfCAwICAgICB8IE9QQVFVRSAgKGRlZmF1bHQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IDEgICAgIHwgQUxQSEFURVNUICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgMiAgICAgfCBBTFBIQUJMRU5EICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAzICAgICB8IEFMUEhBVEVTVEFOREJMRU5EICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8IDQgICAgIHwgQVVUTyAoQUxQSEFCTEVORCBpZiBhbHBoYSBPUEFRVUUgb3RoZXJ3aXNlICAgICB8XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB0cmFuc3BhcmVuY3lNb2RlOiBUcmFuc3BhcmVuY3lNb2RlID0gVHJhbnNwYXJlbmN5TW9kZS5BVVRPXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLm1hdGVyaWFsJywgQ0xBU1NfSUQuQkFTSUNfTUFURVJJQUwpXG5leHBvcnQgY2xhc3MgQmFzaWNNYXRlcmlhbCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICAvKipcbiAgICogVGhlIHNvdXJjZSBvZiB0aGUgdGV4dHVyZSBpbWFnZS5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmNvbXBvbmVudFxuICB0ZXh0dXJlPzogVGV4dHVyZSB8IFZpZGVvVGV4dHVyZSB8IEF2YXRhclRleHR1cmVcblxuICAvKipcbiAgICogQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICAgKiBBbnkgcGl4ZWwgd2l0aCBhbiBhbHBoYSBsb3dlciB0aGFuIHRoaXMgdmFsdWUgd2lsbCBiZSBzaG93biBhcyB0cmFuc3BhcmVudC5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFscGhhVGVzdDogbnVtYmVyID0gMC41XG5cbiAgLyoqXG4gICAqIEFsbG93IHRoZSBtYXRlcmlhbCB0byBjYXN0IHNoYWRvd3Mgb3ZlciBvdGhlciBvYmplY3RzXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBjYXN0U2hhZG93cz86IGJvb2xlYW4gPSB0cnVlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgT25VVUlERXZlbnQ8VCBleHRlbmRzIGtleW9mIElFdmVudHM+IGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8vIEBpbnRlcm5hbFxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWRcblxuICAvLyBAaW50ZXJuYWxcbiAgcmVhZG9ubHkgdXVpZDogc3RyaW5nID0gbmV3SWQoJ1VVSUQnKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNhbGxiYWNrITogKGV2ZW50OiBhbnkpID0+IHZvaWRcblxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzW1RdKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoKVxuXG4gICAgaWYgKCFjYWxsYmFjayB8fCAhKCdhcHBseScgaW4gY2FsbGJhY2spIHx8ICEoJ2NhbGwnIGluIGNhbGxiYWNrKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvbicpXG4gICAgfVxuXG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gIH1cblxuICBzdGF0aWMgdXVpZEV2ZW50KHRhcmdldDogT2JzZXJ2YWJsZUNvbXBvbmVudCwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIGlmIChkZWxldGUgKHRhcmdldCBhcyBhbnkpW3Byb3BlcnR5S2V5XSkge1xuICAgICAgY29uc3QgY29tcG9uZW50U3ltYm9sID0gcHJvcGVydHlLZXkgKyAnXycgKyBNYXRoLnJhbmRvbSgpXG4gICAgICA7KHRhcmdldCBhcyBhbnkpW2NvbXBvbmVudFN5bWJvbF0gPSB1bmRlZmluZWRcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29tcG9uZW50U3ltYm9sLCB7XG4gICAgICAgIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb21wb25lbnRTeW1ib2wpLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSlcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkudG9TdHJpbmcoKSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1tjb21wb25lbnRTeW1ib2xdXG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzW2NvbXBvbmVudFN5bWJvbF1cblxuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT25VVUlERXZlbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IHZhbHVlLnV1aWRcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndmFsdWUgaXMgbm90IGFuIE9uVVVJREV2ZW50JylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhW3Byb3BlcnR5S2V5XSA9IG51bGxcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzW2NvbXBvbmVudFN5bWJvbF0gPSB2YWx1ZVxuXG4gICAgICAgICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWVcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2ldKHByb3BlcnR5S2V5LCB2YWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4geyB1dWlkOiB0aGlzLnV1aWQsIHR5cGU6IHRoaXMudHlwZSB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBPblBvaW50ZXJVVUlERXZlbnQ8XG4gIFQgZXh0ZW5kcyBrZXlvZiBJRXZlbnRzXG4+IGV4dGVuZHMgT25VVUlERXZlbnQ8VD4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBidXR0b246IEFjdGlvbkJ1dHRvbiA9IEFjdGlvbkJ1dHRvbi5BTllcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBob3ZlclRleHQ6IHN0cmluZyA9ICdJbnRlcmFjdCdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBkaXN0YW5jZTogbnVtYmVyID0gMTBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaG93RmVlZGJhY2s6IGJvb2xlYW4gPSB0cnVlXG5cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1dWlkOiB0aGlzLnV1aWQsXG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICBidXR0b246IHRoaXMuYnV0dG9uLFxuICAgICAgaG92ZXJUZXh0OiB0aGlzLmhvdmVyVGV4dCxcbiAgICAgIGRpc3RhbmNlOiB0aGlzLmRpc3RhbmNlLFxuICAgICAgc2hvd0ZlZWRiYWNrOiB0aGlzLnNob3dGZWVkYmFja1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25Qb2ludGVyTG9jaycsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25Qb2ludGVyTG9jayBleHRlbmRzIE9uVVVJREV2ZW50PCdvblBvaW50ZXJMb2NrJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25Qb2ludGVyTG9jaydcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkFuaW1hdGlvbkVuZCcsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25BbmltYXRpb25FbmQgZXh0ZW5kcyBPblVVSURFdmVudDwnb25BbmltYXRpb25FbmQnPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkFuaW1hdGlvbkVuZCdcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnNtYXJ0SXRlbScsIENMQVNTX0lELlNNQVJUX0lURU0pXG5leHBvcnQgY2xhc3MgU21hcnRJdGVtIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7fVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5WaWRlb0NsaXAnLCBDTEFTU19JRC5WSURFT19DTElQKVxuZXhwb3J0IGNsYXNzIFZpZGVvQ2xpcCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1cmw6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudXJsID0gdXJsXG4gIH1cbn1cblxuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydCBlbnVtIFZpZGVvU3RhdHVzIHtcbiAgTk9ORSA9IDAsXG4gIEVSUk9SID0gMSxcbiAgTE9BRElORyA9IDIsXG4gIFJFQURZID0gMyxcbiAgUExBWUlORyA9IDQsXG4gIEJVRkZFUklORyA9IDVcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuVmlkZW9UZXh0dXJlJywgQ0xBU1NfSUQuVklERU9fVEVYVFVSRSlcbmV4cG9ydCBjbGFzcyBWaWRlb1RleHR1cmUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdmlkZW9DbGlwSWQ6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBFbmFibGVzIGNyaXNwZXIgaW1hZ2VzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCBzYW1wbGluZyBtb2RlLlxuICAgKiB8IFZhbHVlIHwgVHlwZSAgICAgIHxcbiAgICogfC0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAqIHwgICAgIDEgfCBORUFSRVNUICAgfFxuICAgKiB8ICAgICAyIHwgQklMSU5FQVIgIHxcbiAgICogfCAgICAgMyB8IFRSSUxJTkVBUiB8XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSBzYW1wbGluZ01vZGUhOiBudW1iZXJcblxuICAvKipcbiAgICogRW5hYmxlcyB0ZXh0dXJlIHdyYXBwaW5nIGZvciB0aGlzIG1hdGVyaWFsLlxuICAgKiB8IFZhbHVlIHwgVHlwZSAgICAgIHxcbiAgICogfC0tLS0tLS18LS0tLS0tLS0tLS18XG4gICAqIHwgICAgIDEgfCBDTEFNUCAgICAgfFxuICAgKiB8ICAgICAyIHwgV1JBUCAgICAgIHxcbiAgICogfCAgICAgMyB8IE1JUlJPUiAgICB8XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB3cmFwITogbnVtYmVyXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWJhY2tSYXRlOiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VlazogbnVtYmVyID0gLTFcblxuICBwcml2YXRlIF9wb3NpdGlvbjogbnVtYmVyID0gLTFcbiAgcHJpdmF0ZSBfdmlkZW9MZW5ndGg6IG51bWJlciA9IC0xXG4gIHByaXZhdGUgX3N0YXR1czogVmlkZW9TdGF0dXMgPSBWaWRlb1N0YXR1cy5OT05FXG5cbiAgLyoqXG4gICAqIElzIHRoaXMgVmlkZW9UZXh0dXJlIHBsYXlpbmc/XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwbGF5aW5nOiBib29sZWFuID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcihcbiAgICB2aWRlb0NsaXA6IFZpZGVvQ2xpcCxcbiAgICBvcHRzPzogUGFydGlhbDxQaWNrPFZpZGVvVGV4dHVyZSwgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCc+PlxuICApIHtcbiAgICBzdXBlcigpXG5cbiAgICBpZiAoISh2aWRlb0NsaXAgaW5zdGFuY2VvZiBWaWRlb0NsaXApKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUcnlpbmcgdG8gY3JlYXRlIFZpZGVvVGV4dHVyZShWaWRlb0NsaXApIHdpdGggYW4gaW52YWxpZCBWaWRlb0NsaXBgXG4gICAgICApXG4gICAgfVxuICAgIHRoaXMudmlkZW9DbGlwSWQgPSBnZXRDb21wb25lbnRJZCh2aWRlb0NsaXAgYXMgYW55KVxuXG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGZvciAoY29uc3QgaSBpbiBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueVxuICAgICAgICB0aGF0W2kgYXMgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCddID0gKG9wdHMgYXMgYW55KVtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBsYXkoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICB9XG5cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gZmFsc2VcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2Vla1RpbWUoMClcbiAgICB0aGlzLnBhdXNlKClcbiAgfVxuXG4gIHNlZWtUaW1lKHNlY29uZHM6IG51bWJlcikge1xuICAgIHRoaXMuc2VlayA9IHNlY29uZHNcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZVxuICAgIHRoaXMuZGF0YS5ub25jZSA9IE1hdGgucmFuZG9tKClcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBpZiAodGhpcy5zZWVrID49IDApIHtcbiAgICAgIC8vIHRoZSBzZWVrIHZhbHVlIHdhcyBjaGFuZ2VkL3VzZWRcbiAgICAgIGNvbnN0IHJldCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3VwZXIudG9KU09OKCkpKVxuICAgICAgdGhpcy5zZWVrID0gLTFcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIudG9KU09OKClcbiAgfVxuXG4gIHVwZGF0ZSh2aWRlb0V2ZW50OiBJRXZlbnRzWyd2aWRlb0V2ZW50J10pIHtcbiAgICBpZiAodmlkZW9FdmVudC52aWRlb0NsaXBJZCA9PT0gdGhpcy52aWRlb0NsaXBJZCkge1xuICAgICAgdGhpcy5fc3RhdHVzID0gKHZpZGVvRXZlbnQudmlkZW9TdGF0dXMgYXMgVmlkZW9TdGF0dXMpIHx8IFZpZGVvU3RhdHVzLk5PTkVcbiAgICAgIHRoaXMuX3ZpZGVvTGVuZ3RoID0gdmlkZW9FdmVudC50b3RhbFZpZGVvTGVuZ3RoXG4gICAgICB0aGlzLl9wb3NpdGlvbiA9IHZpZGVvRXZlbnQuY3VycmVudE9mZnNldFxuICAgIH1cbiAgfVxuXG4gIGdldCBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25cbiAgfVxuXG4gIGdldCB2aWRlb0xlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlkZW9MZW5ndGhcbiAgfVxuXG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1c1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuY2FtZXJhTW9kZUFyZWEnLCBDTEFTU19JRC5DQU1FUkFfTU9ERV9BUkVBKVxuZXhwb3J0IGNsYXNzIENhbWVyYU1vZGVBcmVhIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFyZWEhOiBBcmVhXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY2FtZXJhTW9kZSE6IENhbWVyYU1vZGVcblxuICBjb25zdHJ1Y3RvcihhcmdzOiB7IGFyZWE6IEFyZWE7IGNhbWVyYU1vZGU6IENhbWVyYU1vZGUgfSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmFyZWEgPSBhcmdzLmFyZWFcbiAgICB0aGlzLmNhbWVyYU1vZGUgPSBhcmdzLmNhbWVyYU1vZGVcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS50ZXh0dXJlJywgQ0xBU1NfSUQuQVZBVEFSX1RFWFRVUkUpXG5leHBvcnQgY2xhc3MgQXZhdGFyVGV4dHVyZSBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1c2VySWQhOiBzdHJpbmdcblxuICAvKipcbiAgICogRW5hYmxlcyBjcmlzcGVyIGltYWdlcyBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgc2FtcGxpbmcgbW9kZS5cbiAgICogfCBWYWx1ZSB8IFR5cGUgICAgICB8XG4gICAqIHwtLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgKiB8ICAgICAwIHwgTkVBUkVTVCAgIHxcbiAgICogfCAgICAgMSB8IEJJTElORUFSICB8XG4gICAqIHwgICAgIDIgfCBUUklMSU5FQVIgfFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgc2FtcGxpbmdNb2RlITogbnVtYmVyXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGV4dHVyZSB3cmFwcGluZyBmb3IgdGhpcyBtYXRlcmlhbC5cbiAgICogfCBWYWx1ZSB8IFR5cGUgICAgICB8XG4gICAqIHwtLS0tLS0tfC0tLS0tLS0tLS0tfFxuICAgKiB8ICAgICAwIHwgQ0xBTVAgICAgIHxcbiAgICogfCAgICAgMSB8IFdSQVAgICAgICB8XG4gICAqIHwgICAgIDIgfCBNSVJST1IgICAgfFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgd3JhcCE6IG51bWJlclxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIGlmIHRoaXMgdGV4dHVyZSBoYXMgYW4gYWxwaGEgY2hhbm5lbFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgaGFzQWxwaGEhOiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgb3B0cz86IFBhcnRpYWw8UGljazxBdmF0YXJUZXh0dXJlLCAnc2FtcGxpbmdNb2RlJyB8ICd3cmFwJyB8ICdoYXNBbHBoYSc+PlxuICApIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZFxuXG4gICAgaWYgKG9wdHMpIHtcbiAgICAgIGZvciAoY29uc3QgaSBpbiBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHRoYXQgPSB0aGlzIGFzIGFueVxuICAgICAgICB0aGF0W2kgYXMgJ3NhbXBsaW5nTW9kZScgfCAnd3JhcCcgfCAnaGFzQWxwaGEnXSA9IChvcHRzIGFzIGFueSlbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMsIFF1YXRlcm5pb24gfSBmcm9tICdAZGNsL2Vjcy1tYXRoJ1xuXG5pbXBvcnQgeyBDYW1lcmFNb2RlIH0gZnJvbSAnLi9UeXBlcydcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW1lcmEge1xuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBDYW1lcmFcblxuICBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IENhbWVyYSB7XG4gICAgaWYgKCFDYW1lcmEuX2luc3RhbmNlKSB7XG4gICAgICBDYW1lcmEuX2luc3RhbmNlID0gbmV3IENhbWVyYSgpXG4gICAgfVxuICAgIHJldHVybiBDYW1lcmEuX2luc3RhbmNlXG4gIH1cblxuICAvKiogQ2FtZXJhIHBvc2l0aW9uLCByZWxhdGl2ZSB0byB0aGUgcGFyY2VsLiAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb246IFZlY3RvcjMgPSBuZXcgVmVjdG9yMygpXG4gIC8qKiBDYW1lcmEgcm90YXRpb24gKi9cbiAgcHVibGljIHJlYWRvbmx5IHJvdGF0aW9uOiBRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKVxuXG4gIC8qKiBGZWV0IHBvc2l0aW9uLCByZWxhdGl2ZSB0byB0aGUgcGFyY2VsLiAgKi9cbiAgcHVibGljIHJlYWRvbmx5IGZlZXRQb3NpdGlvbjogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKClcbiAgLyoqIENhbWVyYSBwb3NpdGlvbiwgYWJzb2x1dGUuICovXG4gIHB1YmxpYyByZWFkb25seSB3b3JsZFBvc2l0aW9uOiBWZWN0b3IzID0gbmV3IFZlY3RvcjMoKVxuXG4gIC8qKiBQbGF5ZXIgaGVpZ2h0LiAqL1xuICBnZXQgcGxheWVySGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BsYXllckhlaWdodFxuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIFVzZSBvbkNhbWVyYU1vZGVDaGFuZ2VkT2JzZXJ2YWJsZSBPYnNlcnZhYmxlIGluc3RlYWQuICovXG4gIGdldCBjYW1lcmFNb2RlKCk6IENhbWVyYU1vZGUge1xuICAgIHJldHVybiB0aGlzLl9jYW1lcmFNb2RlXG4gIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBsYXN0RXZlbnRQb3NpdGlvbjogUmVhZE9ubHlWZWN0b3IzID0geyB4OiAwLCB5OiAwLCB6OiAwIH1cbiAgLy8gQGludGVybmFsXG4gIHByaXZhdGUgbGFzdEV2ZW50V29ybGRQb3NpdGlvbjogUmVhZE9ubHlWZWN0b3IzID0geyB4OiAwLCB5OiAwLCB6OiAwIH1cblxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBsYXN0RXZlbnRSb3RhdGlvbjogUmVhZE9ubHlRdWF0ZXJuaW9uID0geyB4OiAwLCB5OiAwLCB6OiAwLCB3OiAxLjAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIF9wbGF5ZXJIZWlnaHQ6IG51bWJlciA9IDEuNlxuICAvLyBAaW50ZXJuYWxcbiAgcHJpdmF0ZSBfY2FtZXJhTW9kZTogQ2FtZXJhTW9kZSA9IENhbWVyYU1vZGUuVGhpcmRQZXJzb25cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRjbC5zdWJzY3JpYmUoJ3Bvc2l0aW9uQ2hhbmdlZCcpXG4gICAgICBkY2wuc3Vic2NyaWJlKCdyb3RhdGlvbkNoYW5nZWQnKVxuICAgICAgZGNsLnN1YnNjcmliZSgnY2FtZXJhTW9kZUNoYW5nZWQnKVxuXG4gICAgICBkY2wub25FdmVudCgoZXZlbnQpID0+IHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgY2FzZSAncG9zaXRpb25DaGFuZ2VkJzpcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25DaGFuZ2VkKGV2ZW50LmRhdGEgYXMgYW55KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdyb3RhdGlvbkNoYW5nZWQnOlxuICAgICAgICAgICAgdGhpcy5yb3RhdGlvbkNoYW5nZWQoZXZlbnQuZGF0YSBhcyBhbnkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2NhbWVyYU1vZGVDaGFuZ2VkJzpcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhTW9kZUNoYW5nZWQoZXZlbnQuZGF0YSBhcyBhbnkpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvc2l0aW9uLCAneCcsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRQb3NpdGlvbi54XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvc2l0aW9uLCAneScsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRQb3NpdGlvbi55XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnBvc2l0aW9uLCAneicsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRQb3NpdGlvbi56XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLndvcmxkUG9zaXRpb24sICd4Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFdvcmxkUG9zaXRpb24ueFxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy53b3JsZFBvc2l0aW9uLCAneScsIHtcbiAgICAgIGdldDogKCkgPT4gdGhpcy5sYXN0RXZlbnRXb3JsZFBvc2l0aW9uLnlcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMud29ybGRQb3NpdGlvbiwgJ3onLCB7XG4gICAgICBnZXQ6ICgpID0+IHRoaXMubGFzdEV2ZW50V29ybGRQb3NpdGlvbi56XG4gICAgfSlcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmZlZXRQb3NpdGlvbiwgJ3gnLCB7XG4gICAgICBnZXQ6ICgpID0+IHRoaXMubGFzdEV2ZW50UG9zaXRpb24ueFxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5mZWV0UG9zaXRpb24sICd5Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFBvc2l0aW9uLnkgLSB0aGlzLnBsYXllckhlaWdodFxuICAgIH0pXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5mZWV0UG9zaXRpb24sICd6Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFBvc2l0aW9uLnpcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd4Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLnhcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd5Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLnlcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd6Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLnpcbiAgICB9KVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucm90YXRpb24sICd3Jywge1xuICAgICAgZ2V0OiAoKSA9PiB0aGlzLmxhc3RFdmVudFJvdGF0aW9uLndcbiAgICB9KVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHByaXZhdGUgcG9zaXRpb25DaGFuZ2VkKGU6IElFdmVudHNbJ3Bvc2l0aW9uQ2hhbmdlZCddKSB7XG4gICAgdGhpcy5sYXN0RXZlbnRQb3NpdGlvbiA9IGUucG9zaXRpb25cbiAgICB0aGlzLmxhc3RFdmVudFdvcmxkUG9zaXRpb24gPSBlLmNhbWVyYVBvc2l0aW9uXG4gICAgdGhpcy5fcGxheWVySGVpZ2h0ID0gZS5wbGF5ZXJIZWlnaHRcbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIHJvdGF0aW9uQ2hhbmdlZChlOiBJRXZlbnRzWydyb3RhdGlvbkNoYW5nZWQnXSkge1xuICAgIHRoaXMubGFzdEV2ZW50Um90YXRpb24gPSBlLnF1YXRlcm5pb25cbiAgfVxuXG4gIC8vIEBpbnRlcm5hbFxuICBwcml2YXRlIGNhbWVyYU1vZGVDaGFuZ2VkKGU6IElFdmVudHNbJ2NhbWVyYU1vZGVDaGFuZ2VkJ10pIHtcbiAgICB0aGlzLl9jYW1lcmFNb2RlID0gZS5jYW1lcmFNb2RlXG4gIH1cbn1cbiIsImltcG9ydCB7IFZlY3RvcjMsIE1hdHJpeCB9IGZyb20gJ0BkY2wvZWNzLW1hdGgnXG5cbmltcG9ydCB7IFJheWNhc3RSZXNwb25zZSB9IGZyb20gJy4vRXZlbnRzJ1xuaW1wb3J0IHsgdXVpZCwgbG9nIH0gZnJvbSAnLi4vZWNzL2hlbHBlcnMnXG5cbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vQ2FtZXJhJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgUXVlcnlUeXBlID1cbiAgfCAnSGl0Rmlyc3QnXG4gIHwgJ0hpdEFsbCdcbiAgfCAnSGl0Rmlyc3RBdmF0YXInXG4gIHwgJ0hpdEFsbEF2YXRhcnMnXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmVudW0gUXVlcnlQcmVmaXgge1xuICBIaXRGaXJzdCA9ICdycWhmJyxcbiAgSGl0QWxsID0gJ3JxaGEnXG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmF5Y2FzdFF1ZXJ5IHtcbiAgcXVlcnlJZDogc3RyaW5nXG4gIHF1ZXJ5VHlwZTogUXVlcnlUeXBlXG4gIHJheTogUmF5XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJheWNhc3RIaXQge1xuICBkaWRIaXQ6IGJvb2xlYW5cbiAgcmF5OiBSYXlcbiAgaGl0UG9pbnQ6IFJlYWRPbmx5VmVjdG9yM1xuICBoaXROb3JtYWw6IFJlYWRPbmx5VmVjdG9yM1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXkge1xuICBvcmlnaW46IFJlYWRPbmx5VmVjdG9yM1xuICBkaXJlY3Rpb246IFJlYWRPbmx5VmVjdG9yM1xuICBkaXN0YW5jZTogbnVtYmVyXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEhpdEVudGl0eUluZm8ge1xuICBpc1ZhbGlkOiBib29sZWFuXG4gIGVudGl0eUlkOiBzdHJpbmdcbiAgbWVzaE5hbWU6IHN0cmluZ1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0SGl0RW50aXR5IGV4dGVuZHMgUmF5Y2FzdEhpdCB7XG4gIGVudGl0eTogSGl0RW50aXR5SW5mb1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0SGl0RW50aXRpZXMgZXh0ZW5kcyBSYXljYXN0SGl0IHtcbiAgZW50aXRpZXM6IFJheWNhc3RIaXRFbnRpdHlbXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXNpY0F2YXRhckluZm8ge1xuICB1c2VySWQ6IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmF5Y2FzdEhpdEF2YXRhciBleHRlbmRzIFJheWNhc3RIaXQge1xuICBhdmF0YXI6IEJhc2ljQXZhdGFySW5mb1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXljYXN0SGl0QXZhdGFycyBleHRlbmRzIFJheWNhc3RIaXQge1xuICBhdmF0YXJzOiBCYXNpY0F2YXRhckluZm9bXVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGh5c2ljc0Nhc3Qge1xuICBoaXRGaXJzdChcbiAgICByYXk6IFJheSxcbiAgICBoaXRDYWxsYmFjazogKGV2ZW50OiBSYXljYXN0SGl0RW50aXR5KSA9PiB2b2lkLFxuICAgIGlkPzogbnVtYmVyXG4gICk6IHZvaWRcbiAgaGl0QWxsKFxuICAgIHJheTogUmF5LFxuICAgIGhpdENhbGxiYWNrOiAoZXZlbnQ6IFJheWNhc3RIaXRFbnRpdGllcykgPT4gdm9pZCxcbiAgICBpZD86IG51bWJlclxuICApOiB2b2lkXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgaGl0Rmlyc3RBdmF0YXIocmF5OiBSYXksIGhpdENhbGxiYWNrOiAoZXZlbnQ6IFJheWNhc3RIaXRBdmF0YXIpID0+IHZvaWQpOiB2b2lkXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgaGl0QWxsQXZhdGFycyhyYXk6IFJheSwgaGl0Q2FsbGJhY2s6IChldmVudDogUmF5Y2FzdEhpdEF2YXRhcnMpID0+IHZvaWQpOiB2b2lkXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgUGh5c2ljc0Nhc3QgaW1wbGVtZW50cyBJUGh5c2ljc0Nhc3Qge1xuICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFBoeXNpY3NDYXN0XG4gIHByaXZhdGUgcXVlcmllczogUmVjb3JkPHN0cmluZywgKGV2ZW50OiBSYXljYXN0SGl0KSA9PiB2b2lkPiA9IHt9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogUGh5c2ljc0Nhc3Qge1xuICAgIFBoeXNpY3NDYXN0LmVuc3VyZUluc3RhbmNlKClcbiAgICByZXR1cm4gUGh5c2ljc0Nhc3QuX2luc3RhbmNlXG4gIH1cblxuICBzdGF0aWMgZW5zdXJlSW5zdGFuY2UoKTogYW55IHtcbiAgICBpZiAoIVBoeXNpY3NDYXN0Ll9pbnN0YW5jZSkge1xuICAgICAgUGh5c2ljc0Nhc3QuX2luc3RhbmNlID0gbmV3IFBoeXNpY3NDYXN0KClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0UmF5RnJvbUNhbWVyYShkaXN0YW5jZTogbnVtYmVyKSB7XG4gICAgY29uc3Qgcm90YXRpb24gPSBDYW1lcmEuaW5zdGFuY2Uucm90YXRpb25cbiAgICBjb25zdCByb3RhdGlvbk1hdDogTWF0cml4ID0gTWF0cml4LklkZW50aXR5KClcbiAgICByb3RhdGlvbi50b1JvdGF0aW9uTWF0cml4KHJvdGF0aW9uTWF0KVxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IFZlY3RvcjMuVHJhbnNmb3JtQ29vcmRpbmF0ZXMoXG4gICAgICBWZWN0b3IzLkZvcndhcmQoKSxcbiAgICAgIHJvdGF0aW9uTWF0XG4gICAgKVxuXG4gICAgY29uc3QgcmF5OiBSYXkgPSB7XG4gICAgICBvcmlnaW46IENhbWVyYS5pbnN0YW5jZS5wb3NpdGlvbixcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlXG4gICAgfVxuXG4gICAgcmV0dXJuIHJheVxuICB9XG5cbiAgcHVibGljIGdldFJheUZyb21Qb3NpdGlvbnMoZnJvbTogVmVjdG9yMywgdG86IFZlY3RvcjMpIHtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSB0by5zdWJ0cmFjdChmcm9tKVxuICAgIGNvbnN0IGxlbmd0aCA9IGRpcmVjdGlvbi5sZW5ndGgoKVxuXG4gICAgY29uc3QgcmF5OiBSYXkgPSB7XG4gICAgICBvcmlnaW46IGZyb20sXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbi5ub3JtYWxpemUoKSxcbiAgICAgIGRpc3RhbmNlOiBsZW5ndGhcbiAgICB9XG5cbiAgICByZXR1cm4gcmF5XG4gIH1cblxuICBwdWJsaWMgaGl0Rmlyc3QoXG4gICAgcmF5OiBSYXksXG4gICAgaGl0Q2FsbGJhY2s6IChldmVudDogUmF5Y2FzdEhpdEVudGl0eSkgPT4gdm9pZCxcbiAgICBpZD86IG51bWJlclxuICApIHtcbiAgICBjb25zdCBxdWVyeUlkID0gdHlwZW9mIGlkID09PSAnbnVtYmVyJyA/IFF1ZXJ5UHJlZml4LkhpdEZpcnN0ICsgaWQgOiB1dWlkKClcblxuICAgIHRoaXMucXVlcmllc1txdWVyeUlkXSA9IGhpdENhbGxiYWNrIGFzIChldmVudDogUmF5Y2FzdEhpdCkgPT4gdm9pZFxuXG4gICAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkY2wucXVlcnkoJ3JheWNhc3QnLCB7IHF1ZXJ5SWQsIHF1ZXJ5VHlwZTogJ0hpdEZpcnN0JywgcmF5IH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhpdEFsbChcbiAgICByYXk6IFJheSxcbiAgICBoaXRDYWxsYmFjazogKGV2ZW50OiBSYXljYXN0SGl0RW50aXRpZXMpID0+IHZvaWQsXG4gICAgaWQ/OiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgcXVlcnlJZCA9IHR5cGVvZiBpZCA9PT0gJ251bWJlcicgPyBRdWVyeVByZWZpeC5IaXRBbGwgKyBpZCA6IHV1aWQoKVxuXG4gICAgdGhpcy5xdWVyaWVzW3F1ZXJ5SWRdID0gaGl0Q2FsbGJhY2sgYXMgKGV2ZW50OiBSYXljYXN0SGl0KSA9PiB2b2lkXG5cbiAgICBpZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRjbC5xdWVyeSgncmF5Y2FzdCcsIHsgcXVlcnlJZCwgcXVlcnlUeXBlOiAnSGl0QWxsJywgcmF5IH0pXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGhpdEZpcnN0QXZhdGFyKFxuICAgIF9yYXk6IFJheSxcbiAgICBfaGl0Q2FsbGJhY2s6IChldmVudDogUmF5Y2FzdEhpdEF2YXRhcikgPT4gdm9pZFxuICApIHtcbiAgICBsb2coJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKVxuICB9XG5cbiAgcHVibGljIGhpdEFsbEF2YXRhcnMoXG4gICAgX3JheTogUmF5LFxuICAgIF9oaXRDYWxsYmFjazogKGV2ZW50OiBSYXljYXN0SGl0QXZhdGFycykgPT4gdm9pZFxuICApIHtcbiAgICBsb2coJ25vdCBpbXBsZW1lbnRlZCB5ZXQnKVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVJheWNhc3RIaXRGaXJzdFJlc3BvbnNlKFxuICAgIHJlc3BvbnNlOiBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0eT5cbiAgKSB7XG4gICAgdGhpcy5xdWVyaWVzW3Jlc3BvbnNlLnBheWxvYWQucXVlcnlJZF0ocmVzcG9uc2UucGF5bG9hZC5wYXlsb2FkKVxuICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNbcmVzcG9uc2UucGF5bG9hZC5xdWVyeUlkXVxuICB9XG5cbiAgcHVibGljIGhhbmRsZVJheWNhc3RIaXRBbGxSZXNwb25zZShcbiAgICByZXNwb25zZTogUmF5Y2FzdFJlc3BvbnNlPFJheWNhc3RIaXRFbnRpdGllcz5cbiAgKSB7XG4gICAgdGhpcy5xdWVyaWVzW3Jlc3BvbnNlLnBheWxvYWQucXVlcnlJZF0ocmVzcG9uc2UucGF5bG9hZC5wYXlsb2FkKVxuICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNbcmVzcG9uc2UucGF5bG9hZC5xdWVyeUlkXVxuICB9XG59XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuLi9lY3MvRW5naW5lJ1xuaW1wb3J0IHsgVVVJREV2ZW50LCBQb2ludGVyRXZlbnQsIFJheWNhc3RSZXNwb25zZSB9IGZyb20gJy4vRXZlbnRzJ1xuaW1wb3J0IHsgT25VVUlERXZlbnQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5pbXBvcnQge1xuICBJU3lzdGVtLFxuICBDb21wb25lbnRBZGRlZCxcbiAgQ29tcG9uZW50UmVtb3ZlZCxcbiAgSUVudGl0eVxufSBmcm9tICcuLi9lY3MvSUVudGl0eSdcbmltcG9ydCB7IElucHV0IH0gZnJvbSAnLi9JbnB1dCdcbmltcG9ydCB7XG4gIFBoeXNpY3NDYXN0LFxuICBSYXljYXN0SGl0RW50aXR5LFxuICBSYXljYXN0SGl0RW50aXRpZXNcbn0gZnJvbSAnLi9QaHlzaWNzQ2FzdCdcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBSYXljYXN0RXZlbnRTeXN0ZW0gaW1wbGVtZW50cyBJU3lzdGVtIHtcbiAgYWN0aXZhdGUoZW5naW5lOiBFbmdpbmUpIHtcbiAgICBlbmdpbmUuZXZlbnRNYW5hZ2VyLmFkZExpc3RlbmVyKFJheWNhc3RSZXNwb25zZSwgdGhpcywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQucGF5bG9hZC5xdWVyeVR5cGUgPT09ICdIaXRGaXJzdCcpIHtcbiAgICAgICAgUGh5c2ljc0Nhc3QuaW5zdGFuY2UuaGFuZGxlUmF5Y2FzdEhpdEZpcnN0UmVzcG9uc2UoXG4gICAgICAgICAgZXZlbnQgYXMgUmF5Y2FzdFJlc3BvbnNlPFJheWNhc3RIaXRFbnRpdHk+XG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQucGF5bG9hZC5xdWVyeVR5cGUgPT09ICdIaXRBbGwnKSB7XG4gICAgICAgIFBoeXNpY3NDYXN0Lmluc3RhbmNlLmhhbmRsZVJheWNhc3RIaXRBbGxSZXNwb25zZShcbiAgICAgICAgICBldmVudCBhcyBSYXljYXN0UmVzcG9uc2U8UmF5Y2FzdEhpdEVudGl0aWVzPlxuICAgICAgICApXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnN1YnNjcmliZSgncmF5Y2FzdFJlc3BvbnNlJylcbiAgICB9XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnVuc3Vic2NyaWJlKCdyYXljYXN0UmVzcG9uc2UnKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFBvaW50ZXJFdmVudFN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xuICBhY3RpdmF0ZShlbmdpbmU6IEVuZ2luZSkge1xuICAgIGVuZ2luZS5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoUG9pbnRlckV2ZW50LCB0aGlzLCAoZXZlbnQpID0+IHtcbiAgICAgIElucHV0Lmluc3RhbmNlLmhhbmRsZVBvaW50ZXJFdmVudChldmVudC5wYXlsb2FkIGFzIEdsb2JhbElucHV0RXZlbnRSZXN1bHQpXG4gICAgfSlcblxuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnN1YnNjcmliZSgncG9pbnRlclVwJylcbiAgICAgIGRjbC5zdWJzY3JpYmUoJ3BvaW50ZXJEb3duJylcbiAgICAgIGRjbC5zdWJzY3JpYmUoJ2FjdGlvbkJ1dHRvbkV2ZW50JylcbiAgICB9XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICh0eXBlb2YgZGNsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGNsLnVuc3Vic2NyaWJlKCdwb2ludGVyVXAnKVxuICAgICAgZGNsLnVuc3Vic2NyaWJlKCdwb2ludGVyRG93bicpXG4gICAgICBkY2wudW5zdWJzY3JpYmUoJ2FjdGlvbkJ1dHRvbkV2ZW50JylcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBVVUlERXZlbnRTeXN0ZW0gaW1wbGVtZW50cyBJU3lzdGVtIHtcbiAgaGFuZGxlck1hcDogeyBbdXVpZDogc3RyaW5nXTogT25VVUlERXZlbnQ8YW55PiB9ID0ge31cblxuICBhY3RpdmF0ZShlbmdpbmU6IEVuZ2luZSkge1xuICAgIGVuZ2luZS5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoVVVJREV2ZW50LCB0aGlzLCB0aGlzLmhhbmRsZUV2ZW50KVxuICAgIGVuZ2luZS5ldmVudE1hbmFnZXIuYWRkTGlzdGVuZXIoQ29tcG9uZW50QWRkZWQsIHRoaXMsIHRoaXMuY29tcG9uZW50QWRkZWQpXG4gICAgZW5naW5lLmV2ZW50TWFuYWdlci5hZGRMaXN0ZW5lcihcbiAgICAgIENvbXBvbmVudFJlbW92ZWQsXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5jb21wb25lbnRSZW1vdmVkXG4gICAgKVxuXG4gICAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkY2wuc3Vic2NyaWJlKCd1dWlkRXZlbnQnKVxuICAgIH1cbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgaWYgKHR5cGVvZiBkY2wgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkY2wudW5zdWJzY3JpYmUoJ3V1aWRFdmVudCcpXG4gICAgfVxuICB9XG5cbiAgb25BZGRFbnRpdHkoZW50aXR5OiBJRW50aXR5KSB7XG4gICAgZm9yIChjb25zdCBjb21wb25lbnROYW1lIGluIGVudGl0eS5jb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBlbnRpdHkuY29tcG9uZW50c1tjb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgT25VVUlERXZlbnQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyTWFwW2NvbXBvbmVudC51dWlkXSA9IGNvbXBvbmVudFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uUmVtb3ZlRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xuICAgIGZvciAoY29uc3QgY29tcG9uZW50TmFtZSBpbiBlbnRpdHkuY29tcG9uZW50cykge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gZW50aXR5LmNvbXBvbmVudHNbY29tcG9uZW50TmFtZV1cblxuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIE9uVVVJREV2ZW50KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmhhbmRsZXJNYXBbY29tcG9uZW50LnV1aWRdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRBZGRlZChldmVudDogQ29tcG9uZW50QWRkZWQpIHtcbiAgICBpZiAoZXZlbnQuZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBldmVudC5lbnRpdHkuY29tcG9uZW50c1tldmVudC5jb21wb25lbnROYW1lXVxuXG4gICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgT25VVUlERXZlbnQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVyTWFwW2NvbXBvbmVudC51dWlkXSA9IGNvbXBvbmVudFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50UmVtb3ZlZChldmVudDogQ29tcG9uZW50UmVtb3ZlZCkge1xuICAgIGlmIChldmVudC5lbnRpdHkuaXNBZGRlZFRvRW5naW5lKCkpIHtcbiAgICAgIGlmIChldmVudC5jb21wb25lbnQgaW5zdGFuY2VvZiBPblVVSURFdmVudCkge1xuICAgICAgICBkZWxldGUgdGhpcy5oYW5kbGVyTWFwW2V2ZW50LmNvbXBvbmVudC51dWlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRXZlbnQoZXZlbnQ6IFVVSURFdmVudCk6IHZvaWQge1xuICAgIGlmIChldmVudC51dWlkIGluIHRoaXMuaGFuZGxlck1hcCkge1xuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlck1hcFtldmVudC51dWlkXVxuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIuY2FsbGJhY2sgJiYgJ2NhbGwnIGluIGhhbmRsZXIuY2FsbGJhY2spIHtcbiAgICAgICAgICBoYW5kbGVyLmNhbGxiYWNrKGV2ZW50LnBheWxvYWQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHJheWNhc3RFdmVudFN5c3RlbSA9IG5ldyBSYXljYXN0RXZlbnRTeXN0ZW0oKVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgcG9pbnRlckV2ZW50U3lzdGVtID0gbmV3IFBvaW50ZXJFdmVudFN5c3RlbSgpXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCB1dWlkRXZlbnRTeXN0ZW0gPSBuZXcgVVVJREV2ZW50U3lzdGVtKClcbiIsImltcG9ydCB7XG4gIERpc3Bvc2FibGVDb21wb25lbnQsXG4gIE9ic2VydmFibGVDb21wb25lbnQsXG4gIENvbXBvbmVudCxcbiAgZ2V0Q29tcG9uZW50SWRcbn0gZnJvbSAnLi4vZWNzL0NvbXBvbmVudCdcbmltcG9ydCB7IENMQVNTX0lEIH0gZnJvbSAnLi9Db21wb25lbnRzJ1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5BdWRpb0NsaXAnLCBDTEFTU19JRC5BVURJT19DTElQKVxuZXhwb3J0IGNsYXNzIEF1ZGlvQ2xpcCBleHRlbmRzIE9ic2VydmFibGVDb21wb25lbnQge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB1cmw6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBJcyB0aGlzIGNsaXAgbG9vcGluZyBieSBkZWZhdWx0P1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbG9vcDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLy8gQGludGVybmFsXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvYWRpbmdDb21wbGV0ZUV2ZW50SWQ/OiBzdHJpbmdcblxuICAvKipcbiAgICogQ2xpcCdzIG1hc3RlciB2b2x1bWUuIFRoaXMgdm9sdW1lIGFmZmVjdHMgYWxsIHRoZSBBdWRpb1NvdXJjZXMuXG4gICAqIFZhbGlkIHJhbmdlcyBmcm9tIDAgdG8gMVxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLkF1ZGlvU291cmNlJywgQ0xBU1NfSUQuQVVESU9fU09VUkNFKVxuZXhwb3J0IGNsYXNzIEF1ZGlvU291cmNlIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IGF1ZGlvQ2xpcElkOiBzdHJpbmdcblxuICAvKipcbiAgICogSXMgdGhpcyBjbGlwIGxvb3BpbmcgYnkgZGVmYXVsdD9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvb3A6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBDbGlwJ3MgbWFzdGVyIHZvbHVtZS4gVGhpcyB2b2x1bWUgYWZmZWN0cyBhbGwgdGhlIEF1ZGlvU291cmNlcy5cbiAgICogVmFsaWQgcmFuZ2VzIGZyb20gMCB0byAxXG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2b2x1bWU6IG51bWJlciA9IDFcblxuICAvKipcbiAgICogSXMgdGhpcyBBdWRpb1NvdXJjZSBwbGF5aW5nP1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWluZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgLyoqXG4gICAqIFBpdGNoLCBkZWZhdWx0OiAxLjAsIHJhbmdlIGZyb20gMC4wIHRvIE1heEZsb2F0XG4gICAqL1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwaXRjaDogbnVtYmVyID0gMS4wXG5cbiAgLyoqXG4gICAqIFRpbWVzdGFtcCBvZiB3aGVuIHRoZSBwbGF5T25jZSB3YXMgZXhlY3V0ZWQgdG8gc2VlIGlmIHdlIG5lZWQgdG8gc3RhcnQgb3ZlciB0aGUgYXVkaW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBsYXllZEF0VGltZXN0YW1wOiBudW1iZXIgPSBEYXRlLm5vdygpXG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGF1ZGlvQ2xpcDogQXVkaW9DbGlwKSB7XG4gICAgc3VwZXIoKVxuICAgIGlmICghKGF1ZGlvQ2xpcCBpbnN0YW5jZW9mIEF1ZGlvQ2xpcCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRyeWluZyB0byBjcmVhdGUgQXVkaW9Tb3VyY2UoQXVkaW9DbGlwKSB3aXRoIGFuIGludmFsaWQgQXVkaW9DbGlwYFxuICAgICAgKVxuICAgIH1cbiAgICB0aGlzLmF1ZGlvQ2xpcElkID0gZ2V0Q29tcG9uZW50SWQoYXVkaW9DbGlwIGFzIGFueSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgbG9vcGluZyBhbmQgcGxheXMgdGhlIGN1cnJlbnQgc291cmNlIG9uY2UuXG4gICAqIElmIHRoZSBzb3VuZCB3YXMgcGxheWluZywgaXQgc3RvcHMgYW5kIHN0YXJ0cyBvdmVyLlxuICAgKi9cbiAgcGxheU9uY2UoKSB7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZVxuICAgIHRoaXMuZGlydHkgPSB0cnVlXG4gICAgdGhpcy5wbGF5ZWRBdFRpbWVzdGFtcCA9IERhdGUubm93KClcbiAgICB0aGlzLmRhdGEubm9uY2UgPSBNYXRoLnJhbmRvbSgpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLkF1ZGlvU3RyZWFtJywgQ0xBU1NfSUQuQVVESU9fU1RSRUFNKVxuZXhwb3J0IGNsYXNzIEF1ZGlvU3RyZWFtIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHVybDogc3RyaW5nXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGxheWluZzogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdm9sdW1lOiBudW1iZXIgPSAxXG5cbiAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgICB0aGlzLnBsYXlpbmcgPSB0cnVlXG4gIH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyBDTEFTU19JRCwgT25VVUlERXZlbnQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKlxuICogR2l6bW8gaWRlbnRpZmllcnNcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGVudW0gR2l6bW8ge1xuICBNT1ZFID0gJ01PVkUnLFxuICBST1RBVEUgPSAnUk9UQVRFJyxcbiAgU0NBTEUgPSAnU0NBTEUnLFxuICBOT05FID0gJ05PTkUnXG59XG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgYWZ0ZXIgdGhlIHVzZXIgZmluYWxpemVzIGRyYWdnaW5nIGEgZ2l6bW8uXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5naXptb0V2ZW50JywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkdpem1vRXZlbnQgZXh0ZW5kcyBPblVVSURFdmVudDwnZ2l6bW9FdmVudCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ2dpem1vRXZlbnQnXG59XG5cbi8qKlxuICogRW5hYmxlcyBnaXptb3MgaW4gdGhlIGVudGl0eS4gR2l6bW9zIG9ubHkgd29yayBpbiBFRElUT1IsIFBSRVZJRVcgb3IgREVCVUcgbW9kZXMuXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5naXptb3MnLCBDTEFTU19JRC5HSVpNT1MpXG5leHBvcnQgY2xhc3MgR2l6bW9zIGV4dGVuZHMgT2JzZXJ2YWJsZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBFbmFibGUgcG9zaXRpb24gZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBvc2l0aW9uOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBFbmFibGUgcm90YXRpb24gZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHJvdGF0aW9uOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBFbmFibGUgc2NhbGUgZ2l6bW9cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNjYWxlOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBDeWNsZSB0aHJvdWdoIGdpem1vcyB1c2luZyBjbGljay5cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGN5Y2xlOiBib29sZWFuID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBJZiBjeWNsZSBpcyBmYWxzZSwgdGhpcyB3aWxsIGJlIHRoZSBzZWxlY3RlZCBnaXptb1xuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2VsZWN0ZWRHaXptbz86IEdpem1vXG5cbiAgLyoqXG4gICAqIEFsaWduIHRoZSBnaXptb3MgdG8gbWF0Y2ggdGhlIGxvY2FsIHJlZmVyZW5jZSBzeXN0ZW1cbiAgICovXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGxvY2FsUmVmZXJlbmNlOiBib29sZWFuID0gZmFsc2Vcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT2JzZXJ2YWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQgeyB1dWlkRXZlbnRTeXN0ZW0gfSBmcm9tICcuL1N5c3RlbXMnXG5pbXBvcnQgeyBDTEFTU19JRCwgT25VVUlERXZlbnQsIE9uUG9pbnRlclVVSURFdmVudCB9IGZyb20gJy4vQ29tcG9uZW50cydcbmltcG9ydCB7IEFjdGlvbkJ1dHRvbiB9IGZyb20gJy4vSW5wdXQnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25Gb2N1cycsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25Gb2N1cyBleHRlbmRzIE9uVVVJREV2ZW50PCdvbkZvY3VzJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25Gb2N1cydcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25Gb2N1cyddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLm9uVGV4dFN1Ym1pdCcsIENMQVNTX0lELlVVSURfQ0FMTEJBQ0spXG5leHBvcnQgY2xhc3MgT25UZXh0U3VibWl0IGV4dGVuZHMgT25VVUlERXZlbnQ8J29uVGV4dFN1Ym1pdCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ29uVGV4dFN1Ym1pdCdcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25UZXh0U3VibWl0J10pID0+IHZvaWQpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25CbHVyJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkJsdXIgZXh0ZW5kcyBPblVVSURFdmVudDwnb25CbHVyJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAnb25CbHVyJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkJsdXInXSkgPT4gdm9pZCkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5vbkVudGVyJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPbkVudGVyIGV4dGVuZHMgT25VVUlERXZlbnQ8J29uRW50ZXInPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkVudGVyJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkVudGVyJ10pID0+IHZvaWQpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUub25DaGFuZ2UnLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uQ2hhbmdlZCBleHRlbmRzIE9uVVVJREV2ZW50PCdvbkNoYW5nZSc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ29uQ2hhbmdlJ1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkNoYW5nZSddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgT25Qb2ludGVyVVVJREV2ZW50T3B0aW9ucyA9IHtcbiAgYnV0dG9uPzogQWN0aW9uQnV0dG9uXG4gIGhvdmVyVGV4dD86IHN0cmluZ1xuICBzaG93RmVlZGJhY2s/OiBib29sZWFuXG4gIGRpc3RhbmNlPzogbnVtYmVyXG59XG5cbi8qKlxuICogQHB1YmxpYyBAZGVwcmVjYXRlZCB1c2UgYE9uUG9pbnRlckRvd25gIGluc3RlYWRcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLm9uQ2xpY2snLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uQ2xpY2sgZXh0ZW5kcyBPblBvaW50ZXJVVUlERXZlbnQ8J29uQ2xpY2snPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdvbkNsaWNrJ1xuXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ29uQ2xpY2snXSkgPT4gdm9pZClcbiAgY29uc3RydWN0b3IoXG4gICAgY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1snb25DbGljayddKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM6IE9uUG9pbnRlclVVSURFdmVudE9wdGlvbnNcbiAgKVxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydvbkNsaWNrJ10pID0+IHZvaWQsIG9wdGlvbnM/OiBhbnkpIHtcbiAgICBzdXBlcihjYWxsYmFjaylcbiAgICAvLyBUaGlzIGluamVjdGlvbiBpcyBuZWNlc3NhcnkgT05MWSBpbiBldmVudHMgdGhhdCBhcmUgQUxXQVlTIHR1cm5lZCBvbiBhbmQgYXJlXG4gICAgLy8gbm90IGFzc2lnbmFibGUgdG8gZW50aXRpZXMuIExpa2UgZXZlbnRzIGZvciB0aGUgVUkgZWxlbWVudHNcblxuICAgIC8vIFRPRE8oQnJpYW4pOiBUaGlzIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIFVJIGdldHMgYmFjayB0byB0aGUgZW50aXR5IHBhcmVudGluZy5cbiAgICB1dWlkRXZlbnRTeXN0ZW0uaGFuZGxlck1hcFt0aGlzLnV1aWRdID0gdGhpc1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuc2hvd0ZlZWRiYWNrID0gIShvcHRpb25zLnNob3dGZWVkYmFjayA9PT0gZmFsc2UpXG5cbiAgICAgIGlmIChvcHRpb25zLmJ1dHRvbikge1xuICAgICAgICB0aGlzLmJ1dHRvbiA9IG9wdGlvbnMuYnV0dG9uXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmhvdmVyVGV4dCkge1xuICAgICAgICB0aGlzLmhvdmVyVGV4dCA9IG9wdGlvbnMuaG92ZXJUZXh0XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuZGlzdGFuY2UgPSBvcHRpb25zLmRpc3RhbmNlXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUucG9pbnRlckRvd24nLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlckRvd24gZXh0ZW5kcyBPblBvaW50ZXJVVUlERXZlbnQ8J3BvaW50ZXJEb3duJz4ge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5yZWFkb25seVxuICByZWFkb25seSB0eXBlOiBzdHJpbmcgPSAncG9pbnRlckRvd24nXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckRvd24nXSkgPT4gdm9pZClcbiAgY29uc3RydWN0b3IoXG4gICAgY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckRvd24nXSkgPT4gdm9pZCxcbiAgICBvcHRpb25zOiBPblBvaW50ZXJVVUlERXZlbnRPcHRpb25zXG4gIClcbiAgY29uc3RydWN0b3IoXG4gICAgY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckRvd24nXSkgPT4gdm9pZCxcbiAgICBvcHRpb25zPzogYW55XG4gICkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zaG93RmVlZGJhY2sgPSAhKG9wdGlvbnMuc2hvd0ZlZWRiYWNrID09PSBmYWxzZSlcblxuICAgICAgaWYgKG9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gb3B0aW9ucy5idXR0b25cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaG92ZXJUZXh0KSB7XG4gICAgICAgIHRoaXMuaG92ZXJUZXh0ID0gb3B0aW9ucy5ob3ZlclRleHRcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZGlzdGFuY2UpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBDb21wb25lbnQoJ2VuZ2luZS5wb2ludGVyVXAnLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlclVwIGV4dGVuZHMgT25Qb2ludGVyVVVJREV2ZW50PCdwb2ludGVyVXAnPiB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnJlYWRvbmx5XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9ICdwb2ludGVyVXAnXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlclVwJ10pID0+IHZvaWQpXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJVcCddKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM6IE9uUG9pbnRlclVVSURFdmVudE9wdGlvbnNcbiAgKVxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydwb2ludGVyVXAnXSkgPT4gdm9pZCwgb3B0aW9ucz86IGFueSkge1xuICAgIHN1cGVyKGNhbGxiYWNrKVxuICAgIC8vIFRoaXMgaW5qZWN0aW9uIGlzIG5lY2Vzc2FyeSBPTkxZIGluIGV2ZW50cyB0aGF0IGFyZSBBTFdBWVMgdHVybmVkIG9uIGFuZCBhcmVcbiAgICAvLyBub3QgYXNzaWduYWJsZSB0byBlbnRpdGllcy4gTGlrZSBldmVudHMgZm9yIHRoZSBVSSBlbGVtZW50c1xuXG4gICAgLy8gVE9ETyhCcmlhbik6IFRoaXMgd2lsbCBiZSByZW1vdmVkIHdoZW4gVUkgZ2V0cyBiYWNrIHRvIHRoZSBlbnRpdHkgcGFyZW50aW5nLlxuICAgIHV1aWRFdmVudFN5c3RlbS5oYW5kbGVyTWFwW3RoaXMudXVpZF0gPSB0aGlzXG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5zaG93RmVlZGJhY2sgPSAhKG9wdGlvbnMuc2hvd0ZlZWRiYWNrID09PSBmYWxzZSlcblxuICAgICAgaWYgKG9wdGlvbnMuYnV0dG9uKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gb3B0aW9ucy5idXR0b25cbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaG92ZXJUZXh0KSB7XG4gICAgICAgIHRoaXMuaG92ZXJUZXh0ID0gb3B0aW9ucy5ob3ZlclRleHRcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZGlzdGFuY2UpIHtcbiAgICAgICAgdGhpcy5kaXN0YW5jZSA9IG9wdGlvbnMuZGlzdGFuY2VcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIE9uUG9pbnRlckhvdmVyRW50ZXJVVUlERXZlbnRPcHRpb25zID0ge1xuICBkaXN0YW5jZT86IG51bWJlclxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnBvaW50ZXJIb3ZlckVudGVyJywgQ0xBU1NfSUQuVVVJRF9DQUxMQkFDSylcbmV4cG9ydCBjbGFzcyBPblBvaW50ZXJIb3ZlckVudGVyIGV4dGVuZHMgT25Qb2ludGVyVVVJREV2ZW50PCdwb2ludGVySG92ZXJFbnRlcic+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ3BvaW50ZXJIb3ZlckVudGVyJ1xuXG4gIGNvbnN0cnVjdG9yKGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJIb3ZlckVudGVyJ10pID0+IHZvaWQpXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNhbGxiYWNrOiAoZXZlbnQ6IElFdmVudHNbJ3BvaW50ZXJIb3ZlckVudGVyJ10pID0+IHZvaWQsXG4gICAgb3B0aW9uczogT25Qb2ludGVySG92ZXJFbnRlclVVSURFdmVudE9wdGlvbnNcbiAgKVxuICBjb25zdHJ1Y3RvcihcbiAgICBjYWxsYmFjazogKGV2ZW50OiBJRXZlbnRzWydwb2ludGVySG92ZXJFbnRlciddKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM/OiBhbnlcbiAgKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5kaXN0YW5jZSkge1xuICAgICAgICB0aGlzLmRpc3RhbmNlID0gb3B0aW9ucy5kaXN0YW5jZVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQENvbXBvbmVudCgnZW5naW5lLnBvaW50ZXJIb3ZlckV4aXQnLCBDTEFTU19JRC5VVUlEX0NBTExCQUNLKVxuZXhwb3J0IGNsYXNzIE9uUG9pbnRlckhvdmVyRXhpdCBleHRlbmRzIE9uUG9pbnRlclVVSURFdmVudDwncG9pbnRlckhvdmVyRXhpdCc+IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQucmVhZG9ubHlcbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nID0gJ3BvaW50ZXJIb3ZlckV4aXQnXG5cbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6IChldmVudDogSUV2ZW50c1sncG9pbnRlckhvdmVyRXhpdCddKSA9PiB2b2lkKSB7XG4gICAgc3VwZXIoY2FsbGJhY2spXG4gICAgLy8gVGhpcyBpbmplY3Rpb24gaXMgbmVjZXNzYXJ5IE9OTFkgaW4gZXZlbnRzIHRoYXQgYXJlIEFMV0FZUyB0dXJuZWQgb24gYW5kIGFyZVxuICAgIC8vIG5vdCBhc3NpZ25hYmxlIHRvIGVudGl0aWVzLiBMaWtlIGV2ZW50cyBmb3IgdGhlIFVJIGVsZW1lbnRzXG5cbiAgICAvLyBUT0RPKEJyaWFuKTogVGhpcyB3aWxsIGJlIHJlbW92ZWQgd2hlbiBVSSBnZXRzIGJhY2sgdG8gdGhlIGVudGl0eSBwYXJlbnRpbmcuXG4gICAgdXVpZEV2ZW50U3lzdGVtLmhhbmRsZXJNYXBbdGhpcy51dWlkXSA9IHRoaXNcblxuICAgIC8vIENoYW5nZWQgZGVmYXVsdCBkaXN0YW5jZSB2YWx1ZSBmb3IgdGhpcyBjb21wb25lbnQgYmVjYXVzZSBpbiBtb3N0IGNhc2VzIHdlIHByb2JhYmx5XG4gICAgLy8gZG9uJ3Qgd2FudCBmb3IgdGhlIGhvdmVyIGV4aXQgZXZlbnQgdG8gYmUgbGltaXRlZCBieSBhIGRpc3RhbmNlLCBhbmQgaXQgZGVmYXVsdCB2YWx1ZSB3YXMgdG9vIHNtYWxsLlxuICAgIHRoaXMuZGlzdGFuY2UgPSAxNjBcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29sb3I0IH0gZnJvbSAnQGRjbC9lY3MtbWF0aCdcbmltcG9ydCB7XG4gIE9ic2VydmFibGVDb21wb25lbnQsXG4gIERpc3Bvc2FibGVDb21wb25lbnQsXG4gIGdldENvbXBvbmVudElkXG59IGZyb20gJy4uL2Vjcy9Db21wb25lbnQnXG5pbXBvcnQge1xuICBDTEFTU19JRCxcbiAgT25VVUlERXZlbnQsXG4gIFRleHR1cmUsXG4gIEF2YXRhclRleHR1cmUsXG4gIEZvbnRcbn0gZnJvbSAnLi9Db21wb25lbnRzJ1xuaW1wb3J0IHsgT25UZXh0U3VibWl0LCBPbkJsdXIsIE9uQ2hhbmdlZCwgT25DbGljaywgT25Gb2N1cyB9IGZyb20gJy4vVUlFdmVudHMnXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFVJU2hhcGUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIERlZmluZXMgaWYgdGhlIGVudGl0eSBhbmQgaXRzIGNoaWxkcmVuIHNob3VsZCBiZSByZW5kZXJlZFxuICAgKi9cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGxcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG9wYWNpdHk6IG51bWJlciA9IDFcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBoQWxpZ246IHN0cmluZyA9ICdjZW50ZXInXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdkFsaWduOiBzdHJpbmcgPSAnY2VudGVyJ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LnVpVmFsdWVcbiAgd2lkdGg6IHN0cmluZyB8IG51bWJlciA9ICcxMDBweCdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC51aVZhbHVlXG4gIGhlaWdodDogc3RyaW5nIHwgbnVtYmVyID0gJzUwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQudWlWYWx1ZVxuICBwb3NpdGlvblg6IHN0cmluZyB8IG51bWJlciA9ICcwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQudWlWYWx1ZVxuICBwb3NpdGlvblk6IHN0cmluZyB8IG51bWJlciA9ICcwcHgnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaXNQb2ludGVyQmxvY2tlcjogYm9vbGVhbiA9IHRydWVcblxuICBwcml2YXRlIF9wYXJlbnQ/OiBVSVNoYXBlXG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBVSVNoYXBlIHwgbnVsbCkge1xuICAgIHN1cGVyKClcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnRcbiAgICAgIHRoaXMuZGF0YS5wYXJlbnRDb21wb25lbnQgPSBnZXRDb21wb25lbnRJZChwYXJlbnQgYXMgYW55KVxuICAgIH1cbiAgfVxuXG4gIGdldCBwYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudFxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIGdldCBwYXJlbnRDb21wb25lbnQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLnBhcmVudENvbXBvbmVudFxuICB9XG59XG5cbi8qKlxuICogQGludGVybmFsXG4gKiBOT1RFKEJyaWFuKTogdGhpcyBzaG91bGQgYmUgZGVwcmVjYXRlZFxuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfRlVMTFNDUkVFTl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBVSUZ1bGxTY3JlZW4gZXh0ZW5kcyBVSVNoYXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIobnVsbClcbiAgfVxufVxuXG4vKipcbiAqIEBpbnRlcm5hbFxuICogTk9URShCcmlhbik6IHRoaXMgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX1dPUkxEX1NQQUNFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJV29ybGRTcGFjZSBleHRlbmRzIFVJU2hhcGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihudWxsKVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfU0NSRUVOX1NQQUNFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJQ2FudmFzIGV4dGVuZHMgVUlTaGFwZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKG51bGwpXG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuc2hhcGUnLCBDTEFTU19JRC5VSV9DT05UQUlORVJfUkVDVClcbmV4cG9ydCBjbGFzcyBVSUNvbnRhaW5lclJlY3QgZXh0ZW5kcyBVSVNoYXBlIHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGhpY2tuZXNzOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY29sb3I6IENvbG9yNCA9IENvbG9yNC5DbGVhcigpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYWxpZ25tZW50VXNlc1NpemU6IGJvb2xlYW4gPSB0cnVlXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZW51bSBVSVN0YWNrT3JpZW50YXRpb24ge1xuICBWRVJUSUNBTCxcbiAgSE9SSVpPTlRBTFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX0NPTlRBSU5FUl9TVEFDSylcbmV4cG9ydCBjbGFzcyBVSUNvbnRhaW5lclN0YWNrIGV4dGVuZHMgVUlTaGFwZSB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGFkYXB0V2lkdGg6IGJvb2xlYW4gPSB0cnVlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYWRhcHRIZWlnaHQ6IGJvb2xlYW4gPSB0cnVlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgY29sb3I6IENvbG9yNCA9IENvbG9yNC5DbGVhcigpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc3RhY2tPcmllbnRhdGlvbjogVUlTdGFja09yaWVudGF0aW9uID0gVUlTdGFja09yaWVudGF0aW9uLlZFUlRJQ0FMXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc3BhY2luZzogbnVtYmVyID0gMFxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX0JVVFRPTl9TSEFQRSlcbmV4cG9ydCBjbGFzcyBVSUJ1dHRvbiBleHRlbmRzIFVJU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb250U2l6ZTogbnVtYmVyID0gMTBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb250V2VpZ2h0OiBzdHJpbmcgPSAnbm9ybWFsJ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHRoaWNrbmVzczogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvcm5lclJhZGl1czogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGJhY2tncm91bmQ6IENvbG9yNCA9IENvbG9yNC5XaGl0ZSgpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ1RvcDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdSaWdodDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdCb3R0b206IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nTGVmdDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0JsdXI6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dPZmZzZXRYOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WTogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0NvbG9yOiBDb2xvcjQgPSBDb2xvcjQuQmxhY2soKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHRleHQ6IHN0cmluZyA9ICdidXR0b24nXG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfVEVYVF9TSEFQRSlcbmV4cG9ydCBjbGFzcyBVSVRleHQgZXh0ZW5kcyBVSVNoYXBlIHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3V0bGluZVdpZHRoOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgb3V0bGluZUNvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGNvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGZvbnRTaXplOiBudW1iZXIgPSAxMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGZvbnRBdXRvU2l6ZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIGZvbnQ/OiBGb250XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdmFsdWU6IHN0cmluZyA9ICcnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgbGluZVNwYWNpbmc6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBsaW5lQ291bnQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhZGFwdFdpZHRoOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBhZGFwdEhlaWdodDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdGV4dFdyYXBwaW5nOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dCbHVyOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd09mZnNldFk6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dDb2xvcjogQ29sb3I0ID0gQ29sb3I0LkJsYWNrKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBoVGV4dEFsaWduOiBzdHJpbmcgPSAnbGVmdCdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2VGV4dEFsaWduOiBzdHJpbmcgPSAnYm90dG9tJ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdUb3A6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nUmlnaHQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nQm90dG9tOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDBcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbkBEaXNwb3NhYmxlQ29tcG9uZW50KCdlbmdpbmUuc2hhcGUnLCBDTEFTU19JRC5VSV9JTlBVVF9URVhUX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJSW5wdXRUZXh0IGV4dGVuZHMgVUlTaGFwZSB7XG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVXaWR0aDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIG91dGxpbmVDb2xvcjogQ29sb3I0ID0gQ29sb3I0LkJsYWNrKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBjb2xvcjogQ29sb3I0ID0gQ29sb3I0LkNsZWFyKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb250U2l6ZTogbnVtYmVyID0gMTBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5jb21wb25lbnRcbiAgZm9udD86IEZvbnRcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2YWx1ZTogc3RyaW5nID0gJydcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwbGFjZWhvbGRlcjogc3RyaW5nID0gJydcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBtYXJnaW46IG51bWJlciA9IDEwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaFRleHRBbGlnbjogc3RyaW5nID0gJ2xlZnQnXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgdlRleHRBbGlnbjogc3RyaW5nID0gJ2JvdHRvbSdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBmb2N1c2VkQmFja2dyb3VuZDogQ29sb3I0ID0gQ29sb3I0LkJsYWNrKClcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB0ZXh0V3JhcHBpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0JsdXI6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBzaGFkb3dPZmZzZXRYOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc2hhZG93T2Zmc2V0WTogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNoYWRvd0NvbG9yOiBDb2xvcjQgPSBDb2xvcjQuV2hpdGUoKVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdUb3A6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nUmlnaHQ6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nQm90dG9tOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDBcblxuICBvblRleHRTdWJtaXQ6IE9uVGV4dFN1Ym1pdCB8IG51bGwgPSBudWxsXG5cbiAgb25DaGFuZ2VkOiBPbkNoYW5nZWQgfCBudWxsID0gbnVsbFxuXG4gIC8vIEBpbnRlcm5hbFxuICBAT25VVUlERXZlbnQudXVpZEV2ZW50XG4gIHByb3RlY3RlZCByZWFkb25seSBvblRleHRDaGFuZ2VkOiBPbkNoYW5nZWRcblxuICBAT25VVUlERXZlbnQudXVpZEV2ZW50XG4gIG9uRm9jdXM6IE9uRm9jdXMgfCBudWxsID0gbnVsbFxuXG4gIEBPblVVSURFdmVudC51dWlkRXZlbnRcbiAgb25CbHVyOiBPbkJsdXIgfCBudWxsID0gbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogVUlTaGFwZSB8IG51bGwpIHtcbiAgICBzdXBlcihwYXJlbnQpXG4gICAgdGhpcy5vblRleHRDaGFuZ2VkID0gbmV3IE9uQ2hhbmdlZCgoZSkgPT4ge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgaXNTdWJtaXQgfSA9IGUudmFsdWVcblxuICAgICAgLy8gTk9URTogaGVyZSB3ZSB3YW50IHRvIGtlZXAgdGhlIHNhbWUgYGRpcnR5YCBzdGF0ZSBhcyBiZWZvcmUgY2hhbmdpbmcgYHRoaXMudmFsdWVgXG4gICAgICAvLyBiZWNhdXNlIGNoYW5naW5nIGB0aGlzLnZhbHVlYCB3aWxsIHNldCB0aGUgY29tcG9uZW50IGFzIGBkaXJ0eWAgYW5kIHNlbmQgYSBtZXNzYWdlIHRvIHRoZSByZW5kZXJlciB3aXRoIGl0IHZhbHVlXG4gICAgICAvLyBhbmQgdGhhdCBtZXNzYWdlIGlzIHVubmVjZXNhcnkgKGlmIHRoZSBvbmx5IHRoaW5nIHRoYXQgaGF2ZSBjaGFuZ2VkIGlzIGB0aGlzLnZhbHVlYCkgc2luY2UgdGhhdCBuZXcgdmFsdWUgaGFzIGNvbWUgZnJvbSB0aGUgcmVuZGVyZXIgaXRzZWxmXG4gICAgICBjb25zdCBpc0RpcnR5ID0gdGhpcy5kaXJ0eVxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgICB0aGlzLmRpcnR5ID0gaXNEaXJ0eVxuXG4gICAgICBpZiAoaXNTdWJtaXQgJiYgdGhpcy5vblRleHRTdWJtaXQpIHtcbiAgICAgICAgY29uc3Qgb25TdWJtaXRWYWx1ZTogSUV2ZW50c1snb25UZXh0U3VibWl0J10gPSB7IHRleHQ6IHZhbHVlIH1cbiAgICAgICAgdGhpcy5vblRleHRTdWJtaXQuY2FsbGJhY2sob25TdWJtaXRWYWx1ZSlcbiAgICAgIH0gZWxzZSBpZiAoIWlzU3VibWl0ICYmIHRoaXMub25DaGFuZ2VkKSB7XG4gICAgICAgIGNvbnN0IG9uQ2hhbmdlVmFsdWU6IElFdmVudHNbJ29uQ2hhbmdlJ10gPSB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgcG9pbnRlcklkOiBlLnBvaW50ZXJJZFxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25DaGFuZ2VkLmNhbGxiYWNrKG9uQ2hhbmdlVmFsdWUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuQERpc3Bvc2FibGVDb21wb25lbnQoJ2VuZ2luZS5zaGFwZScsIENMQVNTX0lELlVJX0lNQUdFX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJSW1hZ2UgZXh0ZW5kcyBVSVNoYXBlIHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc291cmNlTGVmdDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNvdXJjZVRvcDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNvdXJjZVdpZHRoOiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgc291cmNlSGVpZ2h0OiBudW1iZXIgPSAxXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuY29tcG9uZW50XG4gIHNvdXJjZT86IFRleHR1cmUgfCBBdmF0YXJUZXh0dXJlXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ1RvcDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdSaWdodDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdCb3R0b206IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nTGVmdDogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHNpemVJblBpeGVsczogYm9vbGVhbiA9IHRydWVcblxuICBAT25VVUlERXZlbnQudXVpZEV2ZW50XG4gIG9uQ2xpY2s6IE9uQ2xpY2sgfCBudWxsID0gbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogVUlTaGFwZSwgc291cmNlOiBUZXh0dXJlIHwgQXZhdGFyVGV4dHVyZSkge1xuICAgIHN1cGVyKHBhcmVudClcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZVxuICB9XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5ARGlzcG9zYWJsZUNvbXBvbmVudCgnZW5naW5lLnNoYXBlJywgQ0xBU1NfSUQuVUlfU0xJREVSX1NIQVBFKVxuZXhwb3J0IGNsYXNzIFVJU2Nyb2xsUmVjdCBleHRlbmRzIFVJU2hhcGUge1xuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2YWx1ZVg6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICB2YWx1ZVk6IG51bWJlciA9IDBcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yNCA9IENvbG9yNC5DbGVhcigpXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaXNIb3Jpem9udGFsOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBpc1ZlcnRpY2FsOiBib29sZWFuID0gZmFsc2VcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBwYWRkaW5nVG9wOiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ1JpZ2h0OiBudW1iZXIgPSAwXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgcGFkZGluZ0JvdHRvbTogbnVtYmVyID0gMFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHBhZGRpbmdMZWZ0OiBudW1iZXIgPSAwXG5cbiAgQE9uVVVJREV2ZW50LnV1aWRFdmVudFxuICBvbkNoYW5nZWQ6IE9uQ2hhbmdlZCB8IG51bGwgPSBudWxsXG59XG4iLCJpbXBvcnQgeyBSZWFkT25seUNvbG9yNCB9IGZyb20gJ0BkY2wvZWNzLW1hdGgnXG5cbmltcG9ydCB7IFdlYXJhYmxlSWQgfSBmcm9tICcuLi9kZWNlbnRyYWxhbmQvVHlwZXMnXG5pbXBvcnQgeyBDb21wb25lbnQsIE9ic2VydmFibGVDb21wb25lbnQgfSBmcm9tICcuLi9lY3MvQ29tcG9uZW50J1xuaW1wb3J0IHsgQ0xBU1NfSUQgfSBmcm9tICcuL0NvbXBvbmVudHMnXG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5AQ29tcG9uZW50KCdlbmdpbmUuYXZhdGFyU2hhcGUnLCBDTEFTU19JRC5BVkFUQVJfU0hBUEUpXG5leHBvcnQgY2xhc3MgQXZhdGFyU2hhcGUgZXh0ZW5kcyBPYnNlcnZhYmxlQ29tcG9uZW50IHtcbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgaWQhOiBzdHJpbmdcblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBuYW1lITogc3RyaW5nXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZXhwcmVzc2lvblRyaWdnZXJJZCE6IHN0cmluZ1xuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGV4cHJlc3Npb25UcmlnZ2VyVGltZXN0YW1wITogbnVtYmVyXG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgYm9keVNoYXBlITogV2VhcmFibGVJZFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHdlYXJhYmxlcyE6IFdlYXJhYmxlSWRbXVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGVtb3RlcyE6IHtcbiAgICBzbG90OiBudW1iZXJcbiAgICB1cm46IHN0cmluZ1xuICB9W11cblxuICBAT2JzZXJ2YWJsZUNvbXBvbmVudC5maWVsZFxuICBza2luQ29sb3IhOiBSZWFkT25seUNvbG9yNFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIGhhaXJDb2xvciE6IFJlYWRPbmx5Q29sb3I0XG5cbiAgQE9ic2VydmFibGVDb21wb25lbnQuZmllbGRcbiAgZXllQ29sb3IhOiBSZWFkT25seUNvbG9yNFxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHVzZUR1bW15TW9kZWw6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIEBPYnNlcnZhYmxlQ29tcG9uZW50LmZpZWxkXG4gIHRhbGtpbmc6IGJvb2xlYW4gPSBmYWxzZVxuXG4gIHB1YmxpYyBzdGF0aWMgRHVtbXkoKTogQXZhdGFyU2hhcGUge1xuICAgIGNvbnN0IGF2YXRhclNoYXBlID0gbmV3IEF2YXRhclNoYXBlKClcbiAgICBhdmF0YXJTaGFwZS51c2VEdW1teU1vZGVsID0gdHJ1ZVxuICAgIHJldHVybiBhdmF0YXJTaGFwZVxuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciB9IGZyb20gJy4uL2Vjcy9PYnNlcnZhYmxlJ1xuaW1wb3J0IHsgZXJyb3IgfSBmcm9tICcuLi9lY3MvaGVscGVycydcblxubGV0IGNvbW11bmljYXRpb25zQ29udHJvbGxlcjogTW9kdWxlRGVzY3JpcHRvciB8IG51bGwgPSBudWxsXG5sZXQgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZTogUHJvbWlzZUxpa2U8TW9kdWxlRGVzY3JpcHRvcj4gfCBudWxsID0gbnVsbFxuXG5sZXQgX21lc3NhZ2VPYnNlcnZlcjogbnVsbCB8IE9ic2VydmFibGU8SUV2ZW50c1snY29tbXMnXT4gPSBudWxsXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXNzYWdlT2JzZXJ2ZXIoKSB7XG4gIGlmICghX21lc3NhZ2VPYnNlcnZlcikge1xuICAgIF9tZXNzYWdlT2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2YWJsZTxJRXZlbnRzWydjb21tcyddPigpXG4gIH1cbiAgcmV0dXJuIF9tZXNzYWdlT2JzZXJ2ZXJcbn1cblxuZnVuY3Rpb24gZW5zdXJlQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyKCkge1xuICBpZiAoIWNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UpIHtcbiAgICBjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXJQcm9taXNlID0gZGNsLmxvYWRNb2R1bGUoXG4gICAgICAnQGRlY2VudHJhbGFuZC9Db21tdW5pY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAge31cbiAgICApXG5cbiAgICB2b2lkIGNvbW11bmljYXRpb25zQ29udHJvbGxlclByb21pc2UudGhlbigoJCkgPT4ge1xuICAgICAgY29tbXVuaWNhdGlvbnNDb250cm9sbGVyID0gJFxuICAgIH0pXG5cbiAgICBjb25zdCBvYnNlcnZlciA9IGdldE1lc3NhZ2VPYnNlcnZlcigpXG5cbiAgICBkY2wuc3Vic2NyaWJlKCdjb21tcycpXG4gICAgZGNsLm9uRXZlbnQoKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NvbW1zJykge1xuICAgICAgICBvYnNlcnZlci5ub3RpZnlPYnNlcnZlcnMoZXZlbnQuZGF0YSBhcyBhbnkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuICByZXR1cm4gY29tbXVuaWNhdGlvbnNDb250cm9sbGVyUHJvbWlzZVxufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VCdXMge1xuICBwcml2YXRlIG1lc3NhZ2VRdWV1ZTogc3RyaW5nW10gPSBbXVxuICBwcml2YXRlIGNvbm5lY3RlZCA9IGZhbHNlXG4gIHByaXZhdGUgZmx1c2hpbmcgPSBmYWxzZVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHZvaWQgZW5zdXJlQ29tbXVuaWNhdGlvbnNDb250cm9sbGVyKCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWVcbiAgICAgIHRoaXMuZmx1c2goKVxuICAgIH0pXG4gIH1cblxuICBvbihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6ICh2YWx1ZTogYW55LCBzZW5kZXI6IHN0cmluZykgPT4gdm9pZFxuICApOiBPYnNlcnZlcjxJRXZlbnRzWydjb21tcyddPiB7XG4gICAgcmV0dXJuIGdldE1lc3NhZ2VPYnNlcnZlcigpLmFkZCgoZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbSA9IEpTT04ucGFyc2UoZS5tZXNzYWdlKVxuXG4gICAgICAgIGlmIChtLm1lc3NhZ2UgPT09IG1lc3NhZ2UpIHtcbiAgICAgICAgICBjYWxsYmFjayhtLnBheWxvYWQsIGUuc2VuZGVyKVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRjbC5lcnJvcihcbiAgICAgICAgICAnRXJyb3IgcGFyc2luZyBjb21tcyBtZXNzYWdlICcgKyAoKGUgYXMgRXJyb3IpLm1lc3NhZ2UgfHwgJycpLFxuICAgICAgICAgIGVcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pIVxuICB9XG5cbiAgLy8gQGludGVybmFsXG4gIHNlbmRSYXcobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKVxuXG4gICAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICB0aGlzLmZsdXNoKClcbiAgICB9XG4gIH1cblxuICBlbWl0KG1lc3NhZ2U6IHN0cmluZywgcGF5bG9hZDogUmVjb3JkPGFueSwgYW55Pikge1xuICAgIGNvbnN0IG1lc3NhZ2VUb1NlbmQgPSBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2UsIHBheWxvYWQgfSlcbiAgICB0aGlzLnNlbmRSYXcobWVzc2FnZVRvU2VuZClcbiAgICBnZXRNZXNzYWdlT2JzZXJ2ZXIoKS5ub3RpZnlPYnNlcnZlcnMoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZVRvU2VuZCxcbiAgICAgIHNlbmRlcjogJ3NlbGYnXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZmx1c2goKSB7XG4gICAgaWYgKHRoaXMubWVzc2FnZVF1ZXVlLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG4gICAgaWYgKCF0aGlzLmNvbm5lY3RlZCkgcmV0dXJuXG4gICAgaWYgKCFjb21tdW5pY2F0aW9uc0NvbnRyb2xsZXIpIHJldHVyblxuICAgIGlmICh0aGlzLmZsdXNoaW5nKSByZXR1cm5cblxuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VRdWV1ZS5zaGlmdCgpXG5cbiAgICB0aGlzLmZsdXNoaW5nID0gdHJ1ZVxuXG4gICAgZGNsLmNhbGxScGMoY29tbXVuaWNhdGlvbnNDb250cm9sbGVyLnJwY0hhbmRsZSwgJ3NlbmQnLCBbbWVzc2FnZV0pLnRoZW4oXG4gICAgICAoXykgPT4ge1xuICAgICAgICB0aGlzLmZsdXNoaW5nID0gZmFsc2VcbiAgICAgICAgdGhpcy5mbHVzaCgpXG4gICAgICB9LFxuICAgICAgKGUpID0+IHtcbiAgICAgICAgdGhpcy5mbHVzaGluZyA9IGZhbHNlXG4gICAgICAgIGVycm9yKCdFcnJvciBmbHVzaGluZyBNZXNzYWdlQnVzJywgZSlcbiAgICAgIH1cbiAgICApXG4gIH1cbn1cbiIsIi8vIENPUkUgREVQRU5ERU5DSUVTXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9BdHRhY2hhYmxlJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvRW5naW5lJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvQ29tcG9uZW50J1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvQ29tcG9uZW50R3JvdXAnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9FbnRpdHknXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9JRW50aXR5J1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVGFzaydcbmV4cG9ydCAqIGZyb20gJy4vZWNzL2hlbHBlcnMnXG5leHBvcnQgKiBmcm9tICcuL2Vjcy9PYnNlcnZhYmxlJ1xuZXhwb3J0ICogZnJvbSAnLi9lY3MvVUlWYWx1ZSdcbmV4cG9ydCAqIGZyb20gJy4vZWNzL0V2ZW50TWFuYWdlcidcbmV4cG9ydCAqIGZyb20gJy4vZWNzL1VzZXJBY3Rpb25zJ1xuXG5pbXBvcnQgeyBfaW5pdEV2ZW50T2JzZXJ2YWJsZXMgfSBmcm9tICcuL2RlY2VudHJhbGFuZC9FdmVudHMnXG5pbXBvcnQgeyBEZWNlbnRyYWxhbmRTeW5jaHJvbml6YXRpb25TeXN0ZW0gfSBmcm9tICcuL2RlY2VudHJhbGFuZC9JbXBsZW1lbnRhdGlvbidcblxuLy8gRUNTIElOSVRJQUxJWkFUSU9OXG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tICcuL2Vjcy9FbmdpbmUnXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2Vjcy9FbnRpdHknXG5cbmNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHkoJ3NjZW5lJylcbjsoZW50aXR5IGFzIGFueSkudXVpZCA9ICcwJ1xuXG4vLyBJbml0aWFsaXplIGVuZ2luZVxuLyoqIEBwdWJsaWMgKi9cbmNvbnN0IGVuZ2luZSA9IG5ldyBFbmdpbmUoZW50aXR5KVxuXG5pbXBvcnQgeyBEaXNwb3NhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9lY3MvQ29tcG9uZW50J1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuLy8gQHRzLWlnbm9yZVxuRGlzcG9zYWJsZUNvbXBvbmVudC5lbmdpbmUgPSBlbmdpbmVcblxuLy8gSW5pdGlhbGl6ZSBEZWNlbnRyYWxhbmQgaW50ZXJmYWNlXG5pZiAodHlwZW9mIGRjbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZW5naW5lLmFkZFN5c3RlbShuZXcgRGVjZW50cmFsYW5kU3luY2hyb25pemF0aW9uU3lzdGVtKGRjbCksIEluZmluaXR5KVxuICBfaW5pdEV2ZW50T2JzZXJ2YWJsZXMoZGNsKVxufVxuXG5pbXBvcnQge1xuICB1dWlkRXZlbnRTeXN0ZW0sXG4gIHBvaW50ZXJFdmVudFN5c3RlbSxcbiAgcmF5Y2FzdEV2ZW50U3lzdGVtXG59IGZyb20gJy4vZGVjZW50cmFsYW5kL1N5c3RlbXMnXG5cbi8vIEluaXRpYWxpemUgVVVJRCBFdmVudHMgc3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHV1aWRFdmVudFN5c3RlbSlcbi8vIEluaXRpYWxpemUgUG9pbnRlciBFdmVudHMgU3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHBvaW50ZXJFdmVudFN5c3RlbSlcbi8vIEluaXRpYWxpemUgUmF5Y2FzdCBFdmVudHMgU3lzdGVtXG5lbmdpbmUuYWRkU3lzdGVtKHJheWNhc3RFdmVudFN5c3RlbSlcblxuLy8gREVDRU5UUkFMQU5EIERFUEVOREVOQ0lFU1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvTWF0aCdcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL1R5cGVzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQ29tcG9uZW50cydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL1N5c3RlbXMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9FdmVudHMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9DYW1lcmEnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9BbmltYXRpb25TdGF0ZSdcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0lucHV0J1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvQXVkaW8nXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9HaXptb3MnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9VSVNoYXBlcydcbmV4cG9ydCAqIGZyb20gJy4vZGVjZW50cmFsYW5kL0F2YXRhclNoYXBlJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvVUlFdmVudHMnXG5leHBvcnQgKiBmcm9tICcuL2RlY2VudHJhbGFuZC9NZXNzYWdlQnVzJ1xuZXhwb3J0ICogZnJvbSAnLi9kZWNlbnRyYWxhbmQvUGh5c2ljc0Nhc3QnXG5cbmV4cG9ydCB7IGVuZ2luZSB9XG4iXSwibmFtZXMiOlsiYnVpbGRBcnJheSIsIlVJVmFsdWVUeXBlIiwiU2NhbGFyXzEiLCJWZWN0b3I0XzEiLCJ0eXBlc18xIiwicmVxdWlyZSQkMCIsInJlcXVpcmUkJDEiLCJWZWN0b3IzXzEiLCJyZXF1aXJlJCQyIiwiTWF0cml4XzEiLCJRdWF0ZXJuaW9uXzEiLCJwcmVhbGxvY2F0ZWRWYXJpYWJsZXNfMSIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwiQW5nbGVfMSIsIlZlY3RvcjJfMSIsIkFyYzJfMSIsIkF4aXNfMSIsIkJlemllckN1cnZlXzEiLCJDb2xvcjRfMSIsIkNvbG9yM18xIiwiUGxhbmVfMSIsIlNpemVfMSIsInRoaXMiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJyZXF1aXJlJCQ4IiwicmVxdWlyZSQkOSIsInJlcXVpcmUkJDEwIiwicmVxdWlyZSQkMTEiLCJyZXF1aXJlJCQxMiIsInJlcXVpcmUkJDEzIiwicmVxdWlyZSQkMTQiLCJyZXF1aXJlJCQxNSIsInJlcXVpcmUkJDE2IiwicmVxdWlyZSQkMTciLCJyZXF1aXJlJCQxOCIsInJlcXVpcmUkJDE5IiwicmVxdWlyZSQkMjAiLCJJbnB1dEV2ZW50VHlwZSIsIkNhbWVyYU1vZGUiLCJMYW5kUm9sZSIsIkFjdGlvbkJ1dHRvbiIsIlZlY3RvcjMiLCJDTEFTU19JRCIsIkF2YXRhck1vZGlmaWVycyIsIlF1YXRlcm5pb24iLCJNYXRoVG1wIiwiTWF0cml4IiwiQXR0YWNoVG9BdmF0YXJBbmNob3JQb2ludElkIiwiUGljdHVyZUZyYW1lU3R5bGUiLCJDb2xvcjMiLCJGb250cyIsIlRyYW5zcGFyZW5jeU1vZGUiLCJWaWRlb1N0YXR1cyIsIkdpem1vIiwiQ29sb3I0IiwiVUlTdGFja09yaWVudGF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7RUFFQTs7Ozs7O01BS0E7T0FhQzs7TUFYaUIsaUJBQU0sR0FBZTtVQUNuQyx1QkFBdUIsRUFBRSxVQUFDLE1BQWUsSUFBSyxPQUFBLE1BQU0sQ0FBQyxZQUFZLEdBQUE7T0FDekQsQ0FBQTs7TUFFTSw4QkFBbUIsR0FBZTtVQUNoRCx1QkFBdUIsRUFBRSxVQUFDLE1BQWUsSUFBSyxPQUFBLE1BQU0sQ0FBQyx1QkFBdUIsR0FBQTtPQUNwRSxDQUFBO01BS1osaUJBQUM7R0FiRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUNQQSxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUE7RUFJdkI7Ozs7O1dB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O0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFO0VBQzFDLFFBQVEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ25ELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUU7RUFDdkIsUUFBUSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUM1QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUNqQyxRQUFRLE9BQU8sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQztFQUMzRCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0VBQ3RDLFFBQVEsT0FBTyxDQUFDLEtBQUssR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQzNDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxXQUFXLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7RUFDN0MsUUFBUSxPQUFPLFVBQVUsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQzlDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNB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QUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztFQUNyQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLG1CQUFtQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0VBQ3RELFFBQVEsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3RELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFO0VBQy9DLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckIsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNyQixRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ3JCLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDckIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksR0FBRztFQUNsQixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDL0MsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEdBQUcsR0FBRztFQUNqQixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDL0MsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sU0FBUyxDQUFDLE1BQU0sRUFBRTtFQUM3QixRQUFRLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUN0QyxRQUFRLE9BQU8s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QztFQUN6QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFdBQVcsR0FBRztFQUNsQixRQUFRLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQy9CLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sR0FBRztFQUNkLFFBQVEsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztFQUNuQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFO0VBQzlCLFFBQVEsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDOUIsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEMsUUFBUSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDbEMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtFQUM1QixRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO0VBQ3JCLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzSCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRTtFQUNsQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGVBQWUsQ0FBQyxXQUFXLEVBQUU7RUFDakMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRTtFQUMxQixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0gsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksYUFBYSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUU7RUFDdkMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDbkMsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDM0UsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksdUJBQXVCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRTtFQUNoRCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDOUIsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQzlCLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUM5QixRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDOUIsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE1BQU0sR0FBRztFQUNiLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvRCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRTtFQUN4QixRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0VBQ3hCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDeEIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQztFQUN4QixRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0VBQ3hCLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7RUFDakIsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7RUFDM0YsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDOUIsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ2xDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNsQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ2xDLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksZ0JBQWdCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUNwQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbkMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNuQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbkMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtFQUN4QixRQUFRLFFBQVEsV0FBVztFQUMzQixZQUFZLElBQUksQ0FBQyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUM7RUFDcEMsWUFBWSxJQUFJLENBQUMsQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDO0VBQ3BDLFlBQVksSUFBSSxDQUFDLENBQUMsS0FBSyxXQUFXLENBQUMsQ0FBQztFQUNwQyxZQUFZLElBQUksQ0FBQyxDQUFDLEtBQUssV0FBVyxDQUFDLENBQUMsRUFBRTtFQUN0QyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsT0FBTyxHQUFHSixTQUFPLENBQUMsT0FBTyxFQUFFO0VBQzlELFFBQVEsUUFBUSxXQUFXO0VBQzNCLFlBQVlGLFVBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUM7RUFDekUsWUFBWUEsVUFBUSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQztFQUN6RSxZQUFZQSxVQUFRLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDO0VBQ3pFLFlBQVlBLFVBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBRTtFQUMzRSxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtFQUMvQixRQUFRLE9BQU8sSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7RUFDNUUsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGVBQWUsQ0FBQyxXQUFXLEVBQUU7RUFDakMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDaEMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRTtFQUMxQixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0gsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksYUFBYSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUU7RUFDdkMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDakMsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDM0UsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUU7RUFDeEIsUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzNILEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFO0VBQ3JDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztFQUMxQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQzFDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDMUMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksYUFBYSxDQUFDLFdBQVcsRUFBRTtFQUMvQixRQUFRLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7RUFDbkQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGVBQWUsQ0FBQyxLQUFLLEVBQUU7RUFDM0IsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRTtFQUM5QixZQUFZLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUM3QixTQUFTO0VBQ1QsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRTtFQUM5QixZQUFZLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUM3QixTQUFTO0VBQ1QsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRTtFQUM5QixZQUFZLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUM3QixTQUFTO0VBQ1QsUUFBUSxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRTtFQUM5QixZQUFZLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUM3QixTQUFTO0VBQ1QsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksZUFBZSxDQUFDLEtBQUssRUFBRTtFQUMzQixRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLElBQUksS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQzlCLFlBQVksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzdCLFNBQVM7RUFDVCxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksS0FBSyxHQUFHO0VBQ1osUUFBUSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0csS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxLQUFLLEdBQUc7RUFDWixRQUFRLE9BQU8sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQy9JLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxNQUFNLEdBQUc7RUFDYixRQUFRLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNoRyxLQUFLO0VB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TDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLGVBQWUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO0VBQ25PLFFBQVEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztFQUM1QixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzNCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMzQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDM0IsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzNCLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMzQixRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDM0IsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDaEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtFQUN0TixRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO0VBQzVCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztFQUMxQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7RUFDMUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO0VBQzFCLFFBQVEsQ0FBQyxDQUFDLENBQUMs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RUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ2pELFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztFQUNuQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ2pELFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQ3hDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDakQsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ25CLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDakQsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNqRCxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUN6QyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDcEIsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQ3BCLFFBQVEsQ0FBQyxDQUFD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QUNBLFdBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztFQUN0RCxRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUNBLFdBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztFQUN0RCxRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUNBLFdBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztFQUN0RCxRQUFRLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3hKLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtFQUNyQyxRQUFRLE1BQU0sTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7RUFDcEMsUUFBUSxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3RELFFBQVEsT0FBTyxNQUFNLENBQUM7RUFDdEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sYUFBYSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRTtF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QUFJLE9BQU8sY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7RUFDMUMsUUFBUSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDO0VBQzdCLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztFQUM3QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDdkIsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZCLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QixRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdEIsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ3hCLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN4QixRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDdkIsUUFBUSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3ZCLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN4QixRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDeEI7RUFDQSxRQUFRLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2xGLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUU7RUFDN0IsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0VBQ3BDLFFBQVEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDOUMsUUFBUSxPQUFPLE1BQU0sQ0FBQztFQUN0QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxlQUFlLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtFQUMxQyxRQUFRLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztFQUMxQixRQUFRLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ2pDLFFBQVEsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDakMsUUFBUSxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNqQyxRQUFRLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUM1QixRQUFRLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUM3QixRQUFRLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUM3QixRQUFRLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3pOLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDekQsUUFBUSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztFQUMzSixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO0VBQzdDLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUM3QyxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUN2QyxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUN2QyxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQzNCLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUM3QyxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUN2QyxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQzNCLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztFQUM5QyxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQzVCLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDNUIsUUFBUSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztFQUM1QixRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQzVCLFFBQVEsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7RUFDNUIsUUFBUSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7RUFDaEMsS0FBSztF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LEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0Q7RUFDQSxRQUFRLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM3RDtFQUNBLFFBQVEsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQy9EO0VBQ0EsUUFBUSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDakU7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7RUFDaEQsUUFBUSxNQUFNLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxH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RUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQy9ELFFBQVEsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQ2pFO0VBQ0E7RUFDQSxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztFQUNoRCxRQUFRLE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztFQUNqRixRQUFRLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUM7RUFDMUYsUUFBUSxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7RUFDdkI7RUFDQSxZQUFZLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDakMsWUFBWSxPQUFPLElBQUksQ0FBQztFQUN4QixTQUFTO0VBQ1QsUUFBUSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0VBQy9CLFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0VBQ2hELFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLFNBQVMsR0FBRyxNQUFNLEVBQUUsU0FBUyxHQUFHLE1BQU0sRUFBRSxTQUFTLEdBQUcsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0VBQ3RXO0VBQ0EsUUFBUSxPQUFPLElBQUksQ0FB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R0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0QsUUFBUSxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDakUsUUFBUSxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDckUsUUFBUSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDckYsUUFBUSxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDekY7RUFDQSxRQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQ3hFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzVFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzdFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzdFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzVFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzVFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzdFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0VBQzdFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQzlFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQzlFLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2hGLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2hGLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2pGLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2xGLFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQ2xGLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7RUFDbEIsUUFBUSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7RUFDNUIsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO0VBQ3BCLFlBQVksT0FBTyxLQUFLLENBQUM7RUFDekIsU0FBUztFQUNULFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUU7RUFDbkQsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFO0VBQ25FLGdCQUFnQixPQUFPLElBQUksQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQztFQUM3RCxhQUFhO0VBQ2IsU0FBUztFQUNULFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN6QixRQUFRLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDM0IsUUFBUSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzlCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUIsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxQixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7RUFDNUIsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztFQUM1QixZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQzVCLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7RUFDNUIsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQztFQUM1QixZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7RUFDOUIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxLQUFLLEdBQUc7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QUFJLEdBQUcsQ0FBQyxDQUFDO0VBQ2hDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFNBQVM7RUFDVCxhQUFhLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxFQUFFO0VBQ3pDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZELFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0VBQ2hDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFNBQVM7RUFDVCxhQUFhLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRTtFQUM1QixZQUFZLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztFQUN2RCxZQUFZLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztFQUN2QyxZQUFZLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztFQUN2QyxZQUFZLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztFQUNoQyxZQUFZLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztFQUN2QyxTQUFTO0VBQ1QsYUFBYTtFQUNiLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZELFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3ZDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0VBQ2hDLFNBQVM7RUFDVCxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO0VBQzVCLFFBQVEsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7RUFDM0YsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtFQUNsQyxRQUFRLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtB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OUIsWUFBWSxRQUFRLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUMvQixRQUFRLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSztFQUNsQyxZQUFZLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSztFQUM1QixZQUFZLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSztFQUM5QixZQUFZLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQy9CLFFBQVEsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLO0VBQ2xDLFlBQVksTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLO0VBQzVCLFlBQVksUUFBUSxDQUFDLENBQUMsR0FBRyxLQUFLO0VBQzlCLFlBQVksUUFBUSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDL0IsUUFBUSxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzFDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksV0FBVyxRQUFRLEdBQUc7RUFDMUIsUUFBUSxPQUFPLElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQ2xELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0VBQy9CLFFBQVEsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7RUFDakQsUUFBUSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHTCxTQUFPLENBQUMsT0FBTyxDQUFDO0VBQzNFLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtF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QUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUIsS0FBSztFQUNMLElBQUksSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO0VBQzNCLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2pELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksSUFBSSxXQUFXLEdBQUc7RUFDdEIsUUFBUSxNQUFNLEdBQUcsR0FBRyxJQUFJSixXQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7RUFDNUM7RUFDQSxRQUFRLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUMzRjtFQUNBLFFBQVEsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN2RCxRQUFRLElBQUksSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLEVBQUU7RUFDbEM7RUFDQSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDaEMsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ25ELFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDdEIsU0FBUztFQUNULGFBQWEsSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxFQUFFO0VBQ3hDO0VBQ0EsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDakMsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDcEQsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUN0QixTQUFTO0VBQ1QsYUFBYTtFQUNiO0VBQ0EsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3ZFLFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3ZILFlBQVksR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxH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SSxVQUFVLENBQUMsS0FBSyxFQUFFO0VBQ3RCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQzFCLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7RUFDcEIsUUFBUSxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RHLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO0VBQ2pCLFFBQVEsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0VBQzlGLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQzlCLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNsQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbEMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ2xDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNsQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFO0VBQ3hCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDeEIsUUFBUSxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQztFQUN4QixRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDO0VBQ3hCLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUM7RUFDeEIsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFO0VBQ3BDLFFBQVEsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNuQyxRQUFRLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7RUFDbkMsUUFBUSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQ25DLFFBQVEsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNuQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO0VBQ2pCLFFBQVEsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDcEQsUUFBUSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztFQUN2QyxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGFBQWEsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFO0VBQzlCLFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2hGLFFBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDakYsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDaEYsUUFBUSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMs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QUNBLElBQUksT0FBTyxtQ0FBbUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFO0VBQ2hGLFFBQVEsTUFBTSxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQztFQUNuQyxRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUMxRCxRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUMxRCxRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUMzRCxRQUFRLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUNqRSxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztFQUMzQixRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztFQUMzQixRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxH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Q0FBQyxDQUFDLEdBQUcsS0FBSztFQUNsQyxZQUFZLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSztFQUM1QixZQUFZLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSztFQUM5QixZQUFZLFFBQVEsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0VBQy9CLFFBQVEsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7RUFDcEMsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztFQUN0RCxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0VBQ2pELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztFQUN4RCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUM7RUFDeEQsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO0VBQ3hELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7RUFDNUIsUUFBUSxPQUFPLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3RFLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtFQUM5QixRQUFRLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztFQUN0QyxRQUFRLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztFQUNoRCxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDM0MsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0VBQ3RELFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUN0RCxRQUFRLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDdEQsUUFBUSxNQUFNLENB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QUMsSUFBSSxDQUFDLENBQUM7RUFDaEUsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNqRSxRQUFRLE9BQU8sTUFBTSxDQUFDO0VBQ3RCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFO0VBQ2QsUUFBUSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQ3pDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFdBQVcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFO0VBQzNCLFFBQVEsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO0VBQ2pDLFFBQVEsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDakQ7RUFDQSxRQUFRLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDNUMsUUFBUSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUM1QyxRQUFRLE1BQU0sRUFBRSxHQUFHLENB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RUFDckMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztFQUNqQyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0VBQ2pDLFFBQVEsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUN2RSxRQUFRLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDO0VBQzlGLFFBQVEsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDeEYsUUFBUSxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7RUFDM0UsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNwRSxRQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSU8sV0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7RUFDeEYsWUFBWSxRQUFRLElBQUksVUFBVSxDQUFDLENBQUMs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QUMsQ0FBQyxDQUFDO0VBQzNDLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7RUFDckMsUUFBUSxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUN0RCxRQUFRLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7RUFDdEQsUUFBUSxPQUFPLE1BQU0sQ0FBQztFQUN0QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtFQUNsRCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUM7RUFDeEQsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDO0VBQ3hELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQztFQUN4RCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUM7RUFDeEQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEdBQUcsR0FBRztFQUNqQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDMUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssR0FBRztFQUNuQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDMUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksR0FBRztFQUNsQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDMUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssR0FBRztFQUNuQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssR0FBRztFQUNuQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLE1BQU0sR0FBRztFQUNwQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDMUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLE9BQU8sR0FBRztFQUNyQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLE1BQU0sR0FBRztFQUNwQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksR0FBRztFQUNsQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDOUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLElBQUksR0FBRztFQUNsQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDNUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxPQUFPLEtBQUssR0FBRztFQUNuQixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBRyxHQUFHLEVBQUU7RUFDM0MsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0VBQy9ELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0VBQ3hDLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENB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TUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztFQUNuQyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUU7RUFDekMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHSixVQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMzRCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUdBLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzNELFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBR0EsVUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDM0QsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHQSxVQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMzRCxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO0VBQ3BCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENB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SyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7RUFDN0QsWUFBWSxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdkMsU0FBUztFQUNULFFBQVEsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ3BELFFBQVEsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ3BELFFBQVEsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0VBQ3BELFFBQVEsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDeEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUU7RUFDeEMsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvRSxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8sUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0VBQzdCLFFBQVEsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFD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SSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDM0QsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHQSxVQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztFQUMzRCxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUdBLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQzNELFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7RUFDcEIsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDL0YsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUU7RUFDakMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUN6QyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3pDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDekMsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTtFQUN6QixRQUFRLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvRixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRTtFQUN0QyxRQUFRLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3pDLFFBQVEsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7RUFDekMsUUFBUSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztFQUN6QyxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksS0FBSyxHQUFHO0VBQ1osUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUU7RUFDckIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUIsUUFBUSxPQUFPLElBQUksQ0FBQztFQUNwQixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtFQUM1QixRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQ25CLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDbkIsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUNuQixRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0VBQ2pCLFFBQVEsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxXQUFXLEdBQUc7RUFDbEIsUUFBUSxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztFQUN4QyxRQUFRLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO0VBQ3hDLFFBQVEsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7RUFDeEMsUUFBUSxPQUFPLEdBQUcsR0FBR0EsVUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUdBLFVBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHQSxVQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUM3RyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGFBQWEsR0FBRztFQUNwQixRQUFRLE1BQU0sY0FBYyxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7RUFDNUMsUUFBUSxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7RUFDaEQsUUFBUSxPQUFPLGNBQWMsQ0FBQztFQUM5QixLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksa0JBQWtCLENBQUMsY0FBYyxFQUFFO0VBQ3ZDLFFBQVEsY0FBYyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVFLFNBQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztFQUNuRSxRQUFRLGNBQWMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFQSxTQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7RUFDbkUsUUFBUSxjQUFjLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRUEsU0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0VBQ25FLFFBQVEsT0FBTyxJQUFJLENBQUM7RUFDcEIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxZQUFZLEdBQUc7RUFDbkIsUUFBUSxNQUFNLGNBQWMsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0VBQzVDLFFBQVEsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0VBQy9DLFFBQVEsT0FBTyxjQUFjLENBQUM7RUFDOUIsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLGlCQUFpQixDQUFDLGNBQWMsRUFBRTtFQUN0QyxRQUFRLGNBQWMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFQSxTQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7RUFDbEUsUUFBUSxjQUFjLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRUEsU0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0VBQ2xFLFFBQVEsY0FBYyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUVBLFNBQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztFQUNsRSxRQUFRLE9BQU8sSUFBSSxDQUFDO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQSxJQUFJLE1BQU0sR0FBRztFQUNiLFFBQVEsT0FBTztFQUNmLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQ3JCLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQ3JCLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0VBQ3JCLFNBQVMsQ0FBQztFQUNWLEtBQUs7RUFDTCxDQUFDO2lCQUNhLEdBQUcsTUFBTTs7OztFQ3pjdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ2hELEdBQUcsS0FBSyxFQUFFO0VBQ3hCLE1BQU1HLFdBQVMsR0FBR0YsU0FBb0IsQ0FBQztFQUN2QztFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxNQUFNLE1BQU0sQ0FBQztFQUNiO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtFQUN4QixRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0VBQzNCLFFBQVEsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7RUFDOUIsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDbkQsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8scUJBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFO0VBQ3ZEO0VBQ0EsUUFBUSxRQUFRLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0VBQy9DLFFBQVEsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztFQUNoQyxRQUFRLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxLQUFLO0VBQ2xELFlBQVksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO0VBQ2pHLFlBQVksT0FBTyxHQUFHLENBQUM7RUFDdkIsU0FBUyxDQUFDO0VBQ1YsUUFBUSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO0VBQzVDLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJRSxXQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxSyxTQUFTO0VBQ1QsUUFBUSxPQUFPLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0VBQy9CLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLE9BQU8saUJB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QyxDQUFDLENBQUM7RUFDaEMsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUNoQyxRQUFRLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ2hDLFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUN6QixRQUFRLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEUsUUFBUSxNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2xFLFFBQVEsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNwRSxRQUFRLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDckUsUUFBUSxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQzVELEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0EsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFO0VBQ3pCLFFBQVEsUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztFQUN2QyxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0VBQ25DLFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7RUFDbkMsWUFBWSxJQUFJLENBQUMsQ0FBQyxFQUFFO0VBQ3BCLEtBQUs7RUFDTDtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO0VBQzNDLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO0VBQ3ZDLFFBQVEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0VBQ3JDLFFBQVEsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxD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QUFFO0VBQ3RELFFBQVEsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztFQUM5QixRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUM5QyxRQUFRLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN2QyxRQUFRLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztFQUNqQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFO0VBQ3JELFFBQVEsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztFQUM5QixRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUM5QyxRQUFRLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN2QyxRQUFRLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztFQUNqQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFO0VBQ3RELFFBQVEsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztFQUM5QixRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM3QyxRQUFRLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUN2QyxRQUFRLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztFQUNqQyxLQUFLO0VBQ0w7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBLElBQUksT0FBTyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFO0VBQ3ZELFFBQVEsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztFQUM5QixRQUFRLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDNUMsUUFBUSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVDLFFBQVEs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\n",
    "sha256": "e0cff5c66bb5761f5c83f8496a5f0fee2cc32bc8944df3f1ab58754478a89919"
  },
  {
    "path": "node_modules/@dcl/builder-hud/dist/index.js",
    "content": "define(\"@dcl/builder-hud\",[\"exports\",\"@decentraland/EnvironmentAPI\"],(function(t,i){\"use strict\";function e(t,i,e,n){return new(e||(e=Promise))((function(o,s){function a(t){try{r(n.next(t))}catch(t){s(t)}}function h(t){try{r(n.throw(t))}catch(t){s(t)}}function r(t){var i;t.done?o(t.value):(i=t.value,i instanceof e?i:new e((function(t){t(i)}))).then(a,h)}r((n=n.apply(t,i||[])).next())}))}function n(t,i){var e,n,o,s,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:h(0),throw:h(1),return:h(2)},\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function h(s){return function(h){return function(s){if(e)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(e=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=i.call(t,a)}catch(t){s=[6,t],n=0}finally{e=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,h])}}}var o=function(){function t(t,i,e){this.direction=t,this.mode=i,this.pos=e||0}return t=function(t,i,e,n){var o,s=arguments.length,a=s<3?i:null===n?n=Object.getOwnPropertyDescriptor(i,e):n;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)a=Reflect.decorate(t,i,e,n);else for(var h=t.length-1;h>=0;h--)(o=t[h])&&(a=(s<3?o(a):s>3?o(i,e,a):o(i,e))||a);return s>3&&a&&Object.defineProperty(i,e,a),a}([Component(\"moving\")],t),t}(),s=engine.getComponentGroup(o),a=function(){function t(){this.positions=[]}return t.prototype.addCameraPosition=function(t){this.positions.push(t),log(this.positions)},t.prototype.update=function(){var t,i;try{for(var e=function(t){var i=\"function\"==typeof Symbol&&Symbol.iterator,e=i&&t[i],n=0;if(e)return e.call(t);if(t&&\"number\"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(i?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}(s.entities),n=e.next();!n.done;n=e.next()){var a=n.value,h=a.getComponent(Transform).position,r=a.getComponent(o).direction;switch(a.getComponent(o).mode){case\"fixed\":var l=a.getComponent(Transform).position.clone(),c=a.getComponent(o).pos;Vector3.Distance(l,this.positions[c])<.05?a.removeComponent(o):a.getComponent(Transform).position=Vector3.Lerp(l,this.positions[c],.04);break;case\"free\":\"up\"==r&&h.y<150&&(h.y+=.1),\"down\"==r&&(h.y>.2?h.y-=.1:a.removeComponent(o)),\"forward\"==r&&(h.z+=.1),\"back\"==r&&(h.z>1?h.z-=.1:a.removeComponent(o)),\"right\"==r&&(h.x+=.1),\"left\"==r&&(h.x>1?h.x-=.1:a.removeComponent(o))}}}catch(i){t={error:i}}finally{try{n&&!n.done&&(i=e.return)&&i.call(e)}finally{if(t)throw t.error}}},t}(),h=function(){function t(){var t=this;this.isSetup=!1,this.entities=[],this.numEntities=0,this.selectedEntityIndex=-1,this.selectionPointerScale=1,this.selectionPointerElevation=1,this.newEntityScale=.1,this.modePOSITION=0,this.modeROTATION=1,this.modeSCALE=2,this.mode=this.modePOSITION,this.snap=0,this.snapPosScale=1,this.snapRot=90,this.uiMaximized=!1,this.engineEntities=[],this.showingColliders=!1,this.transparent=new Texture(\"https://lsnft.mypinata.cloud/ipfs/QmaqcRuouE6Tip9acZmjxMyBftEA5aHASRDjn8Bmad87Ld\"),this.scaffoldScale=new Vector3(1.2,1,1.2),this.transparentMat=new BasicMaterial,this.transparentMat.alphaTest=1,this.transparentMat.texture=this.transparent,this.scaffolding=new Entity,this.scaffolding.addComponent(new Transform({position:new Vector3(1,.3,1),scale:Vector3.Zero()})),engine.addEntity(this.scaffolding);var o=new Entity;o.addComponent(new Transform({position:new Vector3(-.5,1,-.5),scale:Vector3.One()})),o.setParent(this.scaffolding);var s=new Entity;s.addComponent(new BoxShape),s.addComponent(new Transform({position:new Vector3(2,0,.1),scale:new Vector3(4,.1,.1)})),s.setParent(o),s.getComponent(BoxShape).withCollisions=!1,s.addComponent(new Material),s.getComponent(Material).albedoColor=Color4.Red();var h=new Entity;h.addComponent(new TextShape(\"X\")),h.addComponent(new Transform({position:new Vector3(3,.5,.4)})),h.addComponent(new Billboard(!1,!0,!1)),h.setParent(o);var r=new Entity;r.addComponent(new BoxShape),r.addComponent(new Transform({position:new Vector3(.1,2,.1),scale:new Vector3(.1,4,.1)})),r.setParent(o),r.getComponent(BoxShape).withCollisions=!1,r.addComponent(new Material),r.getComponent(Material).albedoColor=Color4.Green();var c=new Entity;c.addComponent(new TextShape(\"Y\")),c.addComponent(new Transform({position:new Vector3(.5,3,.5)})),c.addComponent(new Billboard(!1,!0,!1)),c.setParent(o);var d=new Entity;d.addComponent(new BoxShape),d.addComponent(new Transform({position:new Vector3(.1,0,2),scale:new Vector3(.1,.1,4)})),d.setParent(o),d.addComponent(new Material),d.getComponent(BoxShape).withCollisions=!1,d.getComponent(Material).albedoColor=Color4.Blue();var u=new Entity;u.addComponent(new TextShape(\"Z\")),u.addComponent(new Transform({position:new Vector3(.4,1,4)})),u.addComponent(new Billboard(!1,!0,!1)),u.setParent(o),this.scaffloor=new Entity,this.scaffloor.addComponent(new PlaneShape),this.scaffloor.addComponent(new Transform({position:new Vector3(0,0,0),rotation:Quaternion.Euler(90,0,0),scale:Vector3.One()})),this.scaffloor.addComponent(new Material),engine.addEntity(this.scaffloor),this.scaffloor.setParent(this.scaffolding),this.leftWall=new Entity,this.leftWall.addComponent(new PlaneShape),this.leftWall.addComponent(new Transform({position:new Vector3(0,-4.5,.6),rotation:Quaternion.Euler(0,180,0),scale:Vector3.Zero()})),this.leftWall.addComponent(this.transparentMat),this.leftWall.setParent(this.scaffolding),this.rightWall=new Entity,this.rightWall.addComponent(new PlaneShape),this.rightWall.addComponent(new Transform({position:new Vector3(0,-4.5,-.6),rotation:Quaternion.Euler(0,180,0),scale:Vector3.Zero()})),this.rightWall.addComponent(this.transparentMat),this.rightWall.setParent(this.scaffolding),this.frontWall=new Entity,this.frontWall.addComponent(new PlaneShape),this.frontWall.addComponent(new Transform({position:new Vector3(.6,-4.5,0),rotation:Quaternion.Euler(0,270,0),scale:Vector3.Zero()})),this.frontWall.addComponent(this.transparentMat),this.frontWall.setParent(this.scaffolding),this.backWall=new Entity,this.backWall.addComponent(new PlaneShape),this.backWall.addComponent(new Transform({position:new Vector3(-.6,-4.5,0),rotation:Quaternion.Euler(0,270,0),scale:Vector3.One()})),this.backWall.addComponent(this.transparentMat),this.backWall.setParent(this.scaffolding),this.selectionPointer=new Entity,this.selectionPointer.addComponent(new PlaneShape),this.selectionPointer.getComponent(PlaneShape).withCollisions=!1,this.selectionPointer.addComponent(new BasicMaterial),this.selectionPointer.getComponent(BasicMaterial).texture=new Texture(\"https://lsnft.mypinata.cloud/ipfs/QmWbKQtJjsLjgDFinoH6fvmbUoetLZd7LanChC1R4QkA2e\"),this.selectionPointer.addComponent(new Transform({rotation:Quaternion.Euler(0,0,180),scale:Vector3.One()})),this.selectionPointer.addComponent(new Billboard(!1,!0,!1)),this.setupUI(),executeTask((function(){return e(t,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,i.isPreviewMode()];case 1:return t.sent()?(log(\"in preview mode\"),l.uiMinimizedContainer.visible=!0):(log(\"not in preview mode\"),l.uiMinimizedContainer.visible=!1,l.uiMaximizedContainer.visible=!1,engine.removeEntity(this.selectionPointer)),[2]}}))}))})),this.unsavedContainer=new UIContainerRect(this.uiMaximizedContainer),this.unsavedContainer.hAlign=\"center\",this.unsavedContainer.vAlign=\"center\",this.unsavedContainer.width=160,this.unsavedContainer.height=20,this.unsavedContainer.positionY=225,this.unsavedContainer.positionX=0,this.unsavedContainer.color=Color4.Red(),this.unsavedContainer.visible=!1;var f=new UIText(this.unsavedContainer);f.hAlign=\"center\",f.vAlign=\"center\",f.positionY=0,f.positionX=0,f.height=10,f.fontSize=12,f.hTextAlign=\"center\",f.value=\"** Unsaved Changes **\",this.movingSystem=new a,engine.addSystem(this.movingSystem)}return t.prototype.showInProduction=function(){l.uiMinimizedContainer.visible=!0,engine.addEntity(this.selectionPointer)},t.prototype.hideInProduction=function(){l.uiMinimizedContainer.visible=!1,l.uiMaximizedContainer.visible=!1,engine.removeEntity(this.selectionPointer)},t.prototype.setDefaultParent=function(t){this.defaultParent=t},t.prototype.setupUI=function(){return e(this,void 0,void 0,(function(){var t,i,e,o,s=this;return n(this,(function(n){return this.isSetup=!0,\"https://lsnft.mypinata.cloud/ipfs/QmYyDWc67svskJWxQrZNJxjwNsvsXyG9dvVzXvJtYtmgAr\",t=new Texture(\"https://lsnft.mypinata.cloud/ipfs/QmYyDWc67svskJWxQrZNJxjwNsvsXyG9dvVzXvJtYtmgAr\"),this.canvas=new UICanvas,this.canvas.hAlign=\"center\",this.canvas.vAlign=\"bottom\",this.uiMinimizedContainer=new UIContainerRect(this.canvas),this.uiMinimizedContainer.hAlign=\"right\",this.uiMinimizedContainer.vAlign=\"bottom\",this.uiMinimizedContainer.width=70,this.uiMinimizedContainer.height=80,this.uiMinimizedContainer.positionY=100,this.uiMinimizedContainer.positionX=0,this.uiMinimizedContainer.color=new Color4(0,0,0,0),this.uiMinimizedContainer.visible=!1,this.maximizeButton=new UIImage(this.uiMinimizedContainer,t),this.maximizeButton.sourceLeft=826,this.maximizeButton.sourceTop=544,this.maximizeButton.sourceWidth=74,this.maximizeButton.sourceHeight=74,this.maximizeButton.hAlign=\"right\",this.maximizeButton.vAlign=\"bottom\",this.maximizeButton.positionX=-15,this.maximizeButton.positionY=30,this.maximizeButton.width=40,this.maximizeButton.height=40,this.maximizeButton.isPointerBlocker=!0,this.maximizeButton.onClick=new OnClick((function(){s.maximizeUI()})),this.uiMaximizedContainer=new UIContainerRect(this.canvas),this.uiMaximizedContainer.hAlign=\"right\",this.uiMaximizedContainer.vAlign=\"bottom\",this.uiMaximizedContainer.width=160,this.uiMaximizedContainer.height=430,this.uiMaximizedContainer.positionX=0,this.uiMaximizedContainer.positionY=100,this.uiMaximizedContainer.color=new Color4(0,0,0,.75),(i=new UIImage(this.uiMaximizedContainer,t)).sourceLeft=826,i.sourceTop=184,i.sourceWidth=74,i.sourceHeight=74,i.hAlign=\"right\",i.vAlign=\"top\",i.positionX=-60,i.positionY=-10,i.width=40,i.height=40,i.isPointerBlocker=!0,i.onClick=new OnClick((function(){s.toggleLift.sourceLeft=503,s.toggleColliders(!0),engine.addSystem(new c(i))})),this.toggleLift=new UIImage(this.uiMaximizedContainer,t),this.toggleLift.sourceLeft=584,this.toggleLift.sourceTop=544,this.toggleLift.sourceWidth=74,this.toggleLift.sourceHeight=74,this.toggleLift.hAlign=\"right\",this.toggleLift.vAlign=\"top\",this.toggleLift.positionX=-15,this.toggleLift.positionY=-10,this.toggleLift.width=40,this.toggleLift.height=40,this.toggleLift.isPointerBlocker=!0,this.toggleLift.onClick=new OnClick((function(){s.toggleColliders(!1),engine.addSystem(new c(s.toggleLift))})),this.toggleCamera=new UIImage(this.uiMaximizedContainer,t),this.toggleCamera.sourceLeft=16,this.toggleCamera.sourceTop=94,this.toggleCamera.sourceWidth=74,this.toggleCamera.sourceHeight=74,this.toggleCamera.hAlign=\"right\",this.toggleCamera.vAlign=\"top\",this.toggleCamera.positionX=-105,this.toggleCamera.positionY=-10,this.toggleCamera.width=40,this.toggleCamera.height=40,this.toggleCamera.isPointerBlocker=!0,this.toggleCamera.onClick=new OnClick((function(){s.toggleCameraOptions(),engine.addSystem(new c(s.toggleCamera))})),this.toggleCamera.visible=!1,this.scaffoldB=new UIImage(this.uiMaximizedContainer,t),this.scaffoldB.sourceLeft=340,this.scaffoldB.sourceTop=544,this.scaffoldB.sourceWidth=74,this.scaffoldB.sourceHeight=74,this.scaffoldB.hAlign=\"right\",this.scaffoldB.vAlign=\"bottom\",this.scaffoldB.positionX=-105,this.scaffoldB.positionY=335,this.scaffoldB.width=40,this.scaffoldB.height=40,this.scaffoldB.isPointerBlocker=!0,this.scaffoldB.onClick=new OnClick((function(){s.moveScaffold(\"q\"),engine.addSystem(new c(s.scaffoldB))})),this.scaffoldU=new UIImage(this.uiMaximizedContainer,t),this.scaffoldU.sourceLeft=178,this.scaffoldU.sourceTop=544,this.scaffoldU.sourceWidth=74,this.scaffoldU.sourceHeight=74,this.scaffoldU.hAlign=\"right\",this.scaffoldU.vAlign=\"bottom\",this.scaffoldU.positionX=-60,this.scaffoldU.positionY=335,this.scaffoldU.width=40,this.scaffoldU.height=40,this.scaffoldU.isPointerBlocker=!0,this.scaffoldU.onClick=new OnClick((function(){s.moveScaffold(\"w\"),engine.addSystem(new c(s.scaffoldU))})),this.scaffoldF=new UIImage(this.uiMaximizedContainer,t),this.scaffoldF.sourceLeft=422,this.scaffoldF.sourceTop=544,this.scaffoldF.sourceWidth=74,this.scaffoldF.sourceHeight=74,this.scaffoldF.hAlign=\"right\",this.scaffoldF.vAlign=\"bottom\",this.scaffoldF.positionX=-15,this.scaffoldF.positionY=335,this.scaffoldF.width=40,this.scaffoldF.height=40,this.scaffoldF.isPointerBlocker=!0,this.scaffoldF.onClick=new OnClick((function(){s.moveScaffold(\"e\"),engine.addSystem(new c(s.scaffoldF))})),this.scaffoldL=new UIImage(this.uiMaximizedContainer,t),this.scaffoldL.sourceLeft=16,this.scaffoldL.sourceTop=544,this.scaffoldL.sourceWidth=74,this.scaffoldL.sourceHeight=74,this.scaffoldL.hAlign=\"right\",this.scaffoldL.vAlign=\"bottom\",this.scaffoldL.positionX=-105,this.scaffoldL.positionY=290,this.scaffoldL.width=40,this.scaffoldL.height=40,this.scaffoldL.isPointerBlocker=!0,this.scaffoldL.onClick=new OnClick((function(){s.moveScaffold(\"a\"),engine.addSystem(new c(s.scaffoldL))})),this.scaffoldD=new UIImage(this.uiMaximizedContainer,t),this.scaffoldD.sourceLeft=259,this.scaffoldD.sourceTop=544,this.scaffoldD.sourceWidth=74,this.scaffoldD.sourceHeight=74,this.scaffoldD.hAlign=\"right\",this.scaffoldD.vAlign=\"bottom\",this.scaffoldD.positionX=-60,this.scaffoldD.positionY=290,this.scaffoldD.width=40,this.scaffoldD.height=40,this.scaffoldD.isPointerBlocker=!0,this.scaffoldD.onClick=new OnClick((function(){s.moveScaffold(\"s\"),engine.addSystem(new c(s.scaffoldD))})),this.scaffoldR=new UIImage(this.uiMaximizedContainer,t),this.scaffoldR.sourceLeft=97,this.scaffoldR.sourceTop=544,this.scaffoldR.sourceWidth=74,this.scaffoldR.sourceHeight=74,this.scaffoldR.hAlign=\"right\",this.scaffoldR.vAlign=\"bottom\",this.scaffoldR.positionX=-15,this.scaffoldR.positionY=290,this.scaffoldR.width=40,this.scaffoldR.height=40,this.scaffoldR.isPointerBlocker=!0,this.scaffoldR.onClick=new OnClick((function(){s.moveScaffold(\"d\"),engine.addSystem(new c(s.scaffoldR))})),this.displayName=new UIText(this.uiMaximizedContainer),this.displayName.hAlign=\"center\",this.displayName.vAlign=\"top\",this.displayName.positionY=-180,this.displayName.positionX=0,this.displayName.height=10,this.displayName.fontSize=12,this.displayName.hTextAlign=\"center\",(e=new UIText(this.uiMaximizedContainer)).hAlign=\"center\",e.vAlign=\"top\",e.positionY=-160,e.positionX=0,e.height=10,e.fontSize=12,e.hTextAlign=\"center\",e.value=\"Entity Label\",this.displayPRS=new UIText(this.uiMaximizedContainer),this.displayPRS.hAlign=\"center\",this.displayPRS.vAlign=\"top\",this.displayPRS.positionY=-200,this.displayPRS.positionX=0,this.displayPRS.height=10,this.displayPRS.fontSize=12,this.displayPRS.hTextAlign=\"center\",this.displayPRS.value=\"(0,0,0)\",this.scaffoldTitle=new UIText(this.uiMaximizedContainer),this.scaffoldTitle.hAlign=\"center\",this.scaffoldTitle.vAlign=\"top\",this.scaffoldTitle.positionY=-25,this.scaffoldTitle.positionX=-45,this.scaffoldTitle.height=10,this.scaffoldTitle.fontSize=8,this.scaffoldTitle.hTextAlign=\"center\",this.scaffoldTitle.value=\"Scaffold\",this.selectPreviousButton=new UIImage(this.uiMaximizedContainer,t),this.selectPreviousButton.sourceLeft=16,this.selectPreviousButton.sourceTop=184,this.selectPreviousButton.sourceWidth=74,this.selectPreviousButton.sourceHeight=74,this.selectPreviousButton.hAlign=\"right\",this.selectPreviousButton.vAlign=\"bottom\",this.selectPreviousButton.positionX=-105,this.selectPreviousButton.positionY=30,this.selectPreviousButton.width=40,this.selectPreviousButton.height=40,this.selectPreviousButton.isPointerBlocker=!0,this.selectPreviousButton.onClick=new OnClick((function(){s.selectPrevious(),engine.addSystem(new c(s.selectPreviousButton))})),this.selectNextButton=new UIImage(this.uiMaximizedContainer,t),this.selectNextButton.sourceLeft=97,this.selectNextButton.sourceTop=184,this.selectNextButton.sourceWidth=74,this.selectNextButton.sourceHeight=74,this.selectNextButton.hAlign=\"right\",this.selectNextButton.vAlign=\"bottom\",this.selectNextButton.positionX=-60,this.selectNextButton.positionY=30,this.selectNextButton.width=40,this.selectNextButton.height=40,this.selectNextButton.isPointerBlocker=!0,this.selectNextButton.onClick=new OnClick((function(){s.selectNext(),engine.addSystem(new c(s.selectNextButton))})),this.saveButton=new UIImage(this.uiMaximizedContainer,t),this.saveButton.sourceLeft=745,this.saveButton.sourceTop=184,this.saveButton.sourceWidth=74,this.saveButton.sourceHeight=74,this.saveButton.hAlign=\"right\",this.saveButton.vAlign=\"bottom\",this.saveButton.positionX=-15,this.saveButton.positionY=75,this.saveButton.width=40,this.saveButton.height=40,this.saveButton.isPointerBlocker=!0,this.saveButton.onClick=new OnClick((function(){s.dump(),engine.addSystem(new c(s.saveButton))})),this.qButton=new UIImage(this.uiMaximizedContainer,t),this.qButton.sourceLeft=340,this.qButton.sourceTop=544,this.qButton.sourceWidth=74,this.qButton.sourceHeight=74,this.qButton.hAlign=\"right\",this.qButton.vAlign=\"bottom\",this.qButton.positionX=-105,this.qButton.positionY=165,this.qButton.width=40,this.qButton.height=40,this.qButton.isPointerBlocker=!0,this.qButton.onClick=new OnClick((function(t){s.adjustTransform(\"q\"),engine.addSystem(new c(s.qButton))})),this.wButton=new UIImage(this.uiMaximizedContainer,t),this.wButton.sourceLeft=178,this.wButton.sourceTop=544,this.wButton.sourceWidth=74,this.wButton.sourceHeight=74,this.wButton.hAlign=\"right\",this.wButton.vAlign=\"bottom\",this.wButton.positionX=-60,this.wButton.positionY=165,this.wButton.width=40,this.wButton.height=40,this.wButton.isPointerBlocker=!0,this.wButton.onClick=new OnClick((function(){s.adjustTransform(\"w\"),engine.addSystem(new c(s.wButton))})),this.eButton=new UIImage(this.uiMaximizedContainer,t),this.eButton.sourceLeft=422,this.eButton.sourceTop=544,this.eButton.sourceWidth=74,this.eButton.sourceHeight=74,this.eButton.hAlign=\"right\",this.eButton.vAlign=\"bottom\",this.eButton.positionX=-15,this.eButton.positionY=165,this.eButton.width=40,this.eButton.height=40,this.eButton.isPointerBlocker=!0,this.eButton.onClick=new OnClick((function(){s.adjustTransform(\"e\"),engine.addSystem(new c(s.eButton))})),this.aButton=new UIImage(this.uiMaximizedContainer,t),this.aButton.sourceLeft=16,this.aButton.sourceTop=544,this.aButton.sourceWidth=74,this.aButton.sourceHeight=74,this.aButton.hAlign=\"right\",this.aButton.vAlign=\"bottom\",this.aButton.positionX=-105,this.aButton.positionY=120,this.aButton.width=40,this.aButton.height=40,this.aButton.isPointerBlocker=!0,this.aButton.onClick=new OnClick((function(){s.adjustTransform(\"a\"),engine.addSystem(new c(s.aButton))})),this.sButton=new UIImage(this.uiMaximizedContainer,t),this.sButton.sourceLeft=259,this.sButton.sourceTop=544,this.sButton.sourceWidth=74,this.sButton.sourceHeight=74,this.sButton.hAlign=\"right\",this.sButton.vAlign=\"bottom\",this.sButton.positionX=-60,this.sButton.positionY=120,this.sButton.width=40,this.sButton.height=40,this.sButton.isPointerBlocker=!0,this.sButton.onClick=new OnClick((function(){s.adjustTransform(\"s\"),engine.addSystem(new c(s.sButton))})),this.dButton=new UIImage(this.uiMaximizedContainer,t),this.dButton.sourceLeft=97,this.dButton.sourceTop=544,this.dButton.sourceWidth=74,this.dButton.sourceHeight=74,this.dButton.hAlign=\"right\",this.dButton.vAlign=\"bottom\",this.dButton.positionX=-15,this.dButton.positionY=120,this.dButton.width=40,this.dButton.height=40,this.dButton.isPointerBlocker=!0,this.dButton.onClick=new OnClick((function(){s.adjustTransform(\"d\"),engine.addSystem(new c(s.dButton))})),this.modeButton=new UIImage(this.uiMaximizedContainer,t),this.modeButton.sourceLeft=259,this.modeButton.sourceTop=94,this.modeButton.sourceWidth=74,this.modeButton.sourceHeight=74,this.modeButton.hAlign=\"right\",this.modeButton.vAlign=\"bottom\",this.modeButton.positionX=-105,this.modeButton.positionY=75,this.modeButton.width=40,this.modeButton.height=40,this.modeButton.isPointerBlocker=!0,this.modeButton.onClick=new OnClick((function(){s.mode+=1,s.mode>s.modeSCALE&&(s.mode=s.modePOSITION),s.snap=0,s.setSnaps(),s.applyModeAndSnapLabels(),engine.addSystem(new c(s.modeButton))})),this.modeLabel=new UIText(this.modeButton),this.modeLabel.color=Color4.White(),this.modeLabel.hAlign=\"center\",this.modeLabel.vAlign=\"bottom\",this.modeLabel.paddingTop=0,this.modeLabel.paddingBottom=12,this.modeLabel.positionX=-30,this.modeLabel.paddingLeft=0,this.modeLabel.fontSize=12,this.modeLabel.isPointerBlocker=!1,this.modeLabel.hTextAlign=\"center\",this.snapButton=new UIImage(this.uiMaximizedContainer,t),this.snapButton.sourceLeft=259,this.snapButton.sourceTop=93,this.snapButton.sourceWidth=74,this.snapButton.sourceHeight=74,this.snapButton.hAlign=\"right\",this.snapButton.vAlign=\"bottom\",this.snapButton.positionX=-60,this.snapButton.positionY=75,this.snapButton.width=40,this.snapButton.height=40,this.snapButton.isPointerBlocker=!0,this.snapButton.onClick=new OnClick((function(){s.snap+=1,s.snap>3&&(s.snap=0),s.setSnaps(),s.applyModeAndSnapLabels(),engine.addSystem(new c(s.snapButton))})),this.snapLabel=new UIText(this.snapButton),this.snapLabel.color=Color4.White(),this.snapLabel.hAlign=\"right\",this.snapLabel.vAlign=\"bottom\",this.snapLabel.positionX=-30,this.snapLabel.paddingTop=0,this.snapLabel.paddingBottom=12,this.snapLabel.paddingLeft=0,this.snapLabel.fontSize=12,this.snapLabel.hTextAlign=\"center\",this.snapLabel.isPointerBlocker=!1,this.applyModeAndSnapLabels(!0),this.minimizeButton=new UIImage(this.uiMaximizedContainer,t),this.minimizeButton.sourceLeft=908,this.minimizeButton.sourceTop=544,this.minimizeButton.sourceWidth=74,this.minimizeButton.sourceHeight=74,this.minimizeButton.hAlign=\"right\",this.minimizeButton.vAlign=\"bottom\",this.minimizeButton.positionX=-15,this.minimizeButton.positionY=30,this.minimizeButton.width=40,this.minimizeButton.height=40,this.minimizeButton.isPointerBlocker=!0,this.minimizeButton.onClick=new OnClick((function(){s.minimizeUI(),engine.addSystem(new c(s.minimizeButton))})),(o=new UIText(this.uiMaximizedContainer)).value=\"Builder HUD\",o.color=Color4.White(),o.hAlign=\"center\",o.vAlign=\"bottom\",o.paddingTop=0,o.paddingBottom=5,o.paddingLeft=15,o.fontSize=12,o.isPointerBlocker=!1,this.minimizeUI(),[2]}))}))},t.prototype.setSnaps=function(){switch(this.snap){case 0:this.snapPosScale=1,this.snapRot=90;break;case 1:this.snapPosScale=.1,this.snapRot=15;break;case 2:this.snapPosScale=.01,this.snapRot=5;break;case 3:this.snapPosScale=.001,this.snapRot=1}},t.prototype.applyModeAndSnapLabels=function(t){switch(this.mode){case this.modePOSITION:this.modeLabel.value=\"P\";break;case this.modeROTATION:this.modeLabel.value=\"R\";break;case this.modeSCALE:this.modeLabel.value=\"S\";break;default:this.modeLabel.value=\"ERR\"}switch(!t&&this.updateDisplayPRS(),this.snap){case 0:this.mode==this.modeROTATION?this.snapLabel.value=\"90\":this.snapLabel.value=\"1\";break;case 1:this.mode==this.modeROTATION?this.snapLabel.value=\"15\":this.snapLabel.value=\"0.1\";break;case 2:this.mode==this.modeROTATION?this.snapLabel.value=\"5\":this.snapLabel.value=\"0.01\";break;case 3:this.mode==this.modeROTATION?this.snapLabel.value=\"1\":this.snapLabel.value=\"0.001\";break;default:this.snapLabel.value=\"ERR\"}},t.prototype.countDecimals=function(t){return Math.floor(t)===t?0:t.toString().split(\".\")[1].length||0},t.prototype.updateDisplayPRS=function(){switch(this.mode){case this.modePOSITION:this.displayPRS.value=\"POS: (\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).position.x.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).position.y.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).position.z.toFixed(this.countDecimals(this.snapPosScale))+\")\";break;case this.modeROTATION:this.displayPRS.value=\"ROT: (\"+Math.ceil(this.entities[this.selectedEntityIndex].entity.getComponent(Transform).rotation.eulerAngles.x)+\",\"+Math.ceil(this.entities[this.selectedEntityIndex].entity.getComponent(Transform).rotation.eulerAngles.y)+\",\"+Math.ceil(this.entities[this.selectedEntityIndex].entity.getComponent(Transform).rotation.eulerAngles.z)+\")\";break;case this.modeSCALE:this.displayPRS.value=\"SCL: (\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).scale.x.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).scale.y.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).scale.z.toFixed(this.countDecimals(this.snapPosScale))+\")\"}},t.prototype.maximizeUI=function(){this.uiMinimizedContainer.visible=!1,this.uiMaximizedContainer.visible=!0,this.uiMaximized=!0,this.selectedEntityIndex>=0&&this.numEntities>0&&engine.addEntity(this.selectionPointer),this.mode=this.modePOSITION,this.applyModeAndSnapLabels(),this.displayName.value=this.entities[this.selectedEntityIndex].entity.name,this.updateDisplayPRS(),this.scaffolding.getComponent(Transform).scale=this.scaffoldScale},t.prototype.minimizeUI=function(){this.uiMaximizedContainer.visible=!1,this.uiMinimizedContainer.visible=!0,this.uiMaximized=!1,this.selectedEntityIndex>=0&&this.numEntities>0&&engine.removeEntity(this.selectionPointer),this.scaffolding.getComponent(Transform).scale=Vector3.Zero()},t.prototype.showUI=function(){this.canvas.visible=!0,this.canvas.isPointerBlocker=!0},t.prototype.hideUI=function(){this.canvas.visible=!1,this.canvas.isPointerBlocker=!1},t.prototype.updateSelectionPointerPOS=function(t){var i=t.position.clone();this.selectionPointer.getComponent(Transform).position=new Vector3(i.x,i.y+this.selectionPointerElevation,i.z)},t.prototype.selectEntity=function(t){this.selectedEntityIndex=t,null!=this.entities[t].entity&&(this.displayName.value=this.entities[this.selectedEntityIndex].entity.name,this.updateSelectionPointerPOS(this.entities[t].entity.getComponent(Transform)))},t.prototype.selectPrevious=function(){this.selectedEntityIndex>0&&this.selectEntity(this.selectedEntityIndex-1),this.updateDisplayPRS()},t.prototype.selectNext=function(){this.selectedEntityIndex<this.numEntities-1&&this.selectEntity(this.selectedEntityIndex+1),this.updateDisplayPRS()},t.prototype.discardSelected=function(){log(\"Discard Selected Entity isn't implemented at this time.\")},t.prototype.toggleCameraOptions=function(){this.movingSystem.addCameraPosition(new Vector3(8,8,8)),log(this.movingSystem.positions),this.scaffolding.addComponent(new o(\"\",\"fixed\",0))},t.prototype.toggleColliders=function(t){584==this.toggleLift.sourceLeft?(this.toggleLift.sourceLeft=503,this.scaffloor.getComponent(Material).albedoColor=new Color4(.97,.27,.34),this.backWall.getComponent(Transform).scale=this.scaffoldScale,this.backWall.getComponent(Transform).position=new Vector3(-.6,1.5,0),this.frontWall.getComponent(Transform).scale=this.scaffoldScale,this.frontWall.getComponent(Transform).position=new Vector3(.6,1.5,0),this.leftWall.getComponent(Transform).scale=this.scaffoldScale,this.leftWall.getComponent(Transform).position=new Vector3(0,1.5,.6),this.rightWall.getComponent(Transform).scale=this.scaffoldScale,this.rightWall.getComponent(Transform).position=new Vector3(0,1.5,-.6)):(this.toggleLift.sourceLeft=584,this.backWall.getComponent(Transform).scale=Vector3.Zero(),this.frontWall.getComponent(Transform).scale=Vector3.Zero(),this.leftWall.getComponent(Transform).scale=Vector3.Zero(),this.rightWall.getComponent(Transform).scale=Vector3.Zero(),this.rightWall.getComponent(Transform).position=new Vector3(0,-41.5,-.6),this.backWall.getComponent(Transform).position=new Vector3(0,-4.5,-.6),this.frontWall.getComponent(Transform).position=new Vector3(0,-4.5,-.6),this.leftWall.getComponent(Transform).position=new Vector3(0,-4.5,-.6),this.scaffloor.getComponent(Material).albedoColor=Color4.White()),t&&(this.scaffolding.getComponent(Transform).position=new Vector3(1,.3,1))},t.prototype.moveScaffold=function(t){var i=this.scaffolding.getComponent(Transform);if(this.mode===this.modePOSITION)switch(i.position,t){case\"a\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"left\",\"free\"));break;case\"s\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"down\",\"free\"));break;case\"d\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"right\",\"free\"));break;case\"q\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"back\",\"free\"));break;case\"w\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"up\",\"free\"));break;case\"e\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"forward\",\"free\"))}},t.prototype.adjustTransform=function(t){this.unsavedContainer.visible=!0;var i=this.entities[this.selectedEntityIndex].entity.getComponent(Transform);switch(this.mode){case this.modePOSITION:var e=i.position;switch(t){case\"a\":e.x-=this.snapPosScale;break;case\"s\":e.y-=this.snapPosScale;break;case\"d\":e.x+=this.snapPosScale;break;case\"q\":e.z-=this.snapPosScale;break;case\"w\":e.y+=this.snapPosScale;break;case\"e\":e.z+=this.snapPosScale}this.updateSelectionPointerPOS(i);break;case this.modeROTATION:switch(t){case\"a\":i.rotate(Vector3.Left(),-this.snapRot);break;case\"s\":i.rotate(Vector3.Up(),this.snapRot);break;case\"d\":i.rotate(Vector3.Left(),this.snapRot);break;case\"q\":i.rotate(Vector3.Forward(),-this.snapRot);break;case\"w\":i.rotate(Vector3.Up(),-this.snapRot);break;case\"e\":i.rotate(Vector3.Forward(),this.snapRot)}break;case this.modeSCALE:var n=i.scale;switch(t){case\"a\":n.x-=this.snapPosScale;break;case\"s\":n.y-=this.snapPosScale;break;case\"d\":n.x+=this.snapPosScale;break;case\"q\":n.z-=this.snapPosScale;break;case\"w\":n.y+=this.snapPosScale;break;case\"e\":n.z+=this.snapPosScale}}this.updateDisplayPRS()},t.prototype.attachToEntity=function(t,i){return void 0===i&&(i=!0),e(this,void 0,void 0,(function(){return n(this,(function(e){return null==t?log(\"BuilderHUD attachToEntity called with a null entity\"):l.isSetup&&(this.entities[this.numEntities]={entity:t,transform:t.getComponent(Transform),preexisting:i},i?(this.selectedEntityIndex=-1)&&this.selectEntity(0):this.selectEntity(this.numEntities),this.numEntities++),[2]}))}))},t.prototype.newEntity=function(){var t=Camera.instance,i=t.rotation.eulerAngles.y;i>=180?i-=180:i+=180;var e=0,n=0,o=0,s=1,a=1,h=1;if(null!=this.defaultParent){var r=this.defaultParent.getComponent(Transform);e=r.position.x,n=r.position.y,o=r.position.z,r.rotation.eulerAngles.x,r.rotation.eulerAngles.y,r.rotation.eulerAngles.z,s=r.scale.x,a=r.scale.y,h=r.scale.z}var l=new Transform({position:new Vector3((t.position.x-e)/s,(0-n)/a,(t.position.z-o)/h),rotation:Quaternion.Euler(0,0,0),scale:new Vector3(this.newEntityScale/s,this.newEntityScale/a,this.newEntityScale/h)});l.rotate(Vector3.Up(),-i);var c=new Entity;if(c.name=\"Entity\"+this.numEntities,c.addComponent(l),null==this.newEntityShape)try{this.newEntityShape=new GLTFShape(\"models/xyz/xyzLeftHand.glb\")}catch(c){this.newEntityShape=new BoxShape,(new Material).albedoColor=Color3.Green()}c.addComponent(this.newEntityShape),null!=this.defaultParent&&c.setParent(this.defaultParent),engine.addEntity(c),this.attachToEntity(c,!1)},t.prototype.round=function(t){return Math.floor(1e3*(t+49e-5))/1e3},t.prototype.dump=function(){for(var t in this.unsavedContainer.visible=!1,log(\"--------------- BuilderHUD entities -------------\"),this.entities){var i=null==this.entities[t].entity.name?\"Existing\":\"\"+this.entities[t].entity.name,e=this.entities[t].transform,n=e.position,o=e.rotation.eulerAngles,s=e.scale,a=\"position: new Vector3(\"+this.round(n.x)+\",\"+this.round(n.y)+\",\"+this.round(n.z)+\"), rotation: Quaternion.Euler(\"+this.round(o.x)+\",\"+this.round(o.y)+\",\"+this.round(o.z)+\"), scale: new Vector3(\"+this.round(s.x)+\",\"+this.round(s.y)+\",\"+this.round(s.z)+\")\";log(i+\" {\"+a+\"}\")}log(\"-------------------------------------------------\")},t.prototype.destroy=function(){for(var t in this.dump(),this.entities)this.entities[t].preexisting||(this.entities[t].entity.setParent(null),engine.removeEntity(this.entities[t].entity));this.entities=[],this.numEntities=0,this.refreshDisplay()},t.prototype.refreshDisplay=function(){},t}(),r=function(){function t(t){this.timer=4,this.entities=[],this.hud=t}return t.prototype.pendingEntity=function(t){this.entities.push(t)},t.prototype.update=function(t){if(this.timer>0)this.timer-=t;else{this.timer=4;for(var i=0;i<this.entities.length;i++)log(\"here\"),this.hud.attachToEntity(this.entities[i],!0);this.entities=[]}},t}(),l=new h;l.pendingEntityAdd=new r(l),engine.addSystem(l.pendingEntityAdd);var c=function(){function t(t){this.timer=.1,this.uiIMage=t}return t.prototype.update=function(t){this.timer>0?(this.uiIMage.opacity-=.3,this.timer-=t):(this.timer=.1,this.uiIMage.opacity=1,engine.removeSystem(this))},t}();t.hud=l,Object.defineProperty(t,\"__esModule\",{value:!0})}));\n",
    "sha256": "402e14a1ce629cb3911a6e1c644ecca16c2c1b6f8e9beeef555dafbfac897347"
  },
  {
    "path": "node_modules/@dcl/ecs-scene-utils/dist/index.js",
    "content": "define(\"@dcl/ecs-scene-utils\",[\"exports\",\"@decentraland/EnvironmentAPI\"],(function(e,t){\"use strict\";\n/*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function i(e,t){function i(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)}function r(e,t,n,i){var r,o=arguments.length,a=o<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var s=e.length-1;s>=0;s--)(r=e[s])&&(a=(o<3?r(a):o>3?r(t,n,a):r(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function o(e,t,n,i){return new(n||(n=Promise))((function(r,o){function a(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((i=i.apply(e,t||[])).next())}))}function a(e,t){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(r=a.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function s(e){var t=\"function\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&\"number\"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}var u,c=function(){function e(){this._components=[],this._componentGroups=[],e._instance=this}return e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e.registerCustomComponent=function(e){this.createAndAddToEngine()._components.push(e)},e.prototype.addComponentType=function(e){var t,n;try{for(var i=s(this._components),r=i.next();!r.done;r=i.next()){if(e==r.value)return}}catch(e){t={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}this._components.push(e),this._componentGroups.push(engine.getComponentGroup(e,Transform))},e.prototype.update=function(e){for(var t=0;t<this._components.length;t++)this.updateComponent(e,this._components[t],this._componentGroups[t])},e.prototype.updateComponent=function(e,t,n){n.entities.forEach((function(n){var i=n.getComponent(Transform),r=n.getComponent(t);r.update(e),r.assignValueToTransform(i),r.hasFinished()&&(n.removeComponent(r),null!=r.onFinishCallback&&r.onFinishCallback())}))},e._instance=null,e}();function h(t,n){switch(t){case e.InterpolationType.LINEAR:return n;case e.InterpolationType.EASEINQUAD:return function(e){return e*e}(n);case e.InterpolationType.EASEOUTQUAD:return function(e){return e*(2-e)}(n);case e.InterpolationType.EASEQUAD:return function(e){return e*e/(2*(e*e-e)+1)}(n);case e.InterpolationType.EASEINSINE:return function(e){return 1-Math.cos(e*Math.PI/2)}(n);case e.InterpolationType.EASEOUTSINE:return function(e){return Math.sin(e*Math.PI/2)}(n);case e.InterpolationType.EASESINE:return function(e){return-(Math.cos(Math.PI*e)-1)/2}(n);case e.InterpolationType.EASEINEXPO:return function(e){return 0===e?0:Math.pow(2,10*e-10)}(n);case e.InterpolationType.EASEOUTEXPO:return function(e){return 1===e?1:1-Math.pow(2,-10*e)}(n);case e.InterpolationType.EASEEXPO:return function(e){return 0===e?0:1===e?1:e<.5?Math.pow(2,20*e-10)/2:(2-Math.pow(2,-20*e+10))/2}(n);case e.InterpolationType.EASEINELASTIC:return function(e){var t=2*Math.PI/3;return 0===e?0:1===e?1:-Math.pow(2,10*e-10)*Math.sin((10*e-10.75)*t)}(n);case e.InterpolationType.EASEOUTELASTIC:return function(e){var t=2*Math.PI/3;return 0===e?0:1===e?1:Math.pow(2,-10*e)*Math.sin((10*e-.75)*t)+1}(n);case e.InterpolationType.EASEELASTIC:return function(e){var t=2*Math.PI/4.5;return 0===e?0:1===e?1:e<.5?-Math.pow(2,20*e-10)*Math.sin((20*e-11.125)*t)/2:Math.pow(2,-20*e+10)*Math.sin((20*e-11.125)*t)/2+1}(n);case e.InterpolationType.EASEINBOUNCE:return function(e){return 1-l(1-e)}(n);case e.InterpolationType.EASEOUTEBOUNCE:return function(e){return l(e)}(n);case e.InterpolationType.EASEBOUNCE:return function(e){return e<.5?(1-l(1-2*e))/2:(1+l(2*e-1))/2}(n);default:return n}}function l(e){var t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375}e.InterpolationType=void 0,(u=e.InterpolationType||(e.InterpolationType={}))[u.LINEAR=0]=\"LINEAR\",u[u.EASEINQUAD=1]=\"EASEINQUAD\",u[u.EASEOUTQUAD=2]=\"EASEOUTQUAD\",u[u.EASEQUAD=3]=\"EASEQUAD\",u.EASEINSINE=\"easeinsine\",u.EASEOUTSINE=\"easeoutsine\",u.EASESINE=\"easeinoutsine\",u.EASEINEXPO=\"easeinexpo\",u.EASEOUTEXPO=\"easeoutexpo\",u.EASEEXPO=\"easeinoutexpo\",u.EASEINELASTIC=\"easeinelastic\",u.EASEOUTELASTIC=\"easeoutelastic\",u.EASEELASTIC=\"easeinoutelastic\",u.EASEINBOUNCE=\"easeinbounce\",u.EASEOUTEBOUNCE=\"easeoutbounce\",u.EASEBOUNCE=\"easeinoutbounce\";var p,d=function(){function t(t,i,r,o,a){void 0===a&&(a=e.InterpolationType.LINEAR),this.start=t,this.end=i,this.normalizedTime=0,this.lerpTime=0,this.onFinishCallback=o,this.interpolationType=a,0!=r?this.speed=1/r:(this.speed=0,this.normalizedTime=1,this.lerpTime=1),c.createAndAddToEngine().addComponentType(n)}var n;return n=t,t.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed,0,1),this.lerpTime=h(this.interpolationType,this.normalizedTime)},t.prototype.hasFinished=function(){return this.normalizedTime>=1},t.prototype.assignValueToTransform=function(e){e.position=Vector3.Lerp(this.start,this.end,this.lerpTime)},t=n=r([Component(\"moveTransformComponent\")],t)}(),g=function(){function t(t,i,r,o,a){void 0===a&&(a=e.InterpolationType.LINEAR),this.start=t,this.end=i,this.normalizedTime=0,this.lerpTime=0,this.onFinishCallback=o,this.interpolationType=a,0!=r?this.speed=1/r:(this.speed=0,this.normalizedTime=1,this.lerpTime=1),c.createAndAddToEngine().addComponentType(n)}var n;return n=t,t.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed,0,1),this.lerpTime=h(this.interpolationType,this.normalizedTime)},t.prototype.hasFinished=function(){return this.normalizedTime>=1},t.prototype.assignValueToTransform=function(e){e.rotation=Quaternion.Slerp(this.start,this.end,this.lerpTime)},t=n=r([Component(\"rotateTransformComponent\")],t)}(),f=function(){function t(t,i,r,o,a){void 0===a&&(a=e.InterpolationType.LINEAR),this.start=t,this.end=i,this.normalizedTime=0,this.lerpTime=0,this.onFinishCallback=o,this.interpolationType=a,0!=r?this.speed=1/r:(this.speed=0,this.normalizedTime=1,this.lerpTime=1),c.createAndAddToEngine().addComponentType(n)}var n;return n=t,t.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed,0,1),this.lerpTime=h(this.interpolationType,this.normalizedTime)},t.prototype.hasFinished=function(){return this.normalizedTime>=1},t.prototype.assignValueToTransform=function(e){e.scale=Vector3.Lerp(this.start,this.end,this.lerpTime)},t=n=r([Component(\"scaleTransformComponent\")],t)}(),m=function(){function e(e,n,i,r){if(this.speed=[],this.normalizedTime=0,this.currentIndex=0,this.points=e,this.onFinishCallback=i,this.onPointReachedCallback=r,e.length<2)throw new Error(\"At least 2 points are needed for FollowPathComponent.\");if(n>0){for(var o=0,a=[],s=0;s<e.length-1;s++){var u=Vector3.Distance(e[s],e[s+1]);o+=u,a.push(u)}for(s=0;s<a.length;s++)this.speed.push(1/(a[s]/o*n))}else this.normalizedTime=1,this.currentIndex=e.length-2;c.createAndAddToEngine().addComponentType(t)}var t;return t=e,e.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed[this.currentIndex],0,1),this.normalizedTime>=1&&this.currentIndex<this.points.length-2&&(this.currentIndex++,this.normalizedTime=0,this.onPointReachedCallback&&this.currentIndex<this.points.length-1&&this.onPointReachedCallback(this.points[this.currentIndex],this.points[this.currentIndex+1]))},e.prototype.hasFinished=function(){return this.currentIndex>=this.points.length-2&&this.normalizedTime>=1},e.prototype.assignValueToTransform=function(e){e.position=Vector3.Lerp(this.points[this.currentIndex],this.points[this.currentIndex+1],this.normalizedTime)},e=t=r([Component(\"followPathComponent\")],e)}(),y=function(){function e(e,n,i,r,o,a){if(this.speed=[],this.turnToFaceNext=!1,this.facingNext=!1,this.normalizedTime=0,this.currentIndex=0,this.points=Curve3.CreateCatmullRomSpline(e,i,!!o).getPoints(),this.onFinishCallback=a,this.turnToFaceNext=r||!1,this.points.length<2)throw new Error(\"At least 2 points are needed for FollowPathComponent.\");if(n>0){for(var s=0,u=[],h=0;h<this.points.length-1;h++){var l=Vector3.Distance(this.points[h],this.points[h+1]);s+=l,u.push(l)}for(h=0;h<u.length;h++)this.speed.push(1/(u[h]/s*n))}else this.normalizedTime=1,this.currentIndex=e.length-2;c.createAndAddToEngine().addComponentType(t)}var t;return t=e,e.prototype.update=function(e){this.normalizedTime=Scalar.Clamp(this.normalizedTime+e*this.speed[this.currentIndex],0,1),this.normalizedTime>=1&&this.currentIndex<this.points.length-2&&(this.currentIndex++,this.normalizedTime=0,1==this.turnToFaceNext&&(this.facingNext=!1))},e.prototype.hasFinished=function(){return this.currentIndex>=this.points.length-2&&this.normalizedTime>=1},e.prototype.assignValueToTransform=function(e){e.position=Vector3.Lerp(this.points[this.currentIndex],this.points[this.currentIndex+1],this.normalizedTime),this.facingNext||(this.facingNext=!0,this.currentIndex<this.points.length-1?e.lookAt(this.points[this.currentIndex+1]):e.lookAt(this.points[0]))},e=t=r([Component(\"followCurvedPathComponent\")],e)}(),T=function(){function e(e,n){this.rotationVelocity=e,this.onFinishCallback=n,this.rotation=Quaternion.Identity,this.finished=!1,c.createAndAddToEngine().addComponentType(t)}var t;return t=e,e.prototype.update=function(e){this.rotation=Quaternion.Slerp(Quaternion.Identity,this.rotationVelocity,e)},e.prototype.hasFinished=function(){return this.finished},e.prototype.assignValueToTransform=function(e){e.rotation=e.rotation.multiply(this.rotation)},e.prototype.stop=function(){this.finished=!0},e=t=r([Component(\"keepRotatingComponent\")],e)}();e.ToggleState=void 0,(p=e.ToggleState||(e.ToggleState={}))[p.Off=0]=\"Off\",p[p.On=1]=\"On\";var S=function(){function t(t,n){void 0===t&&(t=e.ToggleState.On),this.enabled=!0,this.state=e.ToggleState.Off,this.set(t),n&&this.setCallback(n)}return t.prototype.set=function(e){this.state=e,this.onValueChangedCallback&&this.onValueChangedCallback(e)},t.prototype.toggle=function(){this.enabled&&this.set(1-this.state)},t.prototype.isOn=function(){return this.state==e.ToggleState.On},t.prototype.setCallback=function(e){this.onValueChangedCallback=e},t=r([Component(\"toggle\")],t)}(),E=function(){function e(){this._components=[],e._instance=this}return e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e.registerCustomComponent=function(e){this.createAndAddToEngine()._components.push(e)},e.prototype.addComponentType=function(e){var t,n;try{for(var i=s(this._components),r=i.next();!r.done;r=i.next()){if(e==r.value)return}}catch(e){t={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}this._components.push(e)},e.prototype.update=function(e){var t=this;this._components.forEach((function(n){t.updateComponent(e,n)}))},e.prototype.updateComponent=function(e,t){var n=engine.getEntitiesWithComponent(t);for(var i in n)if(n.hasOwnProperty(i)){var r=n[i],o=r.getComponent(t);o.elapsedTime+=e,o.elapsedTime>=o.targetTime&&o.onTargetTimeReached(r)}},e._instance=null,e}(),C=function(){function e(e,n){var i=this;E.createAndAddToEngine().addComponentType(t),this.elapsedTime=0,this.targetTime=e/1e3,this.onTimeReachedCallback=n,this.onTargetTimeReached=function(e){i.onTimeReachedCallback&&i.onTimeReachedCallback(),e.removeComponent(i)}}var t;return t=e,e.prototype.setCallback=function(e){this.onTimeReachedCallback=e},e=t=r([Component(\"timerDelay\")],e)}(),b=function(){function e(e,n){var i=this;E.createAndAddToEngine().addComponentType(t),this.elapsedTime=0,this.targetTime=e/1e3,this.onTimeReachedCallback=n,this.onTargetTimeReached=function(e){i.onTimeReachedCallback&&i.onTimeReachedCallback(),e.removeComponent(i),engine.removeEntity(e)}}var t;return t=e,e.prototype.setCallback=function(e){this.onTimeReachedCallback=e},e=t=r([Component(\"timerExpireIn\")],e)}(),v=function(){function e(e,n){var i=this;E.createAndAddToEngine().addComponentType(t),this.elapsedTime=0,this.targetTime=e/1e3,this.onTimeReachedCallback=n,this.onTargetTimeReached=function(){i.elapsedTime=0,i.onTimeReachedCallback&&i.onTimeReachedCallback()}}var t;return t=e,e.prototype.setCallback=function(e){this.onTimeReachedCallback=e},e=t=r([Component(\"timerInterval\")],e)}();function I(e,t,n,i,r,o){var a=new Entity;a.addComponent(new Transform(o||{position:new Vector3(0,1.5,0)})),a.setParent(t);var s=new TextShape(e);return s.fontSize=r||3,s.color=i||Color3.Black(),a.addComponent(s),n&&a.addComponent(new Billboard),engine.addEntity(a),a}var A,_,w=function(){function e(){this._triggers={},e._instance=this,this._cameraTriggerWrapper=new q(new P(new Vector3(.5,1.8,.5),new Vector3(0,.91,0))),this._componentGroup=engine.getComponentGroup(N)}return Object.defineProperty(e,\"instance\",{get:function(){return this.createAndAddToEngine()},enumerable:!1,configurable:!0}),e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e.prototype.setCameraTriggerShape=function(e){this._cameraTriggerWrapper.setShape(e)},e.prototype.update=function(){var t=this,n=this._componentGroup.entities;for(var i in n.forEach((function(e){t.shouldWrapTriggerEntity(e)&&t.wrapTriggerEntity(e)})),this._triggers)if(this._triggers.hasOwnProperty(i)){var r=this._triggers[i];r.isDebugging()&&r.updateDebugEntity(),r.isInEngine()?null!=r.trigger&&r.trigger.enabled?(r.wasEnabled||r.isDebugging()&&r.addDebugEntity(),r.wasEnabled=!0,(r.trigger.onCameraEnter||r.trigger.onCameraExit)&&this.checkCollisionAgainstCamera(r),(r.trigger.onTriggerEnter||r.trigger.onTriggerExit)&&this.checkCollisionAgainstOtherTriggers(r)):r.wasEnabled&&(r.wasEnabled=!1,r.isDebugging()&&r.removeDebugEntity(),e.removeTriggerFromSystem(r)):(r.isDebugging()&&r.removeDebugEntity(),e.removeTriggerFromSystem(r),delete this._triggers[i])}},e.prototype.shouldWrapTriggerEntity=function(e){return null==this._triggers[e.uuid]||null==this._triggers[e.uuid]},e.prototype.wrapTriggerEntity=function(e){this._triggers[e.uuid]=new x(e)},e.removeTriggerFromSystem=function(t){for(var n,i=t.getActiveCollisions(),r=0;r<i.length;r++){!(i[r]===(null===(n=e._instance)||void 0===n?void 0:n._cameraTriggerWrapper)||null==i[r].trigger)&&i[r].trigger.onTriggerExit&&t.entity&&i[r].trigger.onTriggerExit(t.entity),i[r].disengageActiveCollision(t),t.disengageActiveCollision(i[r])}},e.disengageCollision=function(e,t){e.disengageActiveCollision(t),t.disengageActiveCollision(e),e.trigger.onTriggerExit&&t.entity&&e.trigger.onTriggerExit(t.entity),t.trigger.onTriggerExit&&e.entity&&t.trigger.onTriggerExit(e.entity)},e.engageCollision=function(e,t){e.engageCollision(t),t.engageCollision(e),e.trigger.onTriggerEnter&&t.entity&&e.trigger.onTriggerEnter(t.entity),t.trigger.onTriggerEnter&&e.entity&&t.trigger.onTriggerEnter(e.entity)},e.prototype.checkCollisionAgainstCamera=function(t){var n=t.hasActiveCollision(this._cameraTriggerWrapper),i=e.areColliding(t,this._cameraTriggerWrapper);n&&!i?(t.disengageActiveCollision(this._cameraTriggerWrapper),t.trigger.onCameraExit&&t.trigger.onCameraExit()):!n&&i&&(t.engageCollision(this._cameraTriggerWrapper),t.trigger.onCameraEnter&&t.trigger.onCameraEnter())},e.prototype.checkCollisionAgainstOtherTriggers=function(t){for(var n in this._triggers)if(this._triggers.hasOwnProperty(n)&&n!=t.uuid&&this._triggers[n].trigger.enabled&&e.canTriggersCollide(t,this._triggers[n])){var i=t.hasActiveCollision(this._triggers[n]),r=e.areColliding(t,this._triggers[n]);i&&!r?e.disengageCollision(t,this._triggers[n]):!i&&r&&e.engageCollision(t,this._triggers[n])}},e.canTriggersCollide=function(e,t){return 0==e.trigger.triggeredByLayer||0!=(t.trigger.layer&e.trigger.triggeredByLayer)},e.areColliding=function(t,n){return t.getShape()instanceof P&&n.getShape()instanceof P?e.areCollidingAABB(t.getGlobalPosition(),t.getShape(),n.getGlobalPosition(),n.getShape()):t.getShape()instanceof k&&n.getShape()instanceof k?e.areCollidingSphere(t.getGlobalPosition(),t.getShape(),n.getGlobalPosition(),n.getShape()):t.getShape()instanceof P&&n.getShape()instanceof k?e.areCollidingAABBSphere(t.getGlobalPosition(),t.getShape(),n.getGlobalPosition(),n.getShape()):t.getShape()instanceof k&&n.getShape()instanceof P&&e.areCollidingAABBSphere(n.getGlobalPosition(),n.getShape(),t.getGlobalPosition(),t.getShape())},e.areCollidingAABB=function(t,n,i,r){var o=e.getBoxShapeValues(t,n),a=e.getBoxShapeValues(i,r);return o.min.x<=a.max.x&&o.max.x>=a.min.x&&o.min.y<=a.max.y&&o.max.y>=a.min.y&&o.min.z<=a.max.z&&o.max.z>=a.min.z},e.areCollidingSphere=function(e,t,n,i){return Vector3.DistanceSquared(e.add(t.position),n.add(i.position))<t.radius*t.radius+i.radius*i.radius},e.areCollidingAABBSphere=function(t,n,i,r){var o=e.getBoxShapeValues(t,n),a=i.add(r.position),s=r.radius,u=0;return a.x<o.min.x&&(u+=(o.min.x-a.x)*(o.min.x-a.x)),a.x>o.max.x&&(u+=(a.x-o.max.x)*(a.x-o.max.x)),a.y<o.min.y&&(u+=(o.min.y-a.y)*(o.min.y-a.y)),a.y>o.max.y&&(u+=(a.y-o.max.y)*(a.y-o.max.y)),a.z<o.min.z&&(u+=(o.min.z-a.z)*(o.min.z-a.z)),a.z>o.max.z&&(u+=(a.z-o.max.z)*(a.z-o.max.z)),u<s*s},e.getBoxShapeValues=function(e,t){var n=e.add(t.position);return{center:n,min:n.subtract(t.size.scale(.5)),max:n.add(t.size.scale(.5))}},e._instance=null,e}(),x=function(){function e(e){this.wasEnabled=!0,this._uuid=\"\",this._collidingWith={},this._isDebug=!1,this._debugEntity=null,this._entity=e,e&&(this._trigger=e.getComponent(N),this._uuid=e.uuid,this._isDebug=this._trigger.debugEnabled,this._isDebug&&this.addDebugEntity())}return Object.defineProperty(e.prototype,\"entity\",{get:function(){return this._entity},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"trigger\",{get:function(){return this._trigger},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\"uuid\",{get:function(){return this._uuid},enumerable:!1,configurable:!0}),e.prototype.getGlobalPosition=function(){return this._entity?e.getEntityWorldPosition(this._entity):Vector3.Zero()},e.prototype.getShape=function(){return this._trigger.shape},e.prototype.isInEngine=function(){return null!=this._entity&&this._entity.isAddedToEngine()},e.prototype.getActiveCollisions=function(){var e=[];for(var t in this._collidingWith)this._collidingWith.hasOwnProperty(t)&&e.push(this._collidingWith[t]);return e},e.prototype.hasActiveCollision=function(e){return null!=this._collidingWith[e.uuid]&&null!=this._collidingWith[e.uuid]},e.prototype.disengageActiveCollision=function(e){delete this._collidingWith[e.uuid]},e.prototype.engageCollision=function(e){this._collidingWith[e.uuid]=e},e.prototype.isDebugging=function(){return this._isDebug},e.prototype.addDebugEntity=function(){return o(this,void 0,void 0,(function(){var n,i,r;return a(this,(function(o){switch(o.label){case 0:return[4,!t.isPreviewMode()];case 1:return o.sent()||(e._debugMaterial||(e._debugMaterial=new Material,e._debugMaterial.alphaTest=.5),null==this._debugEntity&&(this._debugEntity=new Entity,n=new Transform,this._debugEntity.addComponent(n),this._debugEntity.addComponent(e._debugMaterial),this.getShape()instanceof P&&((i=new BoxShape).withCollisions=!1,this._debugEntity.addComponent(i),n.scale=this.getShape().size),this.getShape()instanceof k&&((i=new SphereShape).withCollisions=!1,this._debugEntity.addComponent(i),r=this.getShape().radius,n.scale=new Vector3(r,r,r))),engine.addEntity(this._debugEntity)),[2]}}))}))},e.prototype.removeDebugEntity=function(){null!=this._debugEntity&&engine.removeEntity(this._debugEntity)},e.prototype.updateDebugEntity=function(){this._debugEntity&&(this._debugEntity.getComponent(Transform).position=this.getGlobalPosition().add(this.getShape().position))},e.getEntityWorldPosition=function(e){var t=e.hasComponent(Transform)?e.getComponent(Transform).position.clone():Vector3.Zero(),n=e.getParent();if(null!=n){var i=n.hasComponent(Transform)?n.getComponent(Transform).rotation:Quaternion.Identity;return this.getEntityWorldPosition(n).add(t.rotate(i))}return t},e._debugMaterial=null,e}(),q=function(e){function t(t){var n=e.call(this)||this;return n._shape=t,n._uuid=\"cameraTrigger\",n}return i(t,e),t.prototype.getGlobalPosition=function(){return Camera.instance.position},t.prototype.getShape=function(){return this._shape},t.prototype.setShape=function(e){this._shape=e},t.prototype.isInEngine=function(){return!1},t.prototype.hasActiveCollision=function(e){return!1},t.prototype.disengageActiveCollision=function(e){},t.prototype.engageCollision=function(e){},t.prototype.isDebugging=function(){return!1},t}(x),N=function(){function e(e,t){this.enabled=!0,this.layer=0,this.triggeredByLayer=0,this._debugEnabled=!1,w.createAndAddToEngine(),this.shape=e,t&&(t.layer&&(this.layer=t.layer),t.triggeredByLayer&&(this.triggeredByLayer=t.triggeredByLayer),t.onTriggerEnter&&(this.onTriggerEnter=t.onTriggerEnter),t.onTriggerExit&&(this.onTriggerExit=t.onTriggerExit),t.onCameraEnter&&(this.onCameraEnter=t.onCameraEnter),t.onCameraExit&&(this.onCameraExit=t.onCameraExit),t.enableDebug&&(this._debugEnabled=t.enableDebug))}return Object.defineProperty(e.prototype,\"debugEnabled\",{get:function(){return this._debugEnabled},enumerable:!1,configurable:!0}),e=r([Component(\"triggerComponent\")],e)}(),P=function(e,t){void 0===e&&(e=Vector3.One().scale(2)),void 0===t&&(t=Vector3.Zero()),this.size=e,this.position=t},k=function(e,t){void 0===e&&(e=2),void 0===t&&(t=Vector3.Zero()),this.radius=e,this.position=t};e.ActionsSequenceSystem=function(){function e(e){this.beginSequenceNode=null,this.currentSequenceNode=null,this.running=!1,this.started=!1,e&&this.startSequence(e)}return e.prototype.startSequence=function(e){this.beginSequenceNode=e.beginSequenceNode,this.currentSequenceNode=this.beginSequenceNode,this.running=!0,this.started=!1},e.prototype.setOnFinishCallback=function(e){this.onFinishCallback=e},e.prototype.isRunning=function(){return this.running},e.prototype.stop=function(){this.running=!1},e.prototype.resume=function(){null!=this.beginSequenceNode&&(this.running=!0)},e.prototype.reset=function(){this.currentSequenceNode=this.beginSequenceNode,this.running=!0,this.started=!1},e.prototype.getRunningAction=function(){var e=this.currentSequenceNode;if(this.currentSequenceNode instanceof z)do{e=e.currentInnerSequence}while(e instanceof z);return e.action},e.prototype.update=function(e){this.running&&(this.started?this.currentSequenceNode.hasFinish()?(this.currentSequenceNode.onFinish(),this.currentSequenceNode=this.currentSequenceNode.next,this.currentSequenceNode?this.currentSequenceNode.onStart():(this.running=!1,this.onFinishCallback&&this.onFinishCallback())):this.currentSequenceNode.update(e):(this.currentSequenceNode.onStart(),this.started=!0))},e}(),A=e.ActionsSequenceSystem||(e.ActionsSequenceSystem={}),_=function(){function e(){this.currentSequenceNode=null,this.beginSequenceNode=null,this.whileNodeStack=[]}return e.prototype.then=function(e){if(null==this.currentSequenceNode)this.currentSequenceNode=new O,this.currentSequenceNode.action=e,this.beginSequenceNode=this.currentSequenceNode;else{var t=new O;t.action=e,this.currentSequenceNode=this.currentSequenceNode.then(t)}return this},e.prototype.if=function(e){var t=new F(e);return null==this.currentSequenceNode?(this.currentSequenceNode=t,this.beginSequenceNode=t):this.currentSequenceNode=this.currentSequenceNode.then(t),this},e.prototype.else=function(){var e=this.currentSequenceNode.getSequence();if(!(e instanceof F))throw new Error(\"IF statement is needed to be called before ELSE statement.\");e.closed=!0;var t=new R(e);return this.currentSequenceNode=this.currentSequenceNode.then(t),this},e.prototype.endIf=function(){var e=this.currentSequenceNode.getSequence();if(!(e instanceof F||e instanceof R))throw new Error(\"IF statement is needed to be called before ENDIF statement.\");return e.closed=!0,this},e.prototype.while=function(e){var t=new D(e);return null==this.currentSequenceNode?(this.currentSequenceNode=t,this.beginSequenceNode=t):this.currentSequenceNode=this.currentSequenceNode.then(t),this.whileNodeStack.push(t),this},e.prototype.endWhile=function(){var e=this.currentSequenceNode.getSequence();if(!(e instanceof D))throw new Error(\"WHILE statement is needed to be called before ENDWHILE statement.\");return e.closed=!0,this.whileNodeStack.length>0&&this.whileNodeStack.splice(this.whileNodeStack.length-1,1),this},e.prototype.breakWhile=function(){if(!(this.whileNodeStack.length>0))throw new Error(\"WHILE statement is needed to be called before BREAKWHILE statement.\");return this.currentSequenceNode=this.currentSequenceNode.then(new B(this.whileNodeStack[this.whileNodeStack.length-1])),this},e}(),A.SequenceBuilder=_;var O=function(){function e(){this.action=null,this.next=null}return e.prototype.then=function(e){return this.next=e,e},e.prototype.onStart=function(){this.action&&this.action.onStart()},e.prototype.update=function(e){this.action&&this.action.update(e)},e.prototype.onFinish=function(){this.action&&this.action.onFinish()},e.prototype.hasFinish=function(){return!this.action||this.action.hasFinished},e.prototype.getSequence=function(){return this},e}(),z=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.currentInnerSequence=null,t.startingInnerSequence=null,t.closed=!1,t}return i(t,e),t.prototype.then=function(e){if(null==this.currentInnerSequence)this.currentInnerSequence=e,this.startingInnerSequence=e;else{if(this.closed)return this.next=e,e;this.currentInnerSequence=this.currentInnerSequence.then(e)}return this},t.prototype.onStart=function(){this.currentInnerSequence=this.startingInnerSequence,this.currentInnerSequence&&this.currentInnerSequence.onStart()},t.prototype.update=function(e){this.currentInnerSequence&&(this.currentInnerSequence.hasFinish()?(this.currentInnerSequence.onFinish(),this.currentInnerSequence=this.currentInnerSequence.next,this.currentInnerSequence&&this.currentInnerSequence.onStart()):this.currentInnerSequence.update(e))},t.prototype.onFinish=function(){this.currentInnerSequence&&this.currentInnerSequence.onFinish()},t.prototype.hasFinish=function(){return null==this.currentInnerSequence},t.prototype.getSequence=function(){if(this.currentInnerSequence){var e=this.currentInnerSequence.getSequence();if(e instanceof t&&!e.closed)return e}return this},t}(O),F=function(e){function t(t){var n=e.call(this)||this;return n.result=!1,n.condition=t,n}return i(t,e),t.prototype.onStart=function(){this.result=this.condition(),this.result?e.prototype.onStart.call(this):this.currentInnerSequence=null},t}(z),R=function(e){function t(t){var n=e.call(this)||this;return n.ifSequence=null,n.ifSequence=t,n}return i(t,e),t.prototype.onStart=function(){this.ifSequence&&!this.ifSequence.result?e.prototype.onStart.call(this):this.currentInnerSequence=null},t}(z),D=function(e){function t(t){var n=e.call(this)||this;return n.breakWhile=!1,n.condition=t,n}return i(t,e),t.prototype.onStart=function(){this.breakWhile=!1,this.condition()?e.prototype.onStart.call(this):this.currentInnerSequence=null},t.prototype.update=function(e){this.currentInnerSequence&&(this.currentInnerSequence.hasFinish()?(this.currentInnerSequence.onFinish(),this.currentInnerSequence=this.currentInnerSequence.next,null==this.currentInnerSequence&&(this.currentInnerSequence=this.startingInnerSequence),this.currentInnerSequence&&this.currentInnerSequence.onStart()):this.currentInnerSequence.update(e))},t.prototype.hasFinish=function(){return this.breakWhile||!this.condition()},t}(z),B=function(e){function t(t){var n=e.call(this)||this;return n.whileNode=t,n}return i(t,e),t.prototype.onStart=function(){this.whileNode.breakWhile=!0},t}(O);e.Delay=C,e.ExpireIn=b,e.FollowCurvedPathComponent=y,e.FollowPathComponent=m,e.Interpolate=h,e.Interval=v,e.KeepRotatingComponent=T,e.MoveTransformComponent=d,e.RotateTransformComponent=g,e.ScaleTransformComponent=f,e.SequenceNode=O,e.ToggleComponent=S,e.TransformSystem=c,e.TriggerBoxShape=P,e.TriggerComponent=N,e.TriggerSphereShape=k,e.TriggerSystem=w,e.addLabel=I,e.addOneTimeTrigger=function(e,t,n){var i=!1,r=!1,o=new Entity;o.addComponent(new Transform({}));var a={};return t.layer&&(a.layer=t.layer),t.triggeredByLayer&&(a.triggeredByLayer=t.triggeredByLayer),t.onCameraEnter&&(a.onCameraEnter=function(){i||(i=!0,t.onCameraEnter()),!i&&t.onCameraEnter||!r&&t.onCameraExit||engine.removeEntity(o)}),t.onCameraExit&&(a.onCameraExit=function(){r||(r=!0,t.onCameraExit()),!i&&t.onCameraEnter||!r&&t.onCameraExit||engine.removeEntity(o)}),t.enableDebug&&(a.enableDebug=t.enableDebug),o.addComponent(new N(e,a)),n&&o.setParent(n),engine.addEntity(o),o},e.addTestCube=function(e,n,i,r,s,u,c){return o(this,void 0,void 0,(function(){var o,h,l;return a(this,(function(a){switch(a.label){case 0:return(o=!c)?[4,!t.isPreviewMode()]:[3,2];case 1:o=a.sent(),a.label=2;case 2:return o?[2]:((h=new Entity).addComponent(new Transform(e)),s?(h.addComponent(new SphereShape),h.getComponent(Transform).scale.setAll(.5)):h.addComponent(new BoxShape),engine.addEntity(h),h.addComponent(new OnPointerDown(n,{hoverText:i||\"click\",button:ActionButton.POINTER})),r&&((l=new Material).albedoColor=r,h.addComponent(l)),u&&(h.getComponent(BoxShape).withCollisions=!1),i&&I(i,h,!0),[2,h])}}))}))},e.clamp=function(e,t,n){var i=e;return e>n?i=n:e<t&&(i=t),i},e.getEntityWorldPosition=function e(t){var n=t.hasComponent(Transform)?t.getComponent(Transform).position.clone():Vector3.Zero(),i=t.getParent();if(null!=i&&\"0\"!=i.uuid){if(\"FirstPersonCameraEntityReference\"==i.uuid){var r=Camera.instance.rotation.clone();return Camera.instance.position.clone().add(n.rotate(r))}if(\"AvatarEntityReference\"==i.uuid){var o=Camera.instance.rotation;r=Quaternion.Euler(0,o.eulerAngles.y,0);return Camera.instance.position.clone().add(n.rotate(r)).add(new Vector3(0,-.875,0))}r=i.hasComponent(Transform)?i.getComponent(Transform).rotation:Quaternion.Identity;return e(i).add(n.rotate(r))}return n},e.getEntityWorldRotation=function e(t){var n=t.hasComponent(Transform)?t.getComponent(Transform).rotation.clone():Quaternion.Zero(),i=t.getParent();if(null!=i&&\"0\"!=i.uuid){if(\"FirstPersonCameraEntityReference\"==i.uuid){var r=Camera.instance.rotation.clone();return n.multiply(r)}if(\"AvatarEntityReference\"==i.uuid){r=Quaternion.Euler(0,Camera.instance.rotation.eulerAngles.y,0);return n.multiply(r)}r=e(i);return n.multiply(r)}return n},e.map=function(e,t,n,i,r){return(e-t)/(n-t)*(r-i)+i},e.sendRequest=function(e,t,n,i){return o(this,void 0,void 0,(function(){var r,o,s;return a(this,(function(a){switch(a.label){case 0:return a.trys.push([0,6,,7]),r={method:t||\"GET\"},n&&(r.headers=n),i&&(r.body=JSON.stringify(i)),[4,fetch(e,r)];case 1:o=a.sent(),a.label=2;case 2:return a.trys.push([2,4,,5]),[4,o.json()];case 3:return[2,a.sent()];case 4:return a.sent(),[2,o];case 5:return[3,7];case 6:return s=a.sent(),log(\"error fetching from \",e,\" : \",s),[3,7];case 7:return[2]}}))}))},e.setTimeout=function(e,t){var n=new Entity;return n.addComponent(new C(e,(function(){t(),engine.removeEntity(n)}))),engine.addEntity(n),n},Object.defineProperty(e,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "sha256": "e1b6bea5ee8233239ce1634d81b71ea24cfcc8771cf66b1310bd79195a437778"
  },
  {
    "path": "node_modules/@dcl/npc-scene-utils/dist/index.js",
    "content": "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define(\"@dcl/npc-scene-utils\",[\"exports\"],e):e((t=\"undefined\"!=typeof globalThis?globalThis:t||self)[\"@dcl/npc-scene-utils\"]={})}(this,(function(t){\"use strict\";\n/*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */var e=function(t,i){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,i)};function i(t,i){function o(){this.constructor=t}e(t,i),t.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}function o(t,e,i,o){var n,s=arguments.length,r=s<3?e:null===o?o=Object.getOwnPropertyDescriptor(e,i):o;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)r=Reflect.decorate(t,e,i,o);else for(var a=t.length-1;a>=0;a--)(n=t[a])&&(r=(s<3?n(r):s>3?n(e,i,r):n(e,i))||r);return s>3&&r&&Object.defineProperty(e,i,r),r}function n(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,i=e&&t[e],o=0;if(i)return i.call(t);if(t&&\"number\"==typeof t.length)return{next:function(){return t&&o>=t.length&&(t=void 0),{value:t&&t[o++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}var s=function(){function t(t,e,i){this.lockXZRotation=!1,this.active=!1,r||(r=!0,engine.addSystem(new h)),this.lockXZRotation=t||!1,this.rotSpeed=e||2,i&&(this.active=!0)}return t=o([Component(\"trackUserFlag\")],t)}(),r=!1,a=Camera.instance;var h=function(){function t(){this.followingNPCs=engine.getComponentGroup(s)}return t.prototype.update=function(t){var e,i;try{for(var o=n(this.followingNPCs.entities),r=o.next();!r.done;r=o.next()){var h=r.value,u=h.getComponent(Transform),l=h.getComponent(s);if(l.active){var c=new Vector3(a.position.x,a.position.y,a.position.z).subtract(u.position);u.rotation=Quaternion.Slerp(u.rotation,Quaternion.LookRotation(c),t*l.rotSpeed),l.lockXZRotation&&(u.rotation.x=0,u.rotation.z=0)}}}catch(t){e={error:t}}finally{try{r&&!r.done&&(i=o.return)&&i.call(o)}finally{if(e)throw e.error}}},t}(),u=new UICanvas;u.visible=!0;var l,c,g,p=new Font(Fonts.SanFrancisco),d=new Font(Fonts.SanFrancisco_Heavy),f=new Texture(\"https://decentraland.org/images/ui/light-atlas-v3.png\"),m=new Texture(\"https://decentraland.org/images/ui/dark-atlas-v3.png\"),b=new Texture(\"https://decentraland.org/images/ui/dialog-bubbles.png\");function T(t,e,i,o){void 0===i&&(i=512),void 0===o&&(o=512),function(t,e,i,o,n){t.uvs=[e.x,e.y,i.x,i.y,o.x,o.y,n.x,n.y,e.x,e.y,i.x,i.y,o.x,o.y,n.x,n.y]}(t,new Vector2(e.sourceLeft/i,(o-e.sourceTop-e.sourceHeight)/o),new Vector2((e.sourceLeft+e.sourceWidth)/i,(o-e.sourceTop-e.sourceHeight)/o),new Vector2((e.sourceLeft+e.sourceWidth)/i,(o-e.sourceTop)/o),new Vector2(e.sourceLeft/i,(o-e.sourceTop)/o))}function C(t,e){t.sourceWidth=e.sourceWidth,t.sourceHeight=e.sourceHeight,t.sourceLeft=e.sourceLeft?e.sourceLeft:0,t.sourceTop=e.sourceTop?e.sourceTop:0}function y(t){var e=-10-4*t;return e>-65?e:-65}(l=t.ButtonStyles||(t.ButtonStyles={})).E=\"e\",l.F=\"f\",l.DARK=\"dark\",l.RED=\"red\",l.ROUNDBLACK=\"roundblack\",l.ROUNDWHITE=\"roundwhite\",l.ROUNDSILVER=\"roundsilver\",l.ROUNDGOLD=\"roundgold\",l.SQUAREBLACK=\"squareblack\",l.SQUAREWHITE=\"squarewhite\",l.SQUARESILVER=\"squaresilver\",l.SQUAREGOLD=\"squaregold\",l.WHITE=\"white\",(c=t.NPCState||(t.NPCState={})).STANDING=\"standing\",c.TALKING=\"talking\",c.FOLLOWPATH=\"followPath\",(g=t.NPCLerpType||(t.NPCLerpType={})).SMOOTH_PATH=\"smooth\",g.RIGID_PATH=\"rigid\";var x,v={buttons:{buttonE:{sourceWidth:174,sourceHeight:46,sourceLeft:512,sourceTop:662},buttonF:{sourceWidth:174,sourceHeight:46,sourceLeft:512,sourceTop:612},white:{sourceWidth:174,sourceHeight:46,sourceLeft:698,sourceTop:662},buttonRed:{sourceWidth:174,sourceHeight:46,sourceLeft:512,sourceTop:662},buttonDark:{sourceWidth:174,sourceHeight:46,sourceLeft:512,sourceTop:612},roundBlack:{sourceWidth:128,sourceHeight:32,sourceLeft:512,sourceTop:458},squareBlack:{sourceWidth:128,sourceHeight:32,sourceLeft:646,sourceTop:457},roundWhite:{sourceWidth:128,sourceHeight:32,sourceLeft:512,sourceTop:494},squareWhite:{sourceWidth:128,sourceHeight:32,sourceLeft:646,sourceTop:493},roundSilver:{sourceWidth:128,sourceHeight:32,sourceLeft:512,sourceTop:531},squareSilver:{sourceWidth:128,sourceHeight:32,sourceLeft:646,sourceTop:531},roundGold:{sourceWidth:128,sourceHeight:32,sourceLeft:512,sourceTop:567},squareGold:{sourceWidth:128,sourceHeight:32,sourceLeft:646,sourceTop:567}},buttonLabels:{E:{sourceWidth:26,sourceHeight:26,sourceLeft:697,sourceTop:611},F:{sourceWidth:26,sourceHeight:26,sourceLeft:733,sourceTop:611},EBlack:{sourceWidth:26,sourceHeight:26,sourceLeft:766,sourceTop:611},FBlack:{sourceWidth:26,sourceHeight:26,sourceLeft:802,sourceTop:611}},backgrounds:{promptBackground:{sourceWidth:416,sourceHeight:352,sourceLeft:501,sourceTop:12},promptLargeBackground:{sourceWidth:480,sourceHeight:384,sourceLeft:7,sourceTop:12},promptSlantedBackground:{sourceWidth:486,sourceHeight:326,sourceLeft:7,sourceTop:413},NPCDialog:{sourceWidth:766,sourceHeight:248,sourceLeft:22,sourceTop:756}},icons:{closeW:{sourceWidth:32,sourceHeight:32,sourceLeft:942,sourceTop:306},closeD:{sourceWidth:32,sourceHeight:32,sourceLeft:986,sourceTop:306},closeWLarge:{sourceWidth:64,sourceHeight:64,sourceLeft:512,sourceTop:381},closeDLarge:{sourceWidth:64,sourceHeight:64,sourceLeft:583,sourceTop:381},closeWNoBack:{sourceWidth:24,sourceHeight:24,sourceLeft:946,sourceTop:252},closeDNoBack:{sourceWidth:24,sourceHeight:24,sourceLeft:946,sourceTop:214},closeWNoBackLarge:{sourceWidth:32,sourceHeight:32,sourceLeft:987,sourceTop:214},closeDNoBackLarge:{sourceWidth:32,sourceHeight:32,sourceLeft:987,sourceTop:260},FDark:{sourceWidth:32,sourceHeight:32,sourceLeft:950,sourceTop:4},FWhite:{sourceWidth:32,sourceHeight:32,sourceLeft:987,sourceTop:4},EDark:{sourceWidth:32,sourceHeight:32,sourceLeft:950,sourceTop:40},EWhite:{sourceWidth:32,sourceHeight:32,sourceLeft:987,sourceTop:40},Timer:{sourceWidth:24,sourceHeight:32.2,sourceLeft:718,sourceTop:388},TimerLarge:{sourceWidth:48,sourceHeight:68,sourceLeft:662,sourceTop:386},ClickWhite:{sourceWidth:32,sourceHeight:48,sourceLeft:799,sourceTop:389},ClickDark:{sourceWidth:32,sourceHeight:48,sourceLeft:757,sourceTop:389}},checkboxes:{wOff:{sourceWidth:24,sourceHeight:24,sourceLeft:987,sourceTop:76},wOn:{sourceWidth:24,sourceHeight:24,sourceLeft:987,sourceTop:104},dOff:{sourceWidth:24,sourceHeight:24,sourceLeft:958,sourceTop:76},dOn:{sourceWidth:24,sourceHeight:24,sourceLeft:958,sourceTop:104},wLargeOff:{sourceWidth:32,sourceHeight:32,sourceLeft:987,sourceTop:132},wLargeOn:{sourceWidth:32,sourceHeight:32,sourceLeft:987,sourceTop:168},dLargeOff:{sourceWidth:32,sourceHeight:32,sourceLeft:950,sourceTop:132},dLargeOn:{sourceWidth:32,sourceHeight:32,sourceLeft:950,sourceTop:168}},switches:{roundOff:{sourceWidth:64,sourceHeight:32,sourceLeft:783,sourceTop:454},roundRed:{sourceWidth:64,sourceHeight:32,sourceLeft:853,sourceTop:454},roundGreen:{sourceWidth:64,sourceHeight:32,sourceLeft:923,sourceTop:454},squareOff:{sourceWidth:64,sourceHeight:32,sourceLeft:783,sourceTop:501},squareRed:{sourceWidth:64,sourceHeight:32,sourceLeft:852,sourceTop:501},squareGreen:{sourceWidth:64,sourceHeight:32,sourceLeft:921,sourceTop:501}},bubbles:{short:{sourceWidth:232,sourceHeight:168,sourceLeft:610,sourceTop:834},normal:{sourceWidth:572,sourceHeight:168,sourceLeft:16,sourceTop:834},long:{sourceWidth:994,sourceHeight:306,sourceLeft:12,sourceTop:508},huge:{sourceWidth:994,sourceHeight:478,sourceLeft:12,sourceTop:14}}},w=function(){function t(t,i){var o=this;A.createAndAddToEngine(),this.elapsedTime=0,this.targetTime=t,this.onTimeReachedCallback=i,this.onTargetTimeReached=function(t){o.onTimeReachedCallback(),t.removeComponent(e)}}var e;return e=t,t.prototype.setCallback=function(t){this.onTimeReachedCallback=t},t=e=o([Component(\"npcTimerDelay\")],t)}(),S=engine.getComponentGroup(w),A=function(){function t(){t._instance=this}return t.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new t,engine.addSystem(this._instance)),this._instance},t.prototype.update=function(t){var e,i;try{for(var o=n(S.entities),s=o.next();!s.done;s=o.next()){var r=s.value,a=r.getComponent(w);a.elapsedTime+=t,a.elapsedTime>=a.targetTime&&a.onTargetTimeReached(r)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(e)throw e.error}}},t._instance=null,t}();!function(t){t[t.Confirm=0]=\"Confirm\",t[t.Cancel=1]=\"Cancel\",t[t.Next=2]=\"Next\",t[t.Button3=3]=\"Button3\",t[t.Button4=4]=\"Button4\"}(x||(x={}));var E=.75,P=-262.5,k=262.5,D=37.5,W=192,O=192,B=7.5,I=112.5,_=112.5,L=-48.75,N=-48.75,H=19.5,R=19.5,U=function(){function e(e,i,o,n){var s=this;this.NPCScript=[],this.isDialogOpen=!1,this.isQuestionPanel=!1,this.isFixedScreen=!1,this.activeTextId=0,this.UIOpenTime=0,this.defaultSound=null,this.canvas=u,this.ClickAction=null,this.EButtonAction=null,this.FButtonAction=null,this.defaultPortrait=e||null,this.uiTheme=n||(i?m:f),this.container=new UIContainerRect(u),this.container.width=\"100%\",this.container.vAlign=\"bottom\",this.container.positionY=105,this.container.visible=!1,this.panel=new UIImage(this.container,this.uiTheme),C(this.panel,v.backgrounds.NPCDialog),this.panel.width=574.5,this.panel.height=186,this.panel.onClick=new OnClick((function(){s.confirmText(x.Next)})),this.defaultPortraitTexture=new Texture(e?e.path:this.uiTheme.src),this.portrait=new UIImage(this.container,this.defaultPortraitTexture),this.portrait.sourceWidth=e&&e.section?e.section.sourceWidth:256,this.portrait.sourceHeight=e&&e.section?e.section.sourceHeight:256,this.portrait.width=e&&e.width?e.width*E:W,this.portrait.height=e&&e.height?e.height*E:W,this.portrait.positionX=e&&e.offsetX?e.offsetX*E+P:P,this.portrait.positionY=e&&e.offsetY?e.offsetY*E+0:0,this.portrait.onClick=new OnClick((function(){s.confirmText(x.Next)})),this.image=new UIImage(this.container,new Texture(this.uiTheme.src)),this.image.sourceWidth=256,this.image.sourceHeight=256,this.image.sourceTop=0,this.image.sourceLeft=0,this.image.width=O,this.image.height=O,this.image.positionX=k,this.image.positionY=D,this.image.onClick=new OnClick((function(){s.confirmText(x.Next)})),this.text=new UIText(this.container),this.text.adaptWidth=!1,this.text.textWrapping=!0,this.text.width=345,this.text.positionX=30,this.text.hAlign=\"center\",this.text.vAlign=\"center\",this.text.font=d,this.text.fontSize=18,this.text.hTextAlign=\"left\",this.text.vTextAlign=\"center\",this.text.positionY=B,this.text.color=i?Color4.White():Color4.Black(),this.text.isPointerBlocker=!1,this.soundEnt=new Entity,this.soundEnt.addComponent(new Transform),engine.addEntity(this.soundEnt),this.soundEnt.setParent(Attachable.AVATAR),o&&(this.soundEnt.addComponent(new AudioSource(new AudioClip(o))),this.soundEnt.getComponent(AudioSource).volume=.5,this.defaultSound=o),this.button1=new F(this.container,this.uiTheme,\"yes\",I,L,(function(){s.confirmText(x.Confirm)}),!!i,t.ButtonStyles.E),this.button1.hide(),this.button2=new F(this.container,this.uiTheme,\"no\",-60,N,(function(){s.confirmText(x.Cancel)}),!!i,t.ButtonStyles.F),this.button2.hide(),this.button3=new F(this.container,this.uiTheme,\"maybe\",-60,-60,(function(){s.confirmText(x.Button3)}),!!i,t.ButtonStyles.DARK),this.button3.hide(),this.button4=new F(this.container,this.uiTheme,\"maybe\",_,-60,(function(){s.confirmText(x.Button4)}),!!i,t.ButtonStyles.DARK),this.button4.hide(),this.skipButton=new F(this.container,this.uiTheme,\"Skip\",-225,-75,(function(){s.skipDialogs()}),!1,m?t.ButtonStyles.WHITE:t.ButtonStyles.F),this.skipButton.image.width=60,this.skipButton.image.height=22.5,this.skipButton.label.hTextAlign=\"left\",this.skipButton.label.fontSize=9,this.skipButton.label.positionX=30,this.skipButton.label.font=d,this.skipButton.icon.height=15,this.skipButton.icon.width=15,this.skipButton.icon.positionX=-15,this.skipButton.hide(),this.leftClickIcon=new UIImage(this.container,this.uiTheme),this.leftClickIcon.width=24,this.leftClickIcon.height=36,this.leftClickIcon.positionX=255,this.leftClickIcon.positionY=-60,this.leftClickIcon.visible=!1,C(this.leftClickIcon,i?v.icons.ClickDark:v.icons.ClickWhite),Y.createAndAddToEngine()}return e.prototype.openDialogWindow=function(t,e){var i=this;this.UIOpenTime=+Date.now(),this.NPCScript=t,this.activeTextId=e?\"number\"==typeof e?e:z(t,e):0;var o=t[this.activeTextId]?t[this.activeTextId]:{text:\"\"};if(o.audio?(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(o.audio))),this.soundEnt.getComponent(AudioSource).volume=.5,this.soundEnt.getComponent(AudioSource).playOnce()):this.defaultSound&&(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound))),this.soundEnt.getComponent(AudioSource).playOnce()),o.portrait?(this.portrait.source=new Texture(o.portrait.path),this.portrait.positionX=o.portrait.offsetX?o.portrait.offsetX*E+P:P,this.portrait.positionY=o.portrait.offsetY?o.portrait.offsetY*E+0:0,this.portrait.width=o.portrait.width?o.portrait.width*E:W,this.portrait.height=o.portrait.height?o.portrait.height*E:W,o.portrait.section&&C(this.portrait,o.portrait.section),this.portrait.visible=!0):this.defaultPortrait?(this.portrait.source=this.defaultPortraitTexture,this.portrait.positionX=this.defaultPortrait&&this.defaultPortrait.offsetX?this.defaultPortrait.offsetX*E+P:P,this.portrait.positionY=this.defaultPortrait&&this.defaultPortrait.offsetY?this.defaultPortrait.offsetY*E+0:0,this.portrait.width=this.defaultPortrait&&this.defaultPortrait.width?this.defaultPortrait.width*E:W,this.portrait.height=this.defaultPortrait&&this.defaultPortrait.height?this.defaultPortrait.height*E:W,this.defaultPortrait.section&&C(this.portrait,this.defaultPortrait.section),this.portrait.visible=!0):(log(\"No portrait\"),this.portrait.visible=!1),o.image){var n=o.image;log(\"setting image to \",n.path),this.image.source=new Texture(n.path),this.image.positionX=n.offsetX?n.offsetX*E+k:k,this.image.positionY=n.offsetY?n.offsetY*E+D:D,this.image.width=n.width?n.width*E:O,this.portrait.height=n.height?n.height*E:O,n.section&&C(this.image,n.section),this.image.visible=!0}else this.image.visible=!1;this.text.fontSize=o.fontSize?o.fontSize*E:18,this.text.positionY=o.offsetY?o.offsetY*E+B:B,this.text.positionX=o.offsetX?o.offsetX*E:0,this.text.visible=!0,this.container.visible=!0,Y._instance.newText(this,o.text,this.activeTextId,o.typeSpeed?o.typeSpeed:void 0),this.ClickAction||(this.ClickAction=Input.instance.subscribe(\"BUTTON_DOWN\",ActionButton.POINTER,!1,(function(t){!i.isDialogOpen||+Date.now()-i.UIOpenTime<100||(Y._instance.done?i.isQuestionPanel||i.isFixedScreen||i.confirmText(x.Next):Y._instance.rush())})),this.EButtonAction=Input.instance.subscribe(\"BUTTON_DOWN\",ActionButton.PRIMARY,!1,(function(t){!i.isDialogOpen||+Date.now()-i.UIOpenTime<100||(i.isQuestionPanel?i.confirmText(x.Confirm):i.isQuestionPanel||i.isFixedScreen||i.confirmText(x.Next))})),this.FButtonAction=Input.instance.subscribe(\"BUTTON_DOWN\",ActionButton.SECONDARY,!1,(function(t){!i.isDialogOpen||+Date.now()-i.UIOpenTime<100||(i.isQuestionPanel?i.confirmText(x.Cancel):o.skipable&&!i.isFixedScreen&&i.skipDialogs())}))),this.layoutDialogWindow(this.activeTextId),this.isDialogOpen=!0},e.prototype.confirmText=function(t){var e=this.NPCScript[this.activeTextId];if(this.UIOpenTime=+Date.now(),t==x.Next&&!e.isQuestion){if(e.triggeredByNext&&e.triggeredByNext(),e.isEndOfDialog)return void this.closeDialogWindow();this.activeTextId++}t==x.Confirm&&e.buttons&&e.buttons.length>=1&&(\"number\"==typeof e.buttons[0].goToDialog?this.activeTextId=e.buttons[0].goToDialog:this.activeTextId=z(this.NPCScript,e.buttons[0].goToDialog),e.buttons[0].triggeredActions&&e.buttons[0].triggeredActions()),t==x.Cancel&&e.buttons&&e.buttons.length>=2&&(\"number\"==typeof e.buttons[1].goToDialog?this.activeTextId=e.buttons[1].goToDialog:this.activeTextId=z(this.NPCScript,e.buttons[1].goToDialog),e.buttons[1].triggeredActions&&e.buttons[1].triggeredActions()),t==x.Button3&&e.buttons&&e.buttons.length>=3&&(\"number\"==typeof e.buttons[2].goToDialog?this.activeTextId=e.buttons[2].goToDialog:this.activeTextId=z(this.NPCScript,e.buttons[2].goToDialog),e.buttons[2].triggeredActions&&e.buttons[2].triggeredActions()),t==x.Button4&&e.buttons&&e.buttons.length>=4&&(\"number\"==typeof e.buttons[3].goToDialog?this.activeTextId=e.buttons[3].goToDialog:this.activeTextId=z(this.NPCScript,e.buttons[3].goToDialog),e.buttons[3].triggeredActions&&e.buttons[3].triggeredActions()),e=this.NPCScript[this.activeTextId],Y._instance.newText(this,e.text,this.activeTextId,e.typeSpeed?e.typeSpeed:void 0)},e.prototype.layoutDialogWindow=function(t){var e=this,i=this.NPCScript[t]?this.NPCScript[t]:{text:\"\"},o=i.offsetY?i.offsetY*E+B:B;if(i.buttons&&i.buttons.length>=3?o+=37.5:i.buttons&&i.buttons.length>=1&&(o+=18),this.text.fontSize=i.fontSize?i.fontSize*E:18,this.text.positionY=o,i.audio?(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(i.audio))),this.soundEnt.getComponent(AudioSource).volume=.5,this.soundEnt.getComponent(AudioSource).playOnce()):this.defaultSound&&(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound))),this.soundEnt.getComponent(AudioSource).playOnce()),i.portrait?(this.portrait.source=new Texture(i.portrait.path),this.portrait.positionX=i.portrait.offsetX?i.portrait.offsetX*E+P:P,this.portrait.positionY=i.portrait.offsetY?i.portrait.offsetY*E+0:0,this.portrait.width=i.portrait.width?i.portrait.width*E:W,this.portrait.height=i.portrait.height?i.portrait.height*E:W,i.portrait.section&&C(this.portrait,i.portrait.section),this.portrait.visible=!0):this.defaultPortrait?(this.portrait.source=new Texture(this.defaultPortrait.path),this.portrait.positionX=this.defaultPortrait&&this.defaultPortrait.offsetX?this.defaultPortrait.offsetX*E+P:P,this.portrait.positionY=this.defaultPortrait&&this.defaultPortrait.offsetY?this.defaultPortrait.offsetY*E+0:0,this.portrait.width=this.defaultPortrait&&this.defaultPortrait.width?this.defaultPortrait.width*E:W,this.portrait.height=this.defaultPortrait&&this.defaultPortrait.height?this.defaultPortrait.height*E:W,this.defaultPortrait.section&&C(this.portrait,this.defaultPortrait.section),this.portrait.visible=!0):(log(\"No portrait\"),this.portrait.visible=!1),this.image.visible=!1,i.image){var n=i.image;log(\"setting image to \",n.path),this.image.source=new Texture(n.path),this.image.positionX=n.offsetX?n.offsetX*E+k:k,this.image.positionY=n.offsetY?n.offsetY*E+D:D,this.image.width=i.image.width?i.image.width*E:O,this.image.height=i.image.height?i.image.height*E:O,n.section&&C(this.image,n.section),this.image.visible=!0}else this.image.visible=!1;this.isQuestionPanel=!!i.isQuestion&&i.isQuestion,this.isFixedScreen=!!i.isFixedScreen&&i.isFixedScreen,this.button1.hide(),this.button2.hide(),this.button3.hide(),this.button4.hide(),this.leftClickIcon.visible=!1,i.isQuestion?(this.skipButton.hide(),i.buttons&&i.buttons.length>=1&&this.button1.update(i.buttons[0].label,i.buttons[0].offsetX?i.buttons[0].offsetX*E+I:I,i.buttons.length>=3?i.buttons[0].offsetY?i.buttons[0].offsetY*E-15:-15:i.buttons[0].offsetY?i.buttons[0].offsetY*E+L:L),i.buttons&&i.buttons.length>=2&&this.button2.update(i.buttons[1].label,i.buttons[1].offsetX*E?i.buttons[1].offsetX*E-60:-60,i.buttons.length>=3?i.buttons[1].offsetY*E?i.buttons[1].offsetY*E-15:-15:i.buttons[1].offsetY*E?i.buttons[1].offsetY*E+N:N),i.buttons&&i.buttons.length>=3&&this.button3.update(i.buttons[2].label,i.buttons[2].offsetX*E?i.buttons[2].offsetX*E-60:-60,i.buttons[2].offsetY*E?i.buttons[2].offsetY*E-60:-60),i.buttons&&i.buttons.length>=4&&this.button4.update(i.buttons[3].label,i.buttons[3].offsetX*E?i.buttons[3].offsetX*E+_:_,i.buttons[3].offsetY*E?i.buttons[3].offsetY*E-60:-60),X.addComponentOrReplace(new w(.7,(function(){i.buttons&&i.buttons.length>=1&&e.button1.show(),i.buttons&&i.buttons.length>=2&&e.button2.show(),i.buttons&&i.buttons.length>=3&&e.button3.show(),i.buttons&&i.buttons.length>=4&&e.button4.show()})))):this.isFixedScreen||(this.leftClickIcon.visible=!0,i.skipable?this.skipButton.show():this.skipButton.hide())},e.prototype.closeDialogWindow=function(){this.isDialogOpen&&(this.isDialogOpen=!1,this.portrait.visible=!1,this.text.value=\"\",this.text.visible=!1,this.button1.hide(),this.button2.hide(),this.button3.hide(),this.button4.hide(),this.skipButton.hide(),this.leftClickIcon.visible=!1,this.container.visible=!1)},e.prototype.skipDialogs=function(){if(this.isDialogOpen&&!(+Date.now()-this.UIOpenTime<100)){for(;this.NPCScript[this.activeTextId]&&this.NPCScript[this.activeTextId].skipable&&!this.NPCScript[this.activeTextId].isQuestion;){if(this.NPCScript[this.activeTextId].triggeredByNext&&this.NPCScript[this.activeTextId].triggeredByNext(),this.NPCScript[this.activeTextId].skipable&&this.NPCScript[this.activeTextId].isEndOfDialog)return void this.closeDialogWindow();this.activeTextId+=1}this.confirmText(x.Next)}},e}(),Y=function(){function t(){this.timer=0,this.speed=45,this.visibleChars=0,this.fullText=\"\",this.UIText=null,this.done=!0,t._instance=this}return t.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new t,engine.addSystem(this._instance)),this._instance},t.prototype.update=function(t){if(!this.done&&(this.timer+=t,this.timer>=2/this.speed)){var e=Math.floor(this.timer/(1/this.speed));this.timer=0,this.visibleChars+=e,this.closeTag(e),this.visibleChars>=this.fullText.length&&(this.done=!0,this.visibleChars=this.fullText.length),this.UIText&&(this.UIText.value=this.fullText.substr(0,this.visibleChars))}},t.prototype.newText=function(t,e,i,o){this.timer=0,this.done=!1,this.UIText=t.text,this.fullText=e,this.visibleChars=0,o&&o<=0?this.rush():this.speed=o||45,t.layoutDialogWindow(i)},t.prototype.rush=function(){this.done=!0,this.timer=0,this.visibleChars=this.fullText.length,this.UIText&&(this.UIText.value=this.fullText)},t.prototype.closeTag=function(t){if(0!=this.visibleChars&&0!=t){for(var e=!1,i=!1,o=this.visibleChars-t;o<this.visibleChars;o++)e?\">\"==this.fullText.substr(o,1)&&(i=!0):\"<\"==this.fullText.substr(o,1)&&(e=!0);if(e&&!i)for(;this.visibleChars<this.fullText.length&&\">\"!=this.fullText.substr(this.visibleChars-1,1);)this.visibleChars+=1}},t._instance=null,t}(),F=function(e){function o(i,o,n,s,r,a,h,u){var l=e.call(this)||this;if(l.icon=null,l.image=new UIImage(i,o),l.image.positionX=s,l.image.positionY=r,l.image.width=130.5,l.image.height=34.5,l.label=new UIText(l.image),l.style=u||null,l.onClick=a,l.style)switch(l.style){case t.ButtonStyles.E:C(l.image,v.buttons.buttonE),l.label.positionX=18.75,l.icon=new UIImage(l.image,1==h?m:f),l.icon.width=H,l.icon.height=R,l.icon.hAlign=\"center\",l.icon.vAlign=\"center\",l.icon.isPointerBlocker=!1,C(l.icon,v.buttonLabels.E),l.icon.positionX=y(n.length);break;case t.ButtonStyles.F:C(l.image,v.buttons.buttonF),l.label.positionX=18.75,l.icon=new UIImage(l.image,1==h?m:f),l.icon.width=H,l.icon.height=R,l.icon.hAlign=\"center\",l.icon.vAlign=\"center\",l.icon.isPointerBlocker=!1,C(l.icon,v.buttonLabels.F),l.icon.positionX=y(n.length);break;case t.ButtonStyles.WHITE:C(l.image,v.buttons.white),l.label.positionX=18.75,l.icon=new UIImage(l.image,1==h?m:f),l.icon.width=H,l.icon.height=R,l.icon.hAlign=\"center\",l.icon.vAlign=\"center\",l.icon.isPointerBlocker=!1,C(l.icon,v.buttonLabels.FBlack),l.icon.positionX=y(n.length);break;case t.ButtonStyles.RED:C(l.image,v.buttons.buttonRed);break;case t.ButtonStyles.DARK:C(l.image,v.buttons.buttonDark);break;case t.ButtonStyles.ROUNDBLACK:C(l.image,v.buttons.roundBlack);break;case t.ButtonStyles.ROUNDWHITE:C(l.image,v.buttons.roundWhite);break;case t.ButtonStyles.ROUNDSILVER:C(l.image,v.buttons.roundSilver);break;case t.ButtonStyles.ROUNDGOLD:C(l.image,v.buttons.roundGold);break;case t.ButtonStyles.SQUAREBLACK:C(l.image,v.buttons.squareBlack);break;case t.ButtonStyles.SQUAREWHITE:C(l.image,v.buttons.squareWhite);break;case t.ButtonStyles.SQUARESILVER:C(l.image,v.buttons.squareSilver);break;case t.ButtonStyles.SQUAREGOLD:C(l.image,v.buttons.squareGold)}else C(l.image,v.buttons.roundSilver);return l.label.value=n,l.label.hTextAlign=\"center\",l.label.vTextAlign=\"center\",l.label.fontSize=15,l.label.font=p,l.label.color=u==t.ButtonStyles.ROUNDWHITE||u==t.ButtonStyles.SQUAREWHITE||u==t.ButtonStyles.WHITE?Color4.Black():Color4.White(),l.label.isPointerBlocker=!1,l.image.onClick=new OnClick((function(){l.onClick()})),u==t.ButtonStyles.E?Input.instance.subscribe(\"BUTTON_DOWN\",ActionButton.PRIMARY,!1,(function(t){l.image.visible&&l.onClick()})):u==t.ButtonStyles.F&&Input.instance.subscribe(\"BUTTON_DOWN\",ActionButton.SECONDARY,!1,(function(t){l.image.visible&&l.onClick()})),l}return i(o,e),o.prototype.hide=function(){this.image.visible=!1},o.prototype.show=function(){this.image.visible=!0},o.prototype.grayOut=function(){this.label.color=Color4.Gray(),this.image.isPointerBlocker=!1},o.prototype.enable=function(){this.label.color=Color4.White(),this.image.isPointerBlocker=!0},o.prototype.update=function(e,i,o){this.label.value=e,this.image.positionX=i,this.image.positionY=o,!this.icon||this.style!=t.ButtonStyles.E&&this.style!=t.ButtonStyles.F||(this.icon.positionX=y(e.length))},o}(Entity),X=new Entity;function z(t,e){for(var i=0;i<t.length;i++)if(t[i].name&&t[i].name==e)return i;return 0}engine.addEntity(X);var G=function(){function t(){this._triggers={},t._instance=this,this._cameraTriggerWrapper=new Q(new j(new Vector3(.5,1.8,.5),new Vector3(0,.91,0))),this._componentGroup=engine.getComponentGroup(M)}return Object.defineProperty(t,\"instance\",{get:function(){return this.createAndAddToEngine()},enumerable:!1,configurable:!0}),t.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new t,engine.addSystem(this._instance)),this._instance},t.prototype.setCameraTriggerShape=function(t){this._cameraTriggerWrapper.setShape(t)},t.prototype.update=function(){var e=this,i=this._componentGroup.entities;for(var o in i.forEach((function(t){e.shouldWrapTriggerEntity(t)&&e.wrapTriggerEntity(t)})),this._triggers)if(this._triggers.hasOwnProperty(o)){var n=this._triggers[o];n.isDebugging()&&n.updateDebugEntity(),n.isInEngine()?null!=n.trigger&&n.trigger.enabled?(n.wasEnabled||n.isDebugging()&&n.addDebugEntity(),n.wasEnabled=!0,(n.trigger.onCameraEnter||n.trigger.onCameraExit)&&this.checkCollisionAgainstCamera(n),(n.trigger.onTriggerEnter||n.trigger.onTriggerExit)&&this.checkCollisionAgainstOtherTriggers(n)):n.wasEnabled&&(n.wasEnabled=!1,n.isDebugging()&&n.removeDebugEntity(),t.removeTriggerFromSystem(n)):(n.isDebugging()&&n.removeDebugEntity(),t.removeTriggerFromSystem(n),delete this._triggers[o])}},t.prototype.shouldWrapTriggerEntity=function(t){return null==this._triggers[t.uuid]||null==this._triggers[t.uuid]},t.prototype.wrapTriggerEntity=function(t){this._triggers[t.uuid]=new V(t)},t.removeTriggerFromSystem=function(e){for(var i,o=e.getActiveCollisions(),n=0;n<o.length;n++){!(o[n]===(null===(i=t._instance)||void 0===i?void 0:i._cameraTriggerWrapper)||null==o[n].trigger)&&o[n].trigger.onTriggerExit&&e.entity&&o[n].trigger.onTriggerExit(e.entity),o[n].disengageActiveCollision(e),e.disengageActiveCollision(o[n])}},t.disengageCollision=function(t,e){t.disengageActiveCollision(e),e.disengageActiveCollision(t),t.trigger.onTriggerExit&&e.entity&&t.trigger.onTriggerExit(e.entity),e.trigger.onTriggerExit&&t.entity&&e.trigger.onTriggerExit(t.entity)},t.engageCollision=function(t,e){t.engageCollision(e),e.engageCollision(t),t.trigger.onTriggerEnter&&e.entity&&t.trigger.onTriggerEnter(e.entity),e.trigger.onTriggerEnter&&t.entity&&e.trigger.onTriggerEnter(t.entity)},t.prototype.checkCollisionAgainstCamera=function(e){var i=e.hasActiveCollision(this._cameraTriggerWrapper),o=t.areColliding(e,this._cameraTriggerWrapper);i&&!o?(e.disengageActiveCollision(this._cameraTriggerWrapper),e.trigger.onCameraExit&&e.trigger.onCameraExit()):!i&&o&&(e.engageCollision(this._cameraTriggerWrapper),e.trigger.onCameraEnter&&e.trigger.onCameraEnter())},t.prototype.checkCollisionAgainstOtherTriggers=function(e){for(var i in this._triggers)if(this._triggers.hasOwnProperty(i)&&i!=e.uuid&&this._triggers[i].trigger.enabled&&t.canTriggersCollide(e,this._triggers[i])){var o=e.hasActiveCollision(this._triggers[i]),n=t.areColliding(e,this._triggers[i]);o&&!n?t.disengageCollision(e,this._triggers[i]):!o&&n&&t.engageCollision(e,this._triggers[i])}},t.canTriggersCollide=function(t,e){return 0==t.trigger.triggeredByLayer||0!=(e.trigger.layer&t.trigger.triggeredByLayer)},t.areColliding=function(e,i){return e.getShape()instanceof j&&i.getShape()instanceof j?t.areCollidingAABB(e.getGlobalPosition(),e.getShape(),i.getGlobalPosition(),i.getShape()):e.getShape()instanceof q&&i.getShape()instanceof q?t.areCollidingSphere(e.getGlobalPosition(),e.getShape(),i.getGlobalPosition(),i.getShape()):e.getShape()instanceof j&&i.getShape()instanceof q?t.areCollidingAABBSphere(e.getGlobalPosition(),e.getShape(),i.getGlobalPosition(),i.getShape()):e.getShape()instanceof q&&i.getShape()instanceof j&&t.areCollidingAABBSphere(i.getGlobalPosition(),i.getShape(),e.getGlobalPosition(),e.getShape())},t.areCollidingAABB=function(e,i,o,n){var s=t.getBoxShapeValues(e,i),r=t.getBoxShapeValues(o,n);return s.min.x<=r.max.x&&s.max.x>=r.min.x&&s.min.y<=r.max.y&&s.max.y>=r.min.y&&s.min.z<=r.max.z&&s.max.z>=r.min.z},t.areCollidingSphere=function(t,e,i,o){return Vector3.DistanceSquared(t.add(e.position),i.add(o.position))<e.radius*e.radius+o.radius*o.radius},t.areCollidingAABBSphere=function(e,i,o,n){var s=t.getBoxShapeValues(e,i),r=o.add(n.position),a=n.radius,h=0;return r.x<s.min.x&&(h+=(s.min.x-r.x)*(s.min.x-r.x)),r.x>s.max.x&&(h+=(r.x-s.max.x)*(r.x-s.max.x)),r.y<s.min.y&&(h+=(s.min.y-r.y)*(s.min.y-r.y)),r.y>s.max.y&&(h+=(r.y-s.max.y)*(r.y-s.max.y)),r.z<s.min.z&&(h+=(s.min.z-r.z)*(s.min.z-r.z)),r.z>s.max.z&&(h+=(r.z-s.max.z)*(r.z-s.max.z)),h<a*a},t.getBoxShapeValues=function(t,e){var i=t.add(e.position);return{center:i,min:i.subtract(e.size.scale(.5)),max:i.add(e.size.scale(.5))}},t._instance=null,t}(),V=function(){function t(t){this.wasEnabled=!0,this._uuid=\"\",this._collidingWith={},this._isDebug=!1,this._debugEntity=null,this._entity=t,t&&(this._trigger=t.getComponent(M),this._uuid=t.uuid,this._isDebug=this._trigger.debugEnabled,this._isDebug&&this.addDebugEntity())}return Object.defineProperty(t.prototype,\"entity\",{get:function(){return this._entity},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"trigger\",{get:function(){return this._trigger},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,\"uuid\",{get:function(){return this._uuid},enumerable:!1,configurable:!0}),t.prototype.getGlobalPosition=function(){return this._entity?t.getEntityWorldPosition(this._entity):Vector3.Zero()},t.prototype.getShape=function(){return this._trigger.shape},t.prototype.isInEngine=function(){return null!=this._entity&&this._entity.isAddedToEngine()},t.prototype.getActiveCollisions=function(){var t=[];for(var e in this._collidingWith)this._collidingWith.hasOwnProperty(e)&&t.push(this._collidingWith[e]);return t},t.prototype.hasActiveCollision=function(t){return null!=this._collidingWith[t.uuid]&&null!=this._collidingWith[t.uuid]},t.prototype.disengageActiveCollision=function(t){delete this._collidingWith[t.uuid]},t.prototype.engageCollision=function(t){this._collidingWith[t.uuid]=t},t.prototype.isDebugging=function(){return this._isDebug},t.prototype.addDebugEntity=function(){if(t._debugMaterial||(t._debugMaterial=new Material,t._debugMaterial.alphaTest=.5),null==this._debugEntity){this._debugEntity=new Entity;var e=new Transform;if(this._debugEntity.addComponent(e),this._debugEntity.addComponent(t._debugMaterial),this.getShape()instanceof j)(i=new BoxShape).withCollisions=!1,this._debugEntity.addComponent(i),e.scale=this.getShape().size;if(this.getShape()instanceof q){var i;(i=new SphereShape).withCollisions=!1,this._debugEntity.addComponent(i);var o=this.getShape().radius;e.scale=new Vector3(o,o,o)}}engine.addEntity(this._debugEntity)},t.prototype.removeDebugEntity=function(){null!=this._debugEntity&&engine.removeEntity(this._debugEntity)},t.prototype.updateDebugEntity=function(){this._debugEntity&&(this._debugEntity.getComponent(Transform).position=this.getGlobalPosition().add(this.getShape().position))},t.getEntityWorldPosition=function(t){var e=t.hasComponent(Transform)?t.getComponent(Transform).position.clone():Vector3.Zero(),i=t.getParent();if(null!=i){var o=i.hasComponent(Transform)?i.getComponent(Transform).rotation:Quaternion.Identity;return this.getEntityWorldPosition(i).add(e.rotate(o))}return e},t._debugMaterial=null,t}(),Q=function(t){function e(e){var i=t.call(this)||this;return i._shape=e,i._uuid=\"cameraTrigger\",i}return i(e,t),e.prototype.getGlobalPosition=function(){return Camera.instance.position},e.prototype.getShape=function(){return this._shape},e.prototype.setShape=function(t){this._shape=t},e.prototype.isInEngine=function(){return!1},e.prototype.hasActiveCollision=function(t){return!1},e.prototype.disengageActiveCollision=function(t){},e.prototype.engageCollision=function(t){},e.prototype.isDebugging=function(){return!1},e}(V),M=function(){function t(t,e){this.enabled=!0,this.layer=0,this.triggeredByLayer=0,G.createAndAddToEngine(),this.shape=t,this.layer=e&&e.layer?e.layer:0,this.triggeredByLayer=e&&e.triggeredByLayer?e.triggeredByLayer:0,this.onTriggerEnter=e&&e.onTriggerEnter?e.onTriggerEnter:void 0,this.onTriggerExit=e&&e.onTriggerExit?e.onTriggerExit:void 0,this.onCameraEnter=e&&e.onCameraEnter?e.onCameraEnter:void 0,this.onCameraExit=e&&e.onCameraExit?e.onCameraExit:void 0,this._debugEnabled=!(!e||!e.enableDebug)&&e.enableDebug}return Object.defineProperty(t.prototype,\"debugEnabled\",{get:function(){return this._debugEnabled},enumerable:!1,configurable:!0}),t=o([Component(\"npcTriggerComponent\")],t)}(),j=function(t,e){this.size=t,this.position=e},q=function(t,e){this.radius=t,this.position=e},K=function(){function e(e,i){void 0===i&&(i=t.NPCLerpType.SMOOTH_PATH),this.origin=0,this.target=1,this.fraction=0,this.totalDuration=0,this.speed=[],this.loop=!1,this.type=t.NPCLerpType.SMOOTH_PATH,this.path=e,void 0!==i&&(this.type=i),J.createAndAddToEngine()}return e.prototype.setIndex=function(t){this.fraction=0,this.origin=t,this.target=t+1<this.path.length?t+1:0},e=o([Component(\"npclerpData\")],e)}(),Z=engine.getComponentGroup(K),J=function(){function e(){e._instance=this}return e.prototype.update=function(e){var i,o;try{for(var s=n(Z.entities),r=s.next();!r.done;r=s.next()){var a=r.value;if(a.state==t.NPCState.FOLLOWPATH){var h=a.getComponent(Transform),u=a.getComponent(K);if(void 0!==u.type&&u.type==t.NPCLerpType.RIGID_PATH)if(u.fraction<1)u.fraction+=e*u.speed[u.origin],h.position=Vector3.Lerp(u.path[u.origin],u.path[u.target],u.fraction);else{if(u.origin=u.target,u.target+=1,u.target>=u.path.length){if(!u.loop)return a.stopWalking(),u.onFinishCallback&&u.onFinishCallback(),void(u.fraction=1);u.target=0}else u.onReachedPointCallback&&u.onReachedPointCallback();u.fraction=0,h.lookAt(u.path[u.target])}else if(u.fraction+=e*u.speed[u.origin],u.fraction>=1){u.origin=u.target;var l=Math.max(1,Math.floor(u.fraction));if(u.target+=l,u.target>=u.path.length){if(!u.loop)return a.stopWalking(),u.onFinishCallback&&u.onFinishCallback(),void(u.fraction=1);u.target=0}else u.onReachedPointCallback&&u.onReachedPointCallback();u.fraction-=l,u.target<u.path.length&&h.lookAt(u.path[u.target])}u.target<u.path.length&&(h.position=Vector3.Lerp(u.path[u.origin],u.path[u.target],u.fraction))}}}catch(t){i={error:t}}finally{try{r&&!r.done&&(o=s.return)&&o.call(s)}finally{if(i)throw i.error}}},e.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new e,engine.addSystem(this._instance)),this._instance},e._instance=null,e}(),$=100,tt=function(){function t(t,e,i){this.NPCScript=[],this.isBubleOpen=!1,this.activeTextId=0,this.defaultSound=null,this.baseYOffset=2.5,this.baseYOffset=e||2.5,this.rootEntity=new Entity,this.rootEntity.addComponent(new Billboard(!1,!0,!1)),this.rootEntity.addComponent(new Transform),this.rootEntity.setParent(t),this.container=new Entity,this.container.addComponent(new Transform({position:new Vector3(-.1,this.baseYOffset,0)})),this.container.setParent(this.rootEntity),this.material=new BasicMaterial,this.material.texture=b,this.panel=new Entity,this.panel.addComponent(new Transform({scale:new Vector3(2,1,1)})),this.panel.setParent(this.container),this.panel.addComponent(new PlaneShape),this.panel.addComponent(this.material),this.panel.getComponent(PlaneShape).visible=!1,T(this.panel.getComponent(PlaneShape),v.bubbles.normal,1024,1024),this.text=new Entity,this.text.addComponent(new Transform({position:new Vector3(0,0,.05),rotation:Quaternion.Euler(0,180,0)})),this.text.addComponent(new TextShape(\"\")),this.text.setParent(this.container),this.text.getComponent(TextShape).textWrapping=!0,this.text.getComponent(TextShape).font=d,this.text.getComponent(TextShape).hTextAlign=\"center\",this.text.getComponent(TextShape).vTextAlign=\"center\",this.text.getComponent(TextShape).fontSize=1,this.text.getComponent(TextShape).color=Color3.Black(),this.text.getComponent(TextShape).visible=!1,this.soundEnt=new Entity,i&&(this.soundEnt.addComponent(new Transform),engine.addEntity(this.soundEnt),this.soundEnt.setParent(this.container),this.soundEnt.addComponent(new AudioSource(new AudioClip(i))),this.soundEnt.getComponent(AudioSource).volume=.5,this.defaultSound=i),et.createAndAddToEngine()}return t.prototype.openDialogWindow=function(t,e){this.NPCScript=t,this.activeTextId=e?\"number\"==typeof e?e:function(t,e){for(var i=0;i<t.length;i++)if(t[i].name&&t[i].name==e)return i;return 0}(t,e):0;var i=t[this.activeTextId]?t[this.activeTextId]:{text:\"\"};i.audio?(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(i.audio))),this.soundEnt.getComponent(AudioSource).volume=.5,this.soundEnt.getComponent(AudioSource).playOnce()):this.defaultSound&&(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound))),this.soundEnt.getComponent(AudioSource).playOnce()),this.text.getComponent(TextShape).fontSize=i.fontSize?i.fontSize:1,this.text.getComponent(Transform).position.y=i.offsetY?i.offsetY+0:0,this.text.getComponent(Transform).position.x=i.offsetX?i.offsetX:0,this.text.getComponent(TextShape).visible=!0,this.panel.getComponent(PlaneShape).visible=!0,this.text.getComponent(TextShape).value=\"\",i.text.length<$&&i.text.slice(0,$),et._instance.newText(this,i.text,this.activeTextId,i.timeOn?i.timeOn:void 0,i.typeSpeed?i.typeSpeed:void 0),this.adjustBubble(i.text.length),this.layoutDialogWindow(this.activeTextId),this.isBubleOpen=!0},t.prototype.adjustBubble=function(t){t<8?(T(this.panel.getComponent(PlaneShape),v.bubbles.short,1024,1024),this.panel.getComponent(Transform).scale.x=.58,this.panel.getComponent(Transform).scale.y=.42,this.container.getComponent(Transform).position.x=-.1,this.container.getComponent(Transform).position.y=this.baseYOffset+-.2,this.text.getComponent(TextShape).width=.7):t<25?(T(this.panel.getComponent(PlaneShape),v.bubbles.normal,1024,1024),this.panel.getComponent(Transform).scale.x=1.43,this.panel.getComponent(Transform).scale.y=.42,this.container.getComponent(Transform).position.x=-.5,this.container.getComponent(Transform).position.y=this.baseYOffset+-.2,this.text.getComponent(TextShape).width=1.5):t<50?(T(this.panel.getComponent(PlaneShape),v.bubbles.long,1024,1024),this.panel.getComponent(Transform).scale.x=2.485,this.panel.getComponent(Transform).scale.y=.765,this.container.getComponent(Transform).position.y=this.baseYOffset+0,this.container.getComponent(Transform).position.x=-.8,this.text.getComponent(TextShape).width=2):(T(this.panel.getComponent(PlaneShape),v.bubbles.huge,1024,1024),this.panel.getComponent(Transform).scale.x=2.485,this.panel.getComponent(Transform).scale.y=1.195,this.container.getComponent(Transform).position.y=this.baseYOffset+.2,this.container.getComponent(Transform).position.x=-.8,this.text.getComponent(TextShape).width=2)},t.prototype.next=function(){var t=this.NPCScript[this.activeTextId];t||(t=this.NPCScript[this.activeTextId-1]),t.triggeredByNext&&t.triggeredByNext(),t.isEndOfDialog?this.closeDialogWindow():(this.activeTextId++,(t=this.NPCScript[this.activeTextId]).text.length<$&&t.text.slice(0,$),this.text.getComponent(TextShape).value=\"\",this.adjustBubble(t.text.length),et._instance.newText(this,t.text,this.activeTextId,t.timeOn?t.timeOn:void 0,t.typeSpeed?t.typeSpeed:void 0),this.layoutDialogWindow(this.activeTextId))},t.prototype.layoutDialogWindow=function(t){var e=this.NPCScript[t]?this.NPCScript[t]:{text:\"\"},i=e.offsetY?e.offsetY+0:0;e.buttons&&e.buttons.length>=3?i+=50:e.buttons&&e.buttons.length>=1&&(i+=24),this.text.getComponent(TextShape).fontSize=e.fontSize?e.fontSize:1,this.text.getComponent(TextShape).visible=!0,this.text.getComponent(Transform).position.y=i,e.audio?(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(e.audio))),this.soundEnt.getComponent(AudioSource).volume=.5,this.soundEnt.getComponent(AudioSource).playOnce()):this.defaultSound&&(this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound))),this.soundEnt.getComponent(AudioSource).playOnce())},t.prototype.closeDialogWindow=function(){this.isBubleOpen&&(this.isBubleOpen=!1,this.text.getComponent(TextShape).value=\"\",this.text.getComponent(TextShape).visible=!1,this.panel.getComponent(PlaneShape).visible=!1)},t.prototype.closeDialogEndAll=function(){this.isBubleOpen&&(et._instance.Dialog==this&&(et._instance.done=!0,et._instance.Dialog=null),this.isBubleOpen=!1,this.text.getComponent(TextShape).value=\"\",this.text.getComponent(TextShape).visible=!1,this.panel.getComponent(PlaneShape).visible=!1)},t.prototype.skipDialogs=function(){if(this.isBubleOpen)for(;this.NPCScript[this.activeTextId];){if(this.NPCScript[this.activeTextId].triggeredByNext&&this.NPCScript[this.activeTextId].triggeredByNext(),this.NPCScript[this.activeTextId].isEndOfDialog)return void this.closeDialogWindow();this.activeTextId+=1}},t}(),et=function(){function t(){this.timer=0,this.speed=45,this.visibleChars=0,this.fullText=\"\",this.Text=null,this.textId=0,this.done=!0,this.showing=!1,this.timeOn=3,t._instance=this}return t.createAndAddToEngine=function(){return null==this._instance&&(this._instance=new t,engine.addSystem(this._instance)),this._instance},t.prototype.update=function(t){if(!this.done)if(this.timer+=t,this.showing)this.timer>this.timeOn&&(this.showing=!1,this.done=!0,this.timer=0,this.window.next());else if(this.timer>=2/this.speed){var e=Math.floor(this.timer/(1/this.speed));this.timer=0,this.visibleChars+=e,this.closeTag(e),this.visibleChars>=this.fullText.length&&(this.showing=!0,this.timer=0,this.visibleChars=this.fullText.length),this.Text&&(this.Text.value=this.fullText.substr(0,this.visibleChars))}},t.prototype.newText=function(t,e,i,o,n){if(t!=this.Dialog||i!=this.textId){var s=this.Dialog;this.Dialog=t,this.Text=this.Dialog.text.getComponent(TextShape),this.textId=i,s&&t!=s&&s.skipDialogs(),this.timer=0,this.done=!1,this.showing=!1,this.fullText=e,this.visibleChars=0,this.window=t,n&&n<=0?this.rush():this.speed=n||45,this.timeOn=o||3}},t.prototype.rush=function(){this.showing=!0,this.timer=0,this.visibleChars=this.fullText.length,this.Text&&(this.Text.value=this.fullText)},t.prototype.closeTag=function(t){if(0!=this.visibleChars&&0!=t){for(var e=!1,i=!1,o=this.visibleChars-t;o<this.visibleChars;o++)e?\">\"==this.fullText.substr(o,1)&&(i=!0):\"<\"==this.fullText.substr(o,1)&&(e=!0);if(e&&!i)for(;this.visibleChars<this.fullText.length&&\">\"!=this.fullText.substr(this.visibleChars-1,1);)this.visibleChars+=1}},t._instance=null,t}();var it=function(e){function o(i,o,n,r){var a=e.call(this)||this;a.introduced=!1,a.onWalkAway=null,a.inCooldown=!1,a.coolDownDuration=5,a.faceUser=!1,a.walkingAnim=null,a.walkingSpeed=2,a.bubbleHeight=2,a.addComponent(new GLTFShape(o)),a.addComponent(new Transform(i)),engine.addEntity(a),a.state=t.NPCState.STANDING,r&&r.noUI||(r&&r.portrait?a.dialog=new U(\"string\"==typeof r.portrait?{path:r.portrait}:r.portrait,!(!r||!r.darkUI)&&r.darkUI,r.dialogSound?r.dialogSound:void 0,r&&r.dialogCustomTheme?r.dialogCustomTheme:void 0):a.dialog=new U(void 0,!(!r||!r.darkUI)&&r.darkUI,r&&r.dialogSound?r.dialogSound:void 0,r&&r.dialogCustomTheme?r.dialogCustomTheme:void 0)),r&&r.textBubble&&(r&&r.bubbleHeight&&(a.bubbleHeight=r.bubbleHeight),a.bubble=new tt(a,a.bubbleHeight,r.dialogSound?r.dialogSound:void 0)),a.addComponent(new Animator),a.idleAnim=new AnimationState(r&&r.idleAnim?r.idleAnim:\"Idle\",{looping:!0}),a.getComponent(Animator).addClip(a.idleAnim),a.lastPlayedAnim=a.idleAnim,a.idleAnim.play(),r&&r.walkingAnim&&(a.walkingAnim=new AnimationState(r.walkingAnim,{looping:!0}),a.getComponent(Animator).addClip(a.walkingAnim)),a.onActivate=n,r&&r.onWalkAway&&(a.onWalkAway=r.onWalkAway),a.endAnimTimer=new Entity,engine.addEntity(a.endAnimTimer),a.closeDialogTimer=new Entity,engine.addEntity(a.closeDialogTimer),a.pauseWalkingTimer=new Entity,engine.addEntity(a.pauseWalkingTimer);var h=r&&r.onlyClickTrigger?ActionButton.POINTER:ActionButton.PRIMARY;a.addComponent(new OnPointerDown((function(t){a.inCooldown||a.dialog&&a.dialog.isDialogOpen||a.activate()}),{button:h,hoverText:r&&r.hoverText?r.hoverText:\"Talk\",showFeedback:!r||!r.onlyExternalTrigger})),r&&r.onlyExternalTrigger&&a.removeComponent(OnPointerDown);var u={};return(!r||r&&!r.continueOnWalkAway)&&(u.onCameraExit=function(){a.handleWalkAway()}),r&&(!r||r.onlyExternalTrigger||r.onlyClickTrigger||r.onlyETrigger)||(u.onCameraEnter=function(){a.inCooldown?log(a.name,\" in cooldown\"):a.dialog&&a.dialog.isDialogOpen||r&&r.onlyExternalTrigger||r&&r.onlyClickTrigger||a.activate()}),(u.onCameraEnter||u.onCameraExit)&&a.addComponent(new M(new q(r&&r.reactDistance?r.reactDistance:6,Vector3.Zero()),u)),r&&r.faceUser&&(a.addComponent(new s(!0,r.turningSpeed?r.turningSpeed:void 0)),a.faceUser=!0),r&&r.walkingSpeed&&(a.walkingSpeed=r.walkingSpeed),r&&r.coolDownDuration&&(a.coolDownDuration=r.coolDownDuration),r&&r.path&&(a.addComponent(new K(r.path?r.path:[],r.pathLerpType)),a.getComponent(K).loop=!0,a.followPath()),a}return i(o,e),o.prototype.activate=function(){var t=this;this.faceUser&&(this.getComponent(s).active=!0),this.inCooldown=!0,this.addComponentOrReplace(new w(this.coolDownDuration,(function(){t.inCooldown=!1}))),this.onActivate()},o.prototype.endInteraction=function(){this.faceUser&&(this.getComponent(s).active=!1),this.dialog&&this.dialog.isDialogOpen&&this.dialog.closeDialogWindow(),this.bubble&&this.bubble.isBubleOpen&&this.bubble.closeDialogWindow(),this.state=t.NPCState.STANDING},o.prototype.handleWalkAway=function(){this.state!=t.NPCState.FOLLOWPATH&&(this.endInteraction(),this.onWalkAway&&this.onWalkAway())},o.prototype.talk=function(e,i,o){var n=this;this.introduced=!0,this.state=t.NPCState.TALKING,this.closeDialogTimer.hasComponent(w)&&this.closeDialogTimer.removeComponent(w),this.bubble&&this.bubble.isBubleOpen&&this.bubble.closeDialogWindow(),this.dialog.openDialogWindow(e,i||0),o&&this.closeDialogTimer.addComponentOrReplace(new w(o,(function(){n.dialog.closeDialogWindow()})))},o.prototype.talkBubble=function(t,e){this.bubble||(this.bubble=new tt(this,this.bubbleHeight)),this.bubble.openDialogWindow(t,e||0)},o.prototype.playAnimation=function(t,e,i){var o=this;this.endAnimTimer.hasComponent(w)&&this.endAnimTimer.removeComponent(w);var n=this.getComponent(Animator).getClip(t);e&&(n.looping=!1,i&&this.endAnimTimer.addComponentOrReplace(new w(i,(function(){n.stop(),o.idleAnim&&(o.idleAnim.play(),o.lastPlayedAnim=o.idleAnim)})))),n.play(!0),this.lastPlayedAnim=n},o.prototype.changeIdleAnim=function(t,e){this.idleAnim=new AnimationState(t,{looping:!0}),this.getComponent(Animator).addClip(this.idleAnim),e&&(this.idleAnim.play(),this.lastPlayedAnim=this.idleAnim)},o.prototype.followPath=function(e){if(!this.hasComponent(K)){if(!e)return;this.addComponent(new K(e.path?e.path:[],e.pathLerpType))}this.faceUser&&(this.getComponent(s).active=!1);var i=this.getComponent(K);if(e){if(e.path)if(e.curve){var o=Curve3.CreateCatmullRomSpline(e.path,4*e.path.length,!!e.loop).getPoints();e.loop&&o.pop(),i.path=o}else i.path=e.path;null!=e.loop&&(i.loop=e.loop),null!=e.startingPoint&&i.setIndex(e.startingPoint),e.onFinishCallback&&(i.onFinishCallback=e.onFinishCallback),e.onReachedPointCallback&&(i.onReachedPointCallback=e.onReachedPointCallback)}var n=this.getComponent(Transform),r=n.position,a=i.path[i.origin];void 0===a&&log(\"WARNING npc.utils lerpOriginPath is null\",a,i.origin,i.target,i.path),(0==i.fraction&&a.subtract(r).lengthSquared()>.1||i.fraction>0&&r.subtract(a).normalize()==i.path[i.target].subtract(a).normalize())&&(i.path.splice(i.origin,0,r),i.fraction=0),void 0===i.path[i.target]&&log(\"npc.utils lerp.path[lerp.target] is null\",a,i.origin,i.target,i.path),n.lookAt(i.path[i.target]);for(var h=0,u=[],l=0;l<i.path.length-1;l++){var c;h+=c=Vector3.Distance(i.path[l],i.path[l+1]),u.push(c)}i.loop&&(h+=c=Vector3.Distance(i.path[i.path.length-1],i.path[0]),u.push(c));e&&e.totalDuration?i.totalDuration=e.totalDuration:e&&e.speed?i.totalDuration=h/e.speed:i.totalDuration||(i.totalDuration=h/this.walkingSpeed),i.speed=[];for(l=0;l<u.length;l++)i.speed.push(1/(u[l]/h*i.totalDuration));this.walkingAnim&&(this.endAnimTimer.hasComponent(w)&&this.endAnimTimer.removeComponent(w),this.walkingAnim.play(),this.lastPlayedAnim=this.walkingAnim),this.state=t.NPCState.FOLLOWPATH},o.prototype.stopWalking=function(e){var i=this;this.state=t.NPCState.STANDING,this.walkingAnim&&(this.idleAnim.play(),this.lastPlayedAnim=this.idleAnim),e&&this.pauseWalkingTimer.addComponentOrReplace(new w(e,(function(){i.dialog&&i.dialog.isDialogOpen||(i.lastPlayedAnim.stop(),i.walkingAnim&&(i.walkingAnim.play(),i.lastPlayedAnim=i.walkingAnim),i.endAnimTimer.hasComponent(w)&&i.endAnimTimer.removeComponent(w),i.state=t.NPCState.FOLLOWPATH)})))},o}(Entity);t.CustomDialogButton=F,t.DialogTypeInSystem=Y,t.DialogWindow=U,t.NPC=it,t.NPCDelay=w,t.NPCLerpData=K,t.NPCTriggerComponent=M,t.SFFont=p,t.SFHeavyFont=d,t.TrackUserFlag=s,t.TriggerBoxShape=j,t.TriggerSphereShape=q,t.canvas=u,t.darkTheme=m,t.lightTheme=f,Object.defineProperty(t,\"__esModule\",{value:!0})}));\n//# sourceMappingURL=index.js.map\n",
    "sha256": "131f58950e5a655e0b67790daf16d8bc7b64495926b438879e16121b719cd383"
  },
  {
    "path": "node_modules/@dcl/builder-hud/dist/index.js",
    "content": "define(\"@dcl/builder-hud\",[\"exports\",\"@decentraland/EnvironmentAPI\"],(function(t,i){\"use strict\";function e(t,i,e,n){return new(e||(e=Promise))((function(o,s){function a(t){try{r(n.next(t))}catch(t){s(t)}}function h(t){try{r(n.throw(t))}catch(t){s(t)}}function r(t){var i;t.done?o(t.value):(i=t.value,i instanceof e?i:new e((function(t){t(i)}))).then(a,h)}r((n=n.apply(t,i||[])).next())}))}function n(t,i){var e,n,o,s,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return s={next:h(0),throw:h(1),return:h(2)},\"function\"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function h(s){return function(h){return function(s){if(e)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(e=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=i.call(t,a)}catch(t){s=[6,t],n=0}finally{e=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,h])}}}var o=function(){function t(t,i,e){this.direction=t,this.mode=i,this.pos=e||0}return t=function(t,i,e,n){var o,s=arguments.length,a=s<3?i:null===n?n=Object.getOwnPropertyDescriptor(i,e):n;if(\"object\"==typeof Reflect&&\"function\"==typeof Reflect.decorate)a=Reflect.decorate(t,i,e,n);else for(var h=t.length-1;h>=0;h--)(o=t[h])&&(a=(s<3?o(a):s>3?o(i,e,a):o(i,e))||a);return s>3&&a&&Object.defineProperty(i,e,a),a}([Component(\"moving\")],t),t}(),s=engine.getComponentGroup(o),a=function(){function t(){this.positions=[]}return t.prototype.addCameraPosition=function(t){this.positions.push(t),log(this.positions)},t.prototype.update=function(){var t,i;try{for(var e=function(t){var i=\"function\"==typeof Symbol&&Symbol.iterator,e=i&&t[i],n=0;if(e)return e.call(t);if(t&&\"number\"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(i?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")}(s.entities),n=e.next();!n.done;n=e.next()){var a=n.value,h=a.getComponent(Transform).position,r=a.getComponent(o).direction;switch(a.getComponent(o).mode){case\"fixed\":var l=a.getComponent(Transform).position.clone(),c=a.getComponent(o).pos;Vector3.Distance(l,this.positions[c])<.05?a.removeComponent(o):a.getComponent(Transform).position=Vector3.Lerp(l,this.positions[c],.04);break;case\"free\":\"up\"==r&&h.y<150&&(h.y+=.1),\"down\"==r&&(h.y>.2?h.y-=.1:a.removeComponent(o)),\"forward\"==r&&(h.z+=.1),\"back\"==r&&(h.z>1?h.z-=.1:a.removeComponent(o)),\"right\"==r&&(h.x+=.1),\"left\"==r&&(h.x>1?h.x-=.1:a.removeComponent(o))}}}catch(i){t={error:i}}finally{try{n&&!n.done&&(i=e.return)&&i.call(e)}finally{if(t)throw t.error}}},t}(),h=function(){function t(){var t=this;this.isSetup=!1,this.entities=[],this.numEntities=0,this.selectedEntityIndex=-1,this.selectionPointerScale=1,this.selectionPointerElevation=1,this.newEntityScale=.1,this.modePOSITION=0,this.modeROTATION=1,this.modeSCALE=2,this.mode=this.modePOSITION,this.snap=0,this.snapPosScale=1,this.snapRot=90,this.uiMaximized=!1,this.engineEntities=[],this.showingColliders=!1,this.transparent=new Texture(\"https://lsnft.mypinata.cloud/ipfs/QmaqcRuouE6Tip9acZmjxMyBftEA5aHASRDjn8Bmad87Ld\"),this.scaffoldScale=new Vector3(1.2,1,1.2),this.transparentMat=new BasicMaterial,this.transparentMat.alphaTest=1,this.transparentMat.texture=this.transparent,this.scaffolding=new Entity,this.scaffolding.addComponent(new Transform({position:new Vector3(1,.3,1),scale:Vector3.Zero()})),engine.addEntity(this.scaffolding);var o=new Entity;o.addComponent(new Transform({position:new Vector3(-.5,1,-.5),scale:Vector3.One()})),o.setParent(this.scaffolding);var s=new Entity;s.addComponent(new BoxShape),s.addComponent(new Transform({position:new Vector3(2,0,.1),scale:new Vector3(4,.1,.1)})),s.setParent(o),s.getComponent(BoxShape).withCollisions=!1,s.addComponent(new Material),s.getComponent(Material).albedoColor=Color4.Red();var h=new Entity;h.addComponent(new TextShape(\"X\")),h.addComponent(new Transform({position:new Vector3(3,.5,.4)})),h.addComponent(new Billboard(!1,!0,!1)),h.setParent(o);var r=new Entity;r.addComponent(new BoxShape),r.addComponent(new Transform({position:new Vector3(.1,2,.1),scale:new Vector3(.1,4,.1)})),r.setParent(o),r.getComponent(BoxShape).withCollisions=!1,r.addComponent(new Material),r.getComponent(Material).albedoColor=Color4.Green();var c=new Entity;c.addComponent(new TextShape(\"Y\")),c.addComponent(new Transform({position:new Vector3(.5,3,.5)})),c.addComponent(new Billboard(!1,!0,!1)),c.setParent(o);var d=new Entity;d.addComponent(new BoxShape),d.addComponent(new Transform({position:new Vector3(.1,0,2),scale:new Vector3(.1,.1,4)})),d.setParent(o),d.addComponent(new Material),d.getComponent(BoxShape).withCollisions=!1,d.getComponent(Material).albedoColor=Color4.Blue();var u=new Entity;u.addComponent(new TextShape(\"Z\")),u.addComponent(new Transform({position:new Vector3(.4,1,4)})),u.addComponent(new Billboard(!1,!0,!1)),u.setParent(o),this.scaffloor=new Entity,this.scaffloor.addComponent(new PlaneShape),this.scaffloor.addComponent(new Transform({position:new Vector3(0,0,0),rotation:Quaternion.Euler(90,0,0),scale:Vector3.One()})),this.scaffloor.addComponent(new Material),engine.addEntity(this.scaffloor),this.scaffloor.setParent(this.scaffolding),this.leftWall=new Entity,this.leftWall.addComponent(new PlaneShape),this.leftWall.addComponent(new Transform({position:new Vector3(0,-4.5,.6),rotation:Quaternion.Euler(0,180,0),scale:Vector3.Zero()})),this.leftWall.addComponent(this.transparentMat),this.leftWall.setParent(this.scaffolding),this.rightWall=new Entity,this.rightWall.addComponent(new PlaneShape),this.rightWall.addComponent(new Transform({position:new Vector3(0,-4.5,-.6),rotation:Quaternion.Euler(0,180,0),scale:Vector3.Zero()})),this.rightWall.addComponent(this.transparentMat),this.rightWall.setParent(this.scaffolding),this.frontWall=new Entity,this.frontWall.addComponent(new PlaneShape),this.frontWall.addComponent(new Transform({position:new Vector3(.6,-4.5,0),rotation:Quaternion.Euler(0,270,0),scale:Vector3.Zero()})),this.frontWall.addComponent(this.transparentMat),this.frontWall.setParent(this.scaffolding),this.backWall=new Entity,this.backWall.addComponent(new PlaneShape),this.backWall.addComponent(new Transform({position:new Vector3(-.6,-4.5,0),rotation:Quaternion.Euler(0,270,0),scale:Vector3.One()})),this.backWall.addComponent(this.transparentMat),this.backWall.setParent(this.scaffolding),this.selectionPointer=new Entity,this.selectionPointer.addComponent(new PlaneShape),this.selectionPointer.getComponent(PlaneShape).withCollisions=!1,this.selectionPointer.addComponent(new BasicMaterial),this.selectionPointer.getComponent(BasicMaterial).texture=new Texture(\"https://lsnft.mypinata.cloud/ipfs/QmWbKQtJjsLjgDFinoH6fvmbUoetLZd7LanChC1R4QkA2e\"),this.selectionPointer.addComponent(new Transform({rotation:Quaternion.Euler(0,0,180),scale:Vector3.One()})),this.selectionPointer.addComponent(new Billboard(!1,!0,!1)),this.setupUI(),executeTask((function(){return e(t,void 0,void 0,(function(){return n(this,(function(t){switch(t.label){case 0:return[4,i.isPreviewMode()];case 1:return t.sent()?(log(\"in preview mode\"),l.uiMinimizedContainer.visible=!0):(log(\"not in preview mode\"),l.uiMinimizedContainer.visible=!1,l.uiMaximizedContainer.visible=!1,engine.removeEntity(this.selectionPointer)),[2]}}))}))})),this.unsavedContainer=new UIContainerRect(this.uiMaximizedContainer),this.unsavedContainer.hAlign=\"center\",this.unsavedContainer.vAlign=\"center\",this.unsavedContainer.width=160,this.unsavedContainer.height=20,this.unsavedContainer.positionY=225,this.unsavedContainer.positionX=0,this.unsavedContainer.color=Color4.Red(),this.unsavedContainer.visible=!1;var f=new UIText(this.unsavedContainer);f.hAlign=\"center\",f.vAlign=\"center\",f.positionY=0,f.positionX=0,f.height=10,f.fontSize=12,f.hTextAlign=\"center\",f.value=\"** Unsaved Changes **\",this.movingSystem=new a,engine.addSystem(this.movingSystem)}return t.prototype.showInProduction=function(){l.uiMinimizedContainer.visible=!0,engine.addEntity(this.selectionPointer)},t.prototype.hideInProduction=function(){l.uiMinimizedContainer.visible=!1,l.uiMaximizedContainer.visible=!1,engine.removeEntity(this.selectionPointer)},t.prototype.setDefaultParent=function(t){this.defaultParent=t},t.prototype.setupUI=function(){return e(this,void 0,void 0,(function(){var t,i,e,o,s=this;return n(this,(function(n){return this.isSetup=!0,\"https://lsnft.mypinata.cloud/ipfs/QmYyDWc67svskJWxQrZNJxjwNsvsXyG9dvVzXvJtYtmgAr\",t=new Texture(\"https://lsnft.mypinata.cloud/ipfs/QmYyDWc67svskJWxQrZNJxjwNsvsXyG9dvVzXvJtYtmgAr\"),this.canvas=new UICanvas,this.canvas.hAlign=\"center\",this.canvas.vAlign=\"bottom\",this.uiMinimizedContainer=new UIContainerRect(this.canvas),this.uiMinimizedContainer.hAlign=\"right\",this.uiMinimizedContainer.vAlign=\"bottom\",this.uiMinimizedContainer.width=70,this.uiMinimizedContainer.height=80,this.uiMinimizedContainer.positionY=100,this.uiMinimizedContainer.positionX=0,this.uiMinimizedContainer.color=new Color4(0,0,0,0),this.uiMinimizedContainer.visible=!1,this.maximizeButton=new UIImage(this.uiMinimizedContainer,t),this.maximizeButton.sourceLeft=826,this.maximizeButton.sourceTop=544,this.maximizeButton.sourceWidth=74,this.maximizeButton.sourceHeight=74,this.maximizeButton.hAlign=\"right\",this.maximizeButton.vAlign=\"bottom\",this.maximizeButton.positionX=-15,this.maximizeButton.positionY=30,this.maximizeButton.width=40,this.maximizeButton.height=40,this.maximizeButton.isPointerBlocker=!0,this.maximizeButton.onClick=new OnClick((function(){s.maximizeUI()})),this.uiMaximizedContainer=new UIContainerRect(this.canvas),this.uiMaximizedContainer.hAlign=\"right\",this.uiMaximizedContainer.vAlign=\"bottom\",this.uiMaximizedContainer.width=160,this.uiMaximizedContainer.height=430,this.uiMaximizedContainer.positionX=0,this.uiMaximizedContainer.positionY=100,this.uiMaximizedContainer.color=new Color4(0,0,0,.75),(i=new UIImage(this.uiMaximizedContainer,t)).sourceLeft=826,i.sourceTop=184,i.sourceWidth=74,i.sourceHeight=74,i.hAlign=\"right\",i.vAlign=\"top\",i.positionX=-60,i.positionY=-10,i.width=40,i.height=40,i.isPointerBlocker=!0,i.onClick=new OnClick((function(){s.toggleLift.sourceLeft=503,s.toggleColliders(!0),engine.addSystem(new c(i))})),this.toggleLift=new UIImage(this.uiMaximizedContainer,t),this.toggleLift.sourceLeft=584,this.toggleLift.sourceTop=544,this.toggleLift.sourceWidth=74,this.toggleLift.sourceHeight=74,this.toggleLift.hAlign=\"right\",this.toggleLift.vAlign=\"top\",this.toggleLift.positionX=-15,this.toggleLift.positionY=-10,this.toggleLift.width=40,this.toggleLift.height=40,this.toggleLift.isPointerBlocker=!0,this.toggleLift.onClick=new OnClick((function(){s.toggleColliders(!1),engine.addSystem(new c(s.toggleLift))})),this.toggleCamera=new UIImage(this.uiMaximizedContainer,t),this.toggleCamera.sourceLeft=16,this.toggleCamera.sourceTop=94,this.toggleCamera.sourceWidth=74,this.toggleCamera.sourceHeight=74,this.toggleCamera.hAlign=\"right\",this.toggleCamera.vAlign=\"top\",this.toggleCamera.positionX=-105,this.toggleCamera.positionY=-10,this.toggleCamera.width=40,this.toggleCamera.height=40,this.toggleCamera.isPointerBlocker=!0,this.toggleCamera.onClick=new OnClick((function(){s.toggleCameraOptions(),engine.addSystem(new c(s.toggleCamera))})),this.toggleCamera.visible=!1,this.scaffoldB=new UIImage(this.uiMaximizedContainer,t),this.scaffoldB.sourceLeft=340,this.scaffoldB.sourceTop=544,this.scaffoldB.sourceWidth=74,this.scaffoldB.sourceHeight=74,this.scaffoldB.hAlign=\"right\",this.scaffoldB.vAlign=\"bottom\",this.scaffoldB.positionX=-105,this.scaffoldB.positionY=335,this.scaffoldB.width=40,this.scaffoldB.height=40,this.scaffoldB.isPointerBlocker=!0,this.scaffoldB.onClick=new OnClick((function(){s.moveScaffold(\"q\"),engine.addSystem(new c(s.scaffoldB))})),this.scaffoldU=new UIImage(this.uiMaximizedContainer,t),this.scaffoldU.sourceLeft=178,this.scaffoldU.sourceTop=544,this.scaffoldU.sourceWidth=74,this.scaffoldU.sourceHeight=74,this.scaffoldU.hAlign=\"right\",this.scaffoldU.vAlign=\"bottom\",this.scaffoldU.positionX=-60,this.scaffoldU.positionY=335,this.scaffoldU.width=40,this.scaffoldU.height=40,this.scaffoldU.isPointerBlocker=!0,this.scaffoldU.onClick=new OnClick((function(){s.moveScaffold(\"w\"),engine.addSystem(new c(s.scaffoldU))})),this.scaffoldF=new UIImage(this.uiMaximizedContainer,t),this.scaffoldF.sourceLeft=422,this.scaffoldF.sourceTop=544,this.scaffoldF.sourceWidth=74,this.scaffoldF.sourceHeight=74,this.scaffoldF.hAlign=\"right\",this.scaffoldF.vAlign=\"bottom\",this.scaffoldF.positionX=-15,this.scaffoldF.positionY=335,this.scaffoldF.width=40,this.scaffoldF.height=40,this.scaffoldF.isPointerBlocker=!0,this.scaffoldF.onClick=new OnClick((function(){s.moveScaffold(\"e\"),engine.addSystem(new c(s.scaffoldF))})),this.scaffoldL=new UIImage(this.uiMaximizedContainer,t),this.scaffoldL.sourceLeft=16,this.scaffoldL.sourceTop=544,this.scaffoldL.sourceWidth=74,this.scaffoldL.sourceHeight=74,this.scaffoldL.hAlign=\"right\",this.scaffoldL.vAlign=\"bottom\",this.scaffoldL.positionX=-105,this.scaffoldL.positionY=290,this.scaffoldL.width=40,this.scaffoldL.height=40,this.scaffoldL.isPointerBlocker=!0,this.scaffoldL.onClick=new OnClick((function(){s.moveScaffold(\"a\"),engine.addSystem(new c(s.scaffoldL))})),this.scaffoldD=new UIImage(this.uiMaximizedContainer,t),this.scaffoldD.sourceLeft=259,this.scaffoldD.sourceTop=544,this.scaffoldD.sourceWidth=74,this.scaffoldD.sourceHeight=74,this.scaffoldD.hAlign=\"right\",this.scaffoldD.vAlign=\"bottom\",this.scaffoldD.positionX=-60,this.scaffoldD.positionY=290,this.scaffoldD.width=40,this.scaffoldD.height=40,this.scaffoldD.isPointerBlocker=!0,this.scaffoldD.onClick=new OnClick((function(){s.moveScaffold(\"s\"),engine.addSystem(new c(s.scaffoldD))})),this.scaffoldR=new UIImage(this.uiMaximizedContainer,t),this.scaffoldR.sourceLeft=97,this.scaffoldR.sourceTop=544,this.scaffoldR.sourceWidth=74,this.scaffoldR.sourceHeight=74,this.scaffoldR.hAlign=\"right\",this.scaffoldR.vAlign=\"bottom\",this.scaffoldR.positionX=-15,this.scaffoldR.positionY=290,this.scaffoldR.width=40,this.scaffoldR.height=40,this.scaffoldR.isPointerBlocker=!0,this.scaffoldR.onClick=new OnClick((function(){s.moveScaffold(\"d\"),engine.addSystem(new c(s.scaffoldR))})),this.displayName=new UIText(this.uiMaximizedContainer),this.displayName.hAlign=\"center\",this.displayName.vAlign=\"top\",this.displayName.positionY=-180,this.displayName.positionX=0,this.displayName.height=10,this.displayName.fontSize=12,this.displayName.hTextAlign=\"center\",(e=new UIText(this.uiMaximizedContainer)).hAlign=\"center\",e.vAlign=\"top\",e.positionY=-160,e.positionX=0,e.height=10,e.fontSize=12,e.hTextAlign=\"center\",e.value=\"Entity Label\",this.displayPRS=new UIText(this.uiMaximizedContainer),this.displayPRS.hAlign=\"center\",this.displayPRS.vAlign=\"top\",this.displayPRS.positionY=-200,this.displayPRS.positionX=0,this.displayPRS.height=10,this.displayPRS.fontSize=12,this.displayPRS.hTextAlign=\"center\",this.displayPRS.value=\"(0,0,0)\",this.scaffoldTitle=new UIText(this.uiMaximizedContainer),this.scaffoldTitle.hAlign=\"center\",this.scaffoldTitle.vAlign=\"top\",this.scaffoldTitle.positionY=-25,this.scaffoldTitle.positionX=-45,this.scaffoldTitle.height=10,this.scaffoldTitle.fontSize=8,this.scaffoldTitle.hTextAlign=\"center\",this.scaffoldTitle.value=\"Scaffold\",this.selectPreviousButton=new UIImage(this.uiMaximizedContainer,t),this.selectPreviousButton.sourceLeft=16,this.selectPreviousButton.sourceTop=184,this.selectPreviousButton.sourceWidth=74,this.selectPreviousButton.sourceHeight=74,this.selectPreviousButton.hAlign=\"right\",this.selectPreviousButton.vAlign=\"bottom\",this.selectPreviousButton.positionX=-105,this.selectPreviousButton.positionY=30,this.selectPreviousButton.width=40,this.selectPreviousButton.height=40,this.selectPreviousButton.isPointerBlocker=!0,this.selectPreviousButton.onClick=new OnClick((function(){s.selectPrevious(),engine.addSystem(new c(s.selectPreviousButton))})),this.selectNextButton=new UIImage(this.uiMaximizedContainer,t),this.selectNextButton.sourceLeft=97,this.selectNextButton.sourceTop=184,this.selectNextButton.sourceWidth=74,this.selectNextButton.sourceHeight=74,this.selectNextButton.hAlign=\"right\",this.selectNextButton.vAlign=\"bottom\",this.selectNextButton.positionX=-60,this.selectNextButton.positionY=30,this.selectNextButton.width=40,this.selectNextButton.height=40,this.selectNextButton.isPointerBlocker=!0,this.selectNextButton.onClick=new OnClick((function(){s.selectNext(),engine.addSystem(new c(s.selectNextButton))})),this.saveButton=new UIImage(this.uiMaximizedContainer,t),this.saveButton.sourceLeft=745,this.saveButton.sourceTop=184,this.saveButton.sourceWidth=74,this.saveButton.sourceHeight=74,this.saveButton.hAlign=\"right\",this.saveButton.vAlign=\"bottom\",this.saveButton.positionX=-15,this.saveButton.positionY=75,this.saveButton.width=40,this.saveButton.height=40,this.saveButton.isPointerBlocker=!0,this.saveButton.onClick=new OnClick((function(){s.dump(),engine.addSystem(new c(s.saveButton))})),this.qButton=new UIImage(this.uiMaximizedContainer,t),this.qButton.sourceLeft=340,this.qButton.sourceTop=544,this.qButton.sourceWidth=74,this.qButton.sourceHeight=74,this.qButton.hAlign=\"right\",this.qButton.vAlign=\"bottom\",this.qButton.positionX=-105,this.qButton.positionY=165,this.qButton.width=40,this.qButton.height=40,this.qButton.isPointerBlocker=!0,this.qButton.onClick=new OnClick((function(t){s.adjustTransform(\"q\"),engine.addSystem(new c(s.qButton))})),this.wButton=new UIImage(this.uiMaximizedContainer,t),this.wButton.sourceLeft=178,this.wButton.sourceTop=544,this.wButton.sourceWidth=74,this.wButton.sourceHeight=74,this.wButton.hAlign=\"right\",this.wButton.vAlign=\"bottom\",this.wButton.positionX=-60,this.wButton.positionY=165,this.wButton.width=40,this.wButton.height=40,this.wButton.isPointerBlocker=!0,this.wButton.onClick=new OnClick((function(){s.adjustTransform(\"w\"),engine.addSystem(new c(s.wButton))})),this.eButton=new UIImage(this.uiMaximizedContainer,t),this.eButton.sourceLeft=422,this.eButton.sourceTop=544,this.eButton.sourceWidth=74,this.eButton.sourceHeight=74,this.eButton.hAlign=\"right\",this.eButton.vAlign=\"bottom\",this.eButton.positionX=-15,this.eButton.positionY=165,this.eButton.width=40,this.eButton.height=40,this.eButton.isPointerBlocker=!0,this.eButton.onClick=new OnClick((function(){s.adjustTransform(\"e\"),engine.addSystem(new c(s.eButton))})),this.aButton=new UIImage(this.uiMaximizedContainer,t),this.aButton.sourceLeft=16,this.aButton.sourceTop=544,this.aButton.sourceWidth=74,this.aButton.sourceHeight=74,this.aButton.hAlign=\"right\",this.aButton.vAlign=\"bottom\",this.aButton.positionX=-105,this.aButton.positionY=120,this.aButton.width=40,this.aButton.height=40,this.aButton.isPointerBlocker=!0,this.aButton.onClick=new OnClick((function(){s.adjustTransform(\"a\"),engine.addSystem(new c(s.aButton))})),this.sButton=new UIImage(this.uiMaximizedContainer,t),this.sButton.sourceLeft=259,this.sButton.sourceTop=544,this.sButton.sourceWidth=74,this.sButton.sourceHeight=74,this.sButton.hAlign=\"right\",this.sButton.vAlign=\"bottom\",this.sButton.positionX=-60,this.sButton.positionY=120,this.sButton.width=40,this.sButton.height=40,this.sButton.isPointerBlocker=!0,this.sButton.onClick=new OnClick((function(){s.adjustTransform(\"s\"),engine.addSystem(new c(s.sButton))})),this.dButton=new UIImage(this.uiMaximizedContainer,t),this.dButton.sourceLeft=97,this.dButton.sourceTop=544,this.dButton.sourceWidth=74,this.dButton.sourceHeight=74,this.dButton.hAlign=\"right\",this.dButton.vAlign=\"bottom\",this.dButton.positionX=-15,this.dButton.positionY=120,this.dButton.width=40,this.dButton.height=40,this.dButton.isPointerBlocker=!0,this.dButton.onClick=new OnClick((function(){s.adjustTransform(\"d\"),engine.addSystem(new c(s.dButton))})),this.modeButton=new UIImage(this.uiMaximizedContainer,t),this.modeButton.sourceLeft=259,this.modeButton.sourceTop=94,this.modeButton.sourceWidth=74,this.modeButton.sourceHeight=74,this.modeButton.hAlign=\"right\",this.modeButton.vAlign=\"bottom\",this.modeButton.positionX=-105,this.modeButton.positionY=75,this.modeButton.width=40,this.modeButton.height=40,this.modeButton.isPointerBlocker=!0,this.modeButton.onClick=new OnClick((function(){s.mode+=1,s.mode>s.modeSCALE&&(s.mode=s.modePOSITION),s.snap=0,s.setSnaps(),s.applyModeAndSnapLabels(),engine.addSystem(new c(s.modeButton))})),this.modeLabel=new UIText(this.modeButton),this.modeLabel.color=Color4.White(),this.modeLabel.hAlign=\"center\",this.modeLabel.vAlign=\"bottom\",this.modeLabel.paddingTop=0,this.modeLabel.paddingBottom=12,this.modeLabel.positionX=-30,this.modeLabel.paddingLeft=0,this.modeLabel.fontSize=12,this.modeLabel.isPointerBlocker=!1,this.modeLabel.hTextAlign=\"center\",this.snapButton=new UIImage(this.uiMaximizedContainer,t),this.snapButton.sourceLeft=259,this.snapButton.sourceTop=93,this.snapButton.sourceWidth=74,this.snapButton.sourceHeight=74,this.snapButton.hAlign=\"right\",this.snapButton.vAlign=\"bottom\",this.snapButton.positionX=-60,this.snapButton.positionY=75,this.snapButton.width=40,this.snapButton.height=40,this.snapButton.isPointerBlocker=!0,this.snapButton.onClick=new OnClick((function(){s.snap+=1,s.snap>3&&(s.snap=0),s.setSnaps(),s.applyModeAndSnapLabels(),engine.addSystem(new c(s.snapButton))})),this.snapLabel=new UIText(this.snapButton),this.snapLabel.color=Color4.White(),this.snapLabel.hAlign=\"right\",this.snapLabel.vAlign=\"bottom\",this.snapLabel.positionX=-30,this.snapLabel.paddingTop=0,this.snapLabel.paddingBottom=12,this.snapLabel.paddingLeft=0,this.snapLabel.fontSize=12,this.snapLabel.hTextAlign=\"center\",this.snapLabel.isPointerBlocker=!1,this.applyModeAndSnapLabels(!0),this.minimizeButton=new UIImage(this.uiMaximizedContainer,t),this.minimizeButton.sourceLeft=908,this.minimizeButton.sourceTop=544,this.minimizeButton.sourceWidth=74,this.minimizeButton.sourceHeight=74,this.minimizeButton.hAlign=\"right\",this.minimizeButton.vAlign=\"bottom\",this.minimizeButton.positionX=-15,this.minimizeButton.positionY=30,this.minimizeButton.width=40,this.minimizeButton.height=40,this.minimizeButton.isPointerBlocker=!0,this.minimizeButton.onClick=new OnClick((function(){s.minimizeUI(),engine.addSystem(new c(s.minimizeButton))})),(o=new UIText(this.uiMaximizedContainer)).value=\"Builder HUD\",o.color=Color4.White(),o.hAlign=\"center\",o.vAlign=\"bottom\",o.paddingTop=0,o.paddingBottom=5,o.paddingLeft=15,o.fontSize=12,o.isPointerBlocker=!1,this.minimizeUI(),[2]}))}))},t.prototype.setSnaps=function(){switch(this.snap){case 0:this.snapPosScale=1,this.snapRot=90;break;case 1:this.snapPosScale=.1,this.snapRot=15;break;case 2:this.snapPosScale=.01,this.snapRot=5;break;case 3:this.snapPosScale=.001,this.snapRot=1}},t.prototype.applyModeAndSnapLabels=function(t){switch(this.mode){case this.modePOSITION:this.modeLabel.value=\"P\";break;case this.modeROTATION:this.modeLabel.value=\"R\";break;case this.modeSCALE:this.modeLabel.value=\"S\";break;default:this.modeLabel.value=\"ERR\"}switch(!t&&this.updateDisplayPRS(),this.snap){case 0:this.mode==this.modeROTATION?this.snapLabel.value=\"90\":this.snapLabel.value=\"1\";break;case 1:this.mode==this.modeROTATION?this.snapLabel.value=\"15\":this.snapLabel.value=\"0.1\";break;case 2:this.mode==this.modeROTATION?this.snapLabel.value=\"5\":this.snapLabel.value=\"0.01\";break;case 3:this.mode==this.modeROTATION?this.snapLabel.value=\"1\":this.snapLabel.value=\"0.001\";break;default:this.snapLabel.value=\"ERR\"}},t.prototype.countDecimals=function(t){return Math.floor(t)===t?0:t.toString().split(\".\")[1].length||0},t.prototype.updateDisplayPRS=function(){switch(this.mode){case this.modePOSITION:this.displayPRS.value=\"POS: (\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).position.x.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).position.y.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).position.z.toFixed(this.countDecimals(this.snapPosScale))+\")\";break;case this.modeROTATION:this.displayPRS.value=\"ROT: (\"+Math.ceil(this.entities[this.selectedEntityIndex].entity.getComponent(Transform).rotation.eulerAngles.x)+\",\"+Math.ceil(this.entities[this.selectedEntityIndex].entity.getComponent(Transform).rotation.eulerAngles.y)+\",\"+Math.ceil(this.entities[this.selectedEntityIndex].entity.getComponent(Transform).rotation.eulerAngles.z)+\")\";break;case this.modeSCALE:this.displayPRS.value=\"SCL: (\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).scale.x.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).scale.y.toFixed(this.countDecimals(this.snapPosScale))+\",\"+this.entities[this.selectedEntityIndex].entity.getComponent(Transform).scale.z.toFixed(this.countDecimals(this.snapPosScale))+\")\"}},t.prototype.maximizeUI=function(){this.uiMinimizedContainer.visible=!1,this.uiMaximizedContainer.visible=!0,this.uiMaximized=!0,this.selectedEntityIndex>=0&&this.numEntities>0&&engine.addEntity(this.selectionPointer),this.mode=this.modePOSITION,this.applyModeAndSnapLabels(),this.displayName.value=this.entities[this.selectedEntityIndex].entity.name,this.updateDisplayPRS(),this.scaffolding.getComponent(Transform).scale=this.scaffoldScale},t.prototype.minimizeUI=function(){this.uiMaximizedContainer.visible=!1,this.uiMinimizedContainer.visible=!0,this.uiMaximized=!1,this.selectedEntityIndex>=0&&this.numEntities>0&&engine.removeEntity(this.selectionPointer),this.scaffolding.getComponent(Transform).scale=Vector3.Zero()},t.prototype.showUI=function(){this.canvas.visible=!0,this.canvas.isPointerBlocker=!0},t.prototype.hideUI=function(){this.canvas.visible=!1,this.canvas.isPointerBlocker=!1},t.prototype.updateSelectionPointerPOS=function(t){var i=t.position.clone();this.selectionPointer.getComponent(Transform).position=new Vector3(i.x,i.y+this.selectionPointerElevation,i.z)},t.prototype.selectEntity=function(t){this.selectedEntityIndex=t,null!=this.entities[t].entity&&(this.displayName.value=this.entities[this.selectedEntityIndex].entity.name,this.updateSelectionPointerPOS(this.entities[t].entity.getComponent(Transform)))},t.prototype.selectPrevious=function(){this.selectedEntityIndex>0&&this.selectEntity(this.selectedEntityIndex-1),this.updateDisplayPRS()},t.prototype.selectNext=function(){this.selectedEntityIndex<this.numEntities-1&&this.selectEntity(this.selectedEntityIndex+1),this.updateDisplayPRS()},t.prototype.discardSelected=function(){log(\"Discard Selected Entity isn't implemented at this time.\")},t.prototype.toggleCameraOptions=function(){this.movingSystem.addCameraPosition(new Vector3(8,8,8)),log(this.movingSystem.positions),this.scaffolding.addComponent(new o(\"\",\"fixed\",0))},t.prototype.toggleColliders=function(t){584==this.toggleLift.sourceLeft?(this.toggleLift.sourceLeft=503,this.scaffloor.getComponent(Material).albedoColor=new Color4(.97,.27,.34),this.backWall.getComponent(Transform).scale=this.scaffoldScale,this.backWall.getComponent(Transform).position=new Vector3(-.6,1.5,0),this.frontWall.getComponent(Transform).scale=this.scaffoldScale,this.frontWall.getComponent(Transform).position=new Vector3(.6,1.5,0),this.leftWall.getComponent(Transform).scale=this.scaffoldScale,this.leftWall.getComponent(Transform).position=new Vector3(0,1.5,.6),this.rightWall.getComponent(Transform).scale=this.scaffoldScale,this.rightWall.getComponent(Transform).position=new Vector3(0,1.5,-.6)):(this.toggleLift.sourceLeft=584,this.backWall.getComponent(Transform).scale=Vector3.Zero(),this.frontWall.getComponent(Transform).scale=Vector3.Zero(),this.leftWall.getComponent(Transform).scale=Vector3.Zero(),this.rightWall.getComponent(Transform).scale=Vector3.Zero(),this.rightWall.getComponent(Transform).position=new Vector3(0,-41.5,-.6),this.backWall.getComponent(Transform).position=new Vector3(0,-4.5,-.6),this.frontWall.getComponent(Transform).position=new Vector3(0,-4.5,-.6),this.leftWall.getComponent(Transform).position=new Vector3(0,-4.5,-.6),this.scaffloor.getComponent(Material).albedoColor=Color4.White()),t&&(this.scaffolding.getComponent(Transform).position=new Vector3(1,.3,1))},t.prototype.moveScaffold=function(t){var i=this.scaffolding.getComponent(Transform);if(this.mode===this.modePOSITION)switch(i.position,t){case\"a\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"left\",\"free\"));break;case\"s\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"down\",\"free\"));break;case\"d\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"right\",\"free\"));break;case\"q\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"back\",\"free\"));break;case\"w\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"up\",\"free\"));break;case\"e\":this.scaffolding.hasComponent(o)?this.scaffolding.removeComponent(o):this.scaffolding.addComponent(new o(\"forward\",\"free\"))}},t.prototype.adjustTransform=function(t){this.unsavedContainer.visible=!0;var i=this.entities[this.selectedEntityIndex].entity.getComponent(Transform);switch(this.mode){case this.modePOSITION:var e=i.position;switch(t){case\"a\":e.x-=this.snapPosScale;break;case\"s\":e.y-=this.snapPosScale;break;case\"d\":e.x+=this.snapPosScale;break;case\"q\":e.z-=this.snapPosScale;break;case\"w\":e.y+=this.snapPosScale;break;case\"e\":e.z+=this.snapPosScale}this.updateSelectionPointerPOS(i);break;case this.modeROTATION:switch(t){case\"a\":i.rotate(Vector3.Left(),-this.snapRot);break;case\"s\":i.rotate(Vector3.Up(),this.snapRot);break;case\"d\":i.rotate(Vector3.Left(),this.snapRot);break;case\"q\":i.rotate(Vector3.Forward(),-this.snapRot);break;case\"w\":i.rotate(Vector3.Up(),-this.snapRot);break;case\"e\":i.rotate(Vector3.Forward(),this.snapRot)}break;case this.modeSCALE:var n=i.scale;switch(t){case\"a\":n.x-=this.snapPosScale;break;case\"s\":n.y-=this.snapPosScale;break;case\"d\":n.x+=this.snapPosScale;break;case\"q\":n.z-=this.snapPosScale;break;case\"w\":n.y+=this.snapPosScale;break;case\"e\":n.z+=this.snapPosScale}}this.updateDisplayPRS()},t.prototype.attachToEntity=function(t,i){return void 0===i&&(i=!0),e(this,void 0,void 0,(function(){return n(this,(function(e){return null==t?log(\"BuilderHUD attachToEntity called with a null entity\"):l.isSetup&&(this.entities[this.numEntities]={entity:t,transform:t.getComponent(Transform),preexisting:i},i?(this.selectedEntityIndex=-1)&&this.selectEntity(0):this.selectEntity(this.numEntities),this.numEntities++),[2]}))}))},t.prototype.newEntity=function(){var t=Camera.instance,i=t.rotation.eulerAngles.y;i>=180?i-=180:i+=180;var e=0,n=0,o=0,s=1,a=1,h=1;if(null!=this.defaultParent){var r=this.defaultParent.getComponent(Transform);e=r.position.x,n=r.position.y,o=r.position.z,r.rotation.eulerAngles.x,r.rotation.eulerAngles.y,r.rotation.eulerAngles.z,s=r.scale.x,a=r.scale.y,h=r.scale.z}var l=new Transform({position:new Vector3((t.position.x-e)/s,(0-n)/a,(t.position.z-o)/h),rotation:Quaternion.Euler(0,0,0),scale:new Vector3(this.newEntityScale/s,this.newEntityScale/a,this.newEntityScale/h)});l.rotate(Vector3.Up(),-i);var c=new Entity;if(c.name=\"Entity\"+this.numEntities,c.addComponent(l),null==this.newEntityShape)try{this.newEntityShape=new GLTFShape(\"models/xyz/xyzLeftHand.glb\")}catch(c){this.newEntityShape=new BoxShape,(new Material).albedoColor=Color3.Green()}c.addComponent(this.newEntityShape),null!=this.defaultParent&&c.setParent(this.defaultParent),engine.addEntity(c),this.attachToEntity(c,!1)},t.prototype.round=function(t){return Math.floor(1e3*(t+49e-5))/1e3},t.prototype.dump=function(){for(var t in this.unsavedContainer.visible=!1,log(\"--------------- BuilderHUD entities -------------\"),this.entities){var i=null==this.entities[t].entity.name?\"Existing\":\"\"+this.entities[t].entity.name,e=this.entities[t].transform,n=e.position,o=e.rotation.eulerAngles,s=e.scale,a=\"position: new Vector3(\"+this.round(n.x)+\",\"+this.round(n.y)+\",\"+this.round(n.z)+\"), rotation: Quaternion.Euler(\"+this.round(o.x)+\",\"+this.round(o.y)+\",\"+this.round(o.z)+\"), scale: new Vector3(\"+this.round(s.x)+\",\"+this.round(s.y)+\",\"+this.round(s.z)+\")\";log(i+\" {\"+a+\"}\")}log(\"-------------------------------------------------\")},t.prototype.destroy=function(){for(var t in this.dump(),this.entities)this.entities[t].preexisting||(this.entities[t].entity.setParent(null),engine.removeEntity(this.entities[t].entity));this.entities=[],this.numEntities=0,this.refreshDisplay()},t.prototype.refreshDisplay=function(){},t}(),r=function(){function t(t){this.timer=4,this.entities=[],this.hud=t}return t.prototype.pendingEntity=function(t){this.entities.push(t)},t.prototype.update=function(t){if(this.timer>0)this.timer-=t;else{this.timer=4;for(var i=0;i<this.entities.length;i++)log(\"here\"),this.hud.attachToEntity(this.entities[i],!0);this.entities=[]}},t}(),l=new h;l.pendingEntityAdd=new r(l),engine.addSystem(l.pendingEntityAdd);var c=function(){function t(t){this.timer=.1,this.uiIMage=t}return t.prototype.update=function(t){this.timer>0?(this.uiIMage.opacity-=.3,this.timer-=t):(this.timer=.1,this.uiIMage.opacity=1,engine.removeSystem(this))},t}();t.hud=l,Object.defineProperty(t,\"__esModule\",{value:!0})}));\n",
    "sha256": "402e14a1ce629cb3911a6e1c644ecca16c2c1b6f8e9beeef555dafbfac897347"
  },
  {
    "path": "node_modules/cannon/build/cannon.min.js",
    "content": "var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n * Copyright (c) 2015 cannon.js Authors\r\n *\r\n * Permission is hereby granted, free of charge, to any person\r\n * obtaining a copy of this software and associated documentation\r\n * files (the \"Software\"), to deal in the Software without\r\n * restriction, including without limitation the rights to use, copy,\r\n * modify, merge, publish, distribute, sublicense, and/or sell copies\r\n * of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n!function (e) { if (\"object\" == typeof exports && \"undefined\" != typeof module)\r\n    module.exports = e();\r\nelse if (\"function\" == typeof define && false)\r\n    define([], e);\r\nelse {\r\n    var f;\r\n    \"undefined\" != typeof window ? f = window : \"undefined\" != typeof global ? f = global : \"undefined\" != typeof self && (f = self), f.CANNON = e();\r\n} }(function () {\r\n    return function e(f, n, o) { function d(t, l) { if (!n[t]) {\r\n        if (!f[t]) {\r\n            var u = \"function\" == typeof require && require;\r\n            if (!l && u)\r\n                return u(t, !0);\r\n            if (i)\r\n                return i(t, !0);\r\n            throw new Error(\"Cannot find module '\" + t + \"'\");\r\n        }\r\n        var p = n[t] = { exports: {} };\r\n        f[t][0].call(p.exports, function (e) { var n = f[t][1][e]; return d(n ? n : e); }, p, p.exports, e, f, n, o);\r\n    } return n[t].exports; } for (var i = \"function\" == typeof require && require, t = 0; t < o.length; t++)\r\n        d(o[t]); return d; }({ 1: [function (e, f) { f.exports = { name: \"cannon\", version: \"0.6.2\", description: \"A lightweight 3D physics engine written in JavaScript.\", homepage: \"https://github.com/schteppe/cannon.js\", author: \"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)\", keywords: [\"cannon.js\", \"cannon\", \"physics\", \"engine\", \"3d\"], main: \"./build/cannon.js\", engines: { node: \"*\" }, repository: { type: \"git\", url: \"https://github.com/schteppe/cannon.js.git\" }, bugs: { url: \"https://github.com/schteppe/cannon.js/issues\" }, licenses: [{ type: \"MIT\" }], devDependencies: { jshint: \"latest\", \"uglify-js\": \"latest\", nodeunit: \"^0.9.0\", grunt: \"~0.4.0\", \"grunt-contrib-jshint\": \"~0.1.1\", \"grunt-contrib-nodeunit\": \"^0.4.1\", \"grunt-contrib-concat\": \"~0.1.3\", \"grunt-contrib-uglify\": \"^0.5.1\", \"grunt-browserify\": \"^2.1.4\", \"grunt-contrib-yuidoc\": \"^0.5.2\", browserify: \"*\" }, dependencies: {} }; }, {}], 2: [function (e, f) { f.exports = { version: e(\"../package.json\").version, AABB: e(\"./collision/AABB\"), ArrayCollisionMatrix: e(\"./collision/ArrayCollisionMatrix\"), Body: e(\"./objects/Body\"), Box: e(\"./shapes/Box\"), Broadphase: e(\"./collision/Broadphase\"), Constraint: e(\"./constraints/Constraint\"), ContactEquation: e(\"./equations/ContactEquation\"), Narrowphase: e(\"./world/Narrowphase\"), ConeTwistConstraint: e(\"./constraints/ConeTwistConstraint\"), ContactMaterial: e(\"./material/ContactMaterial\"), ConvexPolyhedron: e(\"./shapes/ConvexPolyhedron\"), Cylinder: e(\"./shapes/Cylinder\"), DistanceConstraint: e(\"./constraints/DistanceConstraint\"), Equation: e(\"./equations/Equation\"), EventTarget: e(\"./utils/EventTarget\"), FrictionEquation: e(\"./equations/FrictionEquation\"), GSSolver: e(\"./solver/GSSolver\"), GridBroadphase: e(\"./collision/GridBroadphase\"), Heightfield: e(\"./shapes/Heightfield\"), HingeConstraint: e(\"./constraints/HingeConstraint\"), LockConstraint: e(\"./constraints/LockConstraint\"), Mat3: e(\"./math/Mat3\"), Material: e(\"./material/Material\"), NaiveBroadphase: e(\"./collision/NaiveBroadphase\"), ObjectCollisionMatrix: e(\"./collision/ObjectCollisionMatrix\"), Pool: e(\"./utils/Pool\"), Particle: e(\"./shapes/Particle\"), Plane: e(\"./shapes/Plane\"), PointToPointConstraint: e(\"./constraints/PointToPointConstraint\"), Quaternion: e(\"./math/Quaternion\"), Ray: e(\"./collision/Ray\"), RaycastVehicle: e(\"./objects/RaycastVehicle\"), RaycastResult: e(\"./collision/RaycastResult\"), RigidVehicle: e(\"./objects/RigidVehicle\"), RotationalEquation: e(\"./equations/RotationalEquation\"), RotationalMotorEquation: e(\"./equations/RotationalMotorEquation\"), SAPBroadphase: e(\"./collision/SAPBroadphase\"), SPHSystem: e(\"./objects/SPHSystem\"), Shape: e(\"./shapes/Shape\"), Solver: e(\"./solver/Solver\"), Sphere: e(\"./shapes/Sphere\"), SplitSolver: e(\"./solver/SplitSolver\"), Spring: e(\"./objects/Spring\"), Trimesh: e(\"./shapes/Trimesh\"), Vec3: e(\"./math/Vec3\"), Vec3Pool: e(\"./utils/Vec3Pool\"), World: e(\"./world/World\") }; }, { \"../package.json\": 1, \"./collision/AABB\": 3, \"./collision/ArrayCollisionMatrix\": 4, \"./collision/Broadphase\": 5, \"./collision/GridBroadphase\": 6, \"./collision/NaiveBroadphase\": 7, \"./collision/ObjectCollisionMatrix\": 8, \"./collision/Ray\": 9, \"./collision/RaycastResult\": 10, \"./collision/SAPBroadphase\": 11, \"./constraints/ConeTwistConstraint\": 12, \"./constraints/Constraint\": 13, \"./constraints/DistanceConstraint\": 14, \"./constraints/HingeConstraint\": 15, \"./constraints/LockConstraint\": 16, \"./constraints/PointToPointConstraint\": 17, \"./equations/ContactEquation\": 19, \"./equations/Equation\": 20, \"./equations/FrictionEquation\": 21, \"./equations/RotationalEquation\": 22, \"./equations/RotationalMotorEquation\": 23, \"./material/ContactMaterial\": 24, \"./material/Material\": 25, \"./math/Mat3\": 27, \"./math/Quaternion\": 28, \"./math/Vec3\": 30, \"./objects/Body\": 31, \"./objects/RaycastVehicle\": 32, \"./objects/RigidVehicle\": 33, \"./objects/SPHSystem\": 34, \"./objects/Spring\": 35, \"./shapes/Box\": 37, \"./shapes/ConvexPolyhedron\": 38, \"./shapes/Cylinder\": 39, \"./shapes/Heightfield\": 40, \"./shapes/Particle\": 41, \"./shapes/Plane\": 42, \"./shapes/Shape\": 43, \"./shapes/Sphere\": 44, \"./shapes/Trimesh\": 45, \"./solver/GSSolver\": 46, \"./solver/Solver\": 47, \"./solver/SplitSolver\": 48, \"./utils/EventTarget\": 49, \"./utils/Pool\": 51, \"./utils/Vec3Pool\": 54, \"./world/Narrowphase\": 55, \"./world/World\": 56 }], 3: [function (e, f) { function n(e) { e = e || {}, this.lowerBound = new o, e.lowerBound && this.lowerBound.copy(e.lowerBound), this.upperBound = new o, e.upperBound && this.upperBound.copy(e.upperBound); } {\r\n                var o = e(\"../math/Vec3\");\r\n                e(\"../utils/Utils\");\r\n            } f.exports = n; var d = new o; n.prototype.setFromPoints = function (e, f, n, o) { var i = this.lowerBound, t = this.upperBound, l = n; i.copy(e[0]), l && l.vmult(i, i), t.copy(i); for (var u = 1; u < e.length; u++) {\r\n                var p = e[u];\r\n                l && (l.vmult(p, d), p = d), p.x > t.x && (t.x = p.x), p.x < i.x && (i.x = p.x), p.y > t.y && (t.y = p.y), p.y < i.y && (i.y = p.y), p.z > t.z && (t.z = p.z), p.z < i.z && (i.z = p.z);\r\n            } return f && (f.vadd(i, i), f.vadd(t, t)), o && (i.x -= o, i.y -= o, i.z -= o, t.x += o, t.y += o, t.z += o), this; }, n.prototype.copy = function (e) { return this.lowerBound.copy(e.lowerBound), this.upperBound.copy(e.upperBound), this; }, n.prototype.clone = function () { return (new n).copy(this); }, n.prototype.extend = function (e) { var f = e.lowerBound.x; this.lowerBound.x > f && (this.lowerBound.x = f); var n = e.upperBound.x; this.upperBound.x < n && (this.upperBound.x = n); var f = e.lowerBound.y; this.lowerBound.y > f && (this.lowerBound.y = f); var n = e.upperBound.y; this.upperBound.y < n && (this.upperBound.y = n); var f = e.lowerBound.z; this.lowerBound.z > f && (this.lowerBound.z = f); var n = e.upperBound.z; this.upperBound.z < n && (this.upperBound.z = n); }, n.prototype.overlaps = function (e) { var f = this.lowerBound, n = this.upperBound, o = e.lowerBound, d = e.upperBound; return (o.x <= n.x && n.x <= d.x || f.x <= d.x && d.x <= n.x) && (o.y <= n.y && n.y <= d.y || f.y <= d.y && d.y <= n.y) && (o.z <= n.z && n.z <= d.z || f.z <= d.z && d.z <= n.z); }, n.prototype.contains = function (e) { var f = this.lowerBound, n = this.upperBound, o = e.lowerBound, d = e.upperBound; return f.x <= o.x && n.x >= d.x && f.y <= o.y && n.y >= d.y && f.z <= o.z && n.z >= d.z; }, n.prototype.getCorners = function (e, f, n, o, d, i, t, l) { var u = this.lowerBound, p = this.upperBound; e.copy(u), f.set(p.x, u.y, u.z), n.set(p.x, p.y, u.z), o.set(u.x, p.y, p.z), d.set(p.x, u.y, u.z), i.set(u.x, p.y, u.z), t.set(u.x, u.y, p.z), l.copy(p); }; var i = [new o, new o, new o, new o, new o, new o, new o, new o]; n.prototype.toLocalFrame = function (e, f) { var n = i, o = n[0], d = n[1], t = n[2], l = n[3], u = n[4], p = n[5], s = n[6], y = n[7]; this.getCorners(o, d, t, l, u, p, s, y); for (var c = 0; 8 !== c; c++) {\r\n                var a = n[c];\r\n                e.pointToLocal(a, a);\r\n            } return f.setFromPoints(n); }, n.prototype.toWorldFrame = function (e, f) { var n = i, o = n[0], d = n[1], t = n[2], l = n[3], u = n[4], p = n[5], s = n[6], y = n[7]; this.getCorners(o, d, t, l, u, p, s, y); for (var c = 0; 8 !== c; c++) {\r\n                var a = n[c];\r\n                e.pointToWorld(a, a);\r\n            } return f.setFromPoints(n); }; }, { \"../math/Vec3\": 30, \"../utils/Utils\": 53 }], 4: [function (e, f) { function n() { this.matrix = []; } f.exports = n, n.prototype.get = function (e, f) { if (e = e.index, f = f.index, f > e) {\r\n                var n = f;\r\n                f = e, e = n;\r\n            } return this.matrix[(e * (e + 1) >> 1) + f - 1]; }, n.prototype.set = function (e, f, n) { if (e = e.index, f = f.index, f > e) {\r\n                var o = f;\r\n                f = e, e = o;\r\n            } this.matrix[(e * (e + 1) >> 1) + f - 1] = n ? 1 : 0; }, n.prototype.reset = function () { for (var e = 0, f = this.matrix.length; e !== f; e++)\r\n                this.matrix[e] = 0; }, n.prototype.setNumObjects = function (e) { this.matrix.length = e * (e - 1) >> 1; }; }, {}], 5: [function (e, f) { function n() { this.world = null, this.useBoundingBoxes = !1, this.dirty = !0; } {\r\n                var o = e(\"../objects/Body\"), d = e(\"../math/Vec3\"), i = e(\"../math/Quaternion\");\r\n                e(\"../shapes/Shape\"), e(\"../shapes/Plane\");\r\n            } f.exports = n, n.prototype.collisionPairs = function () { throw new Error(\"collisionPairs not implemented for this BroadPhase class!\"); }; var t = o.STATIC | o.KINEMATIC; n.prototype.needBroadphaseCollision = function (e, f) { return 0 === (e.collisionFilterGroup & f.collisionFilterMask) || 0 === (f.collisionFilterGroup & e.collisionFilterMask) ? !1 : 0 === (e.type & t) && e.sleepState !== o.SLEEPING || 0 === (f.type & t) && f.sleepState !== o.SLEEPING ? !0 : !1; }, n.prototype.intersectionTest = function (e, f, n, o) { this.useBoundingBoxes ? this.doBoundingBoxBroadphase(e, f, n, o) : this.doBoundingSphereBroadphase(e, f, n, o); }; {\r\n                var l = new d;\r\n                new d, new i, new d;\r\n            } n.prototype.doBoundingSphereBroadphase = function (e, f, n, o) { var d = l; f.position.vsub(e.position, d); var i = Math.pow(e.boundingRadius + f.boundingRadius, 2), t = d.norm2(); i > t && (n.push(e), o.push(f)); }, n.prototype.doBoundingBoxBroadphase = function (e, f, n, o) { e.aabbNeedsUpdate && e.computeAABB(), f.aabbNeedsUpdate && f.computeAABB(), e.aabb.overlaps(f.aabb) && (n.push(e), o.push(f)); }; var u = { keys: [] }, p = [], s = []; n.prototype.makePairsUnique = function (e, f) { for (var n = u, o = p, d = s, i = e.length, t = 0; t !== i; t++)\r\n                o[t] = e[t], d[t] = f[t]; e.length = 0, f.length = 0; for (var t = 0; t !== i; t++) {\r\n                var l = o[t].id, y = d[t].id, c = y > l ? l + \",\" + y : y + \",\" + l;\r\n                n[c] = t, n.keys.push(c);\r\n            } for (var t = 0; t !== n.keys.length; t++) {\r\n                var c = n.keys.pop(), a = n[c];\r\n                e.push(o[a]), f.push(d[a]), delete n[c];\r\n            } }, n.prototype.setWorld = function () { }; var y = new d; n.boundingSphereCheck = function (e, f) { var n = y; return e.position.vsub(f.position, n), Math.pow(e.shape.boundingSphereRadius + f.shape.boundingSphereRadius, 2) > n.norm2(); }, n.prototype.aabbQuery = function () { return console.warn(\".aabbQuery is not implemented in this Broadphase subclass.\"), []; }; }, { \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"../objects/Body\": 31, \"../shapes/Plane\": 42, \"../shapes/Shape\": 43 }], 6: [function (e, f) { function n(e, f, n, i, t) { o.apply(this), this.nx = n || 10, this.ny = i || 10, this.nz = t || 10, this.aabbMin = e || new d(100, 100, 100), this.aabbMax = f || new d(-100, -100, -100); var l = this.nx * this.ny * this.nz; if (0 >= l)\r\n                throw \"GridBroadphase: Each dimension's n must be >0\"; this.bins = [], this.binLengths = [], this.bins.length = l, this.binLengths.length = l; for (var u = 0; l > u; u++)\r\n                this.bins[u] = [], this.binLengths[u] = 0; } f.exports = n; var o = e(\"./Broadphase\"), d = e(\"../math/Vec3\"), i = e(\"../shapes/Shape\"); n.prototype = new o, n.prototype.constructor = n; {\r\n                var t = new d;\r\n                new d;\r\n            } n.prototype.collisionPairs = function (e, f, n) { function o(e, f, n, o, d, i, t) { var l = (e - g) * v | 0, u = (f - x) * A | 0, p = (n - j) * C | 0, b = I((o - g) * v), m = I((d - x) * A), N = I((i - j) * C); 0 > l ? l = 0 : l >= s && (l = s - 1), 0 > u ? u = 0 : u >= y && (u = y - 1), 0 > p ? p = 0 : p >= c && (p = c - 1), 0 > b ? b = 0 : b >= s && (b = s - 1), 0 > m ? m = 0 : m >= y && (m = y - 1), 0 > N ? N = 0 : N >= c && (N = c - 1), l *= a, u *= r, p *= w, b *= a, m *= r, N *= w; for (var O = l; b >= O; O += a)\r\n                for (var h = u; m >= h; h += r)\r\n                    for (var k = p; N >= k; k += w) {\r\n                        var q = O + h + k;\r\n                        E[q][F[q]++] = t;\r\n                    } } for (var d = e.numObjects(), l = e.bodies, u = this.aabbMax, p = this.aabbMin, s = this.nx, y = this.ny, c = this.nz, a = y * c, r = c, w = 1, b = u.x, m = u.y, N = u.z, g = p.x, x = p.y, j = p.z, v = s / (b - g), A = y / (m - x), C = c / (N - j), O = (b - g) / s, h = (m - x) / y, k = (N - j) / c, q = .5 * Math.sqrt(O * O + h * h + k * k), z = i.types, B = z.SPHERE, D = z.PLANE, E = (z.BOX, z.COMPOUND, z.CONVEXPOLYHEDRON, this.bins), F = this.binLengths, G = this.bins.length, H = 0; H !== G; H++)\r\n                F[H] = 0; for (var I = Math.ceil, p = Math.min, u = Math.max, H = 0; H !== d; H++) {\r\n                var J = l[H], K = J.shape;\r\n                switch (K.type) {\r\n                    case B:\r\n                        var L = J.position.x, M = J.position.y, P = J.position.z, Q = K.radius;\r\n                        o(L - Q, M - Q, P - Q, L + Q, M + Q, P + Q, J);\r\n                        break;\r\n                    case D:\r\n                        K.worldNormalNeedsUpdate && K.computeWorldNormal(J.quaternion);\r\n                        var R = K.worldNormal, S = g + .5 * O - J.position.x, T = x + .5 * h - J.position.y, U = j + .5 * k - J.position.z, V = t;\r\n                        V.set(S, T, U);\r\n                        for (var W = 0, X = 0; W !== s; W++, X += a, V.y = T, V.x += O)\r\n                            for (var Y = 0, Z = 0; Y !== y; Y++, Z += r, V.z = U, V.y += h)\r\n                                for (var $ = 0, _ = 0; $ !== c; $++, _ += w, V.z += k)\r\n                                    if (V.dot(R) < q) {\r\n                                        var ef = X + Z + _;\r\n                                        E[ef][F[ef]++] = J;\r\n                                    }\r\n                        break;\r\n                    default: J.aabbNeedsUpdate && J.computeAABB(), o(J.aabb.lowerBound.x, J.aabb.lowerBound.y, J.aabb.lowerBound.z, J.aabb.upperBound.x, J.aabb.upperBound.y, J.aabb.upperBound.z, J);\r\n                }\r\n            } for (var H = 0; H !== G; H++) {\r\n                var ff = F[H];\r\n                if (ff > 1)\r\n                    for (var nf = E[H], W = 0; W !== ff; W++)\r\n                        for (var J = nf[W], Y = 0; Y !== W; Y++) {\r\n                            var of = nf[Y];\r\n                            this.needBroadphaseCollision(J, of) && this.intersectionTest(J, of, f, n);\r\n                        }\r\n            } this.makePairsUnique(f, n); }; }, { \"../math/Vec3\": 30, \"../shapes/Shape\": 43, \"./Broadphase\": 5 }], 7: [function (e, f) { function n() { o.apply(this); } f.exports = n; var o = e(\"./Broadphase\"), d = e(\"./AABB\"); n.prototype = new o, n.prototype.constructor = n, n.prototype.collisionPairs = function (e, f, n) { var o, d, i, t, l = e.bodies, u = l.length; for (o = 0; o !== u; o++)\r\n                for (d = 0; d !== o; d++)\r\n                    i = l[o], t = l[d], this.needBroadphaseCollision(i, t) && this.intersectionTest(i, t, f, n); }; new d; n.prototype.aabbQuery = function (e, f, n) { n = n || []; for (var o = 0; o < e.bodies.length; o++) {\r\n                var d = e.bodies[o];\r\n                d.aabbNeedsUpdate && d.computeAABB(), d.aabb.overlaps(f) && n.push(d);\r\n            } return n; }; }, { \"./AABB\": 3, \"./Broadphase\": 5 }], 8: [function (e, f) { function n() { this.matrix = {}; } f.exports = n, n.prototype.get = function (e, f) { if (e = e.id, f = f.id, f > e) {\r\n                var n = f;\r\n                f = e, e = n;\r\n            } return e + \"-\" + f in this.matrix; }, n.prototype.set = function (e, f, n) { if (e = e.id, f = f.id, f > e) {\r\n                var o = f;\r\n                f = e, e = o;\r\n            } n ? this.matrix[e + \"-\" + f] = !0 : delete this.matrix[e + \"-\" + f]; }, n.prototype.reset = function () { this.matrix = {}; }, n.prototype.setNumObjects = function () { }; }, {}], 9: [function (e, f) { function n(e, f) { this.from = e ? e.clone() : new i, this.to = f ? f.clone() : new i, this._direction = new i, this.precision = 1e-4, this.checkCollisionResponse = !0, this.skipBackfaces = !1, this.collisionFilterMask = -1, this.collisionFilterGroup = -1, this.mode = n.ANY, this.result = new u, this.hasHit = !1, this.callback = function () { }; } function o(e, f, n, o) { o.vsub(f, G), n.vsub(f, a), e.vsub(f, r); var d, i, t = G.dot(G), l = G.dot(a), u = G.dot(r), p = a.dot(a), s = a.dot(r); return (d = p * u - l * s) >= 0 && (i = t * s - l * u) >= 0 && t * p - l * l > d + i; } function d(e, f, n) { n.vsub(e, G); var o = G.dot(f); f.mult(o, H), H.vadd(e, H); var d = n.distanceTo(H); return d; } f.exports = n; var i = e(\"../math/Vec3\"), t = e(\"../math/Quaternion\"), l = e(\"../math/Transform\"), u = (e(\"../shapes/ConvexPolyhedron\"), e(\"../shapes/Box\"), e(\"../collision/RaycastResult\")), p = e(\"../shapes/Shape\"), s = e(\"../collision/AABB\"); n.prototype.constructor = n, n.CLOSEST = 1, n.ANY = 2, n.ALL = 4; var y = new s, c = []; n.prototype.intersectWorld = function (e, f) { return this.mode = f.mode || n.ANY, this.result = f.result || new u, this.skipBackfaces = !!f.skipBackfaces, this.collisionFilterMask = \"undefined\" != typeof f.collisionFilterMask ? f.collisionFilterMask : -1, this.collisionFilterGroup = \"undefined\" != typeof f.collisionFilterGroup ? f.collisionFilterGroup : -1, f.from && this.from.copy(f.from), f.to && this.to.copy(f.to), this.callback = f.callback || function () { }, this.hasHit = !1, this.result.reset(), this._updateDirection(), this.getAABB(y), c.length = 0, e.broadphase.aabbQuery(e, y, c), this.intersectBodies(c), this.hasHit; }; var a = new i, r = new i; n.pointInTriangle = o; var w = new i, b = new t; n.prototype.intersectBody = function (e, f) { f && (this.result = f, this._updateDirection()); var n = this.checkCollisionResponse; if ((!n || e.collisionResponse) && 0 !== (this.collisionFilterGroup & e.collisionFilterMask) && 0 !== (e.collisionFilterGroup & this.collisionFilterMask))\r\n                for (var o = w, d = b, i = 0, t = e.shapes.length; t > i; i++) {\r\n                    var l = e.shapes[i];\r\n                    if ((!n || l.collisionResponse) && (e.quaternion.mult(e.shapeOrientations[i], d), e.quaternion.vmult(e.shapeOffsets[i], o), o.vadd(e.position, o), this.intersectShape(l, d, o, e), this.result._shouldStop))\r\n                        break;\r\n                } }, n.prototype.intersectBodies = function (e, f) { f && (this.result = f, this._updateDirection()); for (var n = 0, o = e.length; !this.result._shouldStop && o > n; n++)\r\n                this.intersectBody(e[n]); }, n.prototype._updateDirection = function () { this.to.vsub(this.from, this._direction), this._direction.normalize(); }, n.prototype.intersectShape = function (e, f, n, o) { var i = this.from, t = d(i, this._direction, n); if (!(t > e.boundingSphereRadius)) {\r\n                var l = this[e.type];\r\n                l && l.call(this, e, f, n, o);\r\n            } }; {\r\n                var m = (new i, new i, new i), N = new i, g = new i, x = new i;\r\n                new i, new u;\r\n            } n.prototype.intersectBox = function (e, f, n, o) { return this.intersectConvex(e.convexPolyhedronRepresentation, f, n, o); }, n.prototype[p.types.BOX] = n.prototype.intersectBox, n.prototype.intersectPlane = function (e, f, n, o) { var d = this.from, t = this.to, l = this._direction, u = new i(0, 0, 1); f.vmult(u, u); var p = new i; d.vsub(n, p); var s = p.dot(u); t.vsub(n, p); var y = p.dot(u); if (!(s * y > 0 || d.distanceTo(t) < s)) {\r\n                var c = u.dot(l);\r\n                if (!(Math.abs(c) < this.precision)) {\r\n                    var a = new i, r = new i, w = new i;\r\n                    d.vsub(n, a);\r\n                    var b = -u.dot(a) / c;\r\n                    l.scale(b, r), d.vadd(r, w), this.reportIntersection(u, w, e, o, -1);\r\n                }\r\n            } }, n.prototype[p.types.PLANE] = n.prototype.intersectPlane, n.prototype.getAABB = function (e) { var f = this.to, n = this.from; e.lowerBound.x = Math.min(f.x, n.x), e.lowerBound.y = Math.min(f.y, n.y), e.lowerBound.z = Math.min(f.z, n.z), e.upperBound.x = Math.max(f.x, n.x), e.upperBound.y = Math.max(f.y, n.y), e.upperBound.z = Math.max(f.z, n.z); }; var j = { faceList: [0] }; n.prototype.intersectHeightfield = function (e, f, o, d) { var t = (e.data, e.elementSize, new i), u = new n(this.from, this.to); l.pointToLocalFrame(o, f, u.from, u.from), l.pointToLocalFrame(o, f, u.to, u.to); var p = [], s = null, y = null, c = null, a = null, r = e.getIndexOfPosition(u.from.x, u.from.y, p, !1); if (r && (s = p[0], y = p[1], c = p[0], a = p[1]), r = e.getIndexOfPosition(u.to.x, u.to.y, p, !1), r && ((null === s || p[0] < s) && (s = p[0]), (null === c || p[0] > c) && (c = p[0]), (null === y || p[1] < y) && (y = p[1]), (null === a || p[1] > a) && (a = p[1])), null !== s) {\r\n                var w = [];\r\n                e.getRectMinMax(s, y, c, a, w);\r\n                for (var b = (w[0], w[1], s); c >= b; b++)\r\n                    for (var m = y; a >= m; m++) {\r\n                        if (this.result._shouldStop)\r\n                            return;\r\n                        if (e.getConvexTrianglePillar(b, m, !1), l.pointToWorldFrame(o, f, e.pillarOffset, t), this.intersectConvex(e.pillarConvex, f, t, d, j), this.result._shouldStop)\r\n                            return;\r\n                        e.getConvexTrianglePillar(b, m, !0), l.pointToWorldFrame(o, f, e.pillarOffset, t), this.intersectConvex(e.pillarConvex, f, t, d, j);\r\n                    }\r\n            } }, n.prototype[p.types.HEIGHTFIELD] = n.prototype.intersectHeightfield; var v = new i, A = new i; n.prototype.intersectSphere = function (e, f, n, o) { var d = this.from, i = this.to, t = e.radius, l = Math.pow(i.x - d.x, 2) + Math.pow(i.y - d.y, 2) + Math.pow(i.z - d.z, 2), u = 2 * ((i.x - d.x) * (d.x - n.x) + (i.y - d.y) * (d.y - n.y) + (i.z - d.z) * (d.z - n.z)), p = Math.pow(d.x - n.x, 2) + Math.pow(d.y - n.y, 2) + Math.pow(d.z - n.z, 2) - Math.pow(t, 2), s = Math.pow(u, 2) - 4 * l * p, y = v, c = A; if (!(0 > s))\r\n                if (0 === s)\r\n                    d.lerp(i, s, y), y.vsub(n, c), c.normalize(), this.reportIntersection(c, y, e, o, -1);\r\n                else {\r\n                    var a = (-u - Math.sqrt(s)) / (2 * l), r = (-u + Math.sqrt(s)) / (2 * l);\r\n                    if (a >= 0 && 1 >= a && (d.lerp(i, a, y), y.vsub(n, c), c.normalize(), this.reportIntersection(c, y, e, o, -1)), this.result._shouldStop)\r\n                        return;\r\n                    r >= 0 && 1 >= r && (d.lerp(i, r, y), y.vsub(n, c), c.normalize(), this.reportIntersection(c, y, e, o, -1));\r\n                } }, n.prototype[p.types.SPHERE] = n.prototype.intersectSphere; var C = new i, O = (new i, new i, new i); n.prototype.intersectConvex = function (e, f, n, d, i) { for (var t = C, l = O, u = i && i.faceList || null, p = e.faces, s = e.vertices, y = e.faceNormals, c = this._direction, a = this.from, r = this.to, w = a.distanceTo(r), b = u ? u.length : p.length, j = this.result, v = 0; !j._shouldStop && b > v; v++) {\r\n                var A = u ? u[v] : v, h = p[A], k = y[A], q = f, z = n;\r\n                l.copy(s[h[0]]), q.vmult(l, l), l.vadd(z, l), l.vsub(a, l), q.vmult(k, t);\r\n                var B = c.dot(t);\r\n                if (!(Math.abs(B) < this.precision)) {\r\n                    var D = t.dot(l) / B;\r\n                    if (!(0 > D)) {\r\n                        c.mult(D, m), m.vadd(a, m), N.copy(s[h[0]]), q.vmult(N, N), z.vadd(N, N);\r\n                        for (var E = 1; !j._shouldStop && E < h.length - 1; E++) {\r\n                            g.copy(s[h[E]]), x.copy(s[h[E + 1]]), q.vmult(g, g), q.vmult(x, x), z.vadd(g, g), z.vadd(x, x);\r\n                            var F = m.distanceTo(a);\r\n                            !o(m, N, g, x) && !o(m, g, N, x) || F > w || this.reportIntersection(t, m, e, d, A);\r\n                        }\r\n                    }\r\n                }\r\n            } }, n.prototype[p.types.CONVEXPOLYHEDRON] = n.prototype.intersectConvex; var h = new i, k = new i, q = new i, z = new i, B = new i, D = new i, E = (new s, []), F = new l; n.prototype.intersectTrimesh = function (e, f, n, d, i) { var t = h, u = E, p = F, s = O, y = k, c = q, a = z, r = D, w = B, b = (i && i.faceList || null, e.indices), j = (e.vertices, e.faceNormals, this.from), v = this.to, A = this._direction; p.position.copy(n), p.quaternion.copy(f), l.vectorToLocalFrame(n, f, A, y), l.pointToLocalFrame(n, f, j, c), l.pointToLocalFrame(n, f, v, a); var C = c.distanceSquared(a); e.tree.rayQuery(this, p, u); for (var G = 0, H = u.length; !this.result._shouldStop && G !== H; G++) {\r\n                var I = u[G];\r\n                e.getNormal(I, t), e.getVertex(b[3 * I], N), N.vsub(c, s);\r\n                var J = y.dot(t), K = t.dot(s) / J;\r\n                if (!(0 > K)) {\r\n                    y.scale(K, m), m.vadd(c, m), e.getVertex(b[3 * I + 1], g), e.getVertex(b[3 * I + 2], x);\r\n                    var L = m.distanceSquared(c);\r\n                    !o(m, g, N, x) && !o(m, N, g, x) || L > C || (l.vectorToWorldFrame(f, t, w), l.pointToWorldFrame(n, f, m, r), this.reportIntersection(w, r, e, d, I));\r\n                }\r\n            } u.length = 0; }, n.prototype[p.types.TRIMESH] = n.prototype.intersectTrimesh, n.prototype.reportIntersection = function (e, f, o, d, i) { var t = this.from, l = this.to, u = t.distanceTo(f), p = this.result; if (!(this.skipBackfaces && e.dot(this._direction) > 0))\r\n                switch (p.hitFaceIndex = \"undefined\" != typeof i ? i : -1, this.mode) {\r\n                    case n.ALL:\r\n                        this.hasHit = !0, p.set(t, l, e, f, o, d, u), p.hasHit = !0, this.callback(p);\r\n                        break;\r\n                    case n.CLOSEST:\r\n                        (u < p.distance || !p.hasHit) && (this.hasHit = !0, p.hasHit = !0, p.set(t, l, e, f, o, d, u));\r\n                        break;\r\n                    case n.ANY: this.hasHit = !0, p.hasHit = !0, p.set(t, l, e, f, o, d, u), p._shouldStop = !0;\r\n                } }; var G = new i, H = new i; }, { \"../collision/AABB\": 3, \"../collision/RaycastResult\": 10, \"../math/Quaternion\": 28, \"../math/Transform\": 29, \"../math/Vec3\": 30, \"../shapes/Box\": 37, \"../shapes/ConvexPolyhedron\": 38, \"../shapes/Shape\": 43 }], 10: [function (e, f) { function n() { this.rayFromWorld = new o, this.rayToWorld = new o, this.hitNormalWorld = new o, this.hitPointWorld = new o, this.hasHit = !1, this.shape = null, this.body = null, this.hitFaceIndex = -1, this.distance = -1, this._shouldStop = !1; } var o = e(\"../math/Vec3\"); f.exports = n, n.prototype.reset = function () { this.rayFromWorld.setZero(), this.rayToWorld.setZero(), this.hitNormalWorld.setZero(), this.hitPointWorld.setZero(), this.hasHit = !1, this.shape = null, this.body = null, this.hitFaceIndex = -1, this.distance = -1, this._shouldStop = !1; }, n.prototype.abort = function () { this._shouldStop = !0; }, n.prototype.set = function (e, f, n, o, d, i, t) { this.rayFromWorld.copy(e), this.rayToWorld.copy(f), this.hitNormalWorld.copy(n), this.hitPointWorld.copy(o), this.shape = d, this.body = i, this.distance = t; }; }, { \"../math/Vec3\": 30 }], 11: [function (e, f) { function n(e) { o.apply(this), this.axisList = [], this.world = null, this.axisIndex = 0; var f = this.axisList; this._addBodyHandler = function (e) { f.push(e.body); }, this._removeBodyHandler = function (e) { var n = f.indexOf(e.body); -1 !== n && f.splice(n, 1); }, e && this.setWorld(e); } var o = (e(\"../shapes/Shape\"), e(\"../collision/Broadphase\")); f.exports = n, n.prototype = new o, n.prototype.setWorld = function (e) { this.axisList.length = 0; for (var f = 0; f < e.bodies.length; f++)\r\n                this.axisList.push(e.bodies[f]); e.removeEventListener(\"addBody\", this._addBodyHandler), e.removeEventListener(\"removeBody\", this._removeBodyHandler), e.addEventListener(\"addBody\", this._addBodyHandler), e.addEventListener(\"removeBody\", this._removeBodyHandler), this.world = e, this.dirty = !0; }, n.insertionSortX = function (e) { for (var f = 1, n = e.length; n > f; f++) {\r\n                for (var o = e[f], d = f - 1; d >= 0 && !(e[d].aabb.lowerBound.x <= o.aabb.lowerBound.x); d--)\r\n                    e[d + 1] = e[d];\r\n                e[d + 1] = o;\r\n            } return e; }, n.insertionSortY = function (e) { for (var f = 1, n = e.length; n > f; f++) {\r\n                for (var o = e[f], d = f - 1; d >= 0 && !(e[d].aabb.lowerBound.y <= o.aabb.lowerBound.y); d--)\r\n                    e[d + 1] = e[d];\r\n                e[d + 1] = o;\r\n            } return e; }, n.insertionSortZ = function (e) { for (var f = 1, n = e.length; n > f; f++) {\r\n                for (var o = e[f], d = f - 1; d >= 0 && !(e[d].aabb.lowerBound.z <= o.aabb.lowerBound.z); d--)\r\n                    e[d + 1] = e[d];\r\n                e[d + 1] = o;\r\n            } return e; }, n.prototype.collisionPairs = function (e, f, o) { var d, i, t = this.axisList, l = t.length, u = this.axisIndex; for (this.dirty && (this.sortList(), this.dirty = !1), d = 0; d !== l; d++) {\r\n                var p = t[d];\r\n                for (i = d + 1; l > i; i++) {\r\n                    var s = t[i];\r\n                    if (this.needBroadphaseCollision(p, s)) {\r\n                        if (!n.checkBounds(p, s, u))\r\n                            break;\r\n                        this.intersectionTest(p, s, f, o);\r\n                    }\r\n                }\r\n            } }, n.prototype.sortList = function () { for (var e = this.axisList, f = this.axisIndex, o = e.length, d = 0; d !== o; d++) {\r\n                var i = e[d];\r\n                i.aabbNeedsUpdate && i.computeAABB();\r\n            } 0 === f ? n.insertionSortX(e) : 1 === f ? n.insertionSortY(e) : 2 === f && n.insertionSortZ(e); }, n.checkBounds = function (e, f, n) { var o, d; 0 === n ? (o = e.position.x, d = f.position.x) : 1 === n ? (o = e.position.y, d = f.position.y) : 2 === n && (o = e.position.z, d = f.position.z); var i = e.boundingRadius, t = f.boundingRadius, l = o + i, u = d - t; return l > u; }, n.prototype.autoDetectAxis = function () { for (var e = 0, f = 0, n = 0, o = 0, d = 0, i = 0, t = this.axisList, l = t.length, u = 1 / l, p = 0; p !== l; p++) {\r\n                var s = t[p], y = s.position.x;\r\n                e += y, f += y * y;\r\n                var c = s.position.y;\r\n                n += c, o += c * c;\r\n                var a = s.position.z;\r\n                d += a, i += a * a;\r\n            } var r = f - e * e * u, w = o - n * n * u, b = i - d * d * u; this.axisIndex = r > w ? r > b ? 0 : 2 : w > b ? 1 : 2; }, n.prototype.aabbQuery = function (e, f, n) { n = n || [], this.dirty && (this.sortList(), this.dirty = !1); var o = this.axisIndex, d = \"x\"; 1 === o && (d = \"y\"), 2 === o && (d = \"z\"); for (var i = this.axisList, t = (f.lowerBound[d], f.upperBound[d], 0); t < i.length; t++) {\r\n                var l = i[t];\r\n                l.aabbNeedsUpdate && l.computeAABB(), l.aabb.overlaps(f) && n.push(l);\r\n            } return n; }; }, { \"../collision/Broadphase\": 5, \"../shapes/Shape\": 43 }], 12: [function (e, f) { function n(e, f, n) { n = n || {}; var l = \"undefined\" != typeof n.maxForce ? n.maxForce : 1e6, u = n.pivotA ? n.pivotA.clone() : new t, p = n.pivotB ? n.pivotB.clone() : new t; this.axisA = n.axisA ? n.axisA.clone() : new t, this.axisB = n.axisB ? n.axisB.clone() : new t, o.call(this, e, u, f, p, l), this.collideConnected = !!n.collideConnected, this.angle = \"undefined\" != typeof n.angle ? n.angle : 0; var s = this.coneEquation = new d(e, f, n), y = this.twistEquation = new i(e, f, n); this.twistAngle = \"undefined\" != typeof n.twistAngle ? n.twistAngle : 0, s.maxForce = 0, s.minForce = -l, y.maxForce = 0, y.minForce = -l, this.equations.push(s, y); } f.exports = n; var o = (e(\"./Constraint\"), e(\"./PointToPointConstraint\")), d = e(\"../equations/ConeEquation\"), i = e(\"../equations/RotationalEquation\"), t = (e(\"../equations/ContactEquation\"), e(\"../math/Vec3\")); n.prototype = new o, n.constructor = n; new t, new t; n.prototype.update = function () { var e = this.bodyA, f = this.bodyB, n = this.coneEquation, d = this.twistEquation; o.prototype.update.call(this), e.vectorToWorldFrame(this.axisA, n.axisA), f.vectorToWorldFrame(this.axisB, n.axisB), this.axisA.tangents(d.axisA, d.axisA), e.vectorToWorldFrame(d.axisA, d.axisA), this.axisB.tangents(d.axisB, d.axisB), f.vectorToWorldFrame(d.axisB, d.axisB), n.angle = this.angle, d.maxAngle = this.twistAngle; }; }, { \"../equations/ConeEquation\": 18, \"../equations/ContactEquation\": 19, \"../equations/RotationalEquation\": 22, \"../math/Vec3\": 30, \"./Constraint\": 13, \"./PointToPointConstraint\": 17 }], 13: [function (e, f) { function n(e, f, d) { d = o.defaults(d, { collideConnected: !0, wakeUpBodies: !0 }), this.equations = [], this.bodyA = e, this.bodyB = f, this.id = n.idCounter++, this.collideConnected = d.collideConnected, d.wakeUpBodies && (e && e.wakeUp(), f && f.wakeUp()); } f.exports = n; var o = e(\"../utils/Utils\"); n.prototype.update = function () { throw new Error(\"method update() not implmemented in this Constraint subclass!\"); }, n.prototype.enable = function () { for (var e = this.equations, f = 0; f < e.length; f++)\r\n                e[f].enabled = !0; }, n.prototype.disable = function () { for (var e = this.equations, f = 0; f < e.length; f++)\r\n                e[f].enabled = !1; }, n.idCounter = 0; }, { \"../utils/Utils\": 53 }], 14: [function (e, f) { function n(e, f, n, i) { o.call(this, e, f), \"undefined\" == typeof n && (n = e.position.distanceTo(f.position)), \"undefined\" == typeof i && (i = 1e6), this.distance = n; var t = this.distanceEquation = new d(e, f); this.equations.push(t), t.minForce = -i, t.maxForce = i; } f.exports = n; var o = e(\"./Constraint\"), d = e(\"../equations/ContactEquation\"); n.prototype = new o, n.prototype.update = function () { var e = this.bodyA, f = this.bodyB, n = this.distanceEquation, o = .5 * this.distance, d = n.ni; f.position.vsub(e.position, d), d.normalize(), d.mult(o, n.ri), d.mult(-o, n.rj); }; }, { \"../equations/ContactEquation\": 19, \"./Constraint\": 13 }], 15: [function (e, f) { function n(e, f, n) { n = n || {}; var l = \"undefined\" != typeof n.maxForce ? n.maxForce : 1e6, u = n.pivotA ? n.pivotA.clone() : new t, p = n.pivotB ? n.pivotB.clone() : new t; o.call(this, e, u, f, p, l); var s = this.axisA = n.axisA ? n.axisA.clone() : new t(1, 0, 0); s.normalize(); var y = this.axisB = n.axisB ? n.axisB.clone() : new t(1, 0, 0); y.normalize(); var c = this.rotationalEquation1 = new d(e, f, n), a = this.rotationalEquation2 = new d(e, f, n), r = this.motorEquation = new i(e, f, l); r.enabled = !1, this.equations.push(c, a, r); } f.exports = n; var o = (e(\"./Constraint\"), e(\"./PointToPointConstraint\")), d = e(\"../equations/RotationalEquation\"), i = e(\"../equations/RotationalMotorEquation\"), t = (e(\"../equations/ContactEquation\"), e(\"../math/Vec3\")); n.prototype = new o, n.constructor = n, n.prototype.enableMotor = function () { this.motorEquation.enabled = !0; }, n.prototype.disableMotor = function () { this.motorEquation.enabled = !1; }, n.prototype.setMotorSpeed = function (e) { this.motorEquation.targetVelocity = e; }, n.prototype.setMotorMaxForce = function (e) { this.motorEquation.maxForce = e, this.motorEquation.minForce = -e; }; var l = new t, u = new t; n.prototype.update = function () { var e = this.bodyA, f = this.bodyB, n = this.motorEquation, d = this.rotationalEquation1, i = this.rotationalEquation2, t = l, p = u, s = this.axisA, y = this.axisB; o.prototype.update.call(this), e.quaternion.vmult(s, t), f.quaternion.vmult(y, p), t.tangents(d.axisA, i.axisA), d.axisB.copy(p), i.axisB.copy(p), this.motorEquation.enabled && (e.quaternion.vmult(this.axisA, n.axisA), f.quaternion.vmult(this.axisB, n.axisB)); }; }, { \"../equations/ContactEquation\": 19, \"../equations/RotationalEquation\": 22, \"../equations/RotationalMotorEquation\": 23, \"../math/Vec3\": 30, \"./Constraint\": 13, \"./PointToPointConstraint\": 17 }], 16: [function (e, f) { function n(e, f, n) { n = n || {}; var t = \"undefined\" != typeof n.maxForce ? n.maxForce : 1e6, l = new i, u = new i, p = new i; e.position.vadd(f.position, p), p.scale(.5, p), f.pointToLocalFrame(p, u), e.pointToLocalFrame(p, l), o.call(this, e, l, f, u, t); var s = this.rotationalEquation1 = new d(e, f, n), y = this.rotationalEquation2 = new d(e, f, n), c = this.rotationalEquation3 = new d(e, f, n); this.equations.push(s, y, c); } f.exports = n; var o = (e(\"./Constraint\"), e(\"./PointToPointConstraint\")), d = e(\"../equations/RotationalEquation\"), i = (e(\"../equations/RotationalMotorEquation\"), e(\"../equations/ContactEquation\"), e(\"../math/Vec3\")); n.prototype = new o, n.constructor = n; new i, new i; n.prototype.update = function () { var e = this.bodyA, f = this.bodyB, n = (this.motorEquation, this.rotationalEquation1), d = this.rotationalEquation2, t = this.rotationalEquation3; o.prototype.update.call(this), e.vectorToWorldFrame(i.UNIT_X, n.axisA), f.vectorToWorldFrame(i.UNIT_Y, n.axisB), e.vectorToWorldFrame(i.UNIT_Y, d.axisA), f.vectorToWorldFrame(i.UNIT_Z, d.axisB), e.vectorToWorldFrame(i.UNIT_Z, t.axisA), f.vectorToWorldFrame(i.UNIT_X, t.axisB); }; }, { \"../equations/ContactEquation\": 19, \"../equations/RotationalEquation\": 22, \"../equations/RotationalMotorEquation\": 23, \"../math/Vec3\": 30, \"./Constraint\": 13, \"./PointToPointConstraint\": 17 }], 17: [function (e, f) { function n(e, f, n, t, l) { o.call(this, e, n), l = \"undefined\" != typeof l ? l : 1e6, this.pivotA = f ? f.clone() : new i, this.pivotB = t ? t.clone() : new i; var u = this.equationX = new d(e, n), p = this.equationY = new d(e, n), s = this.equationZ = new d(e, n); this.equations.push(u, p, s), u.minForce = p.minForce = s.minForce = -l, u.maxForce = p.maxForce = s.maxForce = l, u.ni.set(1, 0, 0), p.ni.set(0, 1, 0), s.ni.set(0, 0, 1); } f.exports = n; var o = e(\"./Constraint\"), d = e(\"../equations/ContactEquation\"), i = e(\"../math/Vec3\"); n.prototype = new o, n.prototype.update = function () { var e = this.bodyA, f = this.bodyB, n = this.equationX, o = this.equationY, d = this.equationZ; e.quaternion.vmult(this.pivotA, n.ri), f.quaternion.vmult(this.pivotB, n.rj), o.ri.copy(n.ri), o.rj.copy(n.rj), d.ri.copy(n.ri), d.rj.copy(n.rj); }; }, { \"../equations/ContactEquation\": 19, \"../math/Vec3\": 30, \"./Constraint\": 13 }], 18: [function (e, f) { function n(e, f, n) { n = n || {}; var i = \"undefined\" != typeof n.maxForce ? n.maxForce : 1e6; d.call(this, e, f, -i, i), this.axisA = n.axisA ? n.axisA.clone() : new o(1, 0, 0), this.axisB = n.axisB ? n.axisB.clone() : new o(0, 1, 0), this.angle = \"undefined\" != typeof n.angle ? n.angle : 0; } f.exports = n; var o = e(\"../math/Vec3\"), d = (e(\"../math/Mat3\"), e(\"./Equation\")); n.prototype = new d, n.prototype.constructor = n; var i = new o, t = new o; n.prototype.computeB = function (e) { var f = this.a, n = this.b, o = this.axisA, d = this.axisB, l = i, u = t, p = this.jacobianElementA, s = this.jacobianElementB; o.cross(d, l), d.cross(o, u), p.rotational.copy(u), s.rotational.copy(l); var y = Math.cos(this.angle) - o.dot(d), c = this.computeGW(), a = this.computeGiMf(), r = -y * f - c * n - e * a; return r; }; }, { \"../math/Mat3\": 27, \"../math/Vec3\": 30, \"./Equation\": 20 }], 19: [function (e, f) { function n(e, f, n) { n = \"undefined\" != typeof n ? n : 1e6, o.call(this, e, f, 0, n), this.restitution = 0, this.ri = new d, this.rj = new d, this.ni = new d; } f.exports = n; {\r\n                var o = e(\"./Equation\"), d = e(\"../math/Vec3\");\r\n                e(\"../math/Mat3\");\r\n            } n.prototype = new o, n.prototype.constructor = n; var i = new d, t = new d, l = new d; n.prototype.computeB = function (e) { var f = this.a, n = this.b, o = this.bi, d = this.bj, u = this.ri, p = this.rj, s = i, y = t, c = o.velocity, a = o.angularVelocity, r = (o.force, o.torque, d.velocity), w = d.angularVelocity, b = (d.force, d.torque, l), m = this.jacobianElementA, N = this.jacobianElementB, g = this.ni; u.cross(g, s), p.cross(g, y), g.negate(m.spatial), s.negate(m.rotational), N.spatial.copy(g), N.rotational.copy(y), b.copy(d.position), b.vadd(p, b), b.vsub(o.position, b), b.vsub(u, b); var x = g.dot(b), j = this.restitution + 1, v = j * r.dot(g) - j * c.dot(g) + w.dot(y) - a.dot(s), A = this.computeGiMf(), C = -x * f - v * n - e * A; return C; }; var u = new d, p = new d, s = new d, y = new d, c = new d; n.prototype.getImpactVelocityAlongNormal = function () { var e = u, f = p, n = s, o = y, d = c; return this.bi.position.vadd(this.ri, n), this.bj.position.vadd(this.rj, o), this.bi.getVelocityAtWorldPoint(n, e), this.bj.getVelocityAtWorldPoint(o, f), e.vsub(f, d), this.ni.dot(d); }; }, { \"../math/Mat3\": 27, \"../math/Vec3\": 30, \"./Equation\": 20 }], 20: [function (e, f) {\r\n                function n(e, f, d, i) {\r\n                    this.id = n.id++, this.minForce = \"undefined\" == typeof d ? -1e6 : d, this.maxForce = \"undefined\" == typeof i ? 1e6 : i, this.bi = e, this.bj = f, this.a = 0, this.b = 0, this.eps = 0, this.jacobianElementA = new o, this.jacobianElementB = new o, this.enabled = !0, this.setSpookParams(1e7, 4, 1 / 60);\r\n                }\r\n                f.exports = n;\r\n                var o = e(\"../math/JacobianElement\"), d = e(\"../math/Vec3\");\r\n                n.prototype.constructor = n, n.id = 0, n.prototype.setSpookParams = function (e, f, n) { var o = f, d = e, i = n; this.a = 4 / (i * (1 + 4 * o)), this.b = 4 * o / (1 + 4 * o), this.eps = 4 / (i * i * d * (1 + 4 * o)); }, n.prototype.computeB = function (e, f, n) { var o = this.computeGW(), d = this.computeGq(), i = this.computeGiMf(); return -d * e - o * f - i * n; }, n.prototype.computeGq = function () { var e = this.jacobianElementA, f = this.jacobianElementB, n = this.bi, o = this.bj, d = n.position, i = o.position; return e.spatial.dot(d) + f.spatial.dot(i); };\r\n                var i = new d;\r\n                n.prototype.computeGW = function () { var e = this.jacobianElementA, f = this.jacobianElementB, n = this.bi, o = this.bj, d = n.velocity, t = o.velocity, l = n.angularVelocity || i, u = o.angularVelocity || i; return e.multiplyVectors(d, l) + f.multiplyVectors(t, u); }, n.prototype.computeGWlambda = function () { var e = this.jacobianElementA, f = this.jacobianElementB, n = this.bi, o = this.bj, d = n.vlambda, t = o.vlambda, l = n.wlambda || i, u = o.wlambda || i; return e.multiplyVectors(d, l) + f.multiplyVectors(t, u); };\r\n                var t = new d, l = new d, u = new d, p = new d;\r\n                n.prototype.computeGiMf = function () { var e = this.jacobianElementA, f = this.jacobianElementB, n = this.bi, o = this.bj, d = n.force, i = n.torque, s = o.force, y = o.torque, c = n.invMassSolve, a = o.invMassSolve; return n.invInertiaWorldSolve ? n.invInertiaWorldSolve.vmult(i, u) : u.set(0, 0, 0), o.invInertiaWorldSolve ? o.invInertiaWorldSolve.vmult(y, p) : p.set(0, 0, 0), d.mult(c, t), s.mult(a, l), e.multiplyVectors(t, u) + f.multiplyVectors(l, p); };\r\n                var s = new d;\r\n                n.prototype.computeGiMGt = function () { var e = this.jacobianElementA, f = this.jacobianElementB, n = this.bi, o = this.bj, d = n.invMassSolve, i = o.invMassSolve, t = n.invInertiaWorldSolve, l = o.invInertiaWorldSolve, u = d + i; return t && (t.vmult(e.rotational, s), u += s.dot(e.rotational)), l && (l.vmult(f.rotational, s), u += s.dot(f.rotational)), u; };\r\n                {\r\n                    var y = new d;\r\n                    new d, new d, new d, new d, new d;\r\n                }\r\n                n.prototype.addToWlambda = function (e) { var f = this.jacobianElementA, n = this.jacobianElementB, o = this.bi, d = this.bj, i = y; f.spatial.mult(o.invMassSolve * e, i), o.vlambda.vadd(i, o.vlambda), n.spatial.mult(d.invMassSolve * e, i), d.vlambda.vadd(i, d.vlambda), o.invInertiaWorldSolve && (o.invInertiaWorldSolve.vmult(f.rotational, i), i.mult(e, i), o.wlambda.vadd(i, o.wlambda)), d.invInertiaWorldSolve && (d.invInertiaWorldSolve.vmult(n.rotational, i), i.mult(e, i), d.wlambda.vadd(i, d.wlambda)); }, n.prototype.computeC = function () { return this.computeGiMGt() + this.eps; };\r\n            }, { \"../math/JacobianElement\": 26, \"../math/Vec3\": 30 }], 21: [function (e, f) { function n(e, f, n) { o.call(this, e, f, -n, n), this.ri = new d, this.rj = new d, this.t = new d; } f.exports = n; {\r\n                var o = e(\"./Equation\"), d = e(\"../math/Vec3\");\r\n                e(\"../math/Mat3\");\r\n            } n.prototype = new o, n.prototype.constructor = n; var i = new d, t = new d; n.prototype.computeB = function (e) { var f = (this.a, this.b), n = (this.bi, this.bj, this.ri), o = this.rj, d = i, l = t, u = this.t; n.cross(u, d), o.cross(u, l); var p = this.jacobianElementA, s = this.jacobianElementB; u.negate(p.spatial), d.negate(p.rotational), s.spatial.copy(u), s.rotational.copy(l); var y = this.computeGW(), c = this.computeGiMf(), a = -y * f - e * c; return a; }; }, { \"../math/Mat3\": 27, \"../math/Vec3\": 30, \"./Equation\": 20 }], 22: [function (e, f) { function n(e, f, n) { n = n || {}; var i = \"undefined\" != typeof n.maxForce ? n.maxForce : 1e6; d.call(this, e, f, -i, i), this.axisA = n.axisA ? n.axisA.clone() : new o(1, 0, 0), this.axisB = n.axisB ? n.axisB.clone() : new o(0, 1, 0), this.maxAngle = Math.PI / 2; } f.exports = n; var o = e(\"../math/Vec3\"), d = (e(\"../math/Mat3\"), e(\"./Equation\")); n.prototype = new d, n.prototype.constructor = n; var i = new o, t = new o; n.prototype.computeB = function (e) { var f = this.a, n = this.b, o = this.axisA, d = this.axisB, l = i, u = t, p = this.jacobianElementA, s = this.jacobianElementB; o.cross(d, l), d.cross(o, u), p.rotational.copy(u), s.rotational.copy(l); var y = Math.cos(this.maxAngle) - o.dot(d), c = this.computeGW(), a = this.computeGiMf(), r = -y * f - c * n - e * a; return r; }; }, { \"../math/Mat3\": 27, \"../math/Vec3\": 30, \"./Equation\": 20 }], 23: [function (e, f) { function n(e, f, n) { n = \"undefined\" != typeof n ? n : 1e6, d.call(this, e, f, -n, n), this.axisA = new o, this.axisB = new o, this.targetVelocity = 0; } f.exports = n; var o = e(\"../math/Vec3\"), d = (e(\"../math/Mat3\"), e(\"./Equation\")); n.prototype = new d, n.prototype.constructor = n, n.prototype.computeB = function (e) { var f = (this.a, this.b), n = (this.bi, this.bj, this.axisA), o = this.axisB, d = this.jacobianElementA, i = this.jacobianElementB; d.rotational.copy(n), o.negate(i.rotational); var t = this.computeGW() - this.targetVelocity, l = this.computeGiMf(), u = -t * f - e * l; return u; }; }, { \"../math/Mat3\": 27, \"../math/Vec3\": 30, \"./Equation\": 20 }], 24: [function (e, f) { function n(e, f, d) { d = o.defaults(d, { friction: .3, restitution: .3, contactEquationStiffness: 1e7, contactEquationRelaxation: 3, frictionEquationStiffness: 1e7, frictionEquationRelaxation: 3 }), this.id = n.idCounter++, this.materials = [e, f], this.friction = d.friction, this.restitution = d.restitution, this.contactEquationStiffness = d.contactEquationStiffness, this.contactEquationRelaxation = d.contactEquationRelaxation, this.frictionEquationStiffness = d.frictionEquationStiffness, this.frictionEquationRelaxation = d.frictionEquationRelaxation; } var o = e(\"../utils/Utils\"); f.exports = n, n.idCounter = 0; }, { \"../utils/Utils\": 53 }], 25: [function (e, f) { function n(e) { var f = \"\"; e = e || {}, \"string\" == typeof e ? (f = e, e = {}) : \"object\" == typeof e && (f = \"\"), this.name = f, this.id = n.idCounter++, this.friction = \"undefined\" != typeof e.friction ? e.friction : -1, this.restitution = \"undefined\" != typeof e.restitution ? e.restitution : -1; } f.exports = n, n.idCounter = 0; }, {}], 26: [function (e, f) { function n() { this.spatial = new o, this.rotational = new o; } f.exports = n; var o = e(\"./Vec3\"); n.prototype.multiplyElement = function (e) { return e.spatial.dot(this.spatial) + e.rotational.dot(this.rotational); }, n.prototype.multiplyVectors = function (e, f) { return e.dot(this.spatial) + f.dot(this.rotational); }; }, { \"./Vec3\": 30 }], 27: [function (e, f) { function n(e) { this.elements = e ? e : [0, 0, 0, 0, 0, 0, 0, 0, 0]; } f.exports = n; var o = e(\"./Vec3\"); n.prototype.identity = function () { var e = this.elements; e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 1; }, n.prototype.setZero = function () { var e = this.elements; e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 0, e[5] = 0, e[6] = 0, e[7] = 0, e[8] = 0; }, n.prototype.setTrace = function (e) { var f = this.elements; f[0] = e.x, f[4] = e.y, f[8] = e.z; }, n.prototype.getTrace = function (e) { var e = e || new o, f = this.elements; e.x = f[0], e.y = f[4], e.z = f[8]; }, n.prototype.vmult = function (e, f) { f = f || new o; var n = this.elements, d = e.x, i = e.y, t = e.z; return f.x = n[0] * d + n[1] * i + n[2] * t, f.y = n[3] * d + n[4] * i + n[5] * t, f.z = n[6] * d + n[7] * i + n[8] * t, f; }, n.prototype.smult = function (e) { for (var f = 0; f < this.elements.length; f++)\r\n                this.elements[f] *= e; }, n.prototype.mmult = function (e, f) { for (var o = f || new n, d = 0; 3 > d; d++)\r\n                for (var i = 0; 3 > i; i++) {\r\n                    for (var t = 0, l = 0; 3 > l; l++)\r\n                        t += e.elements[d + 3 * l] * this.elements[l + 3 * i];\r\n                    o.elements[d + 3 * i] = t;\r\n                } return o; }, n.prototype.scale = function (e, f) { f = f || new n; for (var o = this.elements, d = f.elements, i = 0; 3 !== i; i++)\r\n                d[3 * i + 0] = e.x * o[3 * i + 0], d[3 * i + 1] = e.y * o[3 * i + 1], d[3 * i + 2] = e.z * o[3 * i + 2]; return f; }, n.prototype.solve = function (e, f) { f = f || new o; for (var n = 3, d = 4, i = [], t = 0; n * d > t; t++)\r\n                i.push(0); var t, l; for (t = 0; 3 > t; t++)\r\n                for (l = 0; 3 > l; l++)\r\n                    i[t + d * l] = this.elements[t + 3 * l]; i[3] = e.x, i[7] = e.y, i[11] = e.z; var u, p, s = 3, y = s, c = 4; do {\r\n                if (t = y - s, 0 === i[t + d * t])\r\n                    for (l = t + 1; y > l; l++)\r\n                        if (0 !== i[t + d * l]) {\r\n                            u = c;\r\n                            do\r\n                                p = c - u, i[p + d * t] += i[p + d * l];\r\n                            while (--u);\r\n                            break;\r\n                        }\r\n                if (0 !== i[t + d * t])\r\n                    for (l = t + 1; y > l; l++) {\r\n                        var a = i[t + d * l] / i[t + d * t];\r\n                        u = c;\r\n                        do\r\n                            p = c - u, i[p + d * l] = t >= p ? 0 : i[p + d * l] - i[p + d * t] * a;\r\n                        while (--u);\r\n                    }\r\n            } while (--s); if (f.z = i[2 * d + 3] / i[2 * d + 2], f.y = (i[1 * d + 3] - i[1 * d + 2] * f.z) / i[1 * d + 1], f.x = (i[0 * d + 3] - i[0 * d + 2] * f.z - i[0 * d + 1] * f.y) / i[0 * d + 0], isNaN(f.x) || isNaN(f.y) || isNaN(f.z) || 1 / 0 === f.x || 1 / 0 === f.y || 1 / 0 === f.z)\r\n                throw \"Could not solve equation! Got x=[\" + f.toString() + \"], b=[\" + e.toString() + \"], A=[\" + this.toString() + \"]\"; return f; }, n.prototype.e = function (e, f, n) { return void 0 === n ? this.elements[f + 3 * e] : void (this.elements[f + 3 * e] = n); }, n.prototype.copy = function (e) { for (var f = 0; f < e.elements.length; f++)\r\n                this.elements[f] = e.elements[f]; return this; }, n.prototype.toString = function () { for (var e = \"\", f = \",\", n = 0; 9 > n; n++)\r\n                e += this.elements[n] + f; return e; }, n.prototype.reverse = function (e) { e = e || new n; for (var f = 3, o = 6, d = [], i = 0; f * o > i; i++)\r\n                d.push(0); var i, t; for (i = 0; 3 > i; i++)\r\n                for (t = 0; 3 > t; t++)\r\n                    d[i + o * t] = this.elements[i + 3 * t]; d[3] = 1, d[9] = 0, d[15] = 0, d[4] = 0, d[10] = 1, d[16] = 0, d[5] = 0, d[11] = 0, d[17] = 1; var l, u, p = 3, s = p, y = o; do {\r\n                if (i = s - p, 0 === d[i + o * i])\r\n                    for (t = i + 1; s > t; t++)\r\n                        if (0 !== d[i + o * t]) {\r\n                            l = y;\r\n                            do\r\n                                u = y - l, d[u + o * i] += d[u + o * t];\r\n                            while (--l);\r\n                            break;\r\n                        }\r\n                if (0 !== d[i + o * i])\r\n                    for (t = i + 1; s > t; t++) {\r\n                        var c = d[i + o * t] / d[i + o * i];\r\n                        l = y;\r\n                        do\r\n                            u = y - l, d[u + o * t] = i >= u ? 0 : d[u + o * t] - d[u + o * i] * c;\r\n                        while (--l);\r\n                    }\r\n            } while (--p); i = 2; do {\r\n                t = i - 1;\r\n                do {\r\n                    var c = d[i + o * t] / d[i + o * i];\r\n                    l = o;\r\n                    do\r\n                        u = o - l, d[u + o * t] = d[u + o * t] - d[u + o * i] * c;\r\n                    while (--l);\r\n                } while (t--);\r\n            } while (--i); i = 2; do {\r\n                var c = 1 / d[i + o * i];\r\n                l = o;\r\n                do\r\n                    u = o - l, d[u + o * i] = d[u + o * i] * c;\r\n                while (--l);\r\n            } while (i--); i = 2; do {\r\n                t = 2;\r\n                do {\r\n                    if (u = d[f + t + o * i], isNaN(u) || 1 / 0 === u)\r\n                        throw \"Could not reverse! A=[\" + this.toString() + \"]\";\r\n                    e.e(i, t, u);\r\n                } while (t--);\r\n            } while (i--); return e; }, n.prototype.setRotationFromQuaternion = function (e) { var f = e.x, n = e.y, o = e.z, d = e.w, i = f + f, t = n + n, l = o + o, u = f * i, p = f * t, s = f * l, y = n * t, c = n * l, a = o * l, r = d * i, w = d * t, b = d * l, m = this.elements; return m[0] = 1 - (y + a), m[1] = p - b, m[2] = s + w, m[3] = p + b, m[4] = 1 - (u + a), m[5] = c - r, m[6] = s - w, m[7] = c + r, m[8] = 1 - (u + y), this; }, n.prototype.transpose = function (e) { e = e || new n; for (var f = e.elements, o = this.elements, d = 0; 3 !== d; d++)\r\n                for (var i = 0; 3 !== i; i++)\r\n                    f[3 * d + i] = o[3 * i + d]; return e; }; }, { \"./Vec3\": 30 }], 28: [function (e, f) { function n(e, f, n, o) { this.x = void 0 !== e ? e : 0, this.y = void 0 !== f ? f : 0, this.z = void 0 !== n ? n : 0, this.w = void 0 !== o ? o : 1; } f.exports = n; var o = e(\"./Vec3\"); n.prototype.set = function (e, f, n, o) { this.x = e, this.y = f, this.z = n, this.w = o; }, n.prototype.toString = function () { return this.x + \",\" + this.y + \",\" + this.z + \",\" + this.w; }, n.prototype.toArray = function () { return [this.x, this.y, this.z, this.w]; }, n.prototype.setFromAxisAngle = function (e, f) { var n = Math.sin(.5 * f); this.x = e.x * n, this.y = e.y * n, this.z = e.z * n, this.w = Math.cos(.5 * f); }, n.prototype.toAxisAngle = function (e) { e = e || new o, this.normalize(); var f = 2 * Math.acos(this.w), n = Math.sqrt(1 - this.w * this.w); return .001 > n ? (e.x = this.x, e.y = this.y, e.z = this.z) : (e.x = this.x / n, e.y = this.y / n, e.z = this.z / n), [e, f]; }; var d = new o, i = new o; n.prototype.setFromVectors = function (e, f) { if (e.isAntiparallelTo(f)) {\r\n                var n = d, o = i;\r\n                e.tangents(n, o), this.setFromAxisAngle(n, Math.PI);\r\n            }\r\n            else {\r\n                var t = e.cross(f);\r\n                this.x = t.x, this.y = t.y, this.z = t.z, this.w = Math.sqrt(Math.pow(e.norm(), 2) * Math.pow(f.norm(), 2)) + e.dot(f), this.normalize();\r\n            } }; var t = new o, l = new o, u = new o; n.prototype.mult = function (e, f) { f = f || new n; var o = this.w, d = t, i = l, p = u; return d.set(this.x, this.y, this.z), i.set(e.x, e.y, e.z), f.w = o * e.w - d.dot(i), d.cross(i, p), f.x = o * i.x + e.w * d.x + p.x, f.y = o * i.y + e.w * d.y + p.y, f.z = o * i.z + e.w * d.z + p.z, f; }, n.prototype.inverse = function (e) { var f = this.x, o = this.y, d = this.z, i = this.w; e = e || new n, this.conjugate(e); var t = 1 / (f * f + o * o + d * d + i * i); return e.x *= t, e.y *= t, e.z *= t, e.w *= t, e; }, n.prototype.conjugate = function (e) { return e = e || new n, e.x = -this.x, e.y = -this.y, e.z = -this.z, e.w = this.w, e; }, n.prototype.normalize = function () { var e = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w); 0 === e ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (e = 1 / e, this.x *= e, this.y *= e, this.z *= e, this.w *= e); }, n.prototype.normalizeFast = function () { var e = (3 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2; 0 === e ? (this.x = 0, this.y = 0, this.z = 0, this.w = 0) : (this.x *= e, this.y *= e, this.z *= e, this.w *= e); }, n.prototype.vmult = function (e, f) { f = f || new o; var n = e.x, d = e.y, i = e.z, t = this.x, l = this.y, u = this.z, p = this.w, s = p * n + l * i - u * d, y = p * d + u * n - t * i, c = p * i + t * d - l * n, a = -t * n - l * d - u * i; return f.x = s * p + a * -t + y * -u - c * -l, f.y = y * p + a * -l + c * -t - s * -u, f.z = c * p + a * -u + s * -l - y * -t, f; }, n.prototype.copy = function (e) { return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w, this; }, n.prototype.toEuler = function (e, f) { f = f || \"YZX\"; var n, o, d, i = this.x, t = this.y, l = this.z, u = this.w; switch (f) {\r\n                case \"YZX\":\r\n                    var p = i * t + l * u;\r\n                    if (p > .499 && (n = 2 * Math.atan2(i, u), o = Math.PI / 2, d = 0), -.499 > p && (n = -2 * Math.atan2(i, u), o = -Math.PI / 2, d = 0), isNaN(n)) {\r\n                        var s = i * i, y = t * t, c = l * l;\r\n                        n = Math.atan2(2 * t * u - 2 * i * l, 1 - 2 * y - 2 * c), o = Math.asin(2 * p), d = Math.atan2(2 * i * u - 2 * t * l, 1 - 2 * s - 2 * c);\r\n                    }\r\n                    break;\r\n                default: throw new Error(\"Euler order \" + f + \" not supported yet.\");\r\n            } e.y = n, e.z = o, e.x = d; }, n.prototype.setFromEuler = function (e, f, n, o) { o = o || \"XYZ\"; var d = Math.cos(e / 2), i = Math.cos(f / 2), t = Math.cos(n / 2), l = Math.sin(e / 2), u = Math.sin(f / 2), p = Math.sin(n / 2); return \"XYZ\" === o ? (this.x = l * i * t + d * u * p, this.y = d * u * t - l * i * p, this.z = d * i * p + l * u * t, this.w = d * i * t - l * u * p) : \"YXZ\" === o ? (this.x = l * i * t + d * u * p, this.y = d * u * t - l * i * p, this.z = d * i * p - l * u * t, this.w = d * i * t + l * u * p) : \"ZXY\" === o ? (this.x = l * i * t - d * u * p, this.y = d * u * t + l * i * p, this.z = d * i * p + l * u * t, this.w = d * i * t - l * u * p) : \"ZYX\" === o ? (this.x = l * i * t - d * u * p, this.y = d * u * t + l * i * p, this.z = d * i * p - l * u * t, this.w = d * i * t + l * u * p) : \"YZX\" === o ? (this.x = l * i * t + d * u * p, this.y = d * u * t + l * i * p, this.z = d * i * p - l * u * t, this.w = d * i * t - l * u * p) : \"XZY\" === o && (this.x = l * i * t - d * u * p, this.y = d * u * t - l * i * p, this.z = d * i * p + l * u * t, this.w = d * i * t + l * u * p), this; }, n.prototype.clone = function () { return new n(this.x, this.y, this.z, this.w); }; }, { \"./Vec3\": 30 }], 29: [function (e, f) { function n(e) { e = e || {}, this.position = new o, e.position && this.position.copy(e.position), this.quaternion = new d, e.quaternion && this.quaternion.copy(e.quaternion); } var o = e(\"./Vec3\"), d = e(\"./Quaternion\"); f.exports = n; var i = new d; n.pointToLocalFrame = function (e, f, n, d) { var d = d || new o; return n.vsub(e, d), f.conjugate(i), i.vmult(d, d), d; }, n.prototype.pointToLocal = function (e, f) { return n.pointToLocalFrame(this.position, this.quaternion, e, f); }, n.pointToWorldFrame = function (e, f, n, d) { var d = d || new o; return f.vmult(n, d), d.vadd(e, d), d; }, n.prototype.pointToWorld = function (e, f) { return n.pointToWorldFrame(this.position, this.quaternion, e, f); }, n.prototype.vectorToWorldFrame = function (e, f) { var f = f || new o; return this.quaternion.vmult(e, f), f; }, n.vectorToWorldFrame = function (e, f, n) { return e.vmult(f, n), n; }, n.vectorToLocalFrame = function (e, f, n, d) { var d = d || new o; return f.w *= -1, f.vmult(n, d), f.w *= -1, d; }; }, { \"./Quaternion\": 28, \"./Vec3\": 30 }], 30: [function (e, f) { function n(e, f, n) { this.x = e || 0, this.y = f || 0, this.z = n || 0; } f.exports = n; var o = e(\"./Mat3\"); n.ZERO = new n(0, 0, 0), n.UNIT_X = new n(1, 0, 0), n.UNIT_Y = new n(0, 1, 0), n.UNIT_Z = new n(0, 0, 1), n.prototype.cross = function (e, f) { var o = e.x, d = e.y, i = e.z, t = this.x, l = this.y, u = this.z; return f = f || new n, f.x = l * i - u * d, f.y = u * o - t * i, f.z = t * d - l * o, f; }, n.prototype.set = function (e, f, n) { return this.x = e, this.y = f, this.z = n, this; }, n.prototype.setZero = function () { this.x = this.y = this.z = 0; }, n.prototype.vadd = function (e, f) { return f ? (f.x = e.x + this.x, f.y = e.y + this.y, f.z = e.z + this.z, void 0) : new n(this.x + e.x, this.y + e.y, this.z + e.z); }, n.prototype.vsub = function (e, f) { return f ? (f.x = this.x - e.x, f.y = this.y - e.y, f.z = this.z - e.z, void 0) : new n(this.x - e.x, this.y - e.y, this.z - e.z); }, n.prototype.crossmat = function () { return new o([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]); }, n.prototype.normalize = function () { var e = this.x, f = this.y, n = this.z, o = Math.sqrt(e * e + f * f + n * n); if (o > 0) {\r\n                var d = 1 / o;\r\n                this.x *= d, this.y *= d, this.z *= d;\r\n            }\r\n            else\r\n                this.x = 0, this.y = 0, this.z = 0; return o; }, n.prototype.unit = function (e) { e = e || new n; var f = this.x, o = this.y, d = this.z, i = Math.sqrt(f * f + o * o + d * d); return i > 0 ? (i = 1 / i, e.x = f * i, e.y = o * i, e.z = d * i) : (e.x = 1, e.y = 0, e.z = 0), e; }, n.prototype.norm = function () { var e = this.x, f = this.y, n = this.z; return Math.sqrt(e * e + f * f + n * n); }, n.prototype.length = n.prototype.norm, n.prototype.norm2 = function () { return this.dot(this); }, n.prototype.lengthSquared = n.prototype.norm2, n.prototype.distanceTo = function (e) { var f = this.x, n = this.y, o = this.z, d = e.x, i = e.y, t = e.z; return Math.sqrt((d - f) * (d - f) + (i - n) * (i - n) + (t - o) * (t - o)); }, n.prototype.distanceSquared = function (e) { var f = this.x, n = this.y, o = this.z, d = e.x, i = e.y, t = e.z; return (d - f) * (d - f) + (i - n) * (i - n) + (t - o) * (t - o); }, n.prototype.mult = function (e, f) { f = f || new n; var o = this.x, d = this.y, i = this.z; return f.x = e * o, f.y = e * d, f.z = e * i, f; }, n.prototype.scale = n.prototype.mult, n.prototype.dot = function (e) { return this.x * e.x + this.y * e.y + this.z * e.z; }, n.prototype.isZero = function () { return 0 === this.x && 0 === this.y && 0 === this.z; }, n.prototype.negate = function (e) { return e = e || new n, e.x = -this.x, e.y = -this.y, e.z = -this.z, e; }; var d = new n, i = new n; n.prototype.tangents = function (e, f) { var n = this.norm(); if (n > 0) {\r\n                var o = d, t = 1 / n;\r\n                o.set(this.x * t, this.y * t, this.z * t);\r\n                var l = i;\r\n                Math.abs(o.x) < .9 ? (l.set(1, 0, 0), o.cross(l, e)) : (l.set(0, 1, 0), o.cross(l, e)), o.cross(e, f);\r\n            }\r\n            else\r\n                e.set(1, 0, 0), f.set(0, 1, 0); }, n.prototype.toString = function () { return this.x + \",\" + this.y + \",\" + this.z; }, n.prototype.toArray = function () { return [this.x, this.y, this.z]; }, n.prototype.copy = function (e) { return this.x = e.x, this.y = e.y, this.z = e.z, this; }, n.prototype.lerp = function (e, f, n) { var o = this.x, d = this.y, i = this.z; n.x = o + (e.x - o) * f, n.y = d + (e.y - d) * f, n.z = i + (e.z - i) * f; }, n.prototype.almostEquals = function (e, f) { return void 0 === f && (f = 1e-6), Math.abs(this.x - e.x) > f || Math.abs(this.y - e.y) > f || Math.abs(this.z - e.z) > f ? !1 : !0; }, n.prototype.almostZero = function (e) { return void 0 === e && (e = 1e-6), Math.abs(this.x) > e || Math.abs(this.y) > e || Math.abs(this.z) > e ? !1 : !0; }; var t = new n; n.prototype.isAntiparallelTo = function (e, f) { return this.negate(t), t.almostEquals(e, f); }, n.prototype.clone = function () { return new n(this.x, this.y, this.z); }; }, { \"./Mat3\": 27 }], 31: [function (e, f) { function n(e) { e = e || {}, o.apply(this), this.id = n.idCounter++, this.world = null, this.preStep = null, this.postStep = null, this.vlambda = new d, this.collisionFilterGroup = \"number\" == typeof e.collisionFilterGroup ? e.collisionFilterGroup : 1, this.collisionFilterMask = \"number\" == typeof e.collisionFilterMask ? e.collisionFilterMask : 1, this.collisionResponse = !0, this.position = new d, e.position && this.position.copy(e.position), this.previousPosition = new d, this.initPosition = new d, this.velocity = new d, e.velocity && this.velocity.copy(e.velocity), this.initVelocity = new d, this.force = new d; var f = \"number\" == typeof e.mass ? e.mass : 0; this.mass = f, this.invMass = f > 0 ? 1 / f : 0, this.material = e.material || null, this.linearDamping = \"number\" == typeof e.linearDamping ? e.linearDamping : .01, this.type = 0 >= f ? n.STATIC : n.DYNAMIC, typeof e.type == typeof n.STATIC && (this.type = e.type), this.allowSleep = \"undefined\" != typeof e.allowSleep ? e.allowSleep : !0, this.sleepState = 0, this.sleepSpeedLimit = \"undefined\" != typeof e.sleepSpeedLimit ? e.sleepSpeedLimit : .1, this.sleepTimeLimit = \"undefined\" != typeof e.sleepTimeLimit ? e.sleepTimeLimit : 1, this.timeLastSleepy = 0, this._wakeUpAfterNarrowphase = !1, this.torque = new d, this.quaternion = new t, e.quaternion && this.quaternion.copy(e.quaternion), this.initQuaternion = new t, this.angularVelocity = new d, e.angularVelocity && this.angularVelocity.copy(e.angularVelocity), this.initAngularVelocity = new d, this.interpolatedPosition = new d, this.interpolatedQuaternion = new t, this.shapes = [], this.shapeOffsets = [], this.shapeOrientations = [], this.inertia = new d, this.invInertia = new d, this.invInertiaWorld = new i, this.invMassSolve = 0, this.invInertiaSolve = new d, this.invInertiaWorldSolve = new i, this.fixedRotation = \"undefined\" != typeof e.fixedRotation ? e.fixedRotation : !1, this.angularDamping = \"undefined\" != typeof e.angularDamping ? e.angularDamping : .01, this.aabb = new l, this.aabbNeedsUpdate = !0, this.wlambda = new d, e.shape && this.addShape(e.shape), this.updateMassProperties(); } f.exports = n; var o = e(\"../utils/EventTarget\"), d = (e(\"../shapes/Shape\"), e(\"../math/Vec3\")), i = e(\"../math/Mat3\"), t = e(\"../math/Quaternion\"), l = (e(\"../material/Material\"), e(\"../collision/AABB\")), u = e(\"../shapes/Box\"); n.prototype = new o, n.prototype.constructor = n, n.DYNAMIC = 1, n.STATIC = 2, n.KINEMATIC = 4, n.AWAKE = 0, n.SLEEPY = 1, n.SLEEPING = 2, n.idCounter = 0, n.prototype.wakeUp = function () { var e = this.sleepState; this.sleepState = 0, e === n.SLEEPING && this.dispatchEvent({ type: \"wakeup\" }); }, n.prototype.sleep = function () { this.sleepState = n.SLEEPING, this.velocity.set(0, 0, 0), this.angularVelocity.set(0, 0, 0); }, n.sleepyEvent = { type: \"sleepy\" }, n.sleepEvent = { type: \"sleep\" }, n.prototype.sleepTick = function (e) { if (this.allowSleep) {\r\n                var f = this.sleepState, o = this.velocity.norm2() + this.angularVelocity.norm2(), d = Math.pow(this.sleepSpeedLimit, 2);\r\n                f === n.AWAKE && d > o ? (this.sleepState = n.SLEEPY, this.timeLastSleepy = e, this.dispatchEvent(n.sleepyEvent)) : f === n.SLEEPY && o > d ? this.wakeUp() : f === n.SLEEPY && e - this.timeLastSleepy > this.sleepTimeLimit && (this.sleep(), this.dispatchEvent(n.sleepEvent));\r\n            } }, n.prototype.updateSolveMassProperties = function () { this.sleepState === n.SLEEPING || this.type === n.KINEMATIC ? (this.invMassSolve = 0, this.invInertiaSolve.setZero(), this.invInertiaWorldSolve.setZero()) : (this.invMassSolve = this.invMass, this.invInertiaSolve.copy(this.invInertia), this.invInertiaWorldSolve.copy(this.invInertiaWorld)); }, n.prototype.pointToLocalFrame = function (e, f) { var f = f || new d; return e.vsub(this.position, f), this.quaternion.conjugate().vmult(f, f), f; }, n.prototype.vectorToLocalFrame = function (e, f) { var f = f || new d; return this.quaternion.conjugate().vmult(e, f), f; }, n.prototype.pointToWorldFrame = function (e, f) { var f = f || new d; return this.quaternion.vmult(e, f), f.vadd(this.position, f), f; }, n.prototype.vectorToWorldFrame = function (e, f) { var f = f || new d; return this.quaternion.vmult(e, f), f; }; var p = new d, s = new t; n.prototype.addShape = function (e, f, n) { var o = new d, i = new t; return f && o.copy(f), n && i.copy(n), this.shapes.push(e), this.shapeOffsets.push(o), this.shapeOrientations.push(i), this.updateMassProperties(), this.updateBoundingRadius(), this.aabbNeedsUpdate = !0, this; }, n.prototype.updateBoundingRadius = function () { for (var e = this.shapes, f = this.shapeOffsets, n = e.length, o = 0, d = 0; d !== n; d++) {\r\n                var i = e[d];\r\n                i.updateBoundingSphereRadius();\r\n                var t = f[d].norm(), l = i.boundingSphereRadius;\r\n                t + l > o && (o = t + l);\r\n            } this.boundingRadius = o; }; var y = new l; n.prototype.computeAABB = function () { for (var e = this.shapes, f = this.shapeOffsets, n = this.shapeOrientations, o = e.length, d = p, i = s, t = this.quaternion, l = this.aabb, u = y, c = 0; c !== o; c++) {\r\n                var a = e[c];\r\n                n[c].mult(t, i), i.vmult(f[c], d), d.vadd(this.position, d), a.calculateWorldAABB(d, i, u.lowerBound, u.upperBound), 0 === c ? l.copy(u) : l.extend(u);\r\n            } this.aabbNeedsUpdate = !1; }; {\r\n                var c = new i, a = new i;\r\n                new i;\r\n            } n.prototype.updateInertiaWorld = function (e) { var f = this.invInertia; if (f.x !== f.y || f.y !== f.z || e) {\r\n                var n = c, o = a;\r\n                n.setRotationFromQuaternion(this.quaternion), n.transpose(o), n.scale(f, n), n.mmult(o, this.invInertiaWorld);\r\n            }\r\n            else\r\n                ; }; var r = new d, w = new d; n.prototype.applyForce = function (e, f) { if (this.type === n.DYNAMIC) {\r\n                var o = r;\r\n                f.vsub(this.position, o);\r\n                var d = w;\r\n                o.cross(e, d), this.force.vadd(e, this.force), this.torque.vadd(d, this.torque);\r\n            } }; var b = new d, m = new d; n.prototype.applyLocalForce = function (e, f) { if (this.type === n.DYNAMIC) {\r\n                var o = b, d = m;\r\n                this.vectorToWorldFrame(e, o), this.pointToWorldFrame(f, d), this.applyForce(o, d);\r\n            } }; var N = new d, g = new d, x = new d; n.prototype.applyImpulse = function (e, f) { if (this.type === n.DYNAMIC) {\r\n                var o = N;\r\n                f.vsub(this.position, o);\r\n                var d = g;\r\n                d.copy(e), d.mult(this.invMass, d), this.velocity.vadd(d, this.velocity);\r\n                var i = x;\r\n                o.cross(e, i), this.invInertiaWorld.vmult(i, i), this.angularVelocity.vadd(i, this.angularVelocity);\r\n            } }; var j = new d, v = new d; n.prototype.applyLocalImpulse = function (e, f) { if (this.type === n.DYNAMIC) {\r\n                var o = j, d = v;\r\n                this.vectorToWorldFrame(e, o), this.pointToWorldFrame(f, d), this.applyImpulse(o, d);\r\n            } }; var A = new d; n.prototype.updateMassProperties = function () { var e = A; this.invMass = this.mass > 0 ? 1 / this.mass : 0; var f = this.inertia, n = this.fixedRotation; this.computeAABB(), e.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2), u.calculateInertia(e, this.mass, f), this.invInertia.set(f.x > 0 && !n ? 1 / f.x : 0, f.y > 0 && !n ? 1 / f.y : 0, f.z > 0 && !n ? 1 / f.z : 0), this.updateInertiaWorld(!0); }, n.prototype.getVelocityAtWorldPoint = function (e, f) { var n = new d; return e.vsub(this.position, n), this.angularVelocity.cross(n, f), this.velocity.vadd(f, f), f; }; }, { \"../collision/AABB\": 3, \"../material/Material\": 25, \"../math/Mat3\": 27, \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"../shapes/Box\": 37, \"../shapes/Shape\": 43, \"../utils/EventTarget\": 49 }], 32: [function (e, f) { function n(e) { this.chassisBody = e.chassisBody, this.wheelInfos = [], this.sliding = !1, this.world = null, this.indexRightAxis = \"undefined\" != typeof e.indexRightAxis ? e.indexRightAxis : 1, this.indexForwardAxis = \"undefined\" != typeof e.indexForwardAxis ? e.indexForwardAxis : 0, this.indexUpAxis = \"undefined\" != typeof e.indexUpAxis ? e.indexUpAxis : 2; } function o(e, f, n, o, i) { var t = 0, l = n, u = x, p = j, s = v; e.getVelocityAtWorldPoint(l, u), f.getVelocityAtWorldPoint(l, p), u.vsub(p, s); var y = o.dot(s), c = d(e, n, o), a = d(f, n, o), r = 1, w = r / (c + a); return t = -y * w, t > i && (t = i), -i > t && (t = -i), t; } function d(e, f, n) { var o = A, d = C, i = O, t = h; return f.vsub(e.position, o), o.cross(n, d), e.invInertiaWorld.vmult(d, t), t.cross(o, i), e.invMass + n.dot(i); } function i(e, f, n, o, d, i) { var t = d.norm2(); if (t > 1.1)\r\n                return 0; var l = k, u = q, p = z; e.getVelocityAtWorldPoint(f, l), n.getVelocityAtWorldPoint(o, u), l.vsub(u, p); var s = d.dot(p), y = .2, c = 1 / (e.invMass + n.invMass), i = -y * s * c; return i; } var t = (e(\"./Body\"), e(\"../math/Vec3\")), l = e(\"../math/Quaternion\"), u = (e(\"../collision/RaycastResult\"), e(\"../collision/Ray\")), p = e(\"../objects/WheelInfo\"); f.exports = n; {\r\n                var s = (new t, new t, new t, new t), y = new t, c = new t;\r\n                new u;\r\n            } n.prototype.addWheel = function (e) { e = e || {}; var f = new p(e), n = this.wheelInfos.length; return this.wheelInfos.push(f), n; }, n.prototype.setSteeringValue = function (e, f) { var n = this.wheelInfos[f]; n.steering = e; }; new t; n.prototype.applyEngineForce = function (e, f) { this.wheelInfos[f].engineForce = e; }, n.prototype.setBrake = function (e, f) { this.wheelInfos[f].brake = e; }, n.prototype.addToWorld = function (e) { this.constraints; e.add(this.chassisBody); var f = this; this.preStepCallback = function () { f.updateVehicle(e.dt); }, e.addEventListener(\"preStep\", this.preStepCallback), this.world = e; }, n.prototype.getVehicleAxisWorld = function (e, f) { f.set(0 === e ? 1 : 0, 1 === e ? 1 : 0, 2 === e ? 1 : 0), this.chassisBody.vectorToWorldFrame(f, f); }, n.prototype.updateVehicle = function (e) { for (var f = this.wheelInfos, n = f.length, o = this.chassisBody, d = 0; n > d; d++)\r\n                this.updateWheelTransform(d); this.currentVehicleSpeedKmHour = 3.6 * o.velocity.norm(); var i = new t; this.getVehicleAxisWorld(this.indexForwardAxis, i), i.dot(o.velocity) < 0 && (this.currentVehicleSpeedKmHour *= -1); for (var d = 0; n > d; d++)\r\n                this.castRay(f[d]); this.updateSuspension(e); for (var l = new t, u = new t, d = 0; n > d; d++) {\r\n                var p = f[d], s = p.suspensionForce;\r\n                s > p.maxSuspensionForce && (s = p.maxSuspensionForce), p.raycastResult.hitNormalWorld.scale(s * e, l), p.raycastResult.hitPointWorld.vsub(o.position, u), o.applyImpulse(l, p.raycastResult.hitPointWorld);\r\n            } this.updateFriction(e); var y = new t, c = new t, a = new t; for (d = 0; n > d; d++) {\r\n                var p = f[d];\r\n                o.getVelocityAtWorldPoint(p.chassisConnectionPointWorld, a);\r\n                var r = 1;\r\n                switch (this.indexUpAxis) {\r\n                    case 1: r = -1;\r\n                }\r\n                if (p.isInContact) {\r\n                    this.getVehicleAxisWorld(this.indexForwardAxis, c);\r\n                    var w = c.dot(p.raycastResult.hitNormalWorld);\r\n                    p.raycastResult.hitNormalWorld.scale(w, y), c.vsub(y, c);\r\n                    var b = c.dot(a);\r\n                    p.deltaRotation = r * b * e / p.radius;\r\n                }\r\n                !p.sliding && p.isInContact || 0 === p.engineForce || !p.useCustomSlidingRotationalSpeed || (p.deltaRotation = (p.engineForce > 0 ? 1 : -1) * p.customSlidingRotationalSpeed * e), Math.abs(p.brake) > Math.abs(p.engineForce) && (p.deltaRotation = 0), p.rotation += p.deltaRotation, p.deltaRotation *= .99;\r\n            } }, n.prototype.updateSuspension = function () { for (var e = this.chassisBody, f = e.mass, n = this.wheelInfos, o = n.length, d = 0; o > d; d++) {\r\n                var i = n[d];\r\n                if (i.isInContact) {\r\n                    var t, l = i.suspensionRestLength, u = i.suspensionLength, p = l - u;\r\n                    t = i.suspensionStiffness * p * i.clippedInvContactDotSuspension;\r\n                    var s, y = i.suspensionRelativeVelocity;\r\n                    s = 0 > y ? i.dampingCompression : i.dampingRelaxation, t -= s * y, i.suspensionForce = t * f, i.suspensionForce < 0 && (i.suspensionForce = 0);\r\n                }\r\n                else\r\n                    i.suspensionForce = 0;\r\n            } }, n.prototype.removeFromWorld = function (e) { this.constraints; e.remove(this.chassisBody), e.removeEventListener(\"preStep\", this.preStepCallback), this.world = null; }; var a = new t, r = new t; n.prototype.castRay = function (e) { var f = a, n = r; this.updateWheelTransformWorld(e); var o = this.chassisBody, d = -1, i = e.suspensionRestLength + e.radius; e.directionWorld.scale(i, f); var l = e.chassisConnectionPointWorld; l.vadd(f, n); var u = e.raycastResult; u.reset(); var p = o.collisionResponse; o.collisionResponse = !1, this.world.rayTest(l, n, u), o.collisionResponse = p; var s = u.body; if (e.raycastResult.groundObject = 0, s) {\r\n                d = u.distance, e.raycastResult.hitNormalWorld = u.hitNormalWorld, e.isInContact = !0;\r\n                var y = u.distance;\r\n                e.suspensionLength = y - e.radius;\r\n                var c = e.suspensionRestLength - e.maxSuspensionTravel, w = e.suspensionRestLength + e.maxSuspensionTravel;\r\n                e.suspensionLength < c && (e.suspensionLength = c), e.suspensionLength > w && (e.suspensionLength = w, e.raycastResult.reset());\r\n                var b = e.raycastResult.hitNormalWorld.dot(e.directionWorld), m = new t;\r\n                o.getVelocityAtWorldPoint(e.raycastResult.hitPointWorld, m);\r\n                var N = e.raycastResult.hitNormalWorld.dot(m);\r\n                if (b >= -.1)\r\n                    e.suspensionRelativeVelocity = 0, e.clippedInvContactDotSuspension = 10;\r\n                else {\r\n                    var g = -1 / b;\r\n                    e.suspensionRelativeVelocity = N * g, e.clippedInvContactDotSuspension = g;\r\n                }\r\n            }\r\n            else\r\n                e.suspensionLength = e.suspensionRestLength + 0 * e.maxSuspensionTravel, e.suspensionRelativeVelocity = 0, e.directionWorld.scale(-1, e.raycastResult.hitNormalWorld), e.clippedInvContactDotSuspension = 1; return d; }, n.prototype.updateWheelTransformWorld = function (e) { e.isInContact = !1; var f = this.chassisBody; f.pointToWorldFrame(e.chassisConnectionPointLocal, e.chassisConnectionPointWorld), f.vectorToWorldFrame(e.directionLocal, e.directionWorld), f.vectorToWorldFrame(e.axleLocal, e.axleWorld); }, n.prototype.updateWheelTransform = function (e) { var f = s, n = y, o = c, d = this.wheelInfos[e]; this.updateWheelTransformWorld(d), d.directionLocal.scale(-1, f), n.copy(d.axleLocal), f.cross(n, o), o.normalize(), n.normalize(); var i = d.steering, t = new l; t.setFromAxisAngle(f, i); var u = new l; u.setFromAxisAngle(n, d.rotation); var p = d.worldTransform.quaternion; this.chassisBody.quaternion.mult(t, p), p.mult(u, p), p.normalize(); var a = d.worldTransform.position; a.copy(d.directionWorld), a.scale(d.suspensionLength, a), a.vadd(d.chassisConnectionPointWorld, a); }; var w = [new t(1, 0, 0), new t(0, 1, 0), new t(0, 0, 1)]; n.prototype.getWheelTransformWorld = function (e) { return this.wheelInfos[e].worldTransform; }; var b = new t, m = [], N = [], g = 1; n.prototype.updateFriction = function (e) { for (var f = b, n = this.wheelInfos, d = n.length, l = this.chassisBody, u = N, p = m, s = 0, y = 0; d > y; y++) {\r\n                var c = n[y], a = c.raycastResult.body;\r\n                a && s++, c.sideImpulse = 0, c.forwardImpulse = 0, u[y] || (u[y] = new t), p[y] || (p[y] = new t);\r\n            } for (var y = 0; d > y; y++) {\r\n                var c = n[y], a = c.raycastResult.body;\r\n                if (a) {\r\n                    var r = p[y], x = this.getWheelTransformWorld(y);\r\n                    x.vectorToWorldFrame(w[this.indexRightAxis], r);\r\n                    var j = c.raycastResult.hitNormalWorld, v = r.dot(j);\r\n                    j.scale(v, f), r.vsub(f, r), r.normalize(), j.cross(r, u[y]), u[y].normalize(), c.sideImpulse = i(l, c.raycastResult.hitPointWorld, a, c.raycastResult.hitPointWorld, r), c.sideImpulse *= g;\r\n                }\r\n            } var A = 1, C = .5; this.sliding = !1; for (var y = 0; d > y; y++) {\r\n                var c = n[y], a = c.raycastResult.body, O = 0;\r\n                if (c.slipInfo = 1, a) {\r\n                    var h = 0, k = c.brake ? c.brake : h;\r\n                    O = o(l, a, c.raycastResult.hitPointWorld, u[y], k), O += c.engineForce * e;\r\n                    var q = k / O;\r\n                    c.slipInfo *= q;\r\n                }\r\n                if (c.forwardImpulse = 0, c.skidInfo = 1, a) {\r\n                    c.skidInfo = 1;\r\n                    var z = c.suspensionForce * e * c.frictionSlip, B = z, D = z * B;\r\n                    c.forwardImpulse = O;\r\n                    var E = c.forwardImpulse * C, F = c.sideImpulse * A, G = E * E + F * F;\r\n                    if (c.sliding = !1, G > D) {\r\n                        this.sliding = !0, c.sliding = !0;\r\n                        var q = z / Math.sqrt(G);\r\n                        c.skidInfo *= q;\r\n                    }\r\n                }\r\n            } if (this.sliding)\r\n                for (var y = 0; d > y; y++) {\r\n                    var c = n[y];\r\n                    0 !== c.sideImpulse && c.skidInfo < 1 && (c.forwardImpulse *= c.skidInfo, c.sideImpulse *= c.skidInfo);\r\n                } for (var y = 0; d > y; y++) {\r\n                var c = n[y], H = new t;\r\n                if (H.copy(c.raycastResult.hitPointWorld), 0 !== c.forwardImpulse) {\r\n                    var I = new t;\r\n                    u[y].scale(c.forwardImpulse, I), l.applyImpulse(I, H);\r\n                }\r\n                if (0 !== c.sideImpulse) {\r\n                    var a = c.raycastResult.body, J = new t;\r\n                    J.copy(c.raycastResult.hitPointWorld);\r\n                    var K = new t;\r\n                    p[y].scale(c.sideImpulse, K), l.pointToLocalFrame(H, H), H[\"xyz\"[this.indexUpAxis]] *= c.rollInfluence, l.pointToWorldFrame(H, H), l.applyImpulse(K, H), K.scale(-1, K), a.applyImpulse(K, J);\r\n                }\r\n            } }; var x = new t, j = new t, v = new t, A = new t, C = new t, O = new t, h = new t, k = new t, q = new t, z = new t; }, { \"../collision/Ray\": 9, \"../collision/RaycastResult\": 10, \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"../objects/WheelInfo\": 36, \"./Body\": 31 }], 33: [function (e, f) {\r\n                function n(e) { if (this.wheelBodies = [], this.coordinateSystem = \"undefined\" == typeof e.coordinateSystem ? new t(1, 2, 3) : e.coordinateSystem.clone(), this.chassisBody = e.chassisBody, !this.chassisBody) {\r\n                    var f = new i(new t(5, 2, .5));\r\n                    this.chassisBody = new o(1, f);\r\n                } this.constraints = [], this.wheelAxes = [], this.wheelForces = []; }\r\n                var o = e(\"./Body\"), d = e(\"../shapes/Sphere\"), i = e(\"../shapes/Box\"), t = e(\"../math/Vec3\"), l = e(\"../constraints/HingeConstraint\");\r\n                f.exports = n, n.prototype.addWheel = function (e) { e = e || {}; var f = e.body; f || (f = new o(1, new d(1.2))), this.wheelBodies.push(f), this.wheelForces.push(0); var n = (new t, \"undefined\" != typeof e.position ? e.position.clone() : new t), i = new t; this.chassisBody.pointToWorldFrame(n, i), f.position.set(i.x, i.y, i.z); var u = \"undefined\" != typeof e.axis ? e.axis.clone() : new t(0, 1, 0); this.wheelAxes.push(u); var p = new l(this.chassisBody, f, { pivotA: n, axisA: u, pivotB: t.ZERO, axisB: u, collideConnected: !1 }); return this.constraints.push(p), this.wheelBodies.length - 1; }, n.prototype.setSteeringValue = function (e, f) { var n = this.wheelAxes[f], o = Math.cos(e), d = Math.sin(e), i = n.x, t = n.y; this.constraints[f].axisA.set(o * i - d * t, d * i + o * t, 0); }, n.prototype.setMotorSpeed = function (e, f) { var n = this.constraints[f]; n.enableMotor(), n.motorTargetVelocity = e; }, n.prototype.disableMotor = function (e) {\r\n                    var f = this.constraints[e];\r\n                    f.disableMotor();\r\n                };\r\n                var u = new t;\r\n                n.prototype.setWheelForce = function (e, f) { this.wheelForces[f] = e; }, n.prototype.applyWheelForce = function (e, f) { var n = this.wheelAxes[f], o = this.wheelBodies[f], d = o.torque; n.scale(e, u), o.vectorToWorldFrame(u, u), d.vadd(u, d); }, n.prototype.addToWorld = function (e) { for (var f = this.constraints, n = this.wheelBodies.concat([this.chassisBody]), o = 0; o < n.length; o++)\r\n                    e.add(n[o]); for (var o = 0; o < f.length; o++)\r\n                    e.addConstraint(f[o]); e.addEventListener(\"preStep\", this._update.bind(this)); }, n.prototype._update = function () { for (var e = this.wheelForces, f = 0; f < e.length; f++)\r\n                    this.applyWheelForce(e[f], f); }, n.prototype.removeFromWorld = function (e) { for (var f = this.constraints, n = this.wheelBodies.concat([this.chassisBody]), o = 0; o < n.length; o++)\r\n                    e.remove(n[o]); for (var o = 0; o < f.length; o++)\r\n                    e.removeConstraint(f[o]); };\r\n                var p = new t;\r\n                n.prototype.getWheelSpeed = function (e) { var f = this.wheelAxes[e], n = this.wheelBodies[e], o = n.angularVelocity; return this.chassisBody.vectorToWorldFrame(f, p), o.dot(p); };\r\n            }, { \"../constraints/HingeConstraint\": 15, \"../math/Vec3\": 30, \"../shapes/Box\": 37, \"../shapes/Sphere\": 44, \"./Body\": 31 }], 34: [function (e, f) { function n() { this.particles = [], this.density = 1, this.smoothingRadius = 1, this.speedOfSound = 1, this.viscosity = .01, this.eps = 1e-6, this.pressures = [], this.densities = [], this.neighbors = []; } f.exports = n; {\r\n                var o = (e(\"../shapes/Shape\"), e(\"../math/Vec3\"));\r\n                e(\"../math/Quaternion\"), e(\"../shapes/Particle\"), e(\"../objects/Body\"), e(\"../material/Material\");\r\n            } n.prototype.add = function (e) { this.particles.push(e), this.neighbors.length < this.particles.length && this.neighbors.push([]); }, n.prototype.remove = function (e) { var f = this.particles.indexOf(e); -1 !== f && (this.particles.splice(f, 1), this.neighbors.length > this.particles.length && this.neighbors.pop()); }; var d = new o; n.prototype.getNeighbors = function (e, f) { for (var n = this.particles.length, o = e.id, i = this.smoothingRadius * this.smoothingRadius, t = d, l = 0; l !== n; l++) {\r\n                var u = this.particles[l];\r\n                u.position.vsub(e.position, t), o !== u.id && t.norm2() < i && f.push(u);\r\n            } }; var i = new o, t = new o, l = new o, u = new o, p = new o, s = new o; n.prototype.update = function () { for (var e = this.particles.length, f = i, n = this.speedOfSound, o = this.eps, d = 0; d !== e; d++) {\r\n                var y = this.particles[d], c = this.neighbors[d];\r\n                c.length = 0, this.getNeighbors(y, c), c.push(this.particles[d]);\r\n                for (var a = c.length, r = 0, w = 0; w !== a; w++) {\r\n                    y.position.vsub(c[w].position, f);\r\n                    var b = f.norm(), m = this.w(b);\r\n                    r += c[w].mass * m;\r\n                }\r\n                this.densities[d] = r, this.pressures[d] = n * n * (this.densities[d] - this.density);\r\n            } for (var N = t, g = l, x = u, j = p, v = s, d = 0; d !== e; d++) {\r\n                var A = this.particles[d];\r\n                N.set(0, 0, 0), g.set(0, 0, 0);\r\n                for (var C, O, c = this.neighbors[d], a = c.length, w = 0; w !== a; w++) {\r\n                    var h = c[w];\r\n                    A.position.vsub(h.position, j);\r\n                    var k = j.norm();\r\n                    C = -h.mass * (this.pressures[d] / (this.densities[d] * this.densities[d] + o) + this.pressures[w] / (this.densities[w] * this.densities[w] + o)), this.gradw(j, x), x.mult(C, x), N.vadd(x, N), h.velocity.vsub(A.velocity, v), v.mult(1 / (1e-4 + this.densities[d] * this.densities[w]) * this.viscosity * h.mass, v), O = this.nablaw(k), v.mult(O, v), g.vadd(v, g);\r\n                }\r\n                g.mult(A.mass, g), N.mult(A.mass, N), A.force.vadd(g, A.force), A.force.vadd(N, A.force);\r\n            } }, n.prototype.w = function (e) { var f = this.smoothingRadius; return 315 / (64 * Math.PI * Math.pow(f, 9)) * Math.pow(f * f - e * e, 3); }, n.prototype.gradw = function (e, f) { var n = e.norm(), o = this.smoothingRadius; e.mult(945 / (32 * Math.PI * Math.pow(o, 9)) * Math.pow(o * o - n * n, 2), f); }, n.prototype.nablaw = function (e) { var f = this.smoothingRadius, n = 945 / (32 * Math.PI * Math.pow(f, 9)) * (f * f - e * e) * (7 * e * e - 3 * f * f); return n; }; }, { \"../material/Material\": 25, \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"../objects/Body\": 31, \"../shapes/Particle\": 41, \"../shapes/Shape\": 43 }], 35: [function (e, f) { function n(e, f, n) { n = n || {}, this.restLength = \"number\" == typeof n.restLength ? n.restLength : 1, this.stiffness = n.stiffness || 100, this.damping = n.damping || 1, this.bodyA = e, this.bodyB = f, this.localAnchorA = new o, this.localAnchorB = new o, n.localAnchorA && this.localAnchorA.copy(n.localAnchorA), n.localAnchorB && this.localAnchorB.copy(n.localAnchorB), n.worldAnchorA && this.setWorldAnchorA(n.worldAnchorA), n.worldAnchorB && this.setWorldAnchorB(n.worldAnchorB); } var o = e(\"../math/Vec3\"); f.exports = n, n.prototype.setWorldAnchorA = function (e) { this.bodyA.pointToLocalFrame(e, this.localAnchorA); }, n.prototype.setWorldAnchorB = function (e) { this.bodyB.pointToLocalFrame(e, this.localAnchorB); }, n.prototype.getWorldAnchorA = function (e) { this.bodyA.pointToWorldFrame(this.localAnchorA, e); }, n.prototype.getWorldAnchorB = function (e) { this.bodyB.pointToWorldFrame(this.localAnchorB, e); }; var d = new o, i = new o, t = new o, l = new o, u = new o, p = new o, s = new o, y = new o, c = new o, a = new o, r = new o; n.prototype.applyForce = function () { var e = this.stiffness, f = this.damping, n = this.restLength, o = this.bodyA, w = this.bodyB, b = d, m = i, N = t, g = l, x = r, j = u, v = p, A = s, C = y, O = c, h = a; this.getWorldAnchorA(j), this.getWorldAnchorB(v), j.vsub(o.position, A), v.vsub(w.position, C), v.vsub(j, b); var k = b.norm(); m.copy(b), m.normalize(), w.velocity.vsub(o.velocity, N), w.angularVelocity.cross(C, x), N.vadd(x, N), o.angularVelocity.cross(A, x), N.vsub(x, N), m.mult(-e * (k - n) - f * N.dot(m), g), o.force.vsub(g, o.force), w.force.vadd(g, w.force), A.cross(g, O), C.cross(g, h), o.torque.vsub(O, o.torque), w.torque.vadd(h, w.torque); }; }, { \"../math/Vec3\": 30 }], 36: [function (e, f) { function n(e) { e = t.defaults(e, { chassisConnectionPointLocal: new o, chassisConnectionPointWorld: new o, directionLocal: new o, directionWorld: new o, axleLocal: new o, axleWorld: new o, suspensionRestLength: 1, suspensionMaxLength: 2, radius: 1, suspensionStiffness: 100, dampingCompression: 10, dampingRelaxation: 10, frictionSlip: 1e4, steering: 0, rotation: 0, deltaRotation: 0, rollInfluence: .01, maxSuspensionForce: Number.MAX_VALUE, isFrontWheel: !0, clippedInvContactDotSuspension: 1, suspensionRelativeVelocity: 0, suspensionForce: 0, skidInfo: 0, suspensionLength: 0, maxSuspensionTravel: 1, useCustomSlidingRotationalSpeed: !1, customSlidingRotationalSpeed: -.1 }), this.maxSuspensionTravel = e.maxSuspensionTravel, this.customSlidingRotationalSpeed = e.customSlidingRotationalSpeed, this.useCustomSlidingRotationalSpeed = e.useCustomSlidingRotationalSpeed, this.sliding = !1, this.chassisConnectionPointLocal = e.chassisConnectionPointLocal.clone(), this.chassisConnectionPointWorld = e.chassisConnectionPointWorld.clone(), this.directionLocal = e.directionLocal.clone(), this.directionWorld = e.directionWorld.clone(), this.axleLocal = e.axleLocal.clone(), this.axleWorld = e.axleWorld.clone(), this.suspensionRestLength = e.suspensionRestLength, this.suspensionMaxLength = e.suspensionMaxLength, this.radius = e.radius, this.suspensionStiffness = e.suspensionStiffness, this.dampingCompression = e.dampingCompression, this.dampingRelaxation = e.dampingRelaxation, this.frictionSlip = e.frictionSlip, this.steering = 0, this.rotation = 0, this.deltaRotation = 0, this.rollInfluence = e.rollInfluence, this.maxSuspensionForce = e.maxSuspensionForce, this.engineForce = 0, this.brake = 0, this.isFrontWheel = e.isFrontWheel, this.clippedInvContactDotSuspension = 1, this.suspensionRelativeVelocity = 0, this.suspensionForce = 0, this.skidInfo = 0, this.suspensionLength = 0, this.sideImpulse = 0, this.forwardImpulse = 0, this.raycastResult = new i, this.worldTransform = new d, this.isInContact = !1; } var o = e(\"../math/Vec3\"), d = e(\"../math/Transform\"), i = e(\"../collision/RaycastResult\"), t = e(\"../utils/Utils\"); f.exports = n; var l = new o, u = new o, l = new o; n.prototype.updateWheel = function (e) { var f = this.raycastResult; if (this.isInContact) {\r\n                var n = f.hitNormalWorld.dot(f.directionWorld);\r\n                f.hitPointWorld.vsub(e.position, u), e.getVelocityAtWorldPoint(u, l);\r\n                var o = f.hitNormalWorld.dot(l);\r\n                if (n >= -.1)\r\n                    this.suspensionRelativeVelocity = 0, this.clippedInvContactDotSuspension = 10;\r\n                else {\r\n                    var d = -1 / n;\r\n                    this.suspensionRelativeVelocity = o * d, this.clippedInvContactDotSuspension = d;\r\n                }\r\n            }\r\n            else\r\n                f.suspensionLength = this.suspensionRestLength, this.suspensionRelativeVelocity = 0, f.directionWorld.scale(-1, f.hitNormalWorld), this.clippedInvContactDotSuspension = 1; }; }, { \"../collision/RaycastResult\": 10, \"../math/Transform\": 29, \"../math/Vec3\": 30, \"../utils/Utils\": 53 }], 37: [function (e, f) { function n(e) { o.call(this), this.type = o.types.BOX, this.halfExtents = e, this.convexPolyhedronRepresentation = null, this.updateConvexPolyhedronRepresentation(), this.updateBoundingSphereRadius(); } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"), i = e(\"./ConvexPolyhedron\"); n.prototype = new o, n.prototype.constructor = n, n.prototype.updateConvexPolyhedronRepresentation = function () { var e = this.halfExtents.x, f = this.halfExtents.y, n = this.halfExtents.z, o = d, t = [new o(-e, -f, -n), new o(e, -f, -n), new o(e, f, -n), new o(-e, f, -n), new o(-e, -f, n), new o(e, -f, n), new o(e, f, n), new o(-e, f, n)], l = [[3, 2, 1, 0], [4, 5, 6, 7], [5, 4, 0, 1], [2, 3, 7, 6], [0, 4, 7, 3], [1, 2, 6, 5]], u = ([new o(0, 0, 1), new o(0, 1, 0), new o(1, 0, 0)], new i(t, l)); this.convexPolyhedronRepresentation = u, u.material = this.material; }, n.prototype.calculateLocalInertia = function (e, f) { return f = f || new d, n.calculateInertia(this.halfExtents, e, f), f; }, n.calculateInertia = function (e, f, n) { var o = e; n.x = 1 / 12 * f * (2 * o.y * 2 * o.y + 2 * o.z * 2 * o.z), n.y = 1 / 12 * f * (2 * o.x * 2 * o.x + 2 * o.z * 2 * o.z), n.z = 1 / 12 * f * (2 * o.y * 2 * o.y + 2 * o.x * 2 * o.x); }, n.prototype.getSideNormals = function (e, f) { var n = e, o = this.halfExtents; if (n[0].set(o.x, 0, 0), n[1].set(0, o.y, 0), n[2].set(0, 0, o.z), n[3].set(-o.x, 0, 0), n[4].set(0, -o.y, 0), n[5].set(0, 0, -o.z), void 0 !== f)\r\n                for (var d = 0; d !== n.length; d++)\r\n                    f.vmult(n[d], n[d]); return n; }, n.prototype.volume = function () { return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z; }, n.prototype.updateBoundingSphereRadius = function () { this.boundingSphereRadius = this.halfExtents.norm(); }; {\r\n                var t = new d;\r\n                new d;\r\n            } n.prototype.forEachWorldCorner = function (e, f, n) { for (var o = this.halfExtents, d = [[o.x, o.y, o.z], [-o.x, o.y, o.z], [-o.x, -o.y, o.z], [-o.x, -o.y, -o.z], [o.x, -o.y, -o.z], [o.x, o.y, -o.z], [-o.x, o.y, -o.z], [o.x, -o.y, o.z]], i = 0; i < d.length; i++)\r\n                t.set(d[i][0], d[i][1], d[i][2]), f.vmult(t, t), e.vadd(t, t), n(t.x, t.y, t.z); }; var l = [new d, new d, new d, new d, new d, new d, new d, new d]; n.prototype.calculateWorldAABB = function (e, f, n, o) { var d = this.halfExtents; l[0].set(d.x, d.y, d.z), l[1].set(-d.x, d.y, d.z), l[2].set(-d.x, -d.y, d.z), l[3].set(-d.x, -d.y, -d.z), l[4].set(d.x, -d.y, -d.z), l[5].set(d.x, d.y, -d.z), l[6].set(-d.x, d.y, -d.z), l[7].set(d.x, -d.y, d.z); var i = l[0]; f.vmult(i, i), e.vadd(i, i), o.copy(i), n.copy(i); for (var t = 1; 8 > t; t++) {\r\n                var i = l[t];\r\n                f.vmult(i, i), e.vadd(i, i);\r\n                var u = i.x, p = i.y, s = i.z;\r\n                u > o.x && (o.x = u), p > o.y && (o.y = p), s > o.z && (o.z = s), u < n.x && (n.x = u), p < n.y && (n.y = p), s < n.z && (n.z = s);\r\n            } }; }, { \"../math/Vec3\": 30, \"./ConvexPolyhedron\": 38, \"./Shape\": 43 }], 38: [function (e, f) { function n(e, f, n) { o.call(this), this.type = o.types.CONVEXPOLYHEDRON, this.vertices = e || [], this.worldVertices = [], this.worldVerticesNeedsUpdate = !0, this.faces = f || [], this.faceNormals = [], this.computeNormals(), this.worldFaceNormalsNeedsUpdate = !0, this.worldFaceNormals = [], this.uniqueEdges = [], this.uniqueAxes = n ? n.slice() : null, this.computeEdges(), this.updateBoundingSphereRadius(); } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"), i = (e(\"../math/Quaternion\"), e(\"../math/Transform\")); n.prototype = new o, n.prototype.constructor = n; var t = new d; n.prototype.computeEdges = function () { var e = this.faces, f = this.vertices, n = (f.length, this.uniqueEdges); n.length = 0; for (var o = t, d = 0; d !== e.length; d++)\r\n                for (var i = e[d], l = i.length, u = 0; u !== l; u++) {\r\n                    var p = (u + 1) % l;\r\n                    f[i[u]].vsub(f[i[p]], o), o.normalize();\r\n                    for (var s = !1, y = 0; y !== n.length; y++)\r\n                        if (n[y].almostEquals(o) || n[y].almostEquals(o)) {\r\n                            s = !0;\r\n                            break;\r\n                        }\r\n                    s || n.push(o.clone());\r\n                } }, n.prototype.computeNormals = function () { this.faceNormals.length = this.faces.length; for (var e = 0; e < this.faces.length; e++) {\r\n                for (var f = 0; f < this.faces[e].length; f++)\r\n                    if (!this.vertices[this.faces[e][f]])\r\n                        throw new Error(\"Vertex \" + this.faces[e][f] + \" not found!\");\r\n                var n = this.faceNormals[e] || new d;\r\n                this.getFaceNormal(e, n), n.negate(n), this.faceNormals[e] = n;\r\n                var o = this.vertices[this.faces[e][0]];\r\n                if (n.dot(o) < 0) {\r\n                    console.error(\".faceNormals[\" + e + \"] = Vec3(\" + n.toString() + \") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\r\n                    for (var f = 0; f < this.faces[e].length; f++)\r\n                        console.warn(\".vertices[\" + this.faces[e][f] + \"] = Vec3(\" + this.vertices[this.faces[e][f]].toString() + \")\");\r\n                }\r\n            } }; var l = new d, u = new d; n.computeNormal = function (e, f, n, o) { f.vsub(e, u), n.vsub(f, l), l.cross(u, o), o.isZero() || o.normalize(); }, n.prototype.getFaceNormal = function (e, f) { var o = this.faces[e], d = this.vertices[o[0]], i = this.vertices[o[1]], t = this.vertices[o[2]]; return n.computeNormal(d, i, t, f); }; var p = new d; n.prototype.clipAgainstHull = function (e, f, n, o, i, t, l, u, s) { for (var y = p, c = -1, a = -Number.MAX_VALUE, r = 0; r < n.faces.length; r++) {\r\n                y.copy(n.faceNormals[r]), i.vmult(y, y);\r\n                var w = y.dot(t);\r\n                w > a && (a = w, c = r);\r\n            } for (var b = [], m = n.faces[c], N = m.length, g = 0; N > g; g++) {\r\n                var x = n.vertices[m[g]], j = new d;\r\n                j.copy(x), i.vmult(j, j), o.vadd(j, j), b.push(j);\r\n            } c >= 0 && this.clipFaceAgainstHull(t, e, f, b, l, u, s); }; var s = new d, y = new d, c = new d, a = new d, r = new d, w = new d; n.prototype.findSeparatingAxis = function (e, f, n, o, d, i, t, l) { var u = s, p = y, b = c, m = a, N = r, g = w, x = Number.MAX_VALUE, j = this, v = 0; if (j.uniqueAxes)\r\n                for (var A = 0; A !== j.uniqueAxes.length; A++) {\r\n                    n.vmult(j.uniqueAxes[A], u);\r\n                    var C = j.testSepAxis(u, e, f, n, o, d);\r\n                    if (C === !1)\r\n                        return !1;\r\n                    x > C && (x = C, i.copy(u));\r\n                }\r\n            else\r\n                for (var O = t ? t.length : j.faces.length, A = 0; O > A; A++) {\r\n                    var h = t ? t[A] : A;\r\n                    u.copy(j.faceNormals[h]), n.vmult(u, u);\r\n                    var C = j.testSepAxis(u, e, f, n, o, d);\r\n                    if (C === !1)\r\n                        return !1;\r\n                    x > C && (x = C, i.copy(u));\r\n                } if (e.uniqueAxes)\r\n                for (var A = 0; A !== e.uniqueAxes.length; A++) {\r\n                    d.vmult(e.uniqueAxes[A], p), v++;\r\n                    var C = j.testSepAxis(p, e, f, n, o, d);\r\n                    if (C === !1)\r\n                        return !1;\r\n                    x > C && (x = C, i.copy(p));\r\n                }\r\n            else\r\n                for (var k = l ? l.length : e.faces.length, A = 0; k > A; A++) {\r\n                    var h = l ? l[A] : A;\r\n                    p.copy(e.faceNormals[h]), d.vmult(p, p), v++;\r\n                    var C = j.testSepAxis(p, e, f, n, o, d);\r\n                    if (C === !1)\r\n                        return !1;\r\n                    x > C && (x = C, i.copy(p));\r\n                } for (var q = 0; q !== j.uniqueEdges.length; q++) {\r\n                n.vmult(j.uniqueEdges[q], m);\r\n                for (var z = 0; z !== e.uniqueEdges.length; z++)\r\n                    if (d.vmult(e.uniqueEdges[z], N), m.cross(N, g), !g.almostZero()) {\r\n                        g.normalize();\r\n                        var B = j.testSepAxis(g, e, f, n, o, d);\r\n                        if (B === !1)\r\n                            return !1;\r\n                        x > B && (x = B, i.copy(g));\r\n                    }\r\n            } return o.vsub(f, b), b.dot(i) > 0 && i.negate(i), !0; }; var b = [], m = []; n.prototype.testSepAxis = function (e, f, o, d, i, t) { var l = this; n.project(l, e, o, d, b), n.project(f, e, i, t, m); var u = b[0], p = b[1], s = m[0], y = m[1]; if (y > u || p > s)\r\n                return !1; var c = u - y, a = s - p, r = a > c ? c : a; return r; }; var N = new d, g = new d; n.prototype.calculateLocalInertia = function (e, f) { this.computeLocalAABB(N, g); var n = g.x - N.x, o = g.y - N.y, d = g.z - N.z; f.x = 1 / 12 * e * (2 * o * 2 * o + 2 * d * 2 * d), f.y = 1 / 12 * e * (2 * n * 2 * n + 2 * d * 2 * d), f.z = 1 / 12 * e * (2 * o * 2 * o + 2 * n * 2 * n); }, n.prototype.getPlaneConstantOfFace = function (e) { var f = this.faces[e], n = this.faceNormals[e], o = this.vertices[f[0]], d = -n.dot(o); return d; }; var x = new d, j = new d, v = new d, A = new d, C = new d, O = new d, h = new d, k = new d; n.prototype.clipFaceAgainstHull = function (e, f, n, o, d, i, t) { for (var l = x, u = j, p = v, s = A, y = C, c = O, a = h, r = k, w = this, b = [], m = o, N = b, g = -1, q = Number.MAX_VALUE, z = 0; z < w.faces.length; z++) {\r\n                l.copy(w.faceNormals[z]), n.vmult(l, l);\r\n                var B = l.dot(e);\r\n                q > B && (q = B, g = z);\r\n            } if (!(0 > g)) {\r\n                var D = w.faces[g];\r\n                D.connectedFaces = [];\r\n                for (var E = 0; E < w.faces.length; E++)\r\n                    for (var F = 0; F < w.faces[E].length; F++)\r\n                        -1 !== D.indexOf(w.faces[E][F]) && E !== g && -1 === D.connectedFaces.indexOf(E) && D.connectedFaces.push(E);\r\n                for (var G = (m.length, D.length), H = 0; G > H; H++) {\r\n                    var I = w.vertices[D[H]], J = w.vertices[D[(H + 1) % G]];\r\n                    I.vsub(J, u), p.copy(u), n.vmult(p, p), f.vadd(p, p), s.copy(this.faceNormals[g]), n.vmult(s, s), f.vadd(s, s), p.cross(s, y), y.negate(y), c.copy(I), n.vmult(c, c), f.vadd(c, c);\r\n                    var K, L = (-c.dot(y), D.connectedFaces[H]);\r\n                    a.copy(this.faceNormals[L]);\r\n                    var M = this.getPlaneConstantOfFace(L);\r\n                    r.copy(a), n.vmult(r, r);\r\n                    var K = M - r.dot(f);\r\n                    for (this.clipFaceAgainstPlane(m, N, r, K); m.length;)\r\n                        m.shift();\r\n                    for (; N.length;)\r\n                        m.push(N.shift());\r\n                }\r\n                a.copy(this.faceNormals[g]);\r\n                var M = this.getPlaneConstantOfFace(g);\r\n                r.copy(a), n.vmult(r, r);\r\n                for (var K = M - r.dot(f), E = 0; E < m.length; E++) {\r\n                    var P = r.dot(m[E]) + K;\r\n                    if (d >= P && (console.log(\"clamped: depth=\" + P + \" to minDist=\" + (d + \"\")), P = d), i >= P) {\r\n                        var Q = m[E];\r\n                        if (0 >= P) {\r\n                            var R = { point: Q, normal: r, depth: P };\r\n                            t.push(R);\r\n                        }\r\n                    }\r\n                }\r\n            } }, n.prototype.clipFaceAgainstPlane = function (e, f, n, o) { var i, t, l = e.length; if (2 > l)\r\n                return f; var u = e[e.length - 1], p = e[0]; i = n.dot(u) + o; for (var s = 0; l > s; s++) {\r\n                if (p = e[s], t = n.dot(p) + o, 0 > i)\r\n                    if (0 > t) {\r\n                        var y = new d;\r\n                        y.copy(p), f.push(y);\r\n                    }\r\n                    else {\r\n                        var y = new d;\r\n                        u.lerp(p, i / (i - t), y), f.push(y);\r\n                    }\r\n                else if (0 > t) {\r\n                    var y = new d;\r\n                    u.lerp(p, i / (i - t), y), f.push(y), f.push(p);\r\n                }\r\n                u = p, i = t;\r\n            } return f; }, n.prototype.computeWorldVertices = function (e, f) { for (var n = this.vertices.length; this.worldVertices.length < n;)\r\n                this.worldVertices.push(new d); for (var o = this.vertices, i = this.worldVertices, t = 0; t !== n; t++)\r\n                f.vmult(o[t], i[t]), e.vadd(i[t], i[t]); this.worldVerticesNeedsUpdate = !1; }; new d; n.prototype.computeLocalAABB = function (e, f) { var n = this.vertices.length, o = this.vertices; e.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), f.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE); for (var d = 0; n > d; d++) {\r\n                var i = o[d];\r\n                i.x < e.x ? e.x = i.x : i.x > f.x && (f.x = i.x), i.y < e.y ? e.y = i.y : i.y > f.y && (f.y = i.y), i.z < e.z ? e.z = i.z : i.z > f.z && (f.z = i.z);\r\n            } }, n.prototype.computeWorldFaceNormals = function (e) { for (var f = this.faceNormals.length; this.worldFaceNormals.length < f;)\r\n                this.worldFaceNormals.push(new d); for (var n = this.faceNormals, o = this.worldFaceNormals, i = 0; i !== f; i++)\r\n                e.vmult(n[i], o[i]); this.worldFaceNormalsNeedsUpdate = !1; }, n.prototype.updateBoundingSphereRadius = function () { for (var e = 0, f = this.vertices, n = 0, o = f.length; n !== o; n++) {\r\n                var d = f[n].norm2();\r\n                d > e && (e = d);\r\n            } this.boundingSphereRadius = Math.sqrt(e); }; var q = new d; n.prototype.calculateWorldAABB = function (e, f, n, o) { for (var d, i, t, l, u, p, s = this.vertices.length, y = this.vertices, c = 0; s > c; c++) {\r\n                q.copy(y[c]), f.vmult(q, q), e.vadd(q, q);\r\n                var a = q;\r\n                a.x < d || void 0 === d ? d = a.x : (a.x > l || void 0 === l) && (l = a.x), a.y < i || void 0 === i ? i = a.y : (a.y > u || void 0 === u) && (u = a.y), a.z < t || void 0 === t ? t = a.z : (a.z > p || void 0 === p) && (p = a.z);\r\n            } n.set(d, i, t), o.set(l, u, p); }, n.prototype.volume = function () { return 4 * Math.PI * this.boundingSphereRadius / 3; }, n.prototype.getAveragePointLocal = function (e) { e = e || new d; for (var f = this.vertices.length, n = this.vertices, o = 0; f > o; o++)\r\n                e.vadd(n[o], e); return e.mult(1 / f, e), e; }, n.prototype.transformAllPoints = function (e, f) { var n = this.vertices.length, o = this.vertices; if (f) {\r\n                for (var d = 0; n > d; d++) {\r\n                    var i = o[d];\r\n                    f.vmult(i, i);\r\n                }\r\n                for (var d = 0; d < this.faceNormals.length; d++) {\r\n                    var i = this.faceNormals[d];\r\n                    f.vmult(i, i);\r\n                }\r\n            } if (e)\r\n                for (var d = 0; n > d; d++) {\r\n                    var i = o[d];\r\n                    i.vadd(e, i);\r\n                } }; var z = new d, B = new d, D = new d; n.prototype.pointIsInside = function (e) { var f = this.vertices.length, n = this.vertices, o = this.faces, d = this.faceNormals, i = null, t = this.faces.length, l = z; this.getAveragePointLocal(l); for (var u = 0; t > u; u++) {\r\n                var f = (this.faces[u].length, d[u]), p = n[o[u][0]], s = B;\r\n                e.vsub(p, s);\r\n                var y = f.dot(s), c = D;\r\n                l.vsub(p, c);\r\n                var a = f.dot(c);\r\n                if (0 > y && a > 0 || y > 0 && 0 > a)\r\n                    return !1;\r\n            } return i ? 1 : -1; }; var E = (new d, new d), F = new d; n.project = function (e, f, n, o, d) { var t = e.vertices.length, l = E, u = 0, p = 0, s = F, y = e.vertices; s.setZero(), i.vectorToLocalFrame(n, o, f, l), i.pointToLocalFrame(n, o, s, s); var c = s.dot(l); p = u = y[0].dot(l); for (var a = 1; t > a; a++) {\r\n                var r = y[a].dot(l);\r\n                r > u && (u = r), p > r && (p = r);\r\n            } if (p -= c, u -= c, p > u) {\r\n                var w = p;\r\n                p = u, u = w;\r\n            } d[0] = u, d[1] = p; }; }, { \"../math/Quaternion\": 28, \"../math/Transform\": 29, \"../math/Vec3\": 30, \"./Shape\": 43 }], 39: [function (e, f) { function n(e, f, n, t) { var l = t, u = [], p = [], s = [], y = [], c = [], a = Math.cos, r = Math.sin; u.push(new d(f * a(0), f * r(0), .5 * -n)), y.push(0), u.push(new d(e * a(0), e * r(0), .5 * n)), c.push(1); for (var w = 0; l > w; w++) {\r\n                var b = 2 * Math.PI / l * (w + 1), m = 2 * Math.PI / l * (w + .5);\r\n                l - 1 > w ? (u.push(new d(f * a(b), f * r(b), .5 * -n)), y.push(2 * w + 2), u.push(new d(e * a(b), e * r(b), .5 * n)), c.push(2 * w + 3), s.push([2 * w + 2, 2 * w + 3, 2 * w + 1, 2 * w])) : s.push([0, 1, 2 * w + 1, 2 * w]), (l % 2 === 1 || l / 2 > w) && p.push(new d(a(m), r(m), 0));\r\n            } s.push(c), p.push(new d(0, 0, 1)); for (var N = [], w = 0; w < y.length; w++)\r\n                N.push(y[y.length - w - 1]); s.push(N), this.type = o.types.CONVEXPOLYHEDRON, i.call(this, u, s, p); } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"), i = (e(\"../math/Quaternion\"), e(\"./ConvexPolyhedron\")); n.prototype = new i; }, { \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"./ConvexPolyhedron\": 38, \"./Shape\": 43 }], 40: [function (e, f) { function n(e, f) { f = t.defaults(f, { maxValue: null, minValue: null, elementSize: 1 }), this.data = e, this.maxValue = f.maxValue, this.minValue = f.minValue, this.elementSize = f.elementSize, null === f.minValue && this.updateMinValue(), null === f.maxValue && this.updateMaxValue(), this.cacheEnabled = !0, o.call(this), this.pillarConvex = new d, this.pillarOffset = new i, this.type = o.types.HEIGHTFIELD, this.updateBoundingSphereRadius(), this._cachedPillars = {}; } var o = e(\"./Shape\"), d = e(\"./ConvexPolyhedron\"), i = e(\"../math/Vec3\"), t = e(\"../utils/Utils\"); f.exports = n, n.prototype = new o, n.prototype.update = function () { this._cachedPillars = {}; }, n.prototype.updateMinValue = function () { for (var e = this.data, f = e[0][0], n = 0; n !== e.length; n++)\r\n                for (var o = 0; o !== e[n].length; o++) {\r\n                    var d = e[n][o];\r\n                    f > d && (f = d);\r\n                } this.minValue = f; }, n.prototype.updateMaxValue = function () { for (var e = this.data, f = e[0][0], n = 0; n !== e.length; n++)\r\n                for (var o = 0; o !== e[n].length; o++) {\r\n                    var d = e[n][o];\r\n                    d > f && (f = d);\r\n                } this.maxValue = f; }, n.prototype.setHeightValueAtIndex = function (e, f, n) { var o = this.data; o[e][f] = n, this.clearCachedConvexTrianglePillar(e, f, !1), e > 0 && (this.clearCachedConvexTrianglePillar(e - 1, f, !0), this.clearCachedConvexTrianglePillar(e - 1, f, !1)), f > 0 && (this.clearCachedConvexTrianglePillar(e, f - 1, !0), this.clearCachedConvexTrianglePillar(e, f - 1, !1)), f > 0 && e > 0 && this.clearCachedConvexTrianglePillar(e - 1, f - 1, !0); }, n.prototype.getRectMinMax = function (e, f, n, o, d) { d = d || []; for (var i = this.data, t = this.minValue, l = e; n >= l; l++)\r\n                for (var u = f; o >= u; u++) {\r\n                    var p = i[l][u];\r\n                    p > t && (t = p);\r\n                } d[0] = this.minValue, d[1] = t; }, n.prototype.getIndexOfPosition = function (e, f, n, o) { var d = this.elementSize, i = this.data, t = Math.floor(e / d), l = Math.floor(f / d); return n[0] = t, n[1] = l, o && (0 > t && (t = 0), 0 > l && (l = 0), t >= i.length - 1 && (t = i.length - 1), l >= i[0].length - 1 && (l = i[0].length - 1)), 0 > t || 0 > l || t >= i.length - 1 || l >= i[0].length - 1 ? !1 : !0; }, n.prototype.getHeightAt = function (e, f, n) { var o = []; this.getIndexOfPosition(e, f, o, n); var d = []; return this.getRectMinMax(o[0], o[1] + 1, o[0], o[1] + 1, d), (d[0] + d[1]) / 2; }, n.prototype.getCacheConvexTrianglePillarKey = function (e, f, n) { return e + \"_\" + f + \"_\" + (n ? 1 : 0); }, n.prototype.getCachedConvexTrianglePillar = function (e, f, n) { return this._cachedPillars[this.getCacheConvexTrianglePillarKey(e, f, n)]; }, n.prototype.setCachedConvexTrianglePillar = function (e, f, n, o, d) { this._cachedPillars[this.getCacheConvexTrianglePillarKey(e, f, n)] = { convex: o, offset: d }; }, n.prototype.clearCachedConvexTrianglePillar = function (e, f, n) { delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(e, f, n)]; }, n.prototype.getConvexTrianglePillar = function (e, f, n) { var o = this.pillarConvex, t = this.pillarOffset; if (this.cacheEnabled) {\r\n                var l = this.getCachedConvexTrianglePillar(e, f, n);\r\n                if (l)\r\n                    return this.pillarConvex = l.convex, void (this.pillarOffset = l.offset);\r\n                o = new d, t = new i, this.pillarConvex = o, this.pillarOffset = t;\r\n            } var l = this.data, u = this.elementSize, p = o.faces; o.vertices.length = 6; for (var s = 0; 6 > s; s++)\r\n                o.vertices[s] || (o.vertices[s] = new i); p.length = 5; for (var s = 0; 5 > s; s++)\r\n                p[s] || (p[s] = []); var y = o.vertices, c = (Math.min(l[e][f], l[e + 1][f], l[e][f + 1], l[e + 1][f + 1]) - this.minValue) / 2 + this.minValue; n ? (t.set((e + .75) * u, (f + .75) * u, c), y[0].set(.25 * u, .25 * u, l[e + 1][f + 1] - c), y[1].set(-.75 * u, .25 * u, l[e][f + 1] - c), y[2].set(.25 * u, -.75 * u, l[e + 1][f] - c), y[3].set(.25 * u, .25 * u, -c - 1), y[4].set(-.75 * u, .25 * u, -c - 1), y[5].set(.25 * u, -.75 * u, -c - 1), p[0][0] = 0, p[0][1] = 1, p[0][2] = 2, p[1][0] = 5, p[1][1] = 4, p[1][2] = 3, p[2][0] = 2, p[2][1] = 5, p[2][2] = 3, p[2][3] = 0, p[3][0] = 3, p[3][1] = 4, p[3][2] = 1, p[3][3] = 0, p[4][0] = 1, p[4][1] = 4, p[4][2] = 5, p[4][3] = 2) : (t.set((e + .25) * u, (f + .25) * u, c), y[0].set(-.25 * u, -.25 * u, l[e][f] - c), y[1].set(.75 * u, -.25 * u, l[e + 1][f] - c), y[2].set(-.25 * u, .75 * u, l[e][f + 1] - c), y[3].set(-.25 * u, -.25 * u, -c - 1), y[4].set(.75 * u, -.25 * u, -c - 1), y[5].set(-.25 * u, .75 * u, -c - 1), p[0][0] = 0, p[0][1] = 1, p[0][2] = 2, p[1][0] = 5, p[1][1] = 4, p[1][2] = 3, p[2][0] = 0, p[2][1] = 2, p[2][2] = 5, p[2][3] = 3, p[3][0] = 1, p[3][1] = 0, p[3][2] = 3, p[3][3] = 4, p[4][0] = 4, p[4][1] = 5, p[4][2] = 2, p[4][3] = 1), o.computeNormals(), o.computeEdges(), o.updateBoundingSphereRadius(), this.setCachedConvexTrianglePillar(e, f, n, o, t); }, n.prototype.calculateLocalInertia = function (e, f) { return f = f || new i, f.set(0, 0, 0), f; }, n.prototype.volume = function () { return Number.MAX_VALUE; }, n.prototype.calculateWorldAABB = function (e, f, n, o) { n.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), o.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE); }, n.prototype.updateBoundingSphereRadius = function () { var e = this.data, f = this.elementSize; this.boundingSphereRadius = new i(e.length * f, e[0].length * f, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm(); }; }, { \"../math/Vec3\": 30, \"../utils/Utils\": 53, \"./ConvexPolyhedron\": 38, \"./Shape\": 43 }], 41: [function (e, f) { function n() { o.call(this), this.type = o.types.PARTICLE; } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"); n.prototype = new o, n.prototype.constructor = n, n.prototype.calculateLocalInertia = function (e, f) { return f = f || new d, f.set(0, 0, 0), f; }, n.prototype.volume = function () { return 0; }, n.prototype.updateBoundingSphereRadius = function () { this.boundingSphereRadius = 0; }, n.prototype.calculateWorldAABB = function (e, f, n, o) { n.copy(e), o.copy(e); }; }, { \"../math/Vec3\": 30, \"./Shape\": 43 }], 42: [function (e, f) { function n() { o.call(this), this.type = o.types.PLANE, this.worldNormal = new d, this.worldNormalNeedsUpdate = !0, this.boundingSphereRadius = Number.MAX_VALUE; } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"); n.prototype = new o, n.prototype.constructor = n, n.prototype.computeWorldNormal = function (e) { var f = this.worldNormal; f.set(0, 0, 1), e.vmult(f, f), this.worldNormalNeedsUpdate = !1; }, n.prototype.calculateLocalInertia = function (e, f) { return f = f || new d; }, n.prototype.volume = function () { return Number.MAX_VALUE; }; var i = new d; n.prototype.calculateWorldAABB = function (e, f, n, o) { i.set(0, 0, 1), f.vmult(i, i); var d = Number.MAX_VALUE; n.set(-d, -d, -d), o.set(d, d, d), 1 === i.x && (o.x = e.x), 1 === i.y && (o.y = e.y), 1 === i.z && (o.z = e.z), -1 === i.x && (n.x = e.x), -1 === i.y && (n.y = e.y), -1 === i.z && (n.z = e.z); }, n.prototype.updateBoundingSphereRadius = function () { this.boundingSphereRadius = Number.MAX_VALUE; }; }, { \"../math/Vec3\": 30, \"./Shape\": 43 }], 43: [function (e, f) { function n() { this.id = n.idCounter++, this.type = 0, this.boundingSphereRadius = 0, this.collisionResponse = !0, this.material = null; } f.exports = n; {\r\n                var n = e(\"./Shape\");\r\n                e(\"../math/Vec3\"), e(\"../math/Quaternion\"), e(\"../material/Material\");\r\n            } n.prototype.constructor = n, n.prototype.updateBoundingSphereRadius = function () { throw \"computeBoundingSphereRadius() not implemented for shape type \" + this.type; }, n.prototype.volume = function () { throw \"volume() not implemented for shape type \" + this.type; }, n.prototype.calculateLocalInertia = function () { throw \"calculateLocalInertia() not implemented for shape type \" + this.type; }, n.idCounter = 0, n.types = { SPHERE: 1, PLANE: 2, BOX: 4, COMPOUND: 8, CONVEXPOLYHEDRON: 16, HEIGHTFIELD: 32, PARTICLE: 64, CYLINDER: 128, TRIMESH: 256 }; }, { \"../material/Material\": 25, \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"./Shape\": 43 }], 44: [function (e, f) { function n(e) { if (o.call(this), this.radius = void 0 !== e ? Number(e) : 1, this.type = o.types.SPHERE, this.radius < 0)\r\n                throw new Error(\"The sphere radius cannot be negative.\"); this.updateBoundingSphereRadius(); } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"); n.prototype = new o, n.prototype.constructor = n, n.prototype.calculateLocalInertia = function (e, f) { f = f || new d; var n = 2 * e * this.radius * this.radius / 5; return f.x = n, f.y = n, f.z = n, f; }, n.prototype.volume = function () { return 4 * Math.PI * this.radius / 3; }, n.prototype.updateBoundingSphereRadius = function () { this.boundingSphereRadius = this.radius; }, n.prototype.calculateWorldAABB = function (e, f, n, o) { for (var d = this.radius, i = [\"x\", \"y\", \"z\"], t = 0; t < i.length; t++) {\r\n                var l = i[t];\r\n                n[l] = e[l] - d, o[l] = e[l] + d;\r\n            } }; }, { \"../math/Vec3\": 30, \"./Shape\": 43 }], 45: [function (e, f) { function n(e, f) { o.call(this), this.type = o.types.TRIMESH, this.vertices = new Float32Array(e), this.indices = new Int16Array(f), this.normals = new Float32Array(f.length), this.aabb = new t, this.edges = null, this.scale = new d(1, 1, 1), this.tree = new l, this.updateEdges(), this.updateNormals(), this.updateAABB(), this.updateBoundingSphereRadius(), this.updateTree(); } f.exports = n; var o = e(\"./Shape\"), d = e(\"../math/Vec3\"), i = (e(\"../math/Quaternion\"), e(\"../math/Transform\")), t = e(\"../collision/AABB\"), l = e(\"../utils/Octree\"); n.prototype = new o, n.prototype.constructor = n; var u = new d; n.prototype.updateTree = function () { var e = this.tree; e.reset(), e.aabb.copy(this.aabb); var f = this.scale; e.aabb.lowerBound.x *= 1 / f.x, e.aabb.lowerBound.y *= 1 / f.y, e.aabb.lowerBound.z *= 1 / f.z, e.aabb.upperBound.x *= 1 / f.x, e.aabb.upperBound.y *= 1 / f.y, e.aabb.upperBound.z *= 1 / f.z; for (var n = new t, o = new d, i = new d, l = new d, u = [o, i, l], p = 0; p < this.indices.length / 3; p++) {\r\n                var s = 3 * p;\r\n                this._getUnscaledVertex(this.indices[s], o), this._getUnscaledVertex(this.indices[s + 1], i), this._getUnscaledVertex(this.indices[s + 2], l), n.setFromPoints(u), e.insert(n, p);\r\n            } e.removeEmptyNodes(); }; var p = new t; n.prototype.getTrianglesInAABB = function (e, f) { p.copy(e); var n = this.scale, o = n.x, d = n.y, i = n.z, t = p.lowerBound, l = p.upperBound; return t.x /= o, t.y /= d, t.z /= i, l.x /= o, l.y /= d, l.z /= i, this.tree.aabbQuery(p, f); }, n.prototype.setScale = function (e) { var f = this.scale.x === this.scale.y === this.scale.z, n = e.x === e.y === e.z; f && n || this.updateNormals(), this.scale.copy(e), this.updateAABB(), this.updateBoundingSphereRadius(); }, n.prototype.updateNormals = function () { for (var e = u, f = this.normals, o = 0; o < this.indices.length / 3; o++) {\r\n                var d = 3 * o, i = this.indices[d], t = this.indices[d + 1], l = this.indices[d + 2];\r\n                this.getVertex(i, r), this.getVertex(t, w), this.getVertex(l, b), n.computeNormal(w, r, b, e), f[d] = e.x, f[d + 1] = e.y, f[d + 2] = e.z;\r\n            } }, n.prototype.updateEdges = function () { for (var e = {}, f = function () { var f = i > d ? d + \"_\" + i : i + \"_\" + d; e[f] = !0; }, n = 0; n < this.indices.length / 3; n++) {\r\n                var o = 3 * n, d = this.indices[o], i = this.indices[o + 1], t = this.indices[o + 2];\r\n                f(d, i), f(i, t), f(t, d);\r\n            } var l = Object.keys(e); this.edges = new Int16Array(2 * l.length); for (var n = 0; n < l.length; n++) {\r\n                var u = l[n].split(\"_\");\r\n                this.edges[2 * n] = parseInt(u[0], 10), this.edges[2 * n + 1] = parseInt(u[1], 10);\r\n            } }, n.prototype.getEdgeVertex = function (e, f, n) { var o = this.edges[2 * e + (f ? 1 : 0)]; this.getVertex(o, n); }; var s = new d, y = new d; n.prototype.getEdgeVector = function (e, f) { var n = s, o = y; this.getEdgeVertex(e, 0, n), this.getEdgeVertex(e, 1, o), o.vsub(n, f); }; var c = new d, a = new d; n.computeNormal = function (e, f, n, o) { f.vsub(e, a), n.vsub(f, c), c.cross(a, o), o.isZero() || o.normalize(); }; var r = new d, w = new d, b = new d; n.prototype.getVertex = function (e, f) { var n = this.scale; return this._getUnscaledVertex(e, f), f.x *= n.x, f.y *= n.y, f.z *= n.z, f; }, n.prototype._getUnscaledVertex = function (e, f) { var n = 3 * e, o = this.vertices; return f.set(o[n], o[n + 1], o[n + 2]); }, n.prototype.getWorldVertex = function (e, f, n, o) { return this.getVertex(e, o), i.pointToWorldFrame(f, n, o, o), o; }, n.prototype.getTriangleVertices = function (e, f, n, o) { var d = 3 * e; this.getVertex(this.indices[d], f), this.getVertex(this.indices[d + 1], n), this.getVertex(this.indices[d + 2], o); }, n.prototype.getNormal = function (e, f) { var n = 3 * e; return f.set(this.normals[n], this.normals[n + 1], this.normals[n + 2]); }; var m = new t; n.prototype.calculateLocalInertia = function (e, f) { this.computeLocalAABB(m); var n = m.upperBound.x - m.lowerBound.x, o = m.upperBound.y - m.lowerBound.y, d = m.upperBound.z - m.lowerBound.z; return f.set(1 / 12 * e * (2 * o * 2 * o + 2 * d * 2 * d), 1 / 12 * e * (2 * n * 2 * n + 2 * d * 2 * d), 1 / 12 * e * (2 * o * 2 * o + 2 * n * 2 * n)); }; var N = new d; n.prototype.computeLocalAABB = function (e) { var f = e.lowerBound, n = e.upperBound, o = this.vertices.length, d = (this.vertices, N); this.getVertex(0, d), f.copy(d), n.copy(d); for (var i = 0; i !== o; i++)\r\n                this.getVertex(i, d), d.x < f.x ? f.x = d.x : d.x > n.x && (n.x = d.x), d.y < f.y ? f.y = d.y : d.y > n.y && (n.y = d.y), d.z < f.z ? f.z = d.z : d.z > n.z && (n.z = d.z); }, n.prototype.updateAABB = function () { this.computeLocalAABB(this.aabb); }, n.prototype.updateBoundingSphereRadius = function () { for (var e = 0, f = this.vertices, n = new d, o = 0, i = f.length / 3; o !== i; o++) {\r\n                this.getVertex(o, n);\r\n                var t = n.norm2();\r\n                t > e && (e = t);\r\n            } this.boundingSphereRadius = Math.sqrt(e); }; var g = (new d, new i), x = new t; n.prototype.calculateWorldAABB = function (e, f, n, o) { var d = g, i = x; d.position = e, d.quaternion = f, this.aabb.toWorldFrame(d, i), n.copy(i.lowerBound), o.copy(i.upperBound); }, n.prototype.volume = function () { return 4 * Math.PI * this.boundingSphereRadius / 3; }, n.createTorus = function (e, f, o, d, i) { e = e || 1, f = f || .5, o = o || 8, d = d || 6, i = i || 2 * Math.PI; for (var t = [], l = [], u = 0; o >= u; u++)\r\n                for (var p = 0; d >= p; p++) {\r\n                    var s = p / d * i, y = u / o * Math.PI * 2, c = (e + f * Math.cos(y)) * Math.cos(s), a = (e + f * Math.cos(y)) * Math.sin(s), r = f * Math.sin(y);\r\n                    t.push(c, a, r);\r\n                } for (var u = 1; o >= u; u++)\r\n                for (var p = 1; d >= p; p++) {\r\n                    var w = (d + 1) * u + p - 1, b = (d + 1) * (u - 1) + p - 1, m = (d + 1) * (u - 1) + p, N = (d + 1) * u + p;\r\n                    l.push(w, b, N), l.push(b, m, N);\r\n                } return new n(t, l); }; }, { \"../collision/AABB\": 3, \"../math/Quaternion\": 28, \"../math/Transform\": 29, \"../math/Vec3\": 30, \"../utils/Octree\": 50, \"./Shape\": 43 }], 46: [function (e, f) {\r\n                function n() { o.call(this), this.iterations = 10, this.tolerance = 1e-7; }\r\n                f.exports = n;\r\n                var o = (e(\"../math/Vec3\"), e(\"../math/Quaternion\"), e(\"./Solver\"));\r\n                n.prototype = new o;\r\n                var d = [], i = [], t = [];\r\n                n.prototype.solve = function (e, f) {\r\n                    var n, o, l, u, p, s, y = 0, c = this.iterations, a = this.tolerance * this.tolerance, r = this.equations, w = r.length, b = f.bodies, m = b.length, N = e;\r\n                    if (0 !== w)\r\n                        for (var g = 0; g !== m; g++)\r\n                            b[g].updateSolveMassProperties();\r\n                    var x = i, j = t, v = d;\r\n                    x.length = w, j.length = w, v.length = w;\r\n                    for (var g = 0; g !== w; g++) {\r\n                        var A = r[g];\r\n                        v[g] = 0, j[g] = A.computeB(N), x[g] = 1 / A.computeC();\r\n                    }\r\n                    if (0 !== w) {\r\n                        for (var g = 0; g !== m; g++) {\r\n                            var C = b[g], O = C.vlambda, h = C.wlambda;\r\n                            O.set(0, 0, 0), h && h.set(0, 0, 0);\r\n                        }\r\n                        for (y = 0; y !== c; y++) {\r\n                            u = 0;\r\n                            for (var k = 0; k !== w; k++) {\r\n                                var A = r[k];\r\n                                n = j[k], o = x[k], s = v[k], p = A.computeGWlambda(), l = o * (n - p - A.eps * s), s + l < A.minForce ? l = A.minForce - s : s + l > A.maxForce && (l = A.maxForce - s), v[k] += l, u += l > 0 ? l : -l, A.addToWlambda(l);\r\n                            }\r\n                            if (a > u * u)\r\n                                break;\r\n                        }\r\n                        for (var g = 0; g !== m; g++) {\r\n                            var C = b[g], q = C.velocity, z = C.angularVelocity;\r\n                            q.vadd(C.vlambda, q), z && z.vadd(C.wlambda, z);\r\n                        }\r\n                    }\r\n                    return y;\r\n                };\r\n            }, { \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"./Solver\": 47 }], 47: [function (e, f) { function n() { this.equations = []; } f.exports = n, n.prototype.solve = function () { return 0; }, n.prototype.addEquation = function (e) { e.enabled && this.equations.push(e); }, n.prototype.removeEquation = function (e) { var f = this.equations, n = f.indexOf(e); -1 !== n && f.splice(n, 1); }, n.prototype.removeAllEquations = function () { this.equations.length = 0; }; }, {}], 48: [function (e, f) { function n(e) { for (l.call(this), this.iterations = 10, this.tolerance = 1e-7, this.subsolver = e, this.nodes = [], this.nodePool = []; this.nodePool.length < 128;)\r\n                this.nodePool.push(this.createNode()); } function o(e) { for (var f = e.length, n = 0; n !== f; n++) {\r\n                var o = e[n];\r\n                if (!(o.visited || o.body.type & c))\r\n                    return o;\r\n            } return !1; } function d(e, f, n, d) { for (a.push(e), e.visited = !0, f(e, n, d); a.length;)\r\n                for (var i, t = a.pop(); i = o(t.children);)\r\n                    i.visited = !0, f(i, n, d), a.push(i); } function i(e, f, n) { f.push(e.body); for (var o = e.eqs.length, d = 0; d !== o; d++) {\r\n                var i = e.eqs[d];\r\n                -1 === n.indexOf(i) && n.push(i);\r\n            } } function t(e, f) { return f.id - e.id; } f.exports = n; var l = (e(\"../math/Vec3\"), e(\"../math/Quaternion\"), e(\"./Solver\")), u = e(\"../objects/Body\"); n.prototype = new l; var p = [], s = [], y = { bodies: [] }, c = u.STATIC, a = []; n.prototype.createNode = function () { return { body: null, children: [], eqs: [], visited: !1 }; }, n.prototype.solve = function (e, f) { for (var n = p, l = this.nodePool, u = f.bodies, c = this.equations, a = c.length, r = u.length, w = this.subsolver; l.length < r;)\r\n                l.push(this.createNode()); n.length = r; for (var b = 0; r > b; b++)\r\n                n[b] = l[b]; for (var b = 0; b !== r; b++) {\r\n                var m = n[b];\r\n                m.body = u[b], m.children.length = 0, m.eqs.length = 0, m.visited = !1;\r\n            } for (var N = 0; N !== a; N++) {\r\n                var g = c[N], b = u.indexOf(g.bi), x = u.indexOf(g.bj), j = n[b], v = n[x];\r\n                j.children.push(v), j.eqs.push(g), v.children.push(j), v.eqs.push(g);\r\n            } var A, C = 0, O = s; w.tolerance = this.tolerance, w.iterations = this.iterations; for (var h = y; A = o(n);) {\r\n                O.length = 0, h.bodies.length = 0, d(A, i, h.bodies, O);\r\n                var k = O.length;\r\n                O = O.sort(t);\r\n                for (var b = 0; b !== k; b++)\r\n                    w.addEquation(O[b]);\r\n                {\r\n                    w.solve(e, h);\r\n                }\r\n                w.removeAllEquations(), C++;\r\n            } return C; }; }, { \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"../objects/Body\": 31, \"./Solver\": 47 }], 49: [function (e, f) { var n = function () { }; f.exports = n, n.prototype = { constructor: n, addEventListener: function (e, f) { void 0 === this._listeners && (this._listeners = {}); var n = this._listeners; return void 0 === n[e] && (n[e] = []), -1 === n[e].indexOf(f) && n[e].push(f), this; }, hasEventListener: function (e, f) { if (void 0 === this._listeners)\r\n                    return !1; var n = this._listeners; return void 0 !== n[e] && -1 !== n[e].indexOf(f) ? !0 : !1; }, removeEventListener: function (e, f) { if (void 0 === this._listeners)\r\n                    return this; var n = this._listeners; if (void 0 === n[e])\r\n                    return this; var o = n[e].indexOf(f); return -1 !== o && n[e].splice(o, 1), this; }, dispatchEvent: function (e) { if (void 0 === this._listeners)\r\n                    return this; var f = this._listeners, n = f[e.type]; if (void 0 !== n) {\r\n                    e.target = this;\r\n                    for (var o = 0, d = n.length; d > o; o++)\r\n                        n[o].call(this, e);\r\n                } return this; } }; }, {}], 50: [function (e, f) { function n(e) { e = e || {}, this.root = e.root || null, this.aabb = e.aabb ? e.aabb.clone() : new d, this.data = [], this.children = []; } function o(e, f) { f = f || {}, f.root = null, f.aabb = e, n.call(this, f), this.maxDepth = \"undefined\" != typeof f.maxDepth ? f.maxDepth : 8; } var d = e(\"../collision/AABB\"), i = e(\"../math/Vec3\"); f.exports = o, o.prototype = new n, n.prototype.reset = function () { this.children.length = this.data.length = 0; }, n.prototype.insert = function (e, f, n) { var o = this.data; if (n = n || 0, !this.aabb.contains(e))\r\n                return !1; var d = this.children; if (n < (this.maxDepth || this.root.maxDepth)) {\r\n                var i = !1;\r\n                d.length || (this.subdivide(), i = !0);\r\n                for (var t = 0; 8 !== t; t++)\r\n                    if (d[t].insert(e, f, n + 1))\r\n                        return !0;\r\n                i && (d.length = 0);\r\n            } return o.push(f), !0; }; var t = new i; n.prototype.subdivide = function () { var e = this.aabb, f = e.lowerBound, o = e.upperBound, l = this.children; l.push(new n({ aabb: new d({ lowerBound: new i(0, 0, 0) }) }), new n({ aabb: new d({ lowerBound: new i(1, 0, 0) }) }), new n({ aabb: new d({ lowerBound: new i(1, 1, 0) }) }), new n({ aabb: new d({ lowerBound: new i(1, 1, 1) }) }), new n({ aabb: new d({ lowerBound: new i(0, 1, 1) }) }), new n({ aabb: new d({ lowerBound: new i(0, 0, 1) }) }), new n({ aabb: new d({ lowerBound: new i(1, 0, 1) }) }), new n({ aabb: new d({ lowerBound: new i(0, 1, 0) }) })), o.vsub(f, t), t.scale(.5, t); for (var u = this.root || this, p = 0; 8 !== p; p++) {\r\n                var s = l[p];\r\n                s.root = u;\r\n                var y = s.aabb.lowerBound;\r\n                y.x *= t.x, y.y *= t.y, y.z *= t.z, y.vadd(f, y), y.vadd(t, s.aabb.upperBound);\r\n            } }, n.prototype.aabbQuery = function (e, f) { for (var n = (this.data, this.children, [this]); n.length;) {\r\n                var o = n.pop();\r\n                o.aabb.overlaps(e) && Array.prototype.push.apply(f, o.data), Array.prototype.push.apply(n, o.children);\r\n            } return f; }; var l = new d; n.prototype.rayQuery = function (e, f, n) { return e.getAABB(l), l.toLocalFrame(f, l), this.aabbQuery(l, n), n; }, n.prototype.removeEmptyNodes = function () { for (var e = [this]; e.length;) {\r\n                for (var f = e.pop(), n = f.children.length - 1; n >= 0; n--)\r\n                    f.children[n].data.length || f.children.splice(n, 1);\r\n                Array.prototype.push.apply(e, f.children);\r\n            } }; }, { \"../collision/AABB\": 3, \"../math/Vec3\": 30 }], 51: [function (e, f) { function n() { this.objects = [], this.type = Object; } f.exports = n, n.prototype.release = function () { for (var e = arguments.length, f = 0; f !== e; f++)\r\n                this.objects.push(arguments[f]); }, n.prototype.get = function () { return 0 === this.objects.length ? this.constructObject() : this.objects.pop(); }, n.prototype.constructObject = function () { throw new Error(\"constructObject() not implemented in this Pool subclass yet!\"); }; }, {}], 52: [function (e, f) { function n() { this.data = { keys: [] }; } f.exports = n, n.prototype.get = function (e, f) { if (e > f) {\r\n                var n = f;\r\n                f = e, e = n;\r\n            } return this.data[e + \"-\" + f]; }, n.prototype.set = function (e, f, n) { if (e > f) {\r\n                var o = f;\r\n                f = e, e = o;\r\n            } var d = e + \"-\" + f; this.get(e, f) || this.data.keys.push(d), this.data[d] = n; }, n.prototype.reset = function () { for (var e = this.data, f = e.keys; f.length > 0;) {\r\n                var n = f.pop();\r\n                delete e[n];\r\n            } }; }, {}], 53: [function (e, f) { function n() { } f.exports = n, n.defaults = function (e, f) { e = e || {}; for (var n in f)\r\n                n in e || (e[n] = f[n]); return e; }; }, {}], 54: [function (e, f) { function n() { d.call(this), this.type = o; } f.exports = n; var o = e(\"../math/Vec3\"), d = e(\"./Pool\"); n.prototype = new d, n.prototype.constructObject = function () { return new o; }; }, { \"../math/Vec3\": 30, \"./Pool\": 51 }], 55: [function (e, f) { function n(e) { this.contactPointPool = [], this.frictionEquationPool = [], this.result = [], this.frictionResult = [], this.v3pool = new s, this.world = e, this.currentContactMaterial = null, this.enableFrictionReduction = !1; } function o(e, f, n) { for (var o = null, d = e.length, i = 0; i !== d; i++) {\r\n                var t = e[i], l = M;\r\n                e[(i + 1) % d].vsub(t, l);\r\n                var u = P;\r\n                l.cross(f, u);\r\n                var p = Q;\r\n                n.vsub(t, p);\r\n                var s = u.dot(p);\r\n                if (!(null === o || s > 0 && o === !0 || 0 >= s && o === !1))\r\n                    return !1;\r\n                null === o && (o = s > 0);\r\n            } return !0; } f.exports = n; var d = e(\"../collision/AABB\"), i = e(\"../shapes/Shape\"), t = e(\"../collision/Ray\"), l = e(\"../math/Vec3\"), u = e(\"../math/Transform\"), p = (e(\"../shapes/ConvexPolyhedron\"), e(\"../math/Quaternion\")), s = (e(\"../solver/Solver\"), e(\"../utils/Vec3Pool\")), y = e(\"../equations/ContactEquation\"), c = e(\"../equations/FrictionEquation\"); n.prototype.createContactEquation = function (e, f, n, o, d, i) { var t; this.contactPointPool.length ? (t = this.contactPointPool.pop(), t.bi = e, t.bj = f) : t = new y(e, f), t.enabled = e.collisionResponse && f.collisionResponse && n.collisionResponse && o.collisionResponse; var l = this.currentContactMaterial; t.restitution = l.restitution, t.setSpookParams(l.contactEquationStiffness, l.contactEquationRelaxation, this.world.dt); var u = n.material || e.material, p = o.material || f.material; return u && p && u.restitution >= 0 && p.restitution >= 0 && (t.restitution = u.restitution * p.restitution), t.si = d || n, t.sj = i || o, t; }, n.prototype.createFrictionEquationsFromContact = function (e, f) { var n = e.bi, o = e.bj, d = e.si, i = e.sj, t = this.world, l = this.currentContactMaterial, u = l.friction, p = d.material || n.material, s = i.material || o.material; if (p && s && p.friction >= 0 && s.friction >= 0 && (u = p.friction * s.friction), u > 0) {\r\n                var y = u * t.gravity.length(), a = n.invMass + o.invMass;\r\n                a > 0 && (a = 1 / a);\r\n                var r = this.frictionEquationPool, w = r.length ? r.pop() : new c(n, o, y * a), b = r.length ? r.pop() : new c(n, o, y * a);\r\n                return w.bi = b.bi = n, w.bj = b.bj = o, w.minForce = b.minForce = -y * a, w.maxForce = b.maxForce = y * a, w.ri.copy(e.ri), w.rj.copy(e.rj), b.ri.copy(e.ri), b.rj.copy(e.rj), e.ni.tangents(w.t, b.t), w.setSpookParams(l.frictionEquationStiffness, l.frictionEquationRelaxation, t.dt), b.setSpookParams(l.frictionEquationStiffness, l.frictionEquationRelaxation, t.dt), w.enabled = b.enabled = e.enabled, f.push(w, b), !0;\r\n            } return !1; }; var a = new l, r = new l, w = new l; n.prototype.createFrictionFromAverage = function (e) { var f = this.result[this.result.length - 1]; if (this.createFrictionEquationsFromContact(f, this.frictionResult) && 1 !== e) {\r\n                var n = this.frictionResult[this.frictionResult.length - 2], o = this.frictionResult[this.frictionResult.length - 1];\r\n                a.setZero(), r.setZero(), w.setZero();\r\n                for (var d = f.bi, i = (f.bj, 0); i !== e; i++)\r\n                    f = this.result[this.result.length - 1 - i], f.bodyA !== d ? (a.vadd(f.ni, a), r.vadd(f.ri, r), w.vadd(f.rj, w)) : (a.vsub(f.ni, a), r.vadd(f.rj, r), w.vadd(f.ri, w));\r\n                var t = 1 / e;\r\n                r.scale(t, n.ri), w.scale(t, n.rj), o.ri.copy(n.ri), o.rj.copy(n.rj), a.normalize(), a.tangents(n.t, o.t);\r\n            } }; var b = new l, m = new l, N = new p, g = new p; n.prototype.getContacts = function (e, f, n, o, d, i, t) { this.contactPointPool = d, this.frictionEquationPool = t, this.result = o, this.frictionResult = i; for (var l = N, u = g, p = b, s = m, y = 0, c = e.length; y !== c; y++) {\r\n                var a = e[y], r = f[y], w = null;\r\n                a.material && r.material && (w = n.getContactMaterial(a.material, r.material) || null);\r\n                for (var x = 0; x < a.shapes.length; x++) {\r\n                    a.quaternion.mult(a.shapeOrientations[x], l), a.quaternion.vmult(a.shapeOffsets[x], p), p.vadd(a.position, p);\r\n                    for (var j = a.shapes[x], v = 0; v < r.shapes.length; v++) {\r\n                        r.quaternion.mult(r.shapeOrientations[v], u), r.quaternion.vmult(r.shapeOffsets[v], s), s.vadd(r.position, s);\r\n                        var A = r.shapes[v];\r\n                        if (!(p.distanceTo(s) > j.boundingSphereRadius + A.boundingSphereRadius)) {\r\n                            var C = null;\r\n                            j.material && A.material && (C = n.getContactMaterial(j.material, A.material) || null), this.currentContactMaterial = C || w || n.defaultContactMaterial;\r\n                            var O = this[j.type | A.type];\r\n                            O && (j.type < A.type ? O.call(this, j, A, p, s, l, u, a, r, j, A) : O.call(this, A, j, s, p, u, l, r, a, j, A));\r\n                        }\r\n                    }\r\n                }\r\n            } }; n.prototype[i.types.BOX | i.types.BOX] = n.prototype.boxBox = function (e, f, n, o, d, i, t, l) { e.convexPolyhedronRepresentation.material = e.material, f.convexPolyhedronRepresentation.material = f.material, e.convexPolyhedronRepresentation.collisionResponse = e.collisionResponse, f.convexPolyhedronRepresentation.collisionResponse = f.collisionResponse, this.convexConvex(e.convexPolyhedronRepresentation, f.convexPolyhedronRepresentation, n, o, d, i, t, l, e, f); }, n.prototype[i.types.BOX | i.types.CONVEXPOLYHEDRON] = n.prototype.boxConvex = function (e, f, n, o, d, i, t, l) { e.convexPolyhedronRepresentation.material = e.material, e.convexPolyhedronRepresentation.collisionResponse = e.collisionResponse, this.convexConvex(e.convexPolyhedronRepresentation, f, n, o, d, i, t, l, e, f); }, n.prototype[i.types.BOX | i.types.PARTICLE] = n.prototype.boxParticle = function (e, f, n, o, d, i, t, l) { e.convexPolyhedronRepresentation.material = e.material, e.convexPolyhedronRepresentation.collisionResponse = e.collisionResponse, this.convexParticle(e.convexPolyhedronRepresentation, f, n, o, d, i, t, l, e, f); }, n.prototype[i.types.SPHERE] = n.prototype.sphereSphere = function (e, f, n, o, d, i, t, l) { var u = this.createContactEquation(t, l, e, f); o.vsub(n, u.ni), u.ni.normalize(), u.ri.copy(u.ni), u.rj.copy(u.ni), u.ri.mult(e.radius, u.ri), u.rj.mult(-f.radius, u.rj), u.ri.vadd(n, u.ri), u.ri.vsub(t.position, u.ri), u.rj.vadd(o, u.rj), u.rj.vsub(l.position, u.rj), this.result.push(u), this.createFrictionEquationsFromContact(u, this.frictionResult); }; var x = new l, j = new l, v = new l; n.prototype[i.types.PLANE | i.types.TRIMESH] = n.prototype.planeTrimesh = function (e, f, n, o, d, i, t, p) { var s = new l, y = x; y.set(0, 0, 1), d.vmult(y, y); for (var c = 0; c < f.vertices.length / 3; c++) {\r\n                f.getVertex(c, s);\r\n                var a = new l;\r\n                a.copy(s), u.pointToWorldFrame(o, i, a, s);\r\n                var r = j;\r\n                s.vsub(n, r);\r\n                var w = y.dot(r);\r\n                if (0 >= w) {\r\n                    var b = this.createContactEquation(t, p, e, f);\r\n                    b.ni.copy(y);\r\n                    var m = v;\r\n                    y.scale(r.dot(y), m), s.vsub(m, m), b.ri.copy(m), b.ri.vsub(t.position, b.ri), b.rj.copy(s), b.rj.vsub(p.position, b.rj), this.result.push(b), this.createFrictionEquationsFromContact(b, this.frictionResult);\r\n                }\r\n            } }; var A = new l, C = new l, O = (new l, new l), h = new l, k = new l, q = new l, z = new l, B = new l, D = new l, E = new l, F = new l, G = new l, H = new l, I = new d, J = []; n.prototype[i.types.SPHERE | i.types.TRIMESH] = n.prototype.sphereTrimesh = function (e, f, n, o, d, i, l, p) { var s = k, y = q, c = z, a = B, r = D, w = E, b = I, m = h, N = C, g = J; u.pointToLocalFrame(o, i, n, r); var x = e.radius; b.lowerBound.set(r.x - x, r.y - x, r.z - x), b.upperBound.set(r.x + x, r.y + x, r.z + x), f.getTrianglesInAABB(b, g); for (var j = O, v = e.radius * e.radius, K = 0; K < g.length; K++)\r\n                for (var L = 0; 3 > L; L++)\r\n                    if (f.getVertex(f.indices[3 * g[K] + L], j), j.vsub(r, N), N.norm2() <= v) {\r\n                        m.copy(j), u.pointToWorldFrame(o, i, m, j), j.vsub(n, N);\r\n                        var M = this.createContactEquation(l, p, e, f);\r\n                        M.ni.copy(N), M.ni.normalize(), M.ri.copy(M.ni), M.ri.scale(e.radius, M.ri), M.ri.vadd(n, M.ri), M.ri.vsub(l.position, M.ri), M.rj.copy(j), M.rj.vsub(p.position, M.rj), this.result.push(M), this.createFrictionEquationsFromContact(M, this.frictionResult);\r\n                    } for (var K = 0; K < g.length; K++)\r\n                for (var L = 0; 3 > L; L++) {\r\n                    f.getVertex(f.indices[3 * g[K] + L], s), f.getVertex(f.indices[3 * g[K] + (L + 1) % 3], y), y.vsub(s, c), r.vsub(y, w);\r\n                    var P = w.dot(c);\r\n                    r.vsub(s, w);\r\n                    var Q = w.dot(c);\r\n                    if (Q > 0 && 0 > P) {\r\n                        r.vsub(s, w), a.copy(c), a.normalize(), Q = w.dot(a), a.scale(Q, w), w.vadd(s, w);\r\n                        var R = w.distanceTo(r);\r\n                        if (R < e.radius) {\r\n                            var M = this.createContactEquation(l, p, e, f);\r\n                            w.vsub(r, M.ni), M.ni.normalize(), M.ni.scale(e.radius, M.ri), u.pointToWorldFrame(o, i, w, w), w.vsub(p.position, M.rj), u.vectorToWorldFrame(i, M.ni, M.ni), u.vectorToWorldFrame(i, M.ri, M.ri), this.result.push(M), this.createFrictionEquationsFromContact(M, this.frictionResult);\r\n                        }\r\n                    }\r\n                } for (var S = F, T = G, U = H, V = A, K = 0, W = g.length; K !== W; K++) {\r\n                f.getTriangleVertices(g[K], S, T, U), f.getNormal(g[K], V), r.vsub(S, w);\r\n                var R = w.dot(V);\r\n                if (V.scale(R, w), r.vsub(w, w), R = w.distanceTo(r), t.pointInTriangle(w, S, T, U) && R < e.radius) {\r\n                    var M = this.createContactEquation(l, p, e, f);\r\n                    w.vsub(r, M.ni), M.ni.normalize(), M.ni.scale(e.radius, M.ri), u.pointToWorldFrame(o, i, w, w), w.vsub(p.position, M.rj), u.vectorToWorldFrame(i, M.ni, M.ni), u.vectorToWorldFrame(i, M.ri, M.ri), this.result.push(M), this.createFrictionEquationsFromContact(M, this.frictionResult);\r\n                }\r\n            } g.length = 0; }; var K = new l, L = new l; n.prototype[i.types.SPHERE | i.types.PLANE] = n.prototype.spherePlane = function (e, f, n, o, d, i, t, l) { var u = this.createContactEquation(t, l, e, f); if (u.ni.set(0, 0, 1), i.vmult(u.ni, u.ni), u.ni.negate(u.ni), u.ni.normalize(), u.ni.mult(e.radius, u.ri), n.vsub(o, K), u.ni.mult(u.ni.dot(K), L), K.vsub(L, u.rj), -K.dot(u.ni) <= e.radius) {\r\n                var p = u.ri, s = u.rj;\r\n                p.vadd(n, p), p.vsub(t.position, p), s.vadd(o, s), s.vsub(l.position, s), this.result.push(u), this.createFrictionEquationsFromContact(u, this.frictionResult);\r\n            } }; var M = new l, P = new l, Q = new l, R = new l, S = new l, T = new l, U = new l, V = [new l, new l, new l, new l, new l, new l], W = new l, X = new l, Y = new l, Z = new l; n.prototype[i.types.SPHERE | i.types.BOX] = n.prototype.sphereBox = function (e, f, n, o, d, i, t, l) { var u = this.v3pool, p = V; n.vsub(o, R), f.getSideNormals(p, i); for (var s = e.radius, y = !1, c = X, a = Y, r = Z, w = null, b = 0, m = 0, N = 0, g = null, x = 0, j = p.length; x !== j && y === !1; x++) {\r\n                var v = S;\r\n                v.copy(p[x]);\r\n                var A = v.norm();\r\n                v.normalize();\r\n                var C = R.dot(v);\r\n                if (A + s > C && C > 0) {\r\n                    var O = T, h = U;\r\n                    O.copy(p[(x + 1) % 3]), h.copy(p[(x + 2) % 3]);\r\n                    var k = O.norm(), q = h.norm();\r\n                    O.normalize(), h.normalize();\r\n                    var z = R.dot(O), B = R.dot(h);\r\n                    if (k > z && z > -k && q > B && B > -q) {\r\n                        var D = Math.abs(C - A - s);\r\n                        (null === g || g > D) && (g = D, m = z, N = B, w = A, c.copy(v), a.copy(O), r.copy(h), b++);\r\n                    }\r\n                }\r\n            } if (b) {\r\n                y = !0;\r\n                var E = this.createContactEquation(t, l, e, f);\r\n                c.mult(-s, E.ri), E.ni.copy(c), E.ni.negate(E.ni), c.mult(w, c), a.mult(m, a), c.vadd(a, c), r.mult(N, r), c.vadd(r, E.rj), E.ri.vadd(n, E.ri), E.ri.vsub(t.position, E.ri), E.rj.vadd(o, E.rj), E.rj.vsub(l.position, E.rj), this.result.push(E), this.createFrictionEquationsFromContact(E, this.frictionResult);\r\n            } for (var F = u.get(), G = W, H = 0; 2 !== H && !y; H++)\r\n                for (var I = 0; 2 !== I && !y; I++)\r\n                    for (var J = 0; 2 !== J && !y; J++)\r\n                        if (F.set(0, 0, 0), H ? F.vadd(p[0], F) : F.vsub(p[0], F), I ? F.vadd(p[1], F) : F.vsub(p[1], F), J ? F.vadd(p[2], F) : F.vsub(p[2], F), o.vadd(F, G), G.vsub(n, G), G.norm2() < s * s) {\r\n                            y = !0;\r\n                            var E = this.createContactEquation(t, l, e, f);\r\n                            E.ri.copy(G), E.ri.normalize(), E.ni.copy(E.ri), E.ri.mult(s, E.ri), E.rj.copy(F), E.ri.vadd(n, E.ri), E.ri.vsub(t.position, E.ri), E.rj.vadd(o, E.rj), E.rj.vsub(l.position, E.rj), this.result.push(E), this.createFrictionEquationsFromContact(E, this.frictionResult);\r\n                        } u.release(F), F = null; for (var K = u.get(), L = u.get(), E = u.get(), M = u.get(), D = u.get(), P = p.length, H = 0; H !== P && !y; H++)\r\n                for (var I = 0; I !== P && !y; I++)\r\n                    if (H % 3 !== I % 3) {\r\n                        p[I].cross(p[H], K), K.normalize(), p[H].vadd(p[I], L), E.copy(n), E.vsub(L, E), E.vsub(o, E);\r\n                        var Q = E.dot(K);\r\n                        K.mult(Q, M);\r\n                        for (var J = 0; J === H % 3 || J === I % 3;)\r\n                            J++;\r\n                        D.copy(n), D.vsub(M, D), D.vsub(L, D), D.vsub(o, D);\r\n                        var $ = Math.abs(Q), _ = D.norm();\r\n                        if ($ < p[J].norm() && s > _) {\r\n                            y = !0;\r\n                            var ef = this.createContactEquation(t, l, e, f);\r\n                            L.vadd(M, ef.rj), ef.rj.copy(ef.rj), D.negate(ef.ni), ef.ni.normalize(), ef.ri.copy(ef.rj), ef.ri.vadd(o, ef.ri), ef.ri.vsub(n, ef.ri), ef.ri.normalize(), ef.ri.mult(s, ef.ri), ef.ri.vadd(n, ef.ri), ef.ri.vsub(t.position, ef.ri), ef.rj.vadd(o, ef.rj), ef.rj.vsub(l.position, ef.rj), this.result.push(ef), this.createFrictionEquationsFromContact(ef, this.frictionResult);\r\n                        }\r\n                    } u.release(K, L, E, M, D); }; var $ = new l, _ = new l, ef = new l, ff = new l, nf = new l, of = new l, df = new l, tf = new l, lf = new l, uf = new l; n.prototype[i.types.SPHERE | i.types.CONVEXPOLYHEDRON] = n.prototype.sphereConvex = function (e, f, n, d, i, t, l, u) { var p = this.v3pool; n.vsub(d, $); for (var s = f.faceNormals, y = f.faces, c = f.vertices, a = e.radius, r = 0; r !== c.length; r++) {\r\n                var w = c[r], b = nf;\r\n                t.vmult(w, b), d.vadd(b, b);\r\n                var m = ff;\r\n                if (b.vsub(n, m), m.norm2() < a * a) {\r\n                    g = !0;\r\n                    var N = this.createContactEquation(l, u, e, f);\r\n                    return N.ri.copy(m), N.ri.normalize(), N.ni.copy(N.ri), N.ri.mult(a, N.ri), b.vsub(d, N.rj), N.ri.vadd(n, N.ri), N.ri.vsub(l.position, N.ri), N.rj.vadd(d, N.rj), N.rj.vsub(u.position, N.rj), this.result.push(N), void this.createFrictionEquationsFromContact(N, this.frictionResult);\r\n                }\r\n            } for (var g = !1, r = 0, x = y.length; r !== x && g === !1; r++) {\r\n                var j = s[r], v = y[r], A = of;\r\n                t.vmult(j, A);\r\n                var C = df;\r\n                t.vmult(c[v[0]], C), C.vadd(d, C);\r\n                var O = tf;\r\n                A.mult(-a, O), n.vadd(O, O);\r\n                var h = lf;\r\n                O.vsub(C, h);\r\n                var k = h.dot(A), q = uf;\r\n                if (n.vsub(C, q), 0 > k && q.dot(A) > 0) {\r\n                    for (var z = [], B = 0, D = v.length; B !== D; B++) {\r\n                        var E = p.get();\r\n                        t.vmult(c[v[B]], E), d.vadd(E, E), z.push(E);\r\n                    }\r\n                    if (o(z, A, n)) {\r\n                        g = !0;\r\n                        var N = this.createContactEquation(l, u, e, f);\r\n                        A.mult(-a, N.ri), A.negate(N.ni);\r\n                        var F = p.get();\r\n                        A.mult(-k, F);\r\n                        var G = p.get();\r\n                        A.mult(-a, G), n.vsub(d, N.rj), N.rj.vadd(G, N.rj), N.rj.vadd(F, N.rj), N.rj.vadd(d, N.rj), N.rj.vsub(u.position, N.rj), N.ri.vadd(n, N.ri), N.ri.vsub(l.position, N.ri), p.release(F), p.release(G), this.result.push(N), this.createFrictionEquationsFromContact(N, this.frictionResult);\r\n                        for (var B = 0, H = z.length; B !== H; B++)\r\n                            p.release(z[B]);\r\n                        return;\r\n                    }\r\n                    for (var B = 0; B !== v.length; B++) {\r\n                        var I = p.get(), J = p.get();\r\n                        t.vmult(c[v[(B + 1) % v.length]], I), t.vmult(c[v[(B + 2) % v.length]], J), d.vadd(I, I), d.vadd(J, J);\r\n                        var K = _;\r\n                        J.vsub(I, K);\r\n                        var L = ef;\r\n                        K.unit(L);\r\n                        var M = p.get(), P = p.get();\r\n                        n.vsub(I, P);\r\n                        var Q = P.dot(L);\r\n                        L.mult(Q, M), M.vadd(I, M);\r\n                        var R = p.get();\r\n                        if (M.vsub(n, R), Q > 0 && Q * Q < K.norm2() && R.norm2() < a * a) {\r\n                            var N = this.createContactEquation(l, u, e, f);\r\n                            M.vsub(d, N.rj), M.vsub(n, N.ni), N.ni.normalize(), N.ni.mult(a, N.ri), N.rj.vadd(d, N.rj), N.rj.vsub(u.position, N.rj), N.ri.vadd(n, N.ri), N.ri.vsub(l.position, N.ri), this.result.push(N), this.createFrictionEquationsFromContact(N, this.frictionResult);\r\n                            for (var B = 0, H = z.length; B !== H; B++)\r\n                                p.release(z[B]);\r\n                            return p.release(I), p.release(J), p.release(M), p.release(R), void p.release(P);\r\n                        }\r\n                        p.release(I), p.release(J), p.release(M), p.release(R), p.release(P);\r\n                    }\r\n                    for (var B = 0, H = z.length; B !== H; B++)\r\n                        p.release(z[B]);\r\n                }\r\n            } }; new l, new l; n.prototype[i.types.PLANE | i.types.BOX] = n.prototype.planeBox = function (e, f, n, o, d, i, t, l) { f.convexPolyhedronRepresentation.material = f.material, f.convexPolyhedronRepresentation.collisionResponse = f.collisionResponse, this.planeConvex(e, f.convexPolyhedronRepresentation, n, o, d, i, t, l); }; var pf = new l, sf = new l, yf = new l, cf = new l; n.prototype[i.types.PLANE | i.types.CONVEXPOLYHEDRON] = n.prototype.planeConvex = function (e, f, n, o, d, i, t, l) { var u = pf, p = sf; p.set(0, 0, 1), d.vmult(p, p); for (var s = 0, y = yf, c = 0; c !== f.vertices.length; c++) {\r\n                u.copy(f.vertices[c]), i.vmult(u, u), o.vadd(u, u), u.vsub(n, y);\r\n                var a = p.dot(y);\r\n                if (0 >= a) {\r\n                    var r = this.createContactEquation(t, l, e, f), w = cf;\r\n                    p.mult(p.dot(y), w), u.vsub(w, w), w.vsub(n, r.ri), r.ni.copy(p), u.vsub(o, r.rj), r.ri.vadd(n, r.ri), r.ri.vsub(t.position, r.ri), r.rj.vadd(o, r.rj), r.rj.vsub(l.position, r.rj), this.result.push(r), s++, this.enableFrictionReduction || this.createFrictionEquationsFromContact(r, this.frictionResult);\r\n                }\r\n            } this.enableFrictionReduction && s && this.createFrictionFromAverage(s); }; var af = new l, rf = new l; n.prototype[i.types.CONVEXPOLYHEDRON] = n.prototype.convexConvex = function (e, f, n, o, d, i, t, l, u, p, s, y) { var c = af; if (!(n.distanceTo(o) > e.boundingSphereRadius + f.boundingSphereRadius) && e.findSeparatingAxis(f, n, d, o, i, c, s, y)) {\r\n                var a = [], r = rf;\r\n                e.clipAgainstHull(n, d, f, o, i, c, -100, 100, a);\r\n                for (var w = 0, b = 0; b !== a.length; b++) {\r\n                    var m = this.createContactEquation(t, l, e, f, u, p), N = m.ri, g = m.rj;\r\n                    c.negate(m.ni), a[b].normal.negate(r), r.mult(a[b].depth, r), a[b].point.vadd(r, N), g.copy(a[b].point), N.vsub(n, N), g.vsub(o, g), N.vadd(n, N), N.vsub(t.position, N), g.vadd(o, g), g.vsub(l.position, g), this.result.push(m), w++, this.enableFrictionReduction || this.createFrictionEquationsFromContact(m, this.frictionResult);\r\n                }\r\n                this.enableFrictionReduction && w && this.createFrictionFromAverage(w);\r\n            } }; var wf = new l, bf = new l, mf = new l; n.prototype[i.types.PLANE | i.types.PARTICLE] = n.prototype.planeParticle = function (e, f, n, o, d, i, t, l) { var u = wf; u.set(0, 0, 1), t.quaternion.vmult(u, u); var p = bf; o.vsub(t.position, p); var s = u.dot(p); if (0 >= s) {\r\n                var y = this.createContactEquation(l, t, f, e);\r\n                y.ni.copy(u), y.ni.negate(y.ni), y.ri.set(0, 0, 0);\r\n                var c = mf;\r\n                u.mult(u.dot(o), c), o.vsub(c, c), y.rj.copy(c), this.result.push(y), this.createFrictionEquationsFromContact(y, this.frictionResult);\r\n            } }; var Nf = new l; n.prototype[i.types.PARTICLE | i.types.SPHERE] = n.prototype.sphereParticle = function (e, f, n, o, d, i, t, l) { var u = Nf; u.set(0, 0, 1), o.vsub(n, u); var p = u.norm2(); if (p <= e.radius * e.radius) {\r\n                var s = this.createContactEquation(l, t, f, e);\r\n                u.normalize(), s.rj.copy(u), s.rj.mult(e.radius, s.rj), s.ni.copy(u), s.ni.negate(s.ni), s.ri.set(0, 0, 0), this.result.push(s), this.createFrictionEquationsFromContact(s, this.frictionResult);\r\n            } }; var gf = new p, xf = new l, jf = (new l, new l), vf = new l, Af = new l; n.prototype[i.types.PARTICLE | i.types.CONVEXPOLYHEDRON] = n.prototype.convexParticle = function (e, f, n, o, d, i, t, l) { var u = -1, p = jf, s = Af, y = null, c = 0, a = xf; if (a.copy(o), a.vsub(n, a), d.conjugate(gf), gf.vmult(a, a), e.pointIsInside(a)) {\r\n                e.worldVerticesNeedsUpdate && e.computeWorldVertices(n, d), e.worldFaceNormalsNeedsUpdate && e.computeWorldFaceNormals(d);\r\n                for (var r = 0, w = e.faces.length; r !== w; r++) {\r\n                    var b = [e.worldVertices[e.faces[r][0]]], m = e.worldFaceNormals[r];\r\n                    o.vsub(b[0], vf);\r\n                    var N = -m.dot(vf);\r\n                    (null === y || Math.abs(N) < Math.abs(y)) && (y = N, u = r, p.copy(m), c++);\r\n                }\r\n                if (-1 !== u) {\r\n                    var g = this.createContactEquation(l, t, f, e);\r\n                    p.mult(y, s), s.vadd(o, s), s.vsub(n, s), g.rj.copy(s), p.negate(g.ni), g.ri.set(0, 0, 0);\r\n                    var x = g.ri, j = g.rj;\r\n                    x.vadd(o, x), x.vsub(l.position, x), j.vadd(n, j), j.vsub(t.position, j), this.result.push(g), this.createFrictionEquationsFromContact(g, this.frictionResult);\r\n                }\r\n                else\r\n                    console.warn(\"Point found inside convex, but did not find penetrating face!\");\r\n            } }, n.prototype[i.types.BOX | i.types.HEIGHTFIELD] = n.prototype.boxHeightfield = function (e, f, n, o, d, i, t, l) { e.convexPolyhedronRepresentation.material = e.material, e.convexPolyhedronRepresentation.collisionResponse = e.collisionResponse, this.convexHeightfield(e.convexPolyhedronRepresentation, f, n, o, d, i, t, l); }; var Cf = new l, Of = new l, hf = [0]; n.prototype[i.types.CONVEXPOLYHEDRON | i.types.HEIGHTFIELD] = n.prototype.convexHeightfield = function (e, f, n, o, d, i, t, l) { var p = f.data, s = f.elementSize, y = e.boundingSphereRadius, c = Of, a = hf, r = Cf; u.pointToLocalFrame(o, i, n, r); var w = Math.floor((r.x - y) / s) - 1, b = Math.ceil((r.x + y) / s) + 1, m = Math.floor((r.y - y) / s) - 1, N = Math.ceil((r.y + y) / s) + 1; if (!(0 > b || 0 > N || w > p.length || m > p[0].length)) {\r\n                0 > w && (w = 0), 0 > b && (b = 0), 0 > m && (m = 0), 0 > N && (N = 0), w >= p.length && (w = p.length - 1), b >= p.length && (b = p.length - 1), N >= p[0].length && (N = p[0].length - 1), m >= p[0].length && (m = p[0].length - 1);\r\n                var g = [];\r\n                f.getRectMinMax(w, m, b, N, g);\r\n                var x = g[0], j = g[1];\r\n                if (!(r.z - y > j || r.z + y < x))\r\n                    for (var v = w; b > v; v++)\r\n                        for (var A = m; N > A; A++)\r\n                            f.getConvexTrianglePillar(v, A, !1), u.pointToWorldFrame(o, i, f.pillarOffset, c), n.distanceTo(c) < f.pillarConvex.boundingSphereRadius + e.boundingSphereRadius && this.convexConvex(e, f.pillarConvex, n, c, d, i, t, l, null, null, a, null), f.getConvexTrianglePillar(v, A, !0), u.pointToWorldFrame(o, i, f.pillarOffset, c), n.distanceTo(c) < f.pillarConvex.boundingSphereRadius + e.boundingSphereRadius && this.convexConvex(e, f.pillarConvex, n, c, d, i, t, l, null, null, a, null);\r\n            } }; var kf = new l, qf = new l; n.prototype[i.types.SPHERE | i.types.HEIGHTFIELD] = n.prototype.sphereHeightfield = function (e, f, n, o, d, i, t, l) { var p = f.data, s = e.radius, y = f.elementSize, c = qf, a = kf; u.pointToLocalFrame(o, i, n, a); var r = Math.floor((a.x - s) / y) - 1, w = Math.ceil((a.x + s) / y) + 1, b = Math.floor((a.y - s) / y) - 1, m = Math.ceil((a.y + s) / y) + 1; if (!(0 > w || 0 > m || r > p.length || m > p[0].length)) {\r\n                0 > r && (r = 0), 0 > w && (w = 0), 0 > b && (b = 0), 0 > m && (m = 0), r >= p.length && (r = p.length - 1), w >= p.length && (w = p.length - 1), m >= p[0].length && (m = p[0].length - 1), b >= p[0].length && (b = p[0].length - 1);\r\n                var N = [];\r\n                f.getRectMinMax(r, b, w, m, N);\r\n                var g = N[0], x = N[1];\r\n                if (!(a.z - s > x || a.z + s < g))\r\n                    for (var j = this.result, v = r; w > v; v++)\r\n                        for (var A = b; m > A; A++) {\r\n                            var C = j.length;\r\n                            f.getConvexTrianglePillar(v, A, !1), u.pointToWorldFrame(o, i, f.pillarOffset, c), n.distanceTo(c) < f.pillarConvex.boundingSphereRadius + e.boundingSphereRadius && this.sphereConvex(e, f.pillarConvex, n, c, d, i, t, l), f.getConvexTrianglePillar(v, A, !0), u.pointToWorldFrame(o, i, f.pillarOffset, c), n.distanceTo(c) < f.pillarConvex.boundingSphereRadius + e.boundingSphereRadius && this.sphereConvex(e, f.pillarConvex, n, c, d, i, t, l);\r\n                            var O = j.length - C;\r\n                            if (O > 2)\r\n                                return;\r\n                        }\r\n            } }; }, { \"../collision/AABB\": 3, \"../collision/Ray\": 9, \"../equations/ContactEquation\": 19, \"../equations/FrictionEquation\": 21, \"../math/Quaternion\": 28, \"../math/Transform\": 29, \"../math/Vec3\": 30, \"../shapes/ConvexPolyhedron\": 38, \"../shapes/Shape\": 43, \"../solver/Solver\": 47, \"../utils/Vec3Pool\": 54 }], 56: [function (e, f) {\r\n                function n() { u.apply(this), this.dt = -1, this.allowSleep = !1, this.contacts = [], this.frictionEquations = [], this.quatNormalizeSkip = 0, this.quatNormalizeFast = !1, this.time = 0, this.stepnumber = 0, this.default_dt = 1 / 60, this.nextId = 0, this.gravity = new d, this.broadphase = new m, this.bodies = [], this.solver = new t, this.constraints = [], this.narrowphase = new l(this), this.collisionMatrix = new p, this.collisionMatrixPrevious = new p, this.materials = [], this.contactmaterials = [], this.contactMaterialTable = new a, this.defaultMaterial = new s(\"default\"), this.defaultContactMaterial = new y(this.defaultMaterial, this.defaultMaterial, { friction: .3, restitution: 0 }), this.doProfiling = !1, this.profile = { solve: 0, makeContactConstraints: 0, broadphase: 0, integrate: 0, narrowphase: 0 }, this.subsystems = [], this.addBodyEvent = { type: \"addBody\", body: null }, this.removeBodyEvent = { type: \"removeBody\", body: null }; }\r\n                f.exports = n;\r\n                var o = e(\"../shapes/Shape\"), d = e(\"../math/Vec3\"), i = e(\"../math/Quaternion\"), t = e(\"../solver/GSSolver\"), l = (e(\"../utils/Vec3Pool\"), e(\"../equations/ContactEquation\"), e(\"../equations/FrictionEquation\"), e(\"./Narrowphase\")), u = e(\"../utils/EventTarget\"), p = e(\"../collision/ArrayCollisionMatrix\"), s = e(\"../material/Material\"), y = e(\"../material/ContactMaterial\"), c = e(\"../objects/Body\"), a = e(\"../utils/TupleDictionary\"), r = e(\"../collision/RaycastResult\"), w = e(\"../collision/AABB\"), b = e(\"../collision/Ray\"), m = e(\"../collision/NaiveBroadphase\");\r\n                n.prototype = new u;\r\n                var N = (new w, new b);\r\n                if (n.prototype.getContactMaterial = function (e, f) { return this.contactMaterialTable.get(e.id, f.id); }, n.prototype.numObjects = function () { return this.bodies.length; }, n.prototype.collisionMatrixTick = function () { var e = this.collisionMatrixPrevious; this.collisionMatrixPrevious = this.collisionMatrix, this.collisionMatrix = e, this.collisionMatrix.reset(); }, n.prototype.add = n.prototype.addBody = function (e) { -1 === this.bodies.indexOf(e) && (e.index = this.bodies.length, this.bodies.push(e), e.world = this, e.initPosition.copy(e.position), e.initVelocity.copy(e.velocity), e.timeLastSleepy = this.time, e instanceof c && (e.initAngularVelocity.copy(e.angularVelocity), e.initQuaternion.copy(e.quaternion)), this.collisionMatrix.setNumObjects(this.bodies.length), this.addBodyEvent.body = e, this.dispatchEvent(this.addBodyEvent)); }, n.prototype.addConstraint = function (e) { this.constraints.push(e); }, n.prototype.removeConstraint = function (e) { var f = this.constraints.indexOf(e); -1 !== f && this.constraints.splice(f, 1); }, n.prototype.rayTest = function (e, f, n) { n instanceof r ? this.raycastClosest(e, f, { skipBackfaces: !0 }, n) : this.raycastAll(e, f, { skipBackfaces: !0 }, n); }, n.prototype.raycastAll = function (e, f, n, o) { return n.mode = b.ALL, n.from = e, n.to = f, n.callback = o, N.intersectWorld(this, n); }, n.prototype.raycastAny = function (e, f, n, o) { return n.mode = b.ANY, n.from = e, n.to = f, n.result = o, N.intersectWorld(this, n); }, n.prototype.raycastClosest = function (e, f, n, o) { return n.mode = b.CLOSEST, n.from = e, n.to = f, n.result = o, N.intersectWorld(this, n); }, n.prototype.remove = function (e) { e.world = null; var f = this.bodies.length - 1, n = this.bodies, o = n.indexOf(e); if (-1 !== o) {\r\n                    n.splice(o, 1);\r\n                    for (var d = 0; d !== n.length; d++)\r\n                        n[d].index = d;\r\n                    this.collisionMatrix.setNumObjects(f), this.removeBodyEvent.body = e, this.dispatchEvent(this.removeBodyEvent);\r\n                } }, n.prototype.removeBody = n.prototype.remove, n.prototype.addMaterial = function (e) { this.materials.push(e); }, n.prototype.addContactMaterial = function (e) { this.contactmaterials.push(e), this.contactMaterialTable.set(e.materials[0].id, e.materials[1].id, e); }, \"undefined\" == typeof performance && (performance = {}), !performance.now) {\r\n                    var g = Date.now();\r\n                    performance.timing && performance.timing.navigationStart && (g = performance.timing.navigationStart), performance.now = function () { return Date.now() - g; };\r\n                }\r\n                var x = new d;\r\n                n.prototype.step = function (e, f, n) { if (n = n || 10, f = f || 0, 0 === f)\r\n                    this.internalStep(e), this.time += e;\r\n                else {\r\n                    var o = Math.floor((this.time + f) / e) - Math.floor(this.time / e);\r\n                    o = Math.min(o, n);\r\n                    for (var d = performance.now(), i = 0; i !== o && (this.internalStep(e), !(performance.now() - d > 1e3 * e)); i++)\r\n                        ;\r\n                    this.time += f;\r\n                    for (var t = this.time % e, l = t / e, u = x, p = this.bodies, s = 0; s !== p.length; s++) {\r\n                        var y = p[s];\r\n                        y.type !== c.STATIC && y.sleepState !== c.SLEEPING ? (y.position.vsub(y.previousPosition, u), u.scale(l, u), y.position.vadd(u, y.interpolatedPosition)) : (y.interpolatedPosition.copy(y.position), y.interpolatedQuaternion.copy(y.quaternion));\r\n                    }\r\n                } };\r\n                var j = { type: \"postStep\" }, v = { type: \"preStep\" }, A = { type: \"collide\", body: null, contact: null }, C = [], O = [], h = [], k = [], q = (new d, new d, new d, new d, new d, new d, new d, new d, new d, new i, new i), z = new i, B = new d;\r\n                n.prototype.internalStep = function (e) {\r\n                    this.dt = e;\r\n                    var f, n = this.contacts, d = h, i = k, t = this.numObjects(), l = this.bodies, u = this.solver, p = this.gravity, s = this.doProfiling, y = this.profile, a = c.DYNAMIC, r = this.constraints, w = O, b = (p.norm(), p.x), m = p.y, N = p.z, g = 0;\r\n                    for (s && (f = performance.now()), g = 0; g !== t; g++) {\r\n                        var x = l[g];\r\n                        if (x.type & a) {\r\n                            var D = x.force, E = x.mass;\r\n                            D.x += E * b, D.y += E * m, D.z += E * N;\r\n                        }\r\n                    }\r\n                    for (var g = 0, F = this.subsystems.length; g !== F; g++)\r\n                        this.subsystems[g].update();\r\n                    s && (f = performance.now()), d.length = 0, i.length = 0, this.broadphase.collisionPairs(this, d, i), s && (y.broadphase = performance.now() - f);\r\n                    var G = r.length;\r\n                    for (g = 0; g !== G; g++) {\r\n                        var H = r[g];\r\n                        if (!H.collideConnected)\r\n                            for (var I = d.length - 1; I >= 0; I -= 1)\r\n                                (H.bodyA === d[I] && H.bodyB === i[I] || H.bodyB === d[I] && H.bodyA === i[I]) && (d.splice(I, 1), i.splice(I, 1));\r\n                    }\r\n                    this.collisionMatrixTick(), s && (f = performance.now());\r\n                    var J = C, K = n.length;\r\n                    for (g = 0; g !== K; g++)\r\n                        J.push(n[g]);\r\n                    n.length = 0;\r\n                    var L = this.frictionEquations.length;\r\n                    for (g = 0; g !== L; g++)\r\n                        w.push(this.frictionEquations[g]);\r\n                    this.frictionEquations.length = 0, this.narrowphase.getContacts(d, i, this, n, J, this.frictionEquations, w), s && (y.narrowphase = performance.now() - f), s && (f = performance.now());\r\n                    for (var g = 0; g < this.frictionEquations.length; g++)\r\n                        u.addEquation(this.frictionEquations[g]);\r\n                    for (var M = n.length, P = 0; P !== M; P++) {\r\n                        {\r\n                            var Q, H = n[P], x = H.bi, R = H.bj;\r\n                            H.si, H.sj;\r\n                        }\r\n                        Q = x.material && R.material ? this.getContactMaterial(x.material, R.material) || this.defaultContactMaterial : this.defaultContactMaterial;\r\n                        var S = Q.friction;\r\n                        if (x.material && R.material && (x.material.friction >= 0 && R.material.friction >= 0 && (S = x.material.friction * R.material.friction), x.material.restitution >= 0 && R.material.restitution >= 0 && (H.restitution = x.material.restitution * R.material.restitution)), u.addEquation(H), x.allowSleep && x.type === c.DYNAMIC && x.sleepState === c.SLEEPING && R.sleepState === c.AWAKE && R.type !== c.STATIC) {\r\n                            var T = R.velocity.norm2() + R.angularVelocity.norm2(), U = Math.pow(R.sleepSpeedLimit, 2);\r\n                            T >= 2 * U && (x._wakeUpAfterNarrowphase = !0);\r\n                        }\r\n                        if (R.allowSleep && R.type === c.DYNAMIC && R.sleepState === c.SLEEPING && x.sleepState === c.AWAKE && x.type !== c.STATIC) {\r\n                            var V = x.velocity.norm2() + x.angularVelocity.norm2(), W = Math.pow(x.sleepSpeedLimit, 2);\r\n                            V >= 2 * W && (R._wakeUpAfterNarrowphase = !0);\r\n                        }\r\n                        this.collisionMatrix.set(x, R, !0), this.collisionMatrixPrevious.get(x, R) || (A.body = R, A.contact = H, x.dispatchEvent(A), A.body = x, R.dispatchEvent(A));\r\n                    }\r\n                    for (s && (y.makeContactConstraints = performance.now() - f, f = performance.now()), g = 0; g !== t; g++) {\r\n                        var x = l[g];\r\n                        x._wakeUpAfterNarrowphase && (x.wakeUp(), x._wakeUpAfterNarrowphase = !1);\r\n                    }\r\n                    var G = r.length;\r\n                    for (g = 0; g !== G; g++) {\r\n                        var H = r[g];\r\n                        H.update();\r\n                        for (var I = 0, X = H.equations.length; I !== X; I++) {\r\n                            var Y = H.equations[I];\r\n                            u.addEquation(Y);\r\n                        }\r\n                    }\r\n                    u.solve(e, this), s && (y.solve = performance.now() - f), u.removeAllEquations();\r\n                    var Z = Math.pow;\r\n                    for (g = 0; g !== t; g++) {\r\n                        var x = l[g];\r\n                        if (x.type & a) {\r\n                            var $ = Z(1 - x.linearDamping, e), _ = x.velocity;\r\n                            _.mult($, _);\r\n                            var ef = x.angularVelocity;\r\n                            if (ef) {\r\n                                var ff = Z(1 - x.angularDamping, e);\r\n                                ef.mult(ff, ef);\r\n                            }\r\n                        }\r\n                    }\r\n                    for (this.dispatchEvent(v), g = 0; g !== t; g++) {\r\n                        var x = l[g];\r\n                        x.preStep && x.preStep.call(x);\r\n                    }\r\n                    s && (f = performance.now());\r\n                    {\r\n                        var nf = q, of = z, df = this.stepnumber, tf = c.DYNAMIC | c.KINEMATIC, lf = df % (this.quatNormalizeSkip + 1) === 0, uf = this.quatNormalizeFast, pf = .5 * e;\r\n                        o.types.PLANE, o.types.CONVEXPOLYHEDRON;\r\n                    }\r\n                    for (g = 0; g !== t; g++) {\r\n                        var sf = l[g], yf = sf.force, cf = sf.torque;\r\n                        if (sf.type & tf && sf.sleepState !== c.SLEEPING) {\r\n                            var af = sf.velocity, rf = sf.angularVelocity, wf = sf.position, bf = sf.quaternion, mf = sf.invMass, Nf = sf.invInertiaWorld;\r\n                            af.x += yf.x * mf * e, af.y += yf.y * mf * e, af.z += yf.z * mf * e, sf.angularVelocity && (Nf.vmult(cf, B), B.mult(e, B), B.vadd(rf, rf)), wf.x += af.x * e, wf.y += af.y * e, wf.z += af.z * e, sf.angularVelocity && (nf.set(rf.x, rf.y, rf.z, 0), nf.mult(bf, of), bf.x += pf * of.x, bf.y += pf * of.y, bf.z += pf * of.z, bf.w += pf * of.w, lf && (uf ? bf.normalizeFast() : bf.normalize())), sf.aabb && (sf.aabbNeedsUpdate = !0), sf.updateInertiaWorld && sf.updateInertiaWorld();\r\n                        }\r\n                    }\r\n                    for (this.clearForces(), this.broadphase.dirty = !0, s && (y.integrate = performance.now() - f), this.time += e, this.stepnumber += 1, this.dispatchEvent(j), g = 0; g !== t; g++) {\r\n                        var x = l[g], gf = x.postStep;\r\n                        gf && gf.call(x);\r\n                    }\r\n                    if (this.allowSleep)\r\n                        for (g = 0; g !== t; g++)\r\n                            l[g].sleepTick(this.time);\r\n                }, n.prototype.clearForces = function () { for (var e = this.bodies, f = e.length, n = 0; n !== f; n++) {\r\n                    {\r\n                        var o = e[n];\r\n                        o.force, o.torque;\r\n                    }\r\n                    o.force.set(0, 0, 0), o.torque.set(0, 0, 0);\r\n                } };\r\n            }, { \"../collision/AABB\": 3, \"../collision/ArrayCollisionMatrix\": 4, \"../collision/NaiveBroadphase\": 7, \"../collision/Ray\": 9, \"../collision/RaycastResult\": 10, \"../equations/ContactEquation\": 19, \"../equations/FrictionEquation\": 21, \"../material/ContactMaterial\": 24, \"../material/Material\": 25, \"../math/Quaternion\": 28, \"../math/Vec3\": 30, \"../objects/Body\": 31, \"../shapes/Shape\": 43, \"../solver/GSSolver\": 46, \"../utils/EventTarget\": 49, \"../utils/TupleDictionary\": 52, \"../utils/Vec3Pool\": 54, \"./Narrowphase\": 55 }] }, {}, [2])(2);\r\n});\r\ndefine(\"src/resources\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = {\r\n        sounds: {\r\n            neha: new AudioClip('sounds/alice.mp3'),\r\n            minakshi: new AudioClip('sounds/bob.mp3'),\r\n        },\r\n        models: {\r\n            robots: {\r\n                neha: 'models/robots/Neha.glb',\r\n                minakshi: 'models/robots/Minakshi.glb',\r\n                akhil: 'models/robots/Akhil.glb'\r\n            }\r\n        },\r\n        standard: {\r\n            lift: new GLTFShape('models/lift_animated_test.glb')\r\n        },\r\n        locations: {\r\n            Topfloor: new Vector3(27.07, 41.67, 67.32)\r\n        },\r\n        textures: {\r\n        //   blank: new Texture('images/ui/blank.png'),\r\n        //   buttonE: new Texture('images/ui/buttonE.png'),\r\n        //   buttonF: new Texture('images/ui/buttonF.png'),\r\n        //   leftClickIcon: new Texture('images/ui/leftClickIcon.png'),\r\n        //   textPanel: new Texture('images/ui/textPanel.png')\r\n        }\r\n    };\r\n});\r\ndefine(\"src/modules/dialogData\", [\"require\", \"exports\", \"src/game\"], function (require, exports, game_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.minakshiDialog = exports.AkhilDialog = exports.NehaDialog = void 0;\r\n    exports.NehaDialog = [\r\n        {\r\n            text: \"Hope you’re carrying your license, coz we’re putting you in the driver’s seat. Wear these headphones and jump in and I’ll talk to you on the radio while you drive. Get ready to get your mind blown.  \"\r\n        },\r\n        {\r\n            text: \"It’s Need For Speed time so put the pedal to the metal and let’s vroom into the world of Key Financial Applications and Systems.\"\r\n        },\r\n        {\r\n            text: \"t’s a bumpy road ahead, so the seatbelt is your best friend. You know? That’s just what we do at IT to ensure Unilever’s financial reporting accuracy.\"\r\n            // isQuestion: true,\r\n            // buttons: [\r\n            //   { label: 'No', goToDialog: 3, fontSize: 12 },\r\n            //   { label: 'Play a game', offsetY: 2, fontSize: 25, goToDialog: 4 }\r\n            // ]\r\n        },\r\n        {\r\n            text: \"No we don’t race cars, haha! What I mean is that we analyse the risks and bumps on the road first across all KFASes in Unilever, map the IT General Controls that apply. And then enable the IT platforms to design and operate them effectively... WOAHHH hold on! \"\r\n        },\r\n        {\r\n            text: \"... looks like a flat tyre! \"\r\n        },\r\n        {\r\n            text: \"YOU NAILED IT! HAHA! Without year-round Controls Sustenance, we not only make sure to quick fix the gaps as soon as we find them, but also conduct a root cause analysis and drive structural solutions so that they don’t recur.  \"\r\n        },\r\n        {\r\n            text: \"Wanna leave and go explore?\",\r\n            isEndOfDialog: true,\r\n            triggeredByNext: function () {\r\n                game_1.neha.playAnimation('idle', true, 2);\r\n            }\r\n        },\r\n        {\r\n            text: \"C’mon, let’s get back into the car. \"\r\n        },\r\n        {\r\n            text: \"We are Unilever IT’s face to the SOX Auditors. I wonder what they have to say after all the Audit Automation we’ve done? Hmmm….\"\r\n        },\r\n        {\r\n            text: \"Well, here we are. Great driving, by the way. But we still have a long way to go... Head to the elevator. Akhil, our (Designation here) awaits you inside. \",\r\n            triggeredByNext: function () {\r\n                game_1.neha.playAnimation('walk', true, 2);\r\n            },\r\n            isEndOfDialog: true\r\n        },\r\n    ];\r\n    exports.AkhilDialog = [\r\n        {\r\n            text: \"Hey!\"\r\n        },\r\n        {\r\n            text: \"Lets get to the elevator then!\",\r\n            triggeredByNext: function () { return __awaiter(void 0, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    game_1.akhil.playAnimation('wave', true, 2);\r\n                    game_1.akhil.followPath({\r\n                        path: [new Vector3(20, 0.3, 58.60), new Vector3(25.63, 1, 67.90), new Vector3(32.92, 0.4, 70.58)],\r\n                        totalDuration: 4,\r\n                        loop: false,\r\n                        startingPoint: 0,\r\n                        onFinishCallback: function () {\r\n                            game_1.akhil.playAnimation('idle');\r\n                        }\r\n                    });\r\n                    return [2 /*return*/];\r\n                });\r\n            }); },\r\n            isEndOfDialog: true,\r\n        },\r\n        {\r\n            text: \"You know what? Just like this fast elevator, the Global Access Controls Framework needs to work just as fast for IT, like it does for Business. We have centralized the Access Operations for almost all the KFAS under CSC, and ensure the Controls are always embedded. \"\r\n        },\r\n        {\r\n            text: \"Agility and automation are our principles. And we’ve made sure nobody needs to wait to get their access provisioned, modified or revoked, if they follow the process.  \"\r\n        },\r\n        {\r\n            text: \"I guess I don’t need to tell you what the SOX Auditors have had to say about how we’ve turned it around with XX% automation leading to YY% reduction in deficiencies. \"\r\n        },\r\n        {\r\n            text: \"And now finally, it’s time to meet the boss! Hope you remember everything we’ve told you so far for what’s coming next! Pssst It’s a QUIZ! (whispers)\",\r\n        }\r\n    ];\r\n    exports.minakshiDialog = [\r\n        {\r\n            text: \"Hi, I’m Meenakshi. Hope you had fun learning about what we do at R&C. Come, time to get a bird’s eye view of Risk and Controls... let’s go for a spin and see how much you’ve learned today... \"\r\n        },\r\n        {\r\n            text: \"Enjoyed the ride? Thankfully, there’s no risks in experiencing it again. So feel free to start over or pass this experience on to your colleagues. Thanks for your time today, hope we made it worth it.\"\r\n        },\r\n    ];\r\n});\r\ndefine(\"src/game\", [\"require\", \"exports\", \"@dcl/npc-scene-utils\", \"src/resources\", \"@dcl/builder-hud\", \"src/modules/dialogData\"], function (require, exports, npc_scene_utils_1, resources_1, builder_hud_1, dialogData_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.minakshi = exports.akhil = exports.neha = exports.trees = exports.multiplex = void 0;\r\n    exports.multiplex = new Entity();\r\n    // multiplex.setParent(_scene)\r\n    exports.multiplex.addComponent(new GLTFShape(\"models/BaseLayout_updated.glb\"));\r\n    exports.multiplex.addComponent(new Transform({\r\n        position: new Vector3(0, -0.5, 0),\r\n        scale: new Vector3(1, 1, 1),\r\n    }));\r\n    exports.multiplex.getComponent(Transform).rotate(Vector3.Up(), 180);\r\n    engine.addEntity(exports.multiplex);\r\n    var well = new Entity();\r\n    well.addComponent(new GLTFShape(\"models/fountain_w_collider.glb\"));\r\n    well.addComponent(new Transform({ position: new Vector3(24.03, 0.2, 39.67) }));\r\n    engine.addEntity(well);\r\n    // const lift = new Entity()\r\n    // lift.addComponent(new GLTFShape(\"models/lift_animated_test.glb\"))\r\n    // lift.addComponent(new Transform(\r\n    //   {position: new Vector3(29.21,0.2,65.2), rotation: Quaternion.Euler(0,180,0), scale: new Vector3(1,1,1)}\r\n    // ))\r\n    // engine.addEntity(lift)\r\n    // hud.attachToEntity(lift)\r\n    exports.trees = new Entity();\r\n    exports.trees.setParent(exports.multiplex);\r\n    exports.trees.addComponent(new GLTFShape(\"models/trees_updated.glb\"));\r\n    exports.trees.addComponent(new Transform({\r\n        position: new Vector3(0, 0, 0),\r\n        scale: new Vector3(1, 1, 1),\r\n    }));\r\n    // trees.getComponent(Transform).rotate(Vector3.Up(), -90)\r\n    engine.addEntity(exports.trees);\r\n    // export const statue1 = new Entity()\r\n    // // multiplex.setParent(_scene)\r\n    // statue1.addComponent(new GLTFShape(\"models/model_01.glb\"))\r\n    // statue1.addComponent(\r\n    //   new Transform({\r\n    //     position: new Vector3(7.7, 0.1, 61.5),\r\n    //     scale: new Vector3(0.7, 0.7, 0.7),\r\n    //   })\r\n    // )\r\n    // // statue1.getComponent(Transform).rotate(Vector3.Up(), 90)\r\n    // engine.addEntity(statue1)\r\n    exports.neha = new npc_scene_utils_1.NPC({\r\n        position: new Vector3(28, 0.2, 7),\r\n        // position: new Vector3(31.45,0.2,68.58),\r\n        scale: new Vector3(1, 1, 1),\r\n        rotation: Quaternion.Euler(0, 0, 0)\r\n    }, resources_1.default.models.robots.neha, function () {\r\n        // animations\r\n        exports.neha.playAnimation('wave', true, 2);\r\n        // const dummyent = new Entity()\r\n        // dummyent.addComponent(\r\n        //   new NPCDelay(2, () => {\r\n        //     neha.playAnimation('fistpump')\r\n        //   })\r\n        // )\r\n        // engine.addEntity(dummyent)\r\n        // sound\r\n        // neha.addComponentOrReplace(new AudioSource(resources.sounds.neha))\r\n        // neha.getComponent(AudioSource).playOnce()\r\n        // dialog UI\r\n        exports.neha.talk(dialogData_1.NehaDialog);\r\n    }, {\r\n        faceUser: true,\r\n        portrait: {\r\n            path: 'images/portraits/marmite.png',\r\n            height: 256,\r\n            width: 256,\r\n            section: {\r\n                sourceHeight: 512,\r\n                sourceWidth: 512\r\n            }\r\n        },\r\n        onWalkAway: function () {\r\n            exports.neha.playAnimation('wave', true, 2);\r\n        }\r\n    });\r\n    //adding Akhil\r\n    exports.akhil = new npc_scene_utils_1.NPC({\r\n        position: new Vector3(20, 0.3, 58.60),\r\n        scale: new Vector3(1, 1, 1),\r\n        rotation: Quaternion.Euler(0, 0, 0)\r\n    }, resources_1.default.models.robots.akhil, function () {\r\n        // animations\r\n        exports.akhil.playAnimation('wave', true, 2);\r\n        // const dummyent = new Entity()\r\n        // dummyent.addComponent(\r\n        //   new NPCDelay(2, () => {\r\n        //     neha.playAnimation('fistpump')\r\n        //   })\r\n        // )\r\n        // engine.addEntity(dummyent)\r\n        // sound\r\n        // neha.addComponentOrReplace(new AudioSource(resources.sounds.neha))\r\n        // neha.getComponent(AudioSource).playOnce()\r\n        // dialog UI\r\n        exports.akhil.talk(dialogData_1.AkhilDialog);\r\n    }, {\r\n        faceUser: true,\r\n        walkingAnim: 'walk',\r\n        walkingSpeed: 0.5,\r\n        portrait: {\r\n            path: 'images/portraits/marmite.png',\r\n            height: 256,\r\n            width: 256,\r\n            section: {\r\n                sourceHeight: 512,\r\n                sourceWidth: 512\r\n            }\r\n        },\r\n        onWalkAway: function () {\r\n            exports.akhil.playAnimation('wave', true, 2);\r\n        }\r\n    });\r\n    builder_hud_1.hud.attachToEntity(exports.akhil);\r\n    //adding minakshi\r\n    exports.minakshi = new npc_scene_utils_1.NPC({\r\n        position: new Vector3(30.51, 40.41, 73.78),\r\n        scale: new Vector3(1, 1, 1),\r\n        rotation: Quaternion.Euler(0, 0, 0)\r\n    }, resources_1.default.models.robots.minakshi, function () {\r\n        // animations\r\n        exports.minakshi.playAnimation('wave', true, 2);\r\n        // const dummyent = new Entity()\r\n        // dummyent.addComponent(\r\n        //   new NPCDelay(2, () => {\r\n        //     neha.playAnimation('fistpump')\r\n        //   })\r\n        // )\r\n        // engine.addEntity(dummyent)\r\n        // sound\r\n        exports.minakshi.addComponentOrReplace(new AudioSource(resources_1.default.sounds.neha));\r\n        exports.minakshi.getComponent(AudioSource).playOnce();\r\n        // dialog UI\r\n        exports.minakshi.talk(dialogData_1.minakshiDialog);\r\n    }, {\r\n        faceUser: true,\r\n        portrait: {\r\n            path: 'images/portraits/marmite.png',\r\n            height: 256,\r\n            width: 256,\r\n            section: {\r\n                sourceHeight: 512,\r\n                sourceWidth: 512\r\n            }\r\n        },\r\n        onWalkAway: function () {\r\n            exports.minakshi.playAnimation('wave', true, 2);\r\n        }\r\n    });\r\n    //adding the Car\r\n    var blueMaterial = new Material();\r\n    blueMaterial.roughness = 0.5;\r\n    blueMaterial.albedoColor = Color3.FromInts(21, 105, 195);\r\n    var blackMaterial = new Material();\r\n    blackMaterial.roughness = 0.5;\r\n    blackMaterial.albedoColor = Color3.FromInts(35, 35, 35);\r\n    // Car entities\r\n    var chassis = new Entity();\r\n    chassis.addComponent(new GLTFShape(\"models/carBody.glb\"));\r\n    chassis.addComponent(new Transform());\r\n    engine.addEntity(chassis);\r\n    var wheels = [];\r\n    var wheelPositions = [new Vector3(2, 1.5, 0), new Vector3(2, -1.5, 0), new Vector3(-2.1, 1.5, 0), new Vector3(-2.1, -1.5, 0)];\r\n    for (var i = 0; i < wheelPositions.length; i++) {\r\n        var wheel = new Entity();\r\n        if (i % 2 == 0) {\r\n            wheel.addComponent(new GLTFShape(\"models/carWheelRight.glb\"));\r\n        }\r\n        else {\r\n            wheel.addComponent(new GLTFShape(\"models/carWheelLeft.glb\"));\r\n        }\r\n        wheel.addComponent(new Transform({ position: wheelPositions[i] }));\r\n        engine.addEntity(wheel);\r\n        wheels.push(wheel);\r\n    }\r\n    // Setup our world\r\n    var world = new CANNON.World();\r\n    world.broadphase = new CANNON.SAPBroadphase(world);\r\n    world.gravity.set(0, -9.82, 0); // m/s²\r\n    world.defaultContactMaterial.friction = 0;\r\n    var groundMaterial = new CANNON.Material(\"groundMaterial\");\r\n    var wheelMaterial = new CANNON.Material(\"wheelMaterial\");\r\n    var wheelGroundContactMaterial = new CANNON.ContactMaterial(wheelMaterial, groundMaterial, {\r\n        friction: 0.3,\r\n        restitution: 0,\r\n        contactEquationStiffness: 1000,\r\n    });\r\n    // We must add the contact materials to the world\r\n    world.addContactMaterial(wheelGroundContactMaterial);\r\n    // Create a ground plane and apply physics material\r\n    var groundBody = new CANNON.Body({\r\n        mass: 0, // mass == 0 makes the body static\r\n    });\r\n    groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2); // Reorient ground plane to be in the y-axis\r\n    var groundShape = new CANNON.Plane();\r\n    groundBody.addShape(groundShape);\r\n    groundBody.material = groundMaterial;\r\n    world.addBody(groundBody);\r\n    var chassisShape = new CANNON.Box(new CANNON.Vec3(7.2 / 2, 3.3 / 2, 1.7 / 2)); // Dimensions is from the center\r\n    var chassisBody = new CANNON.Body({ mass: 150 });\r\n    chassisBody.addShape(chassisShape);\r\n    chassisBody.position.set(23, 4, 9); // Start position in scene\r\n    chassisBody.angularVelocity.set(-1.6, 0.0, 1.5);\r\n    var options = {\r\n        radius: 0.5,\r\n        directionLocal: new CANNON.Vec3(0, 0, -1),\r\n        suspensionStiffness: 30,\r\n        suspensionRestLength: 0.4,\r\n        frictionSlip: 5,\r\n        dampingRelaxation: 2.3,\r\n        dampingCompression: 4.4,\r\n        maxSuspensionForce: 100000,\r\n        rollInfluence: 0.01,\r\n        axleLocal: new CANNON.Vec3(0, 1, 0),\r\n        chassisConnectionPointLocal: new CANNON.Vec3(1, 1, 0),\r\n        maxSuspensionTravel: 0.3,\r\n        customSlidingRotationalSpeed: -30,\r\n        useCustomSlidingRotationalSpeed: true,\r\n    };\r\n    // Create the vehicle\r\n    var vehicle = new CANNON.RaycastVehicle({\r\n        chassisBody: chassisBody,\r\n    });\r\n    // Set the wheel bodies positions\r\n    for (var i = 0; i < wheelPositions.length; i++) {\r\n        options.chassisConnectionPointLocal.set(wheelPositions[i].clone().x, wheelPositions[i].clone().y, wheelPositions[i].clone().z);\r\n        vehicle.addWheel(options);\r\n    }\r\n    vehicle.addToWorld(world);\r\n    var wheelBodies = [];\r\n    for (var i = 0; i < vehicle.wheelInfos.length; i++) {\r\n        var wheel = vehicle.wheelInfos[i];\r\n        var cylinderShape = new CANNON.Cylinder(wheel.radius, wheel.radius, wheel.radius / 2, 20);\r\n        var wheelBody = new CANNON.Body({\r\n            mass: 0,\r\n        });\r\n        wheelBody.type = CANNON.Body.KINEMATIC;\r\n        wheelBody.collisionFilterGroup = 0; // turn off collisions\r\n        var q = new CANNON.Quaternion();\r\n        q.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), Math.PI / 2);\r\n        wheelBody.addShape(cylinderShape, new CANNON.Vec3(), q);\r\n        wheelBodies.push(wheelBody);\r\n        world.addBody(wheelBody);\r\n    }\r\n    var fixedTimeStep = 1.0 / 60.0; // seconds\r\n    var maxSubSteps = 3;\r\n    var updateSystem = /** @class */ (function () {\r\n        function updateSystem() {\r\n        }\r\n        updateSystem.prototype.update = function (dt) {\r\n            // Instruct the world to perform a single step of simulation.\r\n            // It is generally best to keep the time step and iterations fixed.\r\n            world.step(fixedTimeStep, dt, maxSubSteps);\r\n            for (var i = 0; i < vehicle.wheelInfos.length; i++) {\r\n                vehicle.updateWheelTransform(i);\r\n                var t = vehicle.wheelInfos[i].worldTransform;\r\n                var wheelBody = wheelBodies[i];\r\n                wheelBody.position.copy(t.position);\r\n                wheelBody.quaternion.copy(t.quaternion);\r\n                wheels[i].getComponent(Transform).position.copyFrom(wheelBodies[i].position);\r\n                wheels[i].getComponent(Transform).rotation.copyFrom(wheelBodies[i].quaternion);\r\n            }\r\n            // Modifying the wheels position and rotation needs to happen before the chassis\r\n            chassis.getComponent(Transform).position.copyFrom(chassisBody.position);\r\n            chassis.getComponent(Transform).rotation.copyFrom(chassisBody.quaternion);\r\n        };\r\n        return updateSystem;\r\n    }());\r\n    engine.addSystem(new updateSystem());\r\n    var forwardForce = 0.0;\r\n    var steerValue = 0.0;\r\n    var maxSteerValue = 0.5;\r\n    var maxSpeed = 300;\r\n    var brakeForce = 25;\r\n    var updateDriveSystem = /** @class */ (function () {\r\n        function updateDriveSystem() {\r\n        }\r\n        updateDriveSystem.prototype.update = function () {\r\n            // Forward force\r\n            vehicle.applyEngineForce(forwardForce, 2);\r\n            vehicle.applyEngineForce(forwardForce, 3);\r\n            // Steering\r\n            vehicle.setSteeringValue(steerValue, 0);\r\n            vehicle.setSteeringValue(steerValue, 1);\r\n            // Braking\r\n            // Press E and F Keys together\r\n            if (isEKeyPressed && isFKeyPressed) {\r\n                vehicle.setBrake(brakeForce, 0);\r\n                vehicle.setBrake(brakeForce, 1);\r\n                vehicle.setBrake(brakeForce, 2);\r\n                vehicle.setBrake(brakeForce, 3);\r\n            }\r\n            else {\r\n                vehicle.setBrake(0, 0);\r\n                vehicle.setBrake(0, 1);\r\n                vehicle.setBrake(0, 2);\r\n                vehicle.setBrake(0, 3);\r\n            }\r\n        };\r\n        return updateDriveSystem;\r\n    }());\r\n    engine.addSystem(new updateDriveSystem());\r\n    // Controls\r\n    var input = Input.instance;\r\n    var isPointerPressed = false;\r\n    var isEKeyPressed = false;\r\n    var isFKeyPressed = false;\r\n    // Pointer\r\n    input.subscribe(\"BUTTON_DOWN\", ActionButton.POINTER, false, function () {\r\n        isPointerPressed = true;\r\n    });\r\n    input.subscribe(\"BUTTON_UP\", ActionButton.POINTER, false, function () {\r\n        isPointerPressed = false;\r\n    });\r\n    // E Key\r\n    input.subscribe(\"BUTTON_DOWN\", ActionButton.PRIMARY, false, function () {\r\n        isEKeyPressed = true;\r\n    });\r\n    input.subscribe(\"BUTTON_UP\", ActionButton.PRIMARY, false, function () {\r\n        isEKeyPressed = false;\r\n    });\r\n    // F Key\r\n    input.subscribe(\"BUTTON_DOWN\", ActionButton.SECONDARY, false, function () {\r\n        isFKeyPressed = true;\r\n    });\r\n    input.subscribe(\"BUTTON_UP\", ActionButton.SECONDARY, false, function () {\r\n        isFKeyPressed = false;\r\n    });\r\n    var ButtonChecker = /** @class */ (function () {\r\n        function ButtonChecker() {\r\n        }\r\n        ButtonChecker.prototype.update = function (dt) {\r\n            if (isPointerPressed) {\r\n                // Accelerate\r\n                if (forwardForce > -maxSpeed)\r\n                    forwardForce -= 300 * dt;\r\n                log(forwardForce);\r\n            }\r\n            else {\r\n                // Decelerate\r\n                if (forwardForce < 0) {\r\n                    forwardForce += 300 * dt;\r\n                }\r\n                else {\r\n                    forwardForce = 0;\r\n                }\r\n            }\r\n            if (isEKeyPressed && steerValue > -maxSteerValue) {\r\n                log(steerValue);\r\n                steerValue -= 3 * dt;\r\n            }\r\n            if (isFKeyPressed && steerValue < maxSteerValue) {\r\n                steerValue += 3 * dt;\r\n            }\r\n        };\r\n        return ButtonChecker;\r\n    }());\r\n    engine.addSystem(new ButtonChecker());\r\n});\r\ndefine(\"src/model\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Model = void 0;\r\n    var Model = /** @class */ (function (_super) {\r\n        __extends(Model, _super);\r\n        function Model(model, transform, name) {\r\n            var _this = _super.call(this) || this;\r\n            if (name) {\r\n                _this.name = name;\r\n            }\r\n            engine.addEntity(_this);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(model);\r\n            return _this;\r\n        }\r\n        return Model;\r\n    }(Entity));\r\n    exports.Model = Model;\r\n});\r\ndefine(\"src/modules/lift\", [\"require\", \"exports\", \"src/model\", \"src/resources\", \"@dcl/ecs-scene-utils\", \"src/game\"], function (require, exports, model_1, resources_2, ecs_scene_utils_1, game_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    var lift = new model_1.Model(resources_2.default.standard.lift, {\r\n        position: new Vector3(29.21, 0.2, 65.2),\r\n        rotation: Quaternion.Euler(0, 180, 0),\r\n        scale: new Vector3(1, 1, 1)\r\n    }, 'lift');\r\n    var liftBaseEntity = new Entity('liftBase');\r\n    var liftBase = new BoxShape();\r\n    liftBase.withCollisions = true;\r\n    liftBaseEntity.addComponent(liftBase);\r\n    // -2.3,1,-3.19w\r\n    // 24.26,1.18,70.68\r\n    liftBaseEntity.addComponent(new Transform({ position: new Vector3(31.52, 0.32, 68.37), rotation: Quaternion.Euler(0, 0, 0), scale: new Vector3(4.28, 0.2, 6.05) }));\r\n    // liftBaseEntity.setParent(lift);\r\n    liftBaseEntity.addComponent(new OnPointerDown(function (e) {\r\n        var liftPosition = liftBaseEntity.getComponent(Transform).position.y;\r\n        if (liftPosition >= 40) {\r\n            liftBaseEntity.addComponent(new ecs_scene_utils_1.MoveTransformComponent(new Vector3(31.52, liftPosition, 68.37), new Vector3(31.52, 0.32, 68.37), 5));\r\n            game_2.akhil.addComponent(new ecs_scene_utils_1.MoveTransformComponent(new Vector3(31.52, 40.5, 68.37), new Vector3(31.52, 0.4, 68.37), 5));\r\n        }\r\n        else {\r\n            liftBaseEntity.addComponent(new ecs_scene_utils_1.MoveTransformComponent(new Vector3(31.52, liftPosition, 68.37), new Vector3(31.52, 40.39, 68.37), 5));\r\n            game_2.akhil.addComponent(new ecs_scene_utils_1.MoveTransformComponent(new Vector3(31.52, 1, 68.37), new Vector3(31.52, 40.5, 68.37), 5));\r\n        }\r\n    }));\r\n    engine.addEntity(liftBaseEntity);\r\n    // hud.attachToEntity(liftBaseEntity)\r\n    engine.addEntity(lift);\r\n});\r\ndefine(\"src/modules/model\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Model = void 0;\r\n    var Model = /** @class */ (function (_super) {\r\n        __extends(Model, _super);\r\n        function Model(model, transform, name) {\r\n            var _this = _super.call(this) || this;\r\n            if (name) {\r\n                _this.name = name;\r\n            }\r\n            engine.addEntity(_this);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(model);\r\n            return _this;\r\n        }\r\n        return Model;\r\n    }(Entity));\r\n    exports.Model = Model;\r\n});\r\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "6b00af14eb296b02fcf6004a956b039476b14829b8cd6e00de825bbaf50e745a"
  }
]